/* The following code was generated by JFlex 1.4.3 on 21/09/20 12:36 */

package com.mycompany.assofjpybasic.backend.analizador.visual;
import java_cup.runtime.*;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 21/09/20 12:36 from the specification file
 * <tt>LexicoVisual.flex</tt>
 */
public class LexicoVisual implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int STRING = 2;
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1, 1
  };

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = {
     0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  6,  0,  1,  1,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     1,  0, 61,  0,  0,  0, 59,  0, 56, 57, 52, 50, 58, 51, 60, 53, 
     4,  3,  3,  3,  3,  3,  3,  3,  3,  3,  0,  0, 47, 49, 48,  0, 
     0, 37, 11, 17, 27, 31, 13, 41, 43, 21,  0,  0, 29, 25, 15, 23, 
    33,  0, 35,  7, 19,  9,  0, 45, 39,  0,  0,  0, 54,  0, 55,  5, 
     0, 38, 12, 18, 28, 32, 14, 42, 44, 22,  2,  2, 30, 26, 16, 24, 
    34,  2, 36,  8, 20, 10,  2, 46, 40,  2,  2,  0,  1,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0
  };

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\2\0\1\1\1\2\1\3\2\4\1\1\1\5\1\1"+
    "\1\3\1\1\1\3\1\1\1\3\1\1\1\3\1\1"+
    "\1\3\1\1\1\3\1\1\1\3\1\1\1\3\1\1"+
    "\1\3\1\1\1\3\1\1\1\3\1\1\1\3\1\1"+
    "\1\3\1\1\1\3\1\1\1\3\1\1\1\3\1\6"+
    "\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16"+
    "\1\17\1\20\1\21\1\22\1\1\1\2\1\0\1\23"+
    "\4\0\3\3\3\0\3\3\2\0\2\3\3\0\3\3"+
    "\1\24\1\0\1\24\1\3\1\25\1\0\1\25\1\3"+
    "\2\26\1\0\1\3\1\0\1\27\1\0\1\3\1\27"+
    "\1\3\1\0\1\3\3\0\3\3\1\0\1\3\1\0"+
    "\1\3\1\30\1\0\1\30\1\3\1\0\1\3\1\0"+
    "\1\3\1\31\1\32\1\33\1\34\1\35\1\36\1\37"+
    "\2\0\1\40\1\0\1\41\1\42\1\43\2\0\1\43"+
    "\2\3\1\0\1\44\1\0\1\3\1\44\1\3\1\45"+
    "\1\0\1\45\1\3\3\0\3\3\1\0\1\3\1\0"+
    "\1\3\1\0\1\3\2\46\1\47\1\0\1\47\1\3"+
    "\1\0\1\3\1\50\2\0\1\50\2\3\1\0\1\3"+
    "\1\0\1\3\2\51\2\52\1\0\1\3\1\0\1\53"+
    "\1\0\1\41\1\54\1\0\1\54\1\3\2\0\2\3"+
    "\2\55\2\0\1\56\1\57\2\3\1\56\1\57\2\60"+
    "\2\0\2\3\1\0\1\3\1\0\1\3\1\0\1\3"+
    "\2\61\1\62\1\63\1\62\1\63\1\0\1\3\1\0"+
    "\1\3\1\0\1\3\1\0\1\3\1\53\1\41\1\64"+
    "\1\0\1\3\2\0\2\3\3\0\3\3\2\0\2\3"+
    "\1\0\1\3\1\0\1\3\1\0\1\3\1\0\1\3"+
    "\1\0\1\3\1\0\1\3\1\0\1\3\2\65\2\66"+
    "\2\0\2\3\3\0\3\3\2\0\2\3\2\67\2\70"+
    "\1\0\1\3\2\71\2\72\2\73\1\0\1\3\2\0"+
    "\2\3\3\0\3\3\1\0\1\74\1\3\1\74\2\75"+
    "\2\76\1\77\1\0\1\77\1\3\1\0\1\100\1\0"+
    "\1\100\1\3\1\0\1\3\1\0\1\3\2\0\1\3"+
    "\2\0\1\3\2\0\1\101\2\0\1\102\1\103\1\0"+
    "\1\104\3\0\1\105";

  private static int [] zzUnpackAction() {
    int [] result = new int[347];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\76\0\174\0\272\0\370\0\u0136\0\u0174\0\u01b2"+
    "\0\u01f0\0\u022e\0\u026c\0\u02aa\0\u02e8\0\u0326\0\u0364\0\u03a2"+
    "\0\u03e0\0\u041e\0\u045c\0\u049a\0\u04d8\0\u0516\0\u0554\0\u0592"+
    "\0\u05d0\0\u060e\0\u064c\0\u068a\0\u06c8\0\u0706\0\u0744\0\u0782"+
    "\0\u07c0\0\u07fe\0\u083c\0\u087a\0\u08b8\0\u08f6\0\u0934\0\u0972"+
    "\0\u09b0\0\u09ee\0\u0a2c\0\174\0\u0a6a\0\u0aa8\0\u0ae6\0\u0b24"+
    "\0\u0b62\0\174\0\174\0\174\0\174\0\174\0\u0ba0\0\76"+
    "\0\u0bde\0\174\0\u01f0\0\u0c1c\0\u0c5a\0\u0c98\0\u0cd6\0\u0d14"+
    "\0\u0d52\0\u0d90\0\u0dce\0\u0e0c\0\u0e4a\0\u0e88\0\u0ec6\0\u0f04"+
    "\0\u0f42\0\u0f80\0\u0fbe\0\u0ffc\0\u103a\0\u1078\0\u10b6\0\u10f4"+
    "\0\u1132\0\174\0\u1170\0\370\0\u11ae\0\174\0\u11ec\0\370"+
    "\0\u122a\0\u1268\0\u12a6\0\u12e4\0\u1322\0\u1360\0\174\0\u139e"+
    "\0\u13dc\0\370\0\u141a\0\u1458\0\u1496\0\u14d4\0\u1512\0\u1550"+
    "\0\u158e\0\u15cc\0\u160a\0\u1648\0\u1686\0\u16c4\0\u1702\0\174"+
    "\0\u1740\0\370\0\u177e\0\u17bc\0\u17fa\0\u1838\0\u1876\0\174"+
    "\0\174\0\174\0\174\0\174\0\174\0\174\0\u18b4\0\u18f2"+
    "\0\174\0\u1930\0\u1930\0\u0bde\0\174\0\u196e\0\u19ac\0\370"+
    "\0\u19ea\0\u1a28\0\u1a66\0\174\0\u1aa4\0\u1ae2\0\370\0\u1b20"+
    "\0\174\0\u1b5e\0\370\0\u1b9c\0\u1bda\0\u1c18\0\u1c56\0\u1c94"+
    "\0\u1cd2\0\u1d10\0\u1d4e\0\u1d8c\0\u1dca\0\u1e08\0\u1e46\0\u1e84"+
    "\0\u1ec2\0\u1f00\0\174\0\u1f3e\0\370\0\u1f7c\0\u1fba\0\u1ff8"+
    "\0\174\0\u2036\0\u2074\0\370\0\u20b2\0\u20f0\0\u212e\0\u216c"+
    "\0\u21aa\0\u21e8\0\u2226\0\u2264\0\174\0\370\0\u22a2\0\u22e0"+
    "\0\u231e\0\174\0\u235c\0\u239a\0\174\0\u23d8\0\370\0\u2416"+
    "\0\u2454\0\u2492\0\u24d0\0\u250e\0\174\0\370\0\u254c\0\u258a"+
    "\0\174\0\u25c8\0\u2606\0\u2644\0\370\0\u2682\0\174\0\370"+
    "\0\u26c0\0\u26fe\0\u273c\0\u277a\0\u27b8\0\u27f6\0\u2834\0\u2872"+
    "\0\u28b0\0\u28ee\0\174\0\370\0\u292c\0\174\0\u296a\0\370"+
    "\0\u29a8\0\u29e6\0\u2a24\0\u2a62\0\u2aa0\0\u2ade\0\u2b1c\0\u2b5a"+
    "\0\u18b4\0\u235c\0\u235c\0\u2b98\0\u2bd6\0\u2c14\0\u2c52\0\u2c90"+
    "\0\u2cce\0\u2d0c\0\u2d4a\0\u2d88\0\u2dc6\0\u2e04\0\u2e42\0\u2e80"+
    "\0\u2ebe\0\u2efc\0\u2f3a\0\u2f78\0\u2fb6\0\u2ff4\0\u3032\0\u3070"+
    "\0\u30ae\0\u30ec\0\u312a\0\u3168\0\u31a6\0\u31e4\0\u3222\0\u3260"+
    "\0\u329e\0\174\0\370\0\174\0\370\0\u32dc\0\u331a\0\u3358"+
    "\0\u3396\0\u33d4\0\u3412\0\u3450\0\u348e\0\u34cc\0\u350a\0\u3548"+
    "\0\u3586\0\u35c4\0\u3602\0\174\0\370\0\174\0\370\0\u3640"+
    "\0\u367e\0\174\0\370\0\174\0\370\0\174\0\370\0\u36bc"+
    "\0\u36fa\0\u3738\0\u3776\0\u37b4\0\u37f2\0\u3830\0\u386e\0\u38ac"+
    "\0\u38ea\0\u3928\0\u3966\0\u39a4\0\174\0\u39e2\0\370\0\174"+
    "\0\370\0\174\0\370\0\174\0\u3a20\0\370\0\u3a5e\0\u3a9c"+
    "\0\174\0\u3ada\0\370\0\u3b18\0\u3b56\0\u3b94\0\u3bd2\0\u3c10"+
    "\0\u3c4e\0\u3c8c\0\u3cca\0\u3d08\0\u3d46\0\u3d84\0\u3dc2\0\u3e00"+
    "\0\174\0\u3e3e\0\u3e7c\0\174\0\174\0\u3eba\0\u3ef8\0\u3f36"+
    "\0\u3f74\0\u3fb2\0\174";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[347];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12"+
    "\1\13\1\3\1\5\1\3\1\5\1\14\1\15\1\16"+
    "\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26"+
    "\1\27\1\30\1\31\1\32\1\33\1\34\1\35\1\36"+
    "\1\37\1\40\1\41\1\42\1\43\1\44\1\45\1\46"+
    "\1\47\1\3\1\5\1\3\1\5\1\50\1\51\1\52"+
    "\1\53\1\54\1\55\1\56\1\57\1\60\1\61\1\62"+
    "\1\63\1\64\1\65\1\66\1\3\1\67\1\0\1\70"+
    "\173\0\1\4\4\0\1\11\71\0\4\5\2\0\1\5"+
    "\1\0\1\5\1\0\1\5\1\0\1\5\1\0\1\5"+
    "\1\0\1\5\1\0\1\5\1\0\1\5\1\0\1\5"+
    "\1\0\1\5\1\0\1\5\1\0\1\5\1\0\1\5"+
    "\1\0\1\5\1\0\1\5\1\0\1\5\1\0\1\5"+
    "\1\0\1\5\1\0\1\5\1\0\1\5\22\0\2\6"+
    "\67\0\1\71\75\0\1\71\7\0\1\72\70\0\1\73"+
    "\4\0\1\11\100\0\2\74\10\0\2\75\12\0\2\76"+
    "\37\0\4\5\2\0\1\5\1\74\1\77\1\0\1\5"+
    "\1\0\1\5\1\0\1\5\1\0\1\5\1\75\1\100"+
    "\1\0\1\5\1\0\1\5\1\0\1\5\1\0\1\5"+
    "\1\0\1\5\1\76\1\101\1\0\1\5\1\0\1\5"+
    "\1\0\1\5\1\0\1\5\1\0\1\5\1\0\1\5"+
    "\1\0\1\5\30\0\2\102\14\0\2\103\4\0\2\104"+
    "\41\0\4\5\2\0\1\5\1\102\1\105\1\0\1\5"+
    "\1\0\1\5\1\0\1\5\1\0\1\5\1\0\1\5"+
    "\1\0\1\5\1\103\1\106\1\0\1\5\1\0\1\5"+
    "\1\104\1\107\1\0\1\5\1\0\1\5\1\0\1\5"+
    "\1\0\1\5\1\0\1\5\1\0\1\5\1\0\1\5"+
    "\1\0\1\5\46\0\2\110\6\0\2\111\37\0\4\5"+
    "\2\0\1\5\1\0\1\5\1\0\1\5\1\0\1\5"+
    "\1\0\1\5\1\0\1\5\1\0\1\5\1\0\1\5"+
    "\1\110\1\112\1\0\1\5\1\0\1\5\1\0\1\5"+
    "\1\111\1\113\1\0\1\5\1\0\1\5\1\0\1\5"+
    "\1\0\1\5\1\0\1\5\1\0\1\5\1\0\1\5"+
    "\46\0\2\114\14\0\2\115\4\0\2\116\23\0\4\5"+
    "\2\0\1\5\1\0\1\5\1\0\1\5\1\0\1\5"+
    "\1\0\1\5\1\0\1\5\1\0\1\5\1\0\1\5"+
    "\1\114\1\117\1\0\1\5\1\0\1\5\1\0\1\5"+
    "\1\0\1\5\1\0\1\5\1\0\1\5\1\115\1\120"+
    "\1\0\1\5\1\0\1\5\1\116\1\121\1\0\1\5"+
    "\46\0\2\122\22\0\2\123\23\0\4\5\2\0\1\5"+
    "\1\0\1\5\1\0\1\5\1\0\1\5\1\0\1\5"+
    "\1\0\1\5\1\0\1\5\1\0\1\5\1\122\1\124"+
    "\1\0\1\5\1\0\1\5\1\0\1\5\1\0\1\5"+
    "\1\0\1\5\1\0\1\5\1\0\1\5\1\0\1\5"+
    "\1\0\1\5\1\123\1\125\1\0\1\5\34\0\2\126"+
    "\2\127\57\0\4\5\2\0\1\5\1\0\1\5\1\0"+
    "\1\5\1\126\1\130\1\127\1\131\1\0\1\5\1\0"+
    "\1\5\1\0\1\5\1\0\1\5\1\0\1\5\1\0"+
    "\1\5\1\0\1\5\1\0\1\5\1\0\1\5\1\0"+
    "\1\5\1\0\1\5\1\0\1\5\1\0\1\5\1\0"+
    "\1\5\1\0\1\5\62\0\2\132\33\0\4\5\2\0"+
    "\1\5\1\0\1\5\1\0\1\5\1\0\1\5\1\0"+
    "\1\5\1\0\1\5\1\0\1\5\1\0\1\5\1\0"+
    "\1\5\1\0\1\5\1\0\1\5\1\0\1\5\1\0"+
    "\1\5\1\0\1\5\1\132\1\133\1\0\1\5\1\0"+
    "\1\5\1\0\1\5\1\0\1\5\1\0\1\5\46\0"+
    "\2\134\47\0\4\5\2\0\1\5\1\0\1\5\1\0"+
    "\1\5\1\0\1\5\1\0\1\5\1\0\1\5\1\0"+
    "\1\5\1\0\1\5\1\134\1\135\1\0\1\5\1\0"+
    "\1\5\1\0\1\5\1\0\1\5\1\0\1\5\1\0"+
    "\1\5\1\0\1\5\1\0\1\5\1\0\1\5\1\0"+
    "\1\5\1\0\1\5\44\0\2\136\2\137\6\0\2\140"+
    "\37\0\4\5\2\0\1\5\1\0\1\5\1\0\1\5"+
    "\1\0\1\5\1\0\1\5\1\0\1\5\1\0\1\5"+
    "\1\136\1\141\1\137\1\142\1\0\1\5\1\0\1\5"+
    "\1\0\1\5\1\140\1\143\1\0\1\5\1\0\1\5"+
    "\1\0\1\5\1\0\1\5\1\0\1\5\1\0\1\5"+
    "\1\0\1\5\46\0\2\144\47\0\4\5\2\0\1\5"+
    "\1\0\1\5\1\0\1\5\1\0\1\5\1\0\1\5"+
    "\1\0\1\5\1\0\1\5\1\0\1\5\1\144\1\145"+
    "\1\0\1\5\1\0\1\5\1\0\1\5\1\0\1\5"+
    "\1\0\1\5\1\0\1\5\1\0\1\5\1\0\1\5"+
    "\1\0\1\5\1\0\1\5\1\0\1\5\36\0\2\146"+
    "\14\0\2\147\10\0\2\150\27\0\4\5\2\0\1\5"+
    "\1\0\1\5\1\0\1\5\1\0\1\5\1\146\1\151"+
    "\1\0\1\5\1\0\1\5\1\0\1\5\1\0\1\5"+
    "\1\0\1\5\1\0\1\5\1\147\1\152\1\0\1\5"+
    "\1\0\1\5\1\0\1\5\1\0\1\5\1\150\1\153"+
    "\1\0\1\5\1\0\1\5\1\0\1\5\30\0\2\154"+
    "\65\0\4\5\2\0\1\5\1\154\1\155\1\0\1\5"+
    "\1\0\1\5\1\0\1\5\1\0\1\5\1\0\1\5"+
    "\1\0\1\5\1\0\1\5\1\0\1\5\1\0\1\5"+
    "\1\0\1\5\1\0\1\5\1\0\1\5\1\0\1\5"+
    "\1\0\1\5\1\0\1\5\1\0\1\5\1\0\1\5"+
    "\1\0\1\5\56\0\2\156\37\0\4\5\2\0\1\5"+
    "\1\0\1\5\1\0\1\5\1\0\1\5\1\0\1\5"+
    "\1\0\1\5\1\0\1\5\1\0\1\5\1\0\1\5"+
    "\1\0\1\5\1\0\1\5\1\0\1\5\1\156\1\157"+
    "\1\0\1\5\1\0\1\5\1\0\1\5\1\0\1\5"+
    "\1\0\1\5\1\0\1\5\1\0\1\5\26\0\2\160"+
    "\6\0\2\161\57\0\4\5\1\0\1\160\1\162\1\0"+
    "\1\5\1\0\1\5\1\0\1\5\1\161\1\163\1\0"+
    "\1\5\1\0\1\5\1\0\1\5\1\0\1\5\1\0"+
    "\1\5\1\0\1\5\1\0\1\5\1\0\1\5\1\0"+
    "\1\5\1\0\1\5\1\0\1\5\1\0\1\5\1\0"+
    "\1\5\1\0\1\5\1\0\1\5\46\0\2\164\47\0"+
    "\4\5\2\0\1\5\1\0\1\5\1\0\1\5\1\0"+
    "\1\5\1\0\1\5\1\0\1\5\1\0\1\5\1\0"+
    "\1\5\1\164\1\165\1\0\1\5\1\0\1\5\1\0"+
    "\1\5\1\0\1\5\1\0\1\5\1\0\1\5\1\0"+
    "\1\5\1\0\1\5\1\0\1\5\1\0\1\5\1\0"+
    "\1\5\72\0\2\166\23\0\4\5\2\0\1\5\1\0"+
    "\1\5\1\0\1\5\1\0\1\5\1\0\1\5\1\0"+
    "\1\5\1\0\1\5\1\0\1\5\1\0\1\5\1\0"+
    "\1\5\1\0\1\5\1\0\1\5\1\0\1\5\1\0"+
    "\1\5\1\0\1\5\1\0\1\5\1\0\1\5\1\0"+
    "\1\5\1\166\1\167\1\0\1\5\77\0\1\170\1\171"+
    "\75\0\1\172\75\0\1\173\75\0\1\174\75\0\1\175"+
    "\75\0\1\176\2\0\1\177\1\200\71\0\1\201\14\0"+
    "\6\202\1\0\66\202\1\203\3\0\1\204\1\71\104\0"+
    "\2\205\120\0\2\206\72\0\2\207\41\0\4\5\2\0"+
    "\1\5\1\0\1\5\1\205\1\210\1\0\1\5\1\0"+
    "\1\5\1\0\1\5\1\0\1\5\1\0\1\5\1\0"+
    "\1\5\1\0\1\5\1\0\1\5\1\0\1\5\1\0"+
    "\1\5\1\0\1\5\1\0\1\5\1\0\1\5\1\0"+
    "\1\5\1\0\1\5\1\0\1\5\1\0\1\5\21\0"+
    "\4\5\2\0\1\5\1\0\1\5\1\0\1\5\1\0"+
    "\1\5\1\0\1\5\1\0\1\5\1\0\1\5\1\0"+
    "\1\5\1\0\1\5\1\0\1\5\1\0\1\5\1\0"+
    "\1\5\1\206\1\211\1\0\1\5\1\0\1\5\1\0"+
    "\1\5\1\0\1\5\1\0\1\5\1\0\1\5\1\0"+
    "\1\5\21\0\4\5\2\0\1\5\1\0\1\5\1\0"+
    "\1\5\1\0\1\5\1\0\1\5\1\0\1\5\1\0"+
    "\1\5\1\0\1\5\1\0\1\5\1\0\1\5\1\0"+
    "\1\5\1\207\1\212\1\0\1\5\1\0\1\5\1\0"+
    "\1\5\1\0\1\5\1\0\1\5\1\0\1\5\1\0"+
    "\1\5\1\0\1\5\36\0\2\213\120\0\2\214\60\0"+
    "\2\215\47\0\4\5\2\0\1\5\1\0\1\5\1\0"+
    "\1\5\1\0\1\5\1\213\1\216\1\0\1\5\1\0"+
    "\1\5\1\0\1\5\1\0\1\5\1\0\1\5\1\0"+
    "\1\5\1\0\1\5\1\0\1\5\1\0\1\5\1\0"+
    "\1\5\1\0\1\5\1\0\1\5\1\0\1\5\1\0"+
    "\1\5\1\0\1\5\21\0\4\5\2\0\1\5\1\0"+
    "\1\5\1\0\1\5\1\0\1\5\1\0\1\5\1\0"+
    "\1\5\1\0\1\5\1\0\1\5\1\0\1\5\1\0"+
    "\1\5\1\0\1\5\1\0\1\5\1\0\1\5\1\0"+
    "\1\5\1\214\1\217\1\0\1\5\1\0\1\5\1\0"+
    "\1\5\1\0\1\5\1\0\1\5\21\0\4\5\2\0"+
    "\1\5\1\0\1\5\1\0\1\5\1\0\1\5\1\0"+
    "\1\5\1\0\1\5\1\0\1\5\1\0\1\5\1\215"+
    "\1\220\1\0\1\5\1\0\1\5\1\0\1\5\1\0"+
    "\1\5\1\0\1\5\1\0\1\5\1\0\1\5\1\0"+
    "\1\5\1\0\1\5\1\0\1\5\1\0\1\5\42\0"+
    "\2\221\120\0\2\222\27\0\4\5\2\0\1\5\1\0"+
    "\1\5\1\0\1\5\1\0\1\5\1\0\1\5\1\0"+
    "\1\5\1\221\1\223\1\0\1\5\1\0\1\5\1\0"+
    "\1\5\1\0\1\5\1\0\1\5\1\0\1\5\1\0"+
    "\1\5\1\0\1\5\1\0\1\5\1\0\1\5\1\0"+
    "\1\5\1\0\1\5\1\0\1\5\21\0\4\5\2\0"+
    "\1\5\1\0\1\5\1\0\1\5\1\0\1\5\1\0"+
    "\1\5\1\0\1\5\1\0\1\5\1\0\1\5\1\0"+
    "\1\5\1\0\1\5\1\0\1\5\1\0\1\5\1\0"+
    "\1\5\1\0\1\5\1\0\1\5\1\0\1\5\1\222"+
    "\1\224\1\0\1\5\1\0\1\5\1\0\1\5\36\0"+
    "\2\225\64\0\2\226\132\0\2\227\31\0\4\5\2\0"+
    "\1\5\1\0\1\5\1\0\1\5\1\0\1\5\1\225"+
    "\1\230\1\0\1\5\1\0\1\5\1\0\1\5\1\0"+
    "\1\5\1\0\1\5\1\0\1\5\1\0\1\5\1\0"+
    "\1\5\1\0\1\5\1\0\1\5\1\0\1\5\1\0"+
    "\1\5\1\0\1\5\1\0\1\5\1\0\1\5\21\0"+
    "\4\5\1\0\1\226\1\231\1\0\1\5\1\0\1\5"+
    "\1\0\1\5\1\0\1\5\1\0\1\5\1\0\1\5"+
    "\1\0\1\5\1\0\1\5\1\0\1\5\1\0\1\5"+
    "\1\0\1\5\1\0\1\5\1\0\1\5\1\0\1\5"+
    "\1\0\1\5\1\0\1\5\1\0\1\5\1\0\1\5"+
    "\1\0\1\5\21\0\4\5\2\0\1\5\1\0\1\5"+
    "\1\0\1\5\1\0\1\5\1\0\1\5\1\0\1\5"+
    "\1\0\1\5\1\0\1\5\1\0\1\5\1\0\1\5"+
    "\1\0\1\5\1\0\1\5\1\0\1\5\1\0\1\5"+
    "\1\0\1\5\1\227\1\232\1\0\1\5\1\0\1\5"+
    "\1\0\1\5\1\0\1\5\56\0\2\233\37\0\4\5"+
    "\2\0\1\5\1\0\1\5\1\0\1\5\1\0\1\5"+
    "\1\0\1\5\1\0\1\5\1\0\1\5\1\0\1\5"+
    "\1\0\1\5\1\0\1\5\1\0\1\5\1\0\1\5"+
    "\1\233\1\234\1\0\1\5\1\0\1\5\1\0\1\5"+
    "\1\0\1\5\1\0\1\5\1\0\1\5\1\0\1\5"+
    "\42\0\2\235\53\0\4\5\2\0\1\5\1\0\1\5"+
    "\1\0\1\5\1\0\1\5\1\0\1\5\1\0\1\5"+
    "\1\235\1\236\1\0\1\5\1\0\1\5\1\0\1\5"+
    "\1\0\1\5\1\0\1\5\1\0\1\5\1\0\1\5"+
    "\1\0\1\5\1\0\1\5\1\0\1\5\1\0\1\5"+
    "\1\0\1\5\1\0\1\5\56\0\2\237\37\0\4\5"+
    "\2\0\1\5\1\0\1\5\1\0\1\5\1\0\1\5"+
    "\1\0\1\5\1\0\1\5\1\0\1\5\1\0\1\5"+
    "\1\0\1\5\1\0\1\5\1\0\1\5\1\0\1\5"+
    "\1\237\1\240\1\0\1\5\1\0\1\5\1\0\1\5"+
    "\1\0\1\5\1\0\1\5\1\0\1\5\1\0\1\5"+
    "\52\0\2\241\43\0\4\5\2\0\1\5\1\0\1\5"+
    "\1\0\1\5\1\0\1\5\1\0\1\5\1\0\1\5"+
    "\1\0\1\5\1\0\1\5\1\0\1\5\1\0\1\5"+
    "\1\241\1\242\1\0\1\5\1\0\1\5\1\0\1\5"+
    "\1\0\1\5\1\0\1\5\1\0\1\5\1\0\1\5"+
    "\1\0\1\5\1\0\1\5\50\0\2\243\64\0\2\244"+
    "\55\0\4\5\2\0\1\5\1\0\1\5\1\0\1\5"+
    "\1\0\1\5\1\0\1\5\1\0\1\5\1\0\1\5"+
    "\1\0\1\5\1\0\1\5\1\243\1\245\1\0\1\5"+
    "\1\0\1\5\1\0\1\5\1\0\1\5\1\0\1\5"+
    "\1\0\1\5\1\0\1\5\1\0\1\5\1\0\1\5"+
    "\1\0\1\5\21\0\4\5\2\0\1\5\1\0\1\5"+
    "\1\0\1\5\1\0\1\5\1\0\1\5\1\244\1\246"+
    "\1\0\1\5\1\0\1\5\1\0\1\5\1\0\1\5"+
    "\1\0\1\5\1\0\1\5\1\0\1\5\1\0\1\5"+
    "\1\0\1\5\1\0\1\5\1\0\1\5\1\0\1\5"+
    "\1\0\1\5\1\0\1\5\46\0\2\247\47\0\4\5"+
    "\2\0\1\5\1\0\1\5\1\0\1\5\1\0\1\5"+
    "\1\0\1\5\1\0\1\5\1\0\1\5\1\0\1\5"+
    "\1\247\1\250\1\0\1\5\1\0\1\5\1\0\1\5"+
    "\1\0\1\5\1\0\1\5\1\0\1\5\1\0\1\5"+
    "\1\0\1\5\1\0\1\5\1\0\1\5\1\0\1\5"+
    "\52\0\2\251\50\0\2\252\112\0\2\253\51\0\4\5"+
    "\2\0\1\5\1\0\1\5\1\0\1\5\1\0\1\5"+
    "\1\0\1\5\1\0\1\5\1\0\1\5\1\0\1\5"+
    "\1\0\1\5\1\0\1\5\1\251\1\254\1\0\1\5"+
    "\1\0\1\5\1\0\1\5\1\0\1\5\1\0\1\5"+
    "\1\0\1\5\1\0\1\5\1\0\1\5\1\0\1\5"+
    "\21\0\4\5\1\0\1\252\1\255\1\0\1\5\1\0"+
    "\1\5\1\0\1\5\1\0\1\5\1\0\1\5\1\0"+
    "\1\5\1\0\1\5\1\0\1\5\1\0\1\5\1\0"+
    "\1\5\1\0\1\5\1\0\1\5\1\0\1\5\1\0"+
    "\1\5\1\0\1\5\1\0\1\5\1\0\1\5\1\0"+
    "\1\5\1\0\1\5\21\0\4\5\2\0\1\5\1\0"+
    "\1\5\1\0\1\5\1\0\1\5\1\0\1\5\1\0"+
    "\1\5\1\0\1\5\1\253\1\256\1\0\1\5\1\0"+
    "\1\5\1\0\1\5\1\0\1\5\1\0\1\5\1\0"+
    "\1\5\1\0\1\5\1\0\1\5\1\0\1\5\1\0"+
    "\1\5\1\0\1\5\1\0\1\5\32\0\2\257\63\0"+
    "\4\5\2\0\1\5\1\0\1\5\1\257\1\260\1\0"+
    "\1\5\1\0\1\5\1\0\1\5\1\0\1\5\1\0"+
    "\1\5\1\0\1\5\1\0\1\5\1\0\1\5\1\0"+
    "\1\5\1\0\1\5\1\0\1\5\1\0\1\5\1\0"+
    "\1\5\1\0\1\5\1\0\1\5\1\0\1\5\1\0"+
    "\1\5\42\0\2\261\53\0\4\5\2\0\1\5\1\0"+
    "\1\5\1\0\1\5\1\0\1\5\1\0\1\5\1\0"+
    "\1\5\1\261\1\262\1\0\1\5\1\0\1\5\1\0"+
    "\1\5\1\0\1\5\1\0\1\5\1\0\1\5\1\0"+
    "\1\5\1\0\1\5\1\0\1\5\1\0\1\5\1\0"+
    "\1\5\1\0\1\5\1\0\1\5\52\0\2\263\43\0"+
    "\4\5\2\0\1\5\1\0\1\5\1\0\1\5\1\0"+
    "\1\5\1\0\1\5\1\0\1\5\1\0\1\5\1\0"+
    "\1\5\1\0\1\5\1\0\1\5\1\263\1\264\1\0"+
    "\1\5\1\0\1\5\1\0\1\5\1\0\1\5\1\0"+
    "\1\5\1\0\1\5\1\0\1\5\1\0\1\5\1\0"+
    "\1\5\62\0\2\265\33\0\4\5\2\0\1\5\1\0"+
    "\1\5\1\0\1\5\1\0\1\5\1\0\1\5\1\0"+
    "\1\5\1\0\1\5\1\0\1\5\1\0\1\5\1\0"+
    "\1\5\1\0\1\5\1\0\1\5\1\0\1\5\1\0"+
    "\1\5\1\265\1\266\1\0\1\5\1\0\1\5\1\0"+
    "\1\5\1\0\1\5\1\0\1\5\44\0\2\267\51\0"+
    "\4\5\2\0\1\5\1\0\1\5\1\0\1\5\1\0"+
    "\1\5\1\0\1\5\1\0\1\5\1\0\1\5\1\267"+
    "\1\270\1\0\1\5\1\0\1\5\1\0\1\5\1\0"+
    "\1\5\1\0\1\5\1\0\1\5\1\0\1\5\1\0"+
    "\1\5\1\0\1\5\1\0\1\5\1\0\1\5\1\0"+
    "\1\5\17\0\6\177\1\0\55\177\1\271\11\177\6\200"+
    "\1\272\67\200\6\273\1\0\66\273\1\274\41\0\2\275"+
    "\72\0\2\276\37\0\4\5\2\0\1\5\1\0\1\5"+
    "\1\0\1\5\1\0\1\5\1\0\1\5\1\0\1\5"+
    "\1\0\1\5\1\0\1\5\1\0\1\5\1\0\1\5"+
    "\1\0\1\5\1\0\1\5\1\0\1\5\1\275\1\277"+
    "\1\0\1\5\1\0\1\5\1\0\1\5\1\0\1\5"+
    "\1\0\1\5\1\0\1\5\21\0\4\5\2\0\1\5"+
    "\1\0\1\5\1\0\1\5\1\0\1\5\1\0\1\5"+
    "\1\0\1\5\1\0\1\5\1\0\1\5\1\0\1\5"+
    "\1\0\1\5\1\0\1\5\1\0\1\5\1\276\1\300"+
    "\1\0\1\5\1\0\1\5\1\0\1\5\1\0\1\5"+
    "\1\0\1\5\1\0\1\5\1\0\1\5\40\0\2\301"+
    "\120\0\2\302\31\0\4\5\2\0\1\5\1\0\1\5"+
    "\1\0\1\5\1\0\1\5\1\0\1\5\1\301\1\303"+
    "\1\0\1\5\1\0\1\5\1\0\1\5\1\0\1\5"+
    "\1\0\1\5\1\0\1\5\1\0\1\5\1\0\1\5"+
    "\1\0\1\5\1\0\1\5\1\0\1\5\1\0\1\5"+
    "\1\0\1\5\1\0\1\5\21\0\4\5\2\0\1\5"+
    "\1\0\1\5\1\0\1\5\1\0\1\5\1\0\1\5"+
    "\1\0\1\5\1\0\1\5\1\0\1\5\1\0\1\5"+
    "\1\0\1\5\1\0\1\5\1\0\1\5\1\0\1\5"+
    "\1\0\1\5\1\0\1\5\1\302\1\304\1\0\1\5"+
    "\1\0\1\5\1\0\1\5\1\0\1\5\42\0\2\305"+
    "\53\0\4\5\2\0\1\5\1\0\1\5\1\0\1\5"+
    "\1\0\1\5\1\0\1\5\1\0\1\5\1\305\1\306"+
    "\1\0\1\5\1\0\1\5\1\0\1\5\1\0\1\5"+
    "\1\0\1\5\1\0\1\5\1\0\1\5\1\0\1\5"+
    "\1\0\1\5\1\0\1\5\1\0\1\5\1\0\1\5"+
    "\1\0\1\5\26\0\2\307\12\0\2\310\110\0\2\311"+
    "\100\0\2\312\33\0\4\5\1\0\1\307\1\313\1\0"+
    "\1\5\1\0\1\5\1\0\1\5\1\0\1\5\1\0"+
    "\1\5\1\310\1\314\1\0\1\5\1\0\1\5\1\0"+
    "\1\5\1\0\1\5\1\0\1\5\1\0\1\5\1\0"+
    "\1\5\1\0\1\5\1\0\1\5\1\0\1\5\1\0"+
    "\1\5\1\0\1\5\1\0\1\5\21\0\4\5\2\0"+
    "\1\5\1\0\1\5\1\0\1\5\1\0\1\5\1\0"+
    "\1\5\1\0\1\5\1\0\1\5\1\0\1\5\1\0"+
    "\1\5\1\0\1\5\1\0\1\5\1\0\1\5\1\311"+
    "\1\315\1\0\1\5\1\0\1\5\1\0\1\5\1\0"+
    "\1\5\1\0\1\5\1\0\1\5\1\0\1\5\21\0"+
    "\4\5\2\0\1\5\1\0\1\5\1\0\1\5\1\0"+
    "\1\5\1\0\1\5\1\0\1\5\1\0\1\5\1\0"+
    "\1\5\1\0\1\5\1\0\1\5\1\0\1\5\1\0"+
    "\1\5\1\0\1\5\1\0\1\5\1\312\1\316\1\0"+
    "\1\5\1\0\1\5\1\0\1\5\1\0\1\5\1\0"+
    "\1\5\36\0\2\317\57\0\4\5\2\0\1\5\1\0"+
    "\1\5\1\0\1\5\1\0\1\5\1\317\1\320\1\0"+
    "\1\5\1\0\1\5\1\0\1\5\1\0\1\5\1\0"+
    "\1\5\1\0\1\5\1\0\1\5\1\0\1\5\1\0"+
    "\1\5\1\0\1\5\1\0\1\5\1\0\1\5\1\0"+
    "\1\5\1\0\1\5\1\0\1\5\44\0\2\321\10\0"+
    "\2\322\37\0\4\5\2\0\1\5\1\0\1\5\1\0"+
    "\1\5\1\0\1\5\1\0\1\5\1\0\1\5\1\0"+
    "\1\5\1\321\1\323\1\0\1\5\1\0\1\5\1\0"+
    "\1\5\1\0\1\5\1\322\1\324\1\0\1\5\1\0"+
    "\1\5\1\0\1\5\1\0\1\5\1\0\1\5\1\0"+
    "\1\5\1\0\1\5\54\0\2\325\41\0\4\5\2\0"+
    "\1\5\1\0\1\5\1\0\1\5\1\0\1\5\1\0"+
    "\1\5\1\0\1\5\1\0\1\5\1\0\1\5\1\0"+
    "\1\5\1\0\1\5\1\0\1\5\1\325\1\326\1\0"+
    "\1\5\1\0\1\5\1\0\1\5\1\0\1\5\1\0"+
    "\1\5\1\0\1\5\1\0\1\5\1\0\1\5\30\0"+
    "\2\327\65\0\4\5\2\0\1\5\1\327\1\330\1\0"+
    "\1\5\1\0\1\5\1\0\1\5\1\0\1\5\1\0"+
    "\1\5\1\0\1\5\1\0\1\5\1\0\1\5\1\0"+
    "\1\5\1\0\1\5\1\0\1\5\1\0\1\5\1\0"+
    "\1\5\1\0\1\5\1\0\1\5\1\0\1\5\1\0"+
    "\1\5\1\0\1\5\44\0\2\331\51\0\4\5\2\0"+
    "\1\5\1\0\1\5\1\0\1\5\1\0\1\5\1\0"+
    "\1\5\1\0\1\5\1\0\1\5\1\331\1\332\1\0"+
    "\1\5\1\0\1\5\1\0\1\5\1\0\1\5\1\0"+
    "\1\5\1\0\1\5\1\0\1\5\1\0\1\5\1\0"+
    "\1\5\1\0\1\5\1\0\1\5\1\0\1\5\60\0"+
    "\2\333\35\0\4\5\2\0\1\5\1\0\1\5\1\0"+
    "\1\5\1\0\1\5\1\0\1\5\1\0\1\5\1\0"+
    "\1\5\1\0\1\5\1\0\1\5\1\0\1\5\1\0"+
    "\1\5\1\0\1\5\1\0\1\5\1\333\1\334\1\0"+
    "\1\5\1\0\1\5\1\0\1\5\1\0\1\5\1\0"+
    "\1\5\1\0\1\5\56\0\2\335\60\0\2\336\53\0"+
    "\4\5\2\0\1\5\1\0\1\5\1\0\1\5\1\0"+
    "\1\5\1\0\1\5\1\0\1\5\1\0\1\5\1\0"+
    "\1\5\1\0\1\5\1\0\1\5\1\0\1\5\1\0"+
    "\1\5\1\335\1\337\1\0\1\5\1\0\1\5\1\0"+
    "\1\5\1\0\1\5\1\0\1\5\1\0\1\5\1\0"+
    "\1\5\21\0\4\5\2\0\1\5\1\0\1\5\1\0"+
    "\1\5\1\0\1\5\1\0\1\5\1\0\1\5\1\336"+
    "\1\340\1\0\1\5\1\0\1\5\1\0\1\5\1\0"+
    "\1\5\1\0\1\5\1\0\1\5\1\0\1\5\1\0"+
    "\1\5\1\0\1\5\1\0\1\5\1\0\1\5\1\0"+
    "\1\5\1\0\1\5\54\0\2\341\41\0\4\5\2\0"+
    "\1\5\1\0\1\5\1\0\1\5\1\0\1\5\1\0"+
    "\1\5\1\0\1\5\1\0\1\5\1\0\1\5\1\0"+
    "\1\5\1\0\1\5\1\0\1\5\1\341\1\342\1\0"+
    "\1\5\1\0\1\5\1\0\1\5\1\0\1\5\1\0"+
    "\1\5\1\0\1\5\1\0\1\5\1\0\1\5\30\0"+
    "\2\343\65\0\4\5\2\0\1\5\1\343\1\344\1\0"+
    "\1\5\1\0\1\5\1\0\1\5\1\0\1\5\1\0"+
    "\1\5\1\0\1\5\1\0\1\5\1\0\1\5\1\0"+
    "\1\5\1\0\1\5\1\0\1\5\1\0\1\5\1\0"+
    "\1\5\1\0\1\5\1\0\1\5\1\0\1\5\1\0"+
    "\1\5\1\0\1\5\64\0\2\345\31\0\4\5\2\0"+
    "\1\5\1\0\1\5\1\0\1\5\1\0\1\5\1\0"+
    "\1\5\1\0\1\5\1\0\1\5\1\0\1\5\1\0"+
    "\1\5\1\0\1\5\1\0\1\5\1\0\1\5\1\0"+
    "\1\5\1\0\1\5\1\0\1\5\1\345\1\346\1\0"+
    "\1\5\1\0\1\5\1\0\1\5\1\0\1\5\54\0"+
    "\2\347\41\0\4\5\2\0\1\5\1\0\1\5\1\0"+
    "\1\5\1\0\1\5\1\0\1\5\1\0\1\5\1\0"+
    "\1\5\1\0\1\5\1\0\1\5\1\0\1\5\1\0"+
    "\1\5\1\347\1\350\1\0\1\5\1\0\1\5\1\0"+
    "\1\5\1\0\1\5\1\0\1\5\1\0\1\5\1\0"+
    "\1\5\1\0\1\5\17\0\6\177\1\0\55\177\1\271"+
    "\1\351\10\177\6\273\1\0\66\273\1\352\6\273\1\0"+
    "\12\273\2\353\52\273\1\352\21\0\2\354\55\0\4\5"+
    "\2\0\1\5\1\0\1\5\1\0\1\5\1\0\1\5"+
    "\1\0\1\5\1\354\1\355\1\0\1\5\1\0\1\5"+
    "\1\0\1\5\1\0\1\5\1\0\1\5\1\0\1\5"+
    "\1\0\1\5\1\0\1\5\1\0\1\5\1\0\1\5"+
    "\1\0\1\5\1\0\1\5\1\0\1\5\1\0\1\5"+
    "\42\0\2\356\74\0\2\357\53\0\4\5\2\0\1\5"+
    "\1\0\1\5\1\0\1\5\1\0\1\5\1\0\1\5"+
    "\1\0\1\5\1\356\1\360\1\0\1\5\1\0\1\5"+
    "\1\0\1\5\1\0\1\5\1\0\1\5\1\0\1\5"+
    "\1\0\1\5\1\0\1\5\1\0\1\5\1\0\1\5"+
    "\1\0\1\5\1\0\1\5\1\0\1\5\21\0\4\5"+
    "\2\0\1\5\1\0\1\5\1\0\1\5\1\0\1\5"+
    "\1\0\1\5\1\0\1\5\1\357\1\361\1\0\1\5"+
    "\1\0\1\5\1\0\1\5\1\0\1\5\1\0\1\5"+
    "\1\0\1\5\1\0\1\5\1\0\1\5\1\0\1\5"+
    "\1\0\1\5\1\0\1\5\1\0\1\5\1\0\1\5"+
    "\46\0\2\362\72\0\2\363\74\0\2\364\51\0\4\5"+
    "\2\0\1\5\1\0\1\5\1\0\1\5\1\0\1\5"+
    "\1\0\1\5\1\0\1\5\1\0\1\5\1\0\1\5"+
    "\1\362\1\365\1\0\1\5\1\0\1\5\1\0\1\5"+
    "\1\0\1\5\1\0\1\5\1\0\1\5\1\0\1\5"+
    "\1\0\1\5\1\0\1\5\1\0\1\5\1\0\1\5"+
    "\21\0\4\5\2\0\1\5\1\0\1\5\1\0\1\5"+
    "\1\0\1\5\1\0\1\5\1\0\1\5\1\0\1\5"+
    "\1\363\1\366\1\0\1\5\1\0\1\5\1\0\1\5"+
    "\1\0\1\5\1\0\1\5\1\0\1\5\1\0\1\5"+
    "\1\0\1\5\1\0\1\5\1\0\1\5\1\0\1\5"+
    "\1\0\1\5\21\0\4\5\2\0\1\5\1\0\1\5"+
    "\1\0\1\5\1\0\1\5\1\0\1\5\1\0\1\5"+
    "\1\0\1\5\1\364\1\367\1\0\1\5\1\0\1\5"+
    "\1\0\1\5\1\0\1\5\1\0\1\5\1\0\1\5"+
    "\1\0\1\5\1\0\1\5\1\0\1\5\1\0\1\5"+
    "\1\0\1\5\1\0\1\5\36\0\2\370\126\0\2\371"+
    "\25\0\4\5\2\0\1\5\1\0\1\5\1\0\1\5"+
    "\1\0\1\5\1\370\1\372\1\0\1\5\1\0\1\5"+
    "\1\0\1\5\1\0\1\5\1\0\1\5\1\0\1\5"+
    "\1\0\1\5\1\0\1\5\1\0\1\5\1\0\1\5"+
    "\1\0\1\5\1\0\1\5\1\0\1\5\1\0\1\5"+
    "\1\0\1\5\21\0\4\5\2\0\1\5\1\0\1\5"+
    "\1\0\1\5\1\0\1\5\1\0\1\5\1\0\1\5"+
    "\1\0\1\5\1\0\1\5\1\0\1\5\1\0\1\5"+
    "\1\0\1\5\1\0\1\5\1\0\1\5\1\0\1\5"+
    "\1\0\1\5\1\0\1\5\1\0\1\5\1\371\1\373"+
    "\1\0\1\5\1\0\1\5\26\0\2\374\67\0\4\5"+
    "\1\0\1\374\1\375\1\0\1\5\1\0\1\5\1\0"+
    "\1\5\1\0\1\5\1\0\1\5\1\0\1\5\1\0"+
    "\1\5\1\0\1\5\1\0\1\5\1\0\1\5\1\0"+
    "\1\5\1\0\1\5\1\0\1\5\1\0\1\5\1\0"+
    "\1\5\1\0\1\5\1\0\1\5\1\0\1\5\1\0"+
    "\1\5\54\0\2\376\41\0\4\5\2\0\1\5\1\0"+
    "\1\5\1\0\1\5\1\0\1\5\1\0\1\5\1\0"+
    "\1\5\1\0\1\5\1\0\1\5\1\0\1\5\1\0"+
    "\1\5\1\0\1\5\1\376\1\377\1\0\1\5\1\0"+
    "\1\5\1\0\1\5\1\0\1\5\1\0\1\5\1\0"+
    "\1\5\1\0\1\5\1\0\1\5\50\0\2\u0100\45\0"+
    "\4\5\2\0\1\5\1\0\1\5\1\0\1\5\1\0"+
    "\1\5\1\0\1\5\1\0\1\5\1\0\1\5\1\0"+
    "\1\5\1\0\1\5\1\u0100\1\u0101\1\0\1\5\1\0"+
    "\1\5\1\0\1\5\1\0\1\5\1\0\1\5\1\0"+
    "\1\5\1\0\1\5\1\0\1\5\1\0\1\5\1\0"+
    "\1\5\44\0\2\u0102\51\0\4\5\2\0\1\5\1\0"+
    "\1\5\1\0\1\5\1\0\1\5\1\0\1\5\1\0"+
    "\1\5\1\0\1\5\1\u0102\1\u0103\1\0\1\5\1\0"+
    "\1\5\1\0\1\5\1\0\1\5\1\0\1\5\1\0"+
    "\1\5\1\0\1\5\1\0\1\5\1\0\1\5\1\0"+
    "\1\5\1\0\1\5\1\0\1\5\44\0\2\u0104\51\0"+
    "\4\5\2\0\1\5\1\0\1\5\1\0\1\5\1\0"+
    "\1\5\1\0\1\5\1\0\1\5\1\0\1\5\1\u0104"+
    "\1\u0105\1\0\1\5\1\0\1\5\1\0\1\5\1\0"+
    "\1\5\1\0\1\5\1\0\1\5\1\0\1\5\1\0"+
    "\1\5\1\0\1\5\1\0\1\5\1\0\1\5\1\0"+
    "\1\5\62\0\2\u0106\33\0\4\5\2\0\1\5\1\0"+
    "\1\5\1\0\1\5\1\0\1\5\1\0\1\5\1\0"+
    "\1\5\1\0\1\5\1\0\1\5\1\0\1\5\1\0"+
    "\1\5\1\0\1\5\1\0\1\5\1\0\1\5\1\0"+
    "\1\5\1\u0106\1\u0107\1\0\1\5\1\0\1\5\1\0"+
    "\1\5\1\0\1\5\1\0\1\5\54\0\2\u0108\41\0"+
    "\4\5\2\0\1\5\1\0\1\5\1\0\1\5\1\0"+
    "\1\5\1\0\1\5\1\0\1\5\1\0\1\5\1\0"+
    "\1\5\1\0\1\5\1\0\1\5\1\0\1\5\1\u0108"+
    "\1\u0109\1\0\1\5\1\0\1\5\1\0\1\5\1\0"+
    "\1\5\1\0\1\5\1\0\1\5\1\0\1\5\1\0"+
    "\1\5\56\0\2\u010a\37\0\4\5\2\0\1\5\1\0"+
    "\1\5\1\0\1\5\1\0\1\5\1\0\1\5\1\0"+
    "\1\5\1\0\1\5\1\0\1\5\1\0\1\5\1\0"+
    "\1\5\1\0\1\5\1\0\1\5\1\u010a\1\u010b\1\0"+
    "\1\5\1\0\1\5\1\0\1\5\1\0\1\5\1\0"+
    "\1\5\1\0\1\5\1\0\1\5\42\0\2\u010c\53\0"+
    "\4\5\2\0\1\5\1\0\1\5\1\0\1\5\1\0"+
    "\1\5\1\0\1\5\1\0\1\5\1\u010c\1\u010d\1\0"+
    "\1\5\1\0\1\5\1\0\1\5\1\0\1\5\1\0"+
    "\1\5\1\0\1\5\1\0\1\5\1\0\1\5\1\0"+
    "\1\5\1\0\1\5\1\0\1\5\1\0\1\5\1\0"+
    "\1\5\44\0\2\u010e\74\0\2\u010f\51\0\4\5\2\0"+
    "\1\5\1\0\1\5\1\0\1\5\1\0\1\5\1\0"+
    "\1\5\1\0\1\5\1\0\1\5\1\u010e\1\u0110\1\0"+
    "\1\5\1\0\1\5\1\0\1\5\1\0\1\5\1\0"+
    "\1\5\1\0\1\5\1\0\1\5\1\0\1\5\1\0"+
    "\1\5\1\0\1\5\1\0\1\5\1\0\1\5\21\0"+
    "\4\5\2\0\1\5\1\0\1\5\1\0\1\5\1\0"+
    "\1\5\1\0\1\5\1\0\1\5\1\0\1\5\1\u010f"+
    "\1\u0111\1\0\1\5\1\0\1\5\1\0\1\5\1\0"+
    "\1\5\1\0\1\5\1\0\1\5\1\0\1\5\1\0"+
    "\1\5\1\0\1\5\1\0\1\5\1\0\1\5\1\0"+
    "\1\5\54\0\2\u0112\56\0\2\u0113\74\0\2\u0114\57\0"+
    "\4\5\2\0\1\5\1\0\1\5\1\0\1\5\1\0"+
    "\1\5\1\0\1\5\1\0\1\5\1\0\1\5\1\0"+
    "\1\5\1\0\1\5\1\0\1\5\1\0\1\5\1\u0112"+
    "\1\u0115\1\0\1\5\1\0\1\5\1\0\1\5\1\0"+
    "\1\5\1\0\1\5\1\0\1\5\1\0\1\5\1\0"+
    "\1\5\21\0\4\5\2\0\1\5\1\0\1\5\1\0"+
    "\1\5\1\0\1\5\1\u0113\1\u0116\1\0\1\5\1\0"+
    "\1\5\1\0\1\5\1\0\1\5\1\0\1\5\1\0"+
    "\1\5\1\0\1\5\1\0\1\5\1\0\1\5\1\0"+
    "\1\5\1\0\1\5\1\0\1\5\1\0\1\5\1\0"+
    "\1\5\1\0\1\5\21\0\4\5\2\0\1\5\1\0"+
    "\1\5\1\0\1\5\1\0\1\5\1\u0114\1\u0117\1\0"+
    "\1\5\1\0\1\5\1\0\1\5\1\0\1\5\1\0"+
    "\1\5\1\0\1\5\1\0\1\5\1\0\1\5\1\0"+
    "\1\5\1\0\1\5\1\0\1\5\1\0\1\5\1\0"+
    "\1\5\1\0\1\5\1\0\1\5\60\0\2\u0118\72\0"+
    "\2\u0119\37\0\4\5\2\0\1\5\1\0\1\5\1\0"+
    "\1\5\1\0\1\5\1\0\1\5\1\0\1\5\1\0"+
    "\1\5\1\0\1\5\1\0\1\5\1\0\1\5\1\0"+
    "\1\5\1\0\1\5\1\0\1\5\1\u0118\1\u011a\1\0"+
    "\1\5\1\0\1\5\1\0\1\5\1\0\1\5\1\0"+
    "\1\5\1\0\1\5\21\0\4\5\2\0\1\5\1\0"+
    "\1\5\1\0\1\5\1\0\1\5\1\0\1\5\1\0"+
    "\1\5\1\0\1\5\1\0\1\5\1\0\1\5\1\0"+
    "\1\5\1\0\1\5\1\0\1\5\1\u0119\1\u011b\1\0"+
    "\1\5\1\0\1\5\1\0\1\5\1\0\1\5\1\0"+
    "\1\5\1\0\1\5\1\0\1\5\56\0\2\u011c\37\0"+
    "\4\5\2\0\1\5\1\0\1\5\1\0\1\5\1\0"+
    "\1\5\1\0\1\5\1\0\1\5\1\0\1\5\1\0"+
    "\1\5\1\0\1\5\1\0\1\5\1\0\1\5\1\0"+
    "\1\5\1\u011c\1\u011d\1\0\1\5\1\0\1\5\1\0"+
    "\1\5\1\0\1\5\1\0\1\5\1\0\1\5\1\0"+
    "\1\5\56\0\2\u011e\37\0\4\5\2\0\1\5\1\0"+
    "\1\5\1\0\1\5\1\0\1\5\1\0\1\5\1\0"+
    "\1\5\1\0\1\5\1\0\1\5\1\0\1\5\1\0"+
    "\1\5\1\0\1\5\1\0\1\5\1\u011e\1\u011f\1\0"+
    "\1\5\1\0\1\5\1\0\1\5\1\0\1\5\1\0"+
    "\1\5\1\0\1\5\1\0\1\5\64\0\2\u0120\31\0"+
    "\4\5\2\0\1\5\1\0\1\5\1\0\1\5\1\0"+
    "\1\5\1\0\1\5\1\0\1\5\1\0\1\5\1\0"+
    "\1\5\1\0\1\5\1\0\1\5\1\0\1\5\1\0"+
    "\1\5\1\0\1\5\1\0\1\5\1\0\1\5\1\u0120"+
    "\1\u0121\1\0\1\5\1\0\1\5\1\0\1\5\1\0"+
    "\1\5\34\0\2\u0122\61\0\4\5\2\0\1\5\1\0"+
    "\1\5\1\0\1\5\1\u0122\1\u0123\1\0\1\5\1\0"+
    "\1\5\1\0\1\5\1\0\1\5\1\0\1\5\1\0"+
    "\1\5\1\0\1\5\1\0\1\5\1\0\1\5\1\0"+
    "\1\5\1\0\1\5\1\0\1\5\1\0\1\5\1\0"+
    "\1\5\1\0\1\5\1\0\1\5\40\0\2\u0124\55\0"+
    "\4\5\2\0\1\5\1\0\1\5\1\0\1\5\1\0"+
    "\1\5\1\0\1\5\1\u0124\1\u0125\1\0\1\5\1\0"+
    "\1\5\1\0\1\5\1\0\1\5\1\0\1\5\1\0"+
    "\1\5\1\0\1\5\1\0\1\5\1\0\1\5\1\0"+
    "\1\5\1\0\1\5\1\0\1\5\1\0\1\5\1\0"+
    "\1\5\36\0\2\u0126\57\0\4\5\2\0\1\5\1\0"+
    "\1\5\1\0\1\5\1\0\1\5\1\u0126\1\u0127\1\0"+
    "\1\5\1\0\1\5\1\0\1\5\1\0\1\5\1\0"+
    "\1\5\1\0\1\5\1\0\1\5\1\0\1\5\1\0"+
    "\1\5\1\0\1\5\1\0\1\5\1\0\1\5\1\0"+
    "\1\5\1\0\1\5\1\0\1\5\26\0\2\u0128\67\0"+
    "\4\5\1\0\1\u0128\1\u0129\1\0\1\5\1\0\1\5"+
    "\1\0\1\5\1\0\1\5\1\0\1\5\1\0\1\5"+
    "\1\0\1\5\1\0\1\5\1\0\1\5\1\0\1\5"+
    "\1\0\1\5\1\0\1\5\1\0\1\5\1\0\1\5"+
    "\1\0\1\5\1\0\1\5\1\0\1\5\1\0\1\5"+
    "\1\0\1\5\46\0\2\u012a\64\0\2\u012b\57\0\4\5"+
    "\2\0\1\5\1\0\1\5\1\0\1\5\1\0\1\5"+
    "\1\0\1\5\1\0\1\5\1\0\1\5\1\0\1\5"+
    "\1\u012a\1\u012c\1\0\1\5\1\0\1\5\1\0\1\5"+
    "\1\0\1\5\1\0\1\5\1\0\1\5\1\0\1\5"+
    "\1\0\1\5\1\0\1\5\1\0\1\5\1\0\1\5"+
    "\21\0\4\5\2\0\1\5\1\0\1\5\1\0\1\5"+
    "\1\0\1\5\1\u012b\1\u012d\1\0\1\5\1\0\1\5"+
    "\1\0\1\5\1\0\1\5\1\0\1\5\1\0\1\5"+
    "\1\0\1\5\1\0\1\5\1\0\1\5\1\0\1\5"+
    "\1\0\1\5\1\0\1\5\1\0\1\5\1\0\1\5"+
    "\1\0\1\5\56\0\2\u012e\46\0\2\u012f\124\0\2\u0130"+
    "\35\0\4\5\2\0\1\5\1\0\1\5\1\0\1\5"+
    "\1\0\1\5\1\0\1\5\1\0\1\5\1\0\1\5"+
    "\1\0\1\5\1\0\1\5\1\0\1\5\1\0\1\5"+
    "\1\0\1\5\1\u012e\1\u0131\1\0\1\5\1\0\1\5"+
    "\1\0\1\5\1\0\1\5\1\0\1\5\1\0\1\5"+
    "\1\0\1\5\21\0\4\5\2\0\1\5\1\u012f\1\u0132"+
    "\1\0\1\5\1\0\1\5\1\0\1\5\1\0\1\5"+
    "\1\0\1\5\1\0\1\5\1\0\1\5\1\0\1\5"+
    "\1\0\1\5\1\0\1\5\1\0\1\5\1\0\1\5"+
    "\1\0\1\5\1\0\1\5\1\0\1\5\1\0\1\5"+
    "\1\0\1\5\1\0\1\5\21\0\4\5\2\0\1\5"+
    "\1\0\1\5\1\0\1\5\1\0\1\5\1\0\1\5"+
    "\1\0\1\5\1\0\1\5\1\0\1\5\1\0\1\5"+
    "\1\0\1\5\1\0\1\5\1\0\1\5\1\0\1\5"+
    "\1\u0130\1\u0133\1\0\1\5\1\0\1\5\1\0\1\5"+
    "\1\0\1\5\1\0\1\5\1\0\1\5\30\0\2\u0134"+
    "\126\0\2\u0135\33\0\4\5\2\0\1\5\1\u0134\1\u0136"+
    "\1\0\1\5\1\0\1\5\1\0\1\5\1\0\1\5"+
    "\1\0\1\5\1\0\1\5\1\0\1\5\1\0\1\5"+
    "\1\0\1\5\1\0\1\5\1\0\1\5\1\0\1\5"+
    "\1\0\1\5\1\0\1\5\1\0\1\5\1\0\1\5"+
    "\1\0\1\5\1\0\1\5\21\0\4\5\2\0\1\5"+
    "\1\0\1\5\1\0\1\5\1\0\1\5\1\0\1\5"+
    "\1\0\1\5\1\0\1\5\1\0\1\5\1\0\1\5"+
    "\1\0\1\5\1\0\1\5\1\0\1\5\1\0\1\5"+
    "\1\0\1\5\1\u0135\1\u0137\1\0\1\5\1\0\1\5"+
    "\1\0\1\5\1\0\1\5\1\0\1\5\54\0\2\u0138"+
    "\41\0\4\5\2\0\1\5\1\0\1\5\1\0\1\5"+
    "\1\0\1\5\1\0\1\5\1\0\1\5\1\0\1\5"+
    "\1\0\1\5\1\0\1\5\1\0\1\5\1\0\1\5"+
    "\1\u0138\1\u0139\1\0\1\5\1\0\1\5\1\0\1\5"+
    "\1\0\1\5\1\0\1\5\1\0\1\5\1\0\1\5"+
    "\1\0\1\5\46\0\2\u013a\47\0\4\5\2\0\1\5"+
    "\1\0\1\5\1\0\1\5\1\0\1\5\1\0\1\5"+
    "\1\0\1\5\1\0\1\5\1\0\1\5\1\u013a\1\u013b"+
    "\1\0\1\5\1\0\1\5\1\0\1\5\1\0\1\5"+
    "\1\0\1\5\1\0\1\5\1\0\1\5\1\0\1\5"+
    "\1\0\1\5\1\0\1\5\1\0\1\5\36\0\2\u013c"+
    "\116\0\2\u013d\35\0\4\5\2\0\1\5\1\0\1\5"+
    "\1\0\1\5\1\0\1\5\1\u013c\1\u013e\1\0\1\5"+
    "\1\0\1\5\1\0\1\5\1\0\1\5\1\0\1\5"+
    "\1\0\1\5\1\0\1\5\1\0\1\5\1\0\1\5"+
    "\1\0\1\5\1\0\1\5\1\0\1\5\1\0\1\5"+
    "\1\0\1\5\1\0\1\5\21\0\4\5\2\0\1\5"+
    "\1\0\1\5\1\0\1\5\1\0\1\5\1\0\1\5"+
    "\1\0\1\5\1\0\1\5\1\0\1\5\1\0\1\5"+
    "\1\0\1\5\1\0\1\5\1\0\1\5\1\0\1\5"+
    "\1\u013d\1\u013f\1\0\1\5\1\0\1\5\1\0\1\5"+
    "\1\0\1\5\1\0\1\5\1\0\1\5\113\0\1\u0140"+
    "\40\0\2\u0141\46\0\2\u0142\65\0\4\5\2\0\1\5"+
    "\1\0\1\5\1\0\1\5\1\0\1\5\1\0\1\5"+
    "\1\0\1\5\1\0\1\5\1\0\1\5\1\0\1\5"+
    "\1\0\1\5\1\0\1\5\1\0\1\5\1\0\1\5"+
    "\1\0\1\5\1\0\1\5\1\0\1\5\1\0\1\5"+
    "\1\0\1\5\1\0\1\5\1\0\1\5\15\0\1\u0140"+
    "\3\0\4\5\2\0\1\5\1\0\1\5\1\0\1\5"+
    "\1\0\1\5\1\0\1\5\1\0\1\5\1\0\1\5"+
    "\1\0\1\5\1\0\1\5\1\0\1\5\1\0\1\5"+
    "\1\0\1\5\1\u0141\1\u0143\1\0\1\5\1\0\1\5"+
    "\1\0\1\5\1\0\1\5\1\0\1\5\1\0\1\5"+
    "\1\0\1\5\21\0\4\5\2\0\1\5\1\u0142\1\u0144"+
    "\1\0\1\5\1\0\1\5\1\0\1\5\1\0\1\5"+
    "\1\0\1\5\1\0\1\5\1\0\1\5\1\0\1\5"+
    "\1\0\1\5\1\0\1\5\1\0\1\5\1\0\1\5"+
    "\1\0\1\5\1\0\1\5\1\0\1\5\1\0\1\5"+
    "\1\0\1\5\1\0\1\5\42\0\2\u0145\53\0\4\5"+
    "\2\0\1\5\1\0\1\5\1\0\1\5\1\0\1\5"+
    "\1\0\1\5\1\0\1\5\1\u0145\1\u0146\1\0\1\5"+
    "\1\0\1\5\1\0\1\5\1\0\1\5\1\0\1\5"+
    "\1\0\1\5\1\0\1\5\1\0\1\5\1\0\1\5"+
    "\1\0\1\5\1\0\1\5\1\0\1\5\1\0\1\5"+
    "\30\0\2\u0147\65\0\4\5\2\0\1\5\1\u0147\1\u0148"+
    "\1\0\1\5\1\0\1\5\1\0\1\5\1\0\1\5"+
    "\1\0\1\5\1\0\1\5\1\0\1\5\1\0\1\5"+
    "\1\0\1\5\1\0\1\5\1\0\1\5\1\0\1\5"+
    "\1\0\1\5\1\0\1\5\1\0\1\5\1\0\1\5"+
    "\1\0\1\5\1\0\1\5\74\0\2\u0149\42\0\2\u014a"+
    "\53\0\4\5\2\0\1\5\1\0\1\5\1\0\1\5"+
    "\1\0\1\5\1\0\1\5\1\0\1\5\1\u014a\1\u014b"+
    "\1\0\1\5\1\0\1\5\1\0\1\5\1\0\1\5"+
    "\1\0\1\5\1\0\1\5\1\0\1\5\1\0\1\5"+
    "\1\0\1\5\1\0\1\5\1\0\1\5\1\0\1\5"+
    "\1\0\1\5\107\0\1\u014c\7\0\4\5\2\0\1\5"+
    "\1\0\1\5\1\0\1\5\1\0\1\5\1\0\1\5"+
    "\1\0\1\5\1\0\1\5\1\0\1\5\1\0\1\5"+
    "\1\0\1\5\1\0\1\5\1\0\1\5\1\0\1\5"+
    "\1\0\1\5\1\0\1\5\1\0\1\5\1\0\1\5"+
    "\1\0\1\5\1\0\1\5\1\0\1\5\11\0\1\u014c"+
    "\30\0\2\u014d\53\0\4\5\2\0\1\5\1\0\1\5"+
    "\1\0\1\5\1\0\1\5\1\0\1\5\1\0\1\5"+
    "\1\u014d\1\u014e\1\0\1\5\1\0\1\5\1\0\1\5"+
    "\1\0\1\5\1\0\1\5\1\0\1\5\1\0\1\5"+
    "\1\0\1\5\1\0\1\5\1\0\1\5\1\0\1\5"+
    "\1\0\1\5\1\0\1\5\62\0\2\u014f\121\0\1\u0150"+
    "\7\0\4\5\2\0\1\5\1\0\1\5\1\0\1\5"+
    "\1\0\1\5\1\0\1\5\1\0\1\5\1\0\1\5"+
    "\1\0\1\5\1\0\1\5\1\0\1\5\1\0\1\5"+
    "\1\0\1\5\1\0\1\5\1\0\1\5\1\0\1\5"+
    "\1\0\1\5\1\0\1\5\1\0\1\5\1\0\1\5"+
    "\1\0\1\5\11\0\1\u0150\76\0\1\u0151\74\0\1\u0152"+
    "\7\0\4\5\2\0\1\5\1\0\1\5\1\0\1\5"+
    "\1\0\1\5\1\0\1\5\1\0\1\5\1\0\1\5"+
    "\1\0\1\5\1\0\1\5\1\0\1\5\1\0\1\5"+
    "\1\0\1\5\1\0\1\5\1\0\1\5\1\0\1\5"+
    "\1\0\1\5\1\0\1\5\1\0\1\5\1\0\1\5"+
    "\1\0\1\5\11\0\1\u0152\32\0\2\u0153\140\0\1\u0154"+
    "\75\0\1\u0155\27\0\2\u0156\110\0\2\u0157\72\0\2\u0158"+
    "\64\0\2\u0159\66\0\2\u015a\114\0\2\u015b\35\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[16368];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\2\0\1\11\50\1\1\11\5\1\5\11\2\1\1\0"+
    "\1\11\4\0\3\1\3\0\3\1\2\0\2\1\3\0"+
    "\3\1\1\11\1\0\2\1\1\11\1\0\4\1\1\0"+
    "\1\1\1\0\1\11\1\0\3\1\1\0\1\1\3\0"+
    "\3\1\1\0\1\1\1\0\1\1\1\11\1\0\2\1"+
    "\1\0\1\1\1\0\1\1\7\11\2\0\1\11\1\0"+
    "\2\1\1\11\2\0\3\1\1\0\1\11\1\0\3\1"+
    "\1\11\1\0\2\1\3\0\3\1\1\0\1\1\1\0"+
    "\1\1\1\0\3\1\1\11\1\0\2\1\1\0\1\1"+
    "\1\11\2\0\3\1\1\0\1\1\1\0\3\1\1\11"+
    "\1\1\1\0\1\1\1\0\1\11\1\0\1\1\1\11"+
    "\1\0\2\1\2\0\2\1\1\11\1\1\2\0\1\11"+
    "\5\1\1\11\1\1\2\0\2\1\1\0\1\1\1\0"+
    "\1\1\1\0\1\1\1\11\2\1\1\11\2\1\1\0"+
    "\1\1\1\0\1\1\1\0\1\1\1\0\4\1\1\0"+
    "\1\1\2\0\2\1\3\0\3\1\2\0\2\1\1\0"+
    "\1\1\1\0\1\1\1\0\1\1\1\0\1\1\1\0"+
    "\1\1\1\0\1\1\1\0\1\1\1\11\1\1\1\11"+
    "\1\1\2\0\2\1\3\0\3\1\2\0\2\1\1\11"+
    "\1\1\1\11\1\1\1\0\1\1\1\11\1\1\1\11"+
    "\1\1\1\11\1\1\1\0\1\1\2\0\2\1\3\0"+
    "\3\1\1\0\1\11\2\1\1\11\1\1\1\11\1\1"+
    "\1\11\1\0\2\1\1\0\1\11\1\0\2\1\1\0"+
    "\1\1\1\0\1\1\2\0\1\1\2\0\1\1\2\0"+
    "\1\11\2\0\2\11\1\0\1\1\3\0\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[347];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
    StringBuffer string = new StringBuffer();

    private Symbol symbol(int type, Object value){
        System.out.println(value);
        return new Symbol(type, yyline, yycolumn, value);
    }
    private Symbol symbol(int type){
        System.out.println(type);
        return new Symbol(type, yyline, yycolumn);
    }


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public LexicoVisual(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public LexicoVisual(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn++;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 65: 
          { System.out.print(yytext()); return new Symbol(SintaxisVisualSym.intinput, yycolumn, yyline, yytext());
          }
        case 70: break;
        case 36: 
          { System.out.print(yytext()); return new Symbol(SintaxisVisualSym.forr, yycolumn, yyline, yytext());
          }
        case 71: break;
        case 30: 
          { System.out.print(yytext()); return new Symbol(SintaxisVisualSym.porig, yycolumn, yyline, yytext());
          }
        case 72: break;
        case 3: 
          { System.out.print(yytext()); return new Symbol(SintaxisVisualSym.id, yycolumn, yyline, yytext());
          }
        case 73: break;
        case 68: 
          { System.out.print(yytext()); return new Symbol(SintaxisVisualSym.write, yycolumn, yyline, yytext());
          }
        case 74: break;
        case 66: 
          { System.out.print(yytext()); return new Symbol(SintaxisVisualSym.charinput, yycolumn, yyline, yytext());
          }
        case 75: break;
        case 9: 
          { System.out.print(yytext()); return new Symbol(SintaxisVisualSym.mas, yycolumn, yyline, yytext());
          }
        case 76: break;
        case 58: 
          { System.out.print(yytext()); return new Symbol(SintaxisVisualSym.publicc, yycolumn, yyline, yytext());
          }
        case 77: break;
        case 56: 
          { System.out.print(yytext()); return new Symbol(SintaxisVisualSym.modulee, yycolumn, yyline, yytext());
          }
        case 78: break;
        case 50: 
          { System.out.print(yytext()); return new Symbol(SintaxisVisualSym.elsee, yycolumn, yyline, yytext());
          }
        case 79: break;
        case 15: 
          { System.out.print(yytext()); return new Symbol(SintaxisVisualSym.para, yycolumn, yyline, yytext());
          }
        case 80: break;
        case 48: 
          { System.out.print(yytext()); return new Symbol(SintaxisVisualSym.thenn, yycolumn, yyline, yytext());
          }
        case 81: break;
        case 42: 
          { System.out.print(yytext()); return new Symbol(SintaxisVisualSym.xorr, yycolumn, yyline, yytext());
          }
        case 82: break;
        case 60: 
          { System.out.print(yytext()); return new Symbol(SintaxisVisualSym.integerr, yycolumn, yyline, yytext());
          }
        case 83: break;
        case 41: 
          { System.out.print(yytext()); return new Symbol(SintaxisVisualSym.andd, yycolumn, yyline, yytext());
          }
        case 84: break;
        case 53: 
          { System.out.print(yytext()); return new Symbol(SintaxisVisualSym.whilee, yycolumn, yyline, yytext());
          }
        case 85: break;
        case 21: 
          { System.out.print(yytext()); return new Symbol(SintaxisVisualSym.iff, yycolumn, yyline, yytext());
          }
        case 86: break;
        case 2: 
          { System.out.print(yytext()); /*IGNORAR*/
          }
        case 87: break;
        case 16: 
          { System.out.print(yytext()); return new Symbol(SintaxisVisualSym.parc, yycolumn, yyline, yytext());
          }
        case 88: break;
        case 59: 
          { System.out.print(yytext()); return new Symbol(SintaxisVisualSym.returnn, yycolumn, yyline, yytext());
          }
        case 89: break;
        case 8: 
          { System.out.print(yytext()); return new Symbol(SintaxisVisualSym.igual, yycolumn, yyline, yytext());
          }
        case 90: break;
        case 46: 
          { System.out.print(yytext()); return new Symbol(SintaxisVisualSym.casee, yycolumn, yyline, yytext());
          }
        case 91: break;
        case 24: 
          { System.out.print(yytext()); return new Symbol(SintaxisVisualSym.ass, yycolumn, yyline, yytext());
          }
        case 92: break;
        case 44: 
          { System.out.print(yytext()); return new Symbol(SintaxisVisualSym.stepp, yycolumn, yyline, yytext());
          }
        case 93: break;
        case 47: 
          { System.out.print(yytext()); return new Symbol(SintaxisVisualSym.charr, yycolumn, yyline, yytext());
          }
        case 94: break;
        case 32: 
          { System.out.print(yytext()); return new Symbol(SintaxisVisualSym.floorig, yycolumn, yyline, yytext());
          }
        case 95: break;
        case 69: 
          { System.out.print(yytext()); return new Symbol(SintaxisVisualSym.writeln, yycolumn, yyline, yytext());
          }
        case 96: break;
        case 62: 
          { System.out.print(yytext()); return new Symbol(SintaxisVisualSym.andalsoo, yycolumn, yyline, yytext());
          }
        case 97: break;
        case 11: 
          { System.out.print(yytext()); return new Symbol(SintaxisVisualSym.por, yycolumn, yyline, yytext());
          }
        case 98: break;
        case 18: 
          { System.out.print(yytext()); return new Symbol(SintaxisVisualSym.y, yycolumn, yyline, yytext());
          }
        case 99: break;
        case 57: 
          { System.out.print(yytext()); return new Symbol(SintaxisVisualSym.elseiff, yycolumn, yyline, yytext());
          }
        case 100: break;
        case 20: 
          { System.out.print(yytext()); return new Symbol(SintaxisVisualSym.to, yycolumn, yyline, yytext());
          }
        case 101: break;
        case 43: 
          { System.out.print(yytext()); return new Symbol(SintaxisVisualSym.com, yycolumn, yyline, yytext());
          }
        case 102: break;
        case 17: 
          { System.out.print(yytext()); return new Symbol(SintaxisVisualSym.coma, yycolumn, yyline, yytext());
          }
        case 103: break;
        case 38: 
          { System.out.print(yytext()); return new Symbol(SintaxisVisualSym.mod, yycolumn, yyline, yytext());
          }
        case 104: break;
        case 6: 
          { System.out.print(yytext()); return new Symbol(SintaxisVisualSym.menor, yycolumn, yyline, yytext());
          }
        case 105: break;
        case 27: 
          { System.out.print(yytext()); return new Symbol(SintaxisVisualSym.mayorig, yycolumn, yyline, yytext());
          }
        case 106: break;
        case 23: 
          { System.out.print(yytext()); return new Symbol(SintaxisVisualSym.doo, yycolumn, yyline, yytext());
          }
        case 107: break;
        case 33: 
          { System.out.print(yytext()); return new Symbol(SintaxisVisualSym.string, yycolumn, yyline, yytext().substring(1, yytext().length() - 2));
          }
        case 108: break;
        case 12: 
          { System.out.print(yytext()); return new Symbol(SintaxisVisualSym.div, yycolumn, yyline, yytext());
          }
        case 109: break;
        case 45: 
          { System.out.print(yytext()); return new Symbol(SintaxisVisualSym.nextt, yycolumn, yyline, yytext());
          }
        case 110: break;
        case 10: 
          { System.out.print(yytext()); return new Symbol(SintaxisVisualSym.menos, yycolumn, yyline, yytext());
          }
        case 111: break;
        case 14: 
          { System.out.print(yytext()); return new Symbol(SintaxisVisualSym.pot, yycolumn, yyline, yytext());
          }
        case 112: break;
        case 25: 
          { System.out.print(yytext()); return new Symbol(SintaxisVisualSym.noigual, yycolumn, yyline, yytext());
          }
        case 113: break;
        case 4: 
          { System.out.print(yytext()); return new Symbol(SintaxisVisualSym.entero, yycolumn, yyline, yytext());
          }
        case 114: break;
        case 39: 
          { System.out.print(yytext()); return new Symbol(SintaxisVisualSym.dimm, yycolumn, yyline, yytext());
          }
        case 115: break;
        case 31: 
          { System.out.print(yytext()); return new Symbol(SintaxisVisualSym.divig, yycolumn, yyline, yytext());
          }
        case 116: break;
        case 54: 
          { System.out.print(yytext()); return new Symbol(SintaxisVisualSym.selectt, yycolumn, yyline, yytext());
          }
        case 117: break;
        case 13: 
          { System.out.print(yytext()); return new Symbol(SintaxisVisualSym.floor, yycolumn, yyline, yytext());
          }
        case 118: break;
        case 7: 
          { System.out.print(yytext()); return new Symbol(SintaxisVisualSym.mayor, yycolumn, yyline, yytext());
          }
        case 119: break;
        case 19: 
          { System.out.print(yytext()); /*ignorar*/
          }
        case 120: break;
        case 1: 
          { System.out.print(yytext()); /*error*/
          }
        case 121: break;
        case 61: 
          { System.out.print(yytext()); return new Symbol(SintaxisVisualSym.decimall, yycolumn, yyline, yytext());
          }
        case 122: break;
        case 5: 
          { System.out.print(yytext()); return new Symbol(SintaxisVisualSym.espacio, yycolumn, yyline, yytext());
          }
        case 123: break;
        case 63: 
          { System.out.print(yytext()); return new Symbol(SintaxisVisualSym.functionn, yycolumn, yyline, yytext());
          }
        case 124: break;
        case 35: 
          { System.out.print(yytext()); return new Symbol(SintaxisVisualSym.subb, yycolumn, yyline, yytext());
          }
        case 125: break;
        case 29: 
          { System.out.print(yytext()); return new Symbol(SintaxisVisualSym.menosig, yycolumn, yyline, yytext());
          }
        case 126: break;
        case 49: 
          { System.out.print(yytext()); return new Symbol(SintaxisVisualSym.loopp, yycolumn, yyline, yytext());
          }
        case 127: break;
        case 67: 
          { System.out.print(yytext()); return new Symbol(SintaxisVisualSym.floatinput, yycolumn, yyline, yytext());
          }
        case 128: break;
        case 40: 
          { System.out.print(yytext()); return new Symbol(SintaxisVisualSym.endd, yycolumn, yyline, yytext());
          }
        case 129: break;
        case 28: 
          { System.out.print(yytext()); return new Symbol(SintaxisVisualSym.masig, yycolumn, yyline, yytext());
          }
        case 130: break;
        case 34: 
          { System.out.print(yytext()); return new Symbol(SintaxisVisualSym.decimal, yycolumn, yyline, yytext());
          }
        case 131: break;
        case 64: 
          { System.out.print(yytext()); return new Symbol(SintaxisVisualSym.continuee, yycolumn, yyline, yytext());
          }
        case 132: break;
        case 26: 
          { System.out.print(yytext()); return new Symbol(SintaxisVisualSym.menorig, yycolumn, yyline, yytext());
          }
        case 133: break;
        case 55: 
          { System.out.print(yytext()); return new Symbol(SintaxisVisualSym.orelsee, yycolumn, yyline, yytext());
          }
        case 134: break;
        case 22: 
          { System.out.print(yytext()); return new Symbol(SintaxisVisualSym.orr, yycolumn, yyline, yytext());
          }
        case 135: break;
        case 51: 
          { System.out.print(yytext()); return new Symbol(SintaxisVisualSym.exitt, yycolumn, yyline, yytext());
          }
        case 136: break;
        case 37: 
          { System.out.print(yytext()); return new Symbol(SintaxisVisualSym.nott, yycolumn, yyline, yytext());
          }
        case 137: break;
        case 52: 
          { System.out.print(yytext()); return new Symbol(SintaxisVisualSym.character, yycolumn, yyline, yytext().substring(1, yytext().length() - 2));
          }
        case 138: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
              { return new java_cup.runtime.Symbol(SintaxisVisualSym.EOF); }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
