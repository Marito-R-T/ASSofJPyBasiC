
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package com.mycompany.assofjpybasic.backend.analizador;

import java_cup.runtime.*;
import com.mycompany.assofjpybasic.backend.classes.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class SintaxisPrincipal extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return SintaxisPrincipalSym.class;
}

  /** Default constructor. */
  @Deprecated
  public SintaxisPrincipal() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public SintaxisPrincipal(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public SintaxisPrincipal(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\025\000\002\002\004\000\002\010\007\000\002\011" +
    "\002\000\002\002\005\000\002\002\003\000\002\012\002" +
    "\000\002\003\005\000\002\003\003\000\002\013\002\000" +
    "\002\004\005\000\002\004\003\000\002\014\002\000\002" +
    "\005\005\000\002\005\003\000\002\007\004\000\002\007" +
    "\004\000\002\007\002\000\002\006\004\000\002\006\004" +
    "\000\002\006\004\000\002\006\002" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\035\000\012\003\ufff1\004\ufff1\011\ufff1\012\ufff1\001" +
    "\002\000\004\002\037\001\002\000\012\003\010\004\uffff" +
    "\011\012\012\006\001\002\000\012\003\ufff2\004\ufff2\011" +
    "\ufff2\012\ufff2\001\002\000\004\004\035\001\002\000\006" +
    "\003\ufffd\005\ufffd\001\002\000\006\003\014\005\ufffc\001" +
    "\002\000\012\003\ufff3\004\ufff3\011\ufff3\012\ufff3\001\002" +
    "\000\004\005\033\001\002\000\006\003\ufffa\006\ufffa\001" +
    "\002\000\006\003\017\006\ufff9\001\002\000\004\006\031" +
    "\001\002\000\006\003\ufff7\007\ufff7\001\002\000\006\003" +
    "\023\007\ufff6\001\002\000\004\007\024\001\002\000\004" +
    "\002\000\001\002\000\004\002\ufff4\001\002\000\012\002" +
    "\uffed\010\uffed\011\uffed\012\uffed\001\002\000\012\002\ufff5" +
    "\010\026\011\030\012\027\001\002\000\022\002\ufff0\003" +
    "\ufff0\005\ufff0\006\ufff0\007\ufff0\010\ufff0\011\ufff0\012\ufff0" +
    "\001\002\000\022\002\uffee\003\uffee\005\uffee\006\uffee\007" +
    "\uffee\010\uffee\011\uffee\012\uffee\001\002\000\022\002\uffef" +
    "\003\uffef\005\uffef\006\uffef\007\uffef\010\uffef\011\uffef\012" +
    "\uffef\001\002\000\014\003\uffed\007\uffed\010\uffed\011\uffed" +
    "\012\uffed\001\002\000\014\003\ufff8\007\ufff8\010\026\011" +
    "\030\012\027\001\002\000\014\003\uffed\006\uffed\010\uffed" +
    "\011\uffed\012\uffed\001\002\000\014\003\ufffb\006\ufffb\010" +
    "\026\011\030\012\027\001\002\000\014\003\uffed\005\uffed" +
    "\010\uffed\011\uffed\012\uffed\001\002\000\014\003\ufffe\005" +
    "\ufffe\010\026\011\030\012\027\001\002\000\004\002\001" +
    "\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\035\000\006\007\004\010\003\001\001\000\002\001" +
    "\001\000\006\002\010\011\006\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\003\014\012" +
    "\012\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\004\017\013\015\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\005\021\014\020\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\006\024\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\006\031\001" +
    "\001\000\002\001\001\000\004\006\033\001\001\000\002" +
    "\001\001\000\004\006\035\001\001\000\002\001\001\000" +
    "\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$SintaxisPrincipal$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$SintaxisPrincipal$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$SintaxisPrincipal$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    private Symbol s;
    private int vb, java, py, c;
    
    public void syntax_error(Symbol sym){
        System.out.println("Error Sintactico en la letra: " + sym.value + "   <linea>: "  + (sym.right + 1) + "    <columna>: " + (sym.left + 1) + "\n");
    }

    public void unrecovered_syntax_error(Symbol sym) throws java.lang.Exception{
        System.out.println("Error Sintactico en la letra: " + sym.value + "   <linea>: "  + (sym.right + 1) + "    <columna>: " + (sym.left + 1) + "\n");
    }
    
    public int getVB() {
        return vb;
    }
    
    public int getJV() {
        return java;
    }
    
    public int getPY() {
        return py;
    }
    
    public int getC() {
        return c;
    }

    public Symbol getS(){
        return this.cur_token;
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$SintaxisPrincipal$actions {
  private final SintaxisPrincipal parser;

  /** Constructor */
  CUP$SintaxisPrincipal$actions(SintaxisPrincipal parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$SintaxisPrincipal$do_action_part00000000(
    int                        CUP$SintaxisPrincipal$act_num,
    java_cup.runtime.lr_parser CUP$SintaxisPrincipal$parser,
    java.util.Stack            CUP$SintaxisPrincipal$stack,
    int                        CUP$SintaxisPrincipal$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$SintaxisPrincipal$result;

      /* select the action based on the action number */
      switch (CUP$SintaxisPrincipal$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= S EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$SintaxisPrincipal$stack.elementAt(CUP$SintaxisPrincipal$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$SintaxisPrincipal$stack.elementAt(CUP$SintaxisPrincipal$top-1)).right;
		ArchivoMLG start_val = (ArchivoMLG)((java_cup.runtime.Symbol) CUP$SintaxisPrincipal$stack.elementAt(CUP$SintaxisPrincipal$top-1)).value;
		RESULT = start_val;
              CUP$SintaxisPrincipal$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$SintaxisPrincipal$stack.elementAt(CUP$SintaxisPrincipal$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxisPrincipal$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$SintaxisPrincipal$parser.done_parsing();
          return CUP$SintaxisPrincipal$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // S ::= ESP VB JV PY PROG 
            {
              ArchivoMLG RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisPrincipal$stack.elementAt(CUP$SintaxisPrincipal$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisPrincipal$stack.elementAt(CUP$SintaxisPrincipal$top-3)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$SintaxisPrincipal$stack.elementAt(CUP$SintaxisPrincipal$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisPrincipal$stack.elementAt(CUP$SintaxisPrincipal$top-2)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisPrincipal$stack.elementAt(CUP$SintaxisPrincipal$top-2)).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$SintaxisPrincipal$stack.elementAt(CUP$SintaxisPrincipal$top-2)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$SintaxisPrincipal$stack.elementAt(CUP$SintaxisPrincipal$top-1)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$SintaxisPrincipal$stack.elementAt(CUP$SintaxisPrincipal$top-1)).right;
		String e3 = (String)((java_cup.runtime.Symbol) CUP$SintaxisPrincipal$stack.elementAt(CUP$SintaxisPrincipal$top-1)).value;
		int e4left = ((java_cup.runtime.Symbol)CUP$SintaxisPrincipal$stack.peek()).left;
		int e4right = ((java_cup.runtime.Symbol)CUP$SintaxisPrincipal$stack.peek()).right;
		String e4 = (String)((java_cup.runtime.Symbol) CUP$SintaxisPrincipal$stack.peek()).value;
		RESULT = new ArchivoMLG(e1,e2,e3+"\n",e4);
              CUP$SintaxisPrincipal$result = parser.getSymbolFactory().newSymbol("S",6, ((java_cup.runtime.Symbol)CUP$SintaxisPrincipal$stack.elementAt(CUP$SintaxisPrincipal$top-4)), ((java_cup.runtime.Symbol)CUP$SintaxisPrincipal$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrincipal$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // NT$0 ::= 
            {
              String RESULT =null;
vb = getS().right;
              CUP$SintaxisPrincipal$result = parser.getSymbolFactory().newSymbol("NT$0",7, ((java_cup.runtime.Symbol)CUP$SintaxisPrincipal$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrincipal$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // VB ::= NT$0 vb TEXTO 
            {
              String RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$SintaxisPrincipal$stack.elementAt(CUP$SintaxisPrincipal$top-2)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisPrincipal$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisPrincipal$stack.peek()).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$SintaxisPrincipal$stack.peek()).value;
		RESULT = e1;
              CUP$SintaxisPrincipal$result = parser.getSymbolFactory().newSymbol("VB",0, ((java_cup.runtime.Symbol)CUP$SintaxisPrincipal$stack.elementAt(CUP$SintaxisPrincipal$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisPrincipal$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrincipal$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // VB ::= error 
            {
              String RESULT =null;
		RESULT = "";
              CUP$SintaxisPrincipal$result = parser.getSymbolFactory().newSymbol("VB",0, ((java_cup.runtime.Symbol)CUP$SintaxisPrincipal$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisPrincipal$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrincipal$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // NT$1 ::= 
            {
              String RESULT =null;
java = getS().right;
              CUP$SintaxisPrincipal$result = parser.getSymbolFactory().newSymbol("NT$1",8, ((java_cup.runtime.Symbol)CUP$SintaxisPrincipal$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrincipal$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // JV ::= NT$1 java TEXTO 
            {
              String RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$SintaxisPrincipal$stack.elementAt(CUP$SintaxisPrincipal$top-2)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisPrincipal$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisPrincipal$stack.peek()).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$SintaxisPrincipal$stack.peek()).value;
		RESULT = e1;
              CUP$SintaxisPrincipal$result = parser.getSymbolFactory().newSymbol("JV",1, ((java_cup.runtime.Symbol)CUP$SintaxisPrincipal$stack.elementAt(CUP$SintaxisPrincipal$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisPrincipal$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrincipal$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // JV ::= error 
            {
              String RESULT =null;
		RESULT = "";
              CUP$SintaxisPrincipal$result = parser.getSymbolFactory().newSymbol("JV",1, ((java_cup.runtime.Symbol)CUP$SintaxisPrincipal$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisPrincipal$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrincipal$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // NT$2 ::= 
            {
              String RESULT =null;
py = getS().right;
              CUP$SintaxisPrincipal$result = parser.getSymbolFactory().newSymbol("NT$2",9, ((java_cup.runtime.Symbol)CUP$SintaxisPrincipal$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrincipal$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // PY ::= NT$2 py TEXTO 
            {
              String RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$SintaxisPrincipal$stack.elementAt(CUP$SintaxisPrincipal$top-2)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisPrincipal$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisPrincipal$stack.peek()).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$SintaxisPrincipal$stack.peek()).value;
		RESULT = e1;
              CUP$SintaxisPrincipal$result = parser.getSymbolFactory().newSymbol("PY",2, ((java_cup.runtime.Symbol)CUP$SintaxisPrincipal$stack.elementAt(CUP$SintaxisPrincipal$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisPrincipal$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrincipal$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // PY ::= error 
            {
              String RESULT =null;
		RESULT = "";
              CUP$SintaxisPrincipal$result = parser.getSymbolFactory().newSymbol("PY",2, ((java_cup.runtime.Symbol)CUP$SintaxisPrincipal$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisPrincipal$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrincipal$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // NT$3 ::= 
            {
              String RESULT =null;
c = getS().right;
              CUP$SintaxisPrincipal$result = parser.getSymbolFactory().newSymbol("NT$3",10, ((java_cup.runtime.Symbol)CUP$SintaxisPrincipal$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrincipal$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // PROG ::= NT$3 prog TEXTO 
            {
              String RESULT =null;
              // propagate RESULT from NT$3
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$SintaxisPrincipal$stack.elementAt(CUP$SintaxisPrincipal$top-2)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisPrincipal$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisPrincipal$stack.peek()).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$SintaxisPrincipal$stack.peek()).value;
		RESULT = e1;
              CUP$SintaxisPrincipal$result = parser.getSymbolFactory().newSymbol("PROG",3, ((java_cup.runtime.Symbol)CUP$SintaxisPrincipal$stack.elementAt(CUP$SintaxisPrincipal$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisPrincipal$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrincipal$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // PROG ::= error 
            {
              String RESULT =null;
		RESULT = "";
              CUP$SintaxisPrincipal$result = parser.getSymbolFactory().newSymbol("PROG",3, ((java_cup.runtime.Symbol)CUP$SintaxisPrincipal$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisPrincipal$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrincipal$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // ESP ::= ESP esp 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisPrincipal$stack.elementAt(CUP$SintaxisPrincipal$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisPrincipal$stack.elementAt(CUP$SintaxisPrincipal$top-1)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$SintaxisPrincipal$stack.elementAt(CUP$SintaxisPrincipal$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisPrincipal$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisPrincipal$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$SintaxisPrincipal$stack.peek()).value;
		RESULT = e1 + e2;
              CUP$SintaxisPrincipal$result = parser.getSymbolFactory().newSymbol("ESP",5, ((java_cup.runtime.Symbol)CUP$SintaxisPrincipal$stack.elementAt(CUP$SintaxisPrincipal$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxisPrincipal$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrincipal$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // ESP ::= ESP com 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisPrincipal$stack.elementAt(CUP$SintaxisPrincipal$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisPrincipal$stack.elementAt(CUP$SintaxisPrincipal$top-1)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$SintaxisPrincipal$stack.elementAt(CUP$SintaxisPrincipal$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisPrincipal$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisPrincipal$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$SintaxisPrincipal$stack.peek()).value;
		RESULT = e1 + e2;
              CUP$SintaxisPrincipal$result = parser.getSymbolFactory().newSymbol("ESP",5, ((java_cup.runtime.Symbol)CUP$SintaxisPrincipal$stack.elementAt(CUP$SintaxisPrincipal$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxisPrincipal$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrincipal$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // ESP ::= 
            {
              String RESULT =null;
		RESULT = "";
              CUP$SintaxisPrincipal$result = parser.getSymbolFactory().newSymbol("ESP",5, ((java_cup.runtime.Symbol)CUP$SintaxisPrincipal$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrincipal$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // TEXTO ::= TEXTO txt 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisPrincipal$stack.elementAt(CUP$SintaxisPrincipal$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisPrincipal$stack.elementAt(CUP$SintaxisPrincipal$top-1)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$SintaxisPrincipal$stack.elementAt(CUP$SintaxisPrincipal$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisPrincipal$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisPrincipal$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$SintaxisPrincipal$stack.peek()).value;
		RESULT = e1 + e2;
              CUP$SintaxisPrincipal$result = parser.getSymbolFactory().newSymbol("TEXTO",4, ((java_cup.runtime.Symbol)CUP$SintaxisPrincipal$stack.elementAt(CUP$SintaxisPrincipal$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxisPrincipal$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrincipal$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // TEXTO ::= TEXTO esp 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisPrincipal$stack.elementAt(CUP$SintaxisPrincipal$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisPrincipal$stack.elementAt(CUP$SintaxisPrincipal$top-1)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$SintaxisPrincipal$stack.elementAt(CUP$SintaxisPrincipal$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisPrincipal$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisPrincipal$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$SintaxisPrincipal$stack.peek()).value;
		RESULT = e1 + e2;
              CUP$SintaxisPrincipal$result = parser.getSymbolFactory().newSymbol("TEXTO",4, ((java_cup.runtime.Symbol)CUP$SintaxisPrincipal$stack.elementAt(CUP$SintaxisPrincipal$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxisPrincipal$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrincipal$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // TEXTO ::= TEXTO com 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisPrincipal$stack.elementAt(CUP$SintaxisPrincipal$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisPrincipal$stack.elementAt(CUP$SintaxisPrincipal$top-1)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$SintaxisPrincipal$stack.elementAt(CUP$SintaxisPrincipal$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisPrincipal$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisPrincipal$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$SintaxisPrincipal$stack.peek()).value;
		RESULT = e1 + e2;
              CUP$SintaxisPrincipal$result = parser.getSymbolFactory().newSymbol("TEXTO",4, ((java_cup.runtime.Symbol)CUP$SintaxisPrincipal$stack.elementAt(CUP$SintaxisPrincipal$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxisPrincipal$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrincipal$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // TEXTO ::= 
            {
              String RESULT =null;
		RESULT = "";
              CUP$SintaxisPrincipal$result = parser.getSymbolFactory().newSymbol("TEXTO",4, ((java_cup.runtime.Symbol)CUP$SintaxisPrincipal$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrincipal$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$SintaxisPrincipal$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$SintaxisPrincipal$do_action(
    int                        CUP$SintaxisPrincipal$act_num,
    java_cup.runtime.lr_parser CUP$SintaxisPrincipal$parser,
    java.util.Stack            CUP$SintaxisPrincipal$stack,
    int                        CUP$SintaxisPrincipal$top)
    throws java.lang.Exception
    {
              return CUP$SintaxisPrincipal$do_action_part00000000(
                               CUP$SintaxisPrincipal$act_num,
                               CUP$SintaxisPrincipal$parser,
                               CUP$SintaxisPrincipal$stack,
                               CUP$SintaxisPrincipal$top);
    }
}

}
