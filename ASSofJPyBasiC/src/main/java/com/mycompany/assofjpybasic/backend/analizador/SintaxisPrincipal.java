
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package com.mycompany.assofjpybasic.backend.analizador;

import java_cup.runtime.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class SintaxisPrincipal extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return SintaxisPrincipalSym.class;
}

  /** Default constructor. */
  @Deprecated
  public SintaxisPrincipal() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public SintaxisPrincipal(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public SintaxisPrincipal(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\015\000\002\002\004\000\002\002\007\000\002\002" +
    "\006\000\002\003\005\000\002\004\005\000\002\005\005" +
    "\000\002\006\005\000\002\010\004\000\002\010\003\000" +
    "\002\007\004\000\002\007\004\000\002\007\003\000\002" +
    "\007\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\036\000\006\004\004\012\010\001\002\000\004\005" +
    "\037\001\002\000\004\002\036\001\002\000\004\004\013" +
    "\001\002\000\006\004\004\012\012\001\002\000\006\004" +
    "\ufff9\012\ufff9\001\002\000\004\004\013\001\002\000\006" +
    "\004\ufffa\012\ufffa\001\002\000\004\006\031\001\002\000" +
    "\004\004\015\001\002\000\004\007\027\001\002\000\004" +
    "\004\020\001\002\000\004\002\000\001\002\000\004\010" +
    "\021\001\002\000\006\011\022\012\024\001\002\000\012" +
    "\002\ufff6\004\ufff6\011\ufff6\012\ufff6\001\002\000\010\002" +
    "\ufffb\011\025\012\026\001\002\000\012\002\ufff5\004\ufff5" +
    "\011\ufff5\012\ufff5\001\002\000\012\002\ufff8\004\ufff8\011" +
    "\ufff8\012\ufff8\001\002\000\012\002\ufff7\004\ufff7\011\ufff7" +
    "\012\ufff7\001\002\000\006\011\022\012\024\001\002\000" +
    "\010\004\ufffc\011\025\012\026\001\002\000\006\011\022" +
    "\012\024\001\002\000\010\004\ufffd\011\025\012\026\001" +
    "\002\000\004\004\015\001\002\000\004\004\020\001\002" +
    "\000\004\002\uffff\001\002\000\004\002\001\001\002\000" +
    "\006\011\022\012\024\001\002\000\010\004\ufffe\011\025" +
    "\012\026\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\036\000\010\002\004\003\005\010\006\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\004\032\001\001" +
    "\000\004\003\010\001\001\000\002\001\001\000\004\004" +
    "\013\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\005\015\001\001\000\002\001\001\000\004\006\016\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\007\022" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\007\027" +
    "\001\001\000\002\001\001\000\004\007\031\001\001\000" +
    "\002\001\001\000\004\005\033\001\001\000\004\006\034" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\007" +
    "\037\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$SintaxisPrincipal$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$SintaxisPrincipal$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$SintaxisPrincipal$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    private Symbol s;
    
    public void syntax_error(Symbol s){
    }

    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{
    }

    public Symbol getS(){
        return this.s;
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$SintaxisPrincipal$actions {
  private final SintaxisPrincipal parser;

  /** Constructor */
  CUP$SintaxisPrincipal$actions(SintaxisPrincipal parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$SintaxisPrincipal$do_action_part00000000(
    int                        CUP$SintaxisPrincipal$act_num,
    java_cup.runtime.lr_parser CUP$SintaxisPrincipal$parser,
    java.util.Stack            CUP$SintaxisPrincipal$stack,
    int                        CUP$SintaxisPrincipal$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$SintaxisPrincipal$result;

      /* select the action based on the action number */
      switch (CUP$SintaxisPrincipal$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= S EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$SintaxisPrincipal$stack.elementAt(CUP$SintaxisPrincipal$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$SintaxisPrincipal$stack.elementAt(CUP$SintaxisPrincipal$top-1)).right;
		String start_val = (String)((java_cup.runtime.Symbol) CUP$SintaxisPrincipal$stack.elementAt(CUP$SintaxisPrincipal$top-1)).value;
		RESULT = start_val;
              CUP$SintaxisPrincipal$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$SintaxisPrincipal$stack.elementAt(CUP$SintaxisPrincipal$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxisPrincipal$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$SintaxisPrincipal$parser.done_parsing();
          return CUP$SintaxisPrincipal$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // S ::= ESP VB JV PY PROG 
            {
              String RESULT =null;
		
              CUP$SintaxisPrincipal$result = parser.getSymbolFactory().newSymbol("S",0, ((java_cup.runtime.Symbol)CUP$SintaxisPrincipal$stack.elementAt(CUP$SintaxisPrincipal$top-4)), ((java_cup.runtime.Symbol)CUP$SintaxisPrincipal$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrincipal$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // S ::= VB JV PY PROG 
            {
              String RESULT =null;
		
              CUP$SintaxisPrincipal$result = parser.getSymbolFactory().newSymbol("S",0, ((java_cup.runtime.Symbol)CUP$SintaxisPrincipal$stack.elementAt(CUP$SintaxisPrincipal$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxisPrincipal$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrincipal$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // VB ::= dospor vb TEXTO 
            {
              String RESULT =null;
		
              CUP$SintaxisPrincipal$result = parser.getSymbolFactory().newSymbol("VB",1, ((java_cup.runtime.Symbol)CUP$SintaxisPrincipal$stack.elementAt(CUP$SintaxisPrincipal$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisPrincipal$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrincipal$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // JV ::= dospor java TEXTO 
            {
              String RESULT =null;
		
              CUP$SintaxisPrincipal$result = parser.getSymbolFactory().newSymbol("JV",2, ((java_cup.runtime.Symbol)CUP$SintaxisPrincipal$stack.elementAt(CUP$SintaxisPrincipal$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisPrincipal$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrincipal$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // PY ::= dospor py TEXTO 
            {
              String RESULT =null;
		
              CUP$SintaxisPrincipal$result = parser.getSymbolFactory().newSymbol("PY",3, ((java_cup.runtime.Symbol)CUP$SintaxisPrincipal$stack.elementAt(CUP$SintaxisPrincipal$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisPrincipal$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrincipal$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // PROG ::= dospor prog TEXTO 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisPrincipal$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisPrincipal$stack.peek()).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$SintaxisPrincipal$stack.peek()).value;
		
              CUP$SintaxisPrincipal$result = parser.getSymbolFactory().newSymbol("PROG",4, ((java_cup.runtime.Symbol)CUP$SintaxisPrincipal$stack.elementAt(CUP$SintaxisPrincipal$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisPrincipal$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrincipal$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // ESP ::= ESP esp 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisPrincipal$stack.elementAt(CUP$SintaxisPrincipal$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisPrincipal$stack.elementAt(CUP$SintaxisPrincipal$top-1)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$SintaxisPrincipal$stack.elementAt(CUP$SintaxisPrincipal$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisPrincipal$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisPrincipal$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$SintaxisPrincipal$stack.peek()).value;
		RESULT = e1 + e2;
              CUP$SintaxisPrincipal$result = parser.getSymbolFactory().newSymbol("ESP",6, ((java_cup.runtime.Symbol)CUP$SintaxisPrincipal$stack.elementAt(CUP$SintaxisPrincipal$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxisPrincipal$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrincipal$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // ESP ::= esp 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisPrincipal$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisPrincipal$stack.peek()).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$SintaxisPrincipal$stack.peek()).value;
		RESULT = e1;
              CUP$SintaxisPrincipal$result = parser.getSymbolFactory().newSymbol("ESP",6, ((java_cup.runtime.Symbol)CUP$SintaxisPrincipal$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisPrincipal$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrincipal$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // TEXTO ::= TEXTO txt 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisPrincipal$stack.elementAt(CUP$SintaxisPrincipal$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisPrincipal$stack.elementAt(CUP$SintaxisPrincipal$top-1)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$SintaxisPrincipal$stack.elementAt(CUP$SintaxisPrincipal$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisPrincipal$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisPrincipal$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$SintaxisPrincipal$stack.peek()).value;
		RESULT = e1 + e2;
              CUP$SintaxisPrincipal$result = parser.getSymbolFactory().newSymbol("TEXTO",5, ((java_cup.runtime.Symbol)CUP$SintaxisPrincipal$stack.elementAt(CUP$SintaxisPrincipal$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxisPrincipal$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrincipal$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // TEXTO ::= TEXTO esp 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisPrincipal$stack.elementAt(CUP$SintaxisPrincipal$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisPrincipal$stack.elementAt(CUP$SintaxisPrincipal$top-1)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$SintaxisPrincipal$stack.elementAt(CUP$SintaxisPrincipal$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisPrincipal$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisPrincipal$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$SintaxisPrincipal$stack.peek()).value;
		RESULT = e1 + e2;
              CUP$SintaxisPrincipal$result = parser.getSymbolFactory().newSymbol("TEXTO",5, ((java_cup.runtime.Symbol)CUP$SintaxisPrincipal$stack.elementAt(CUP$SintaxisPrincipal$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxisPrincipal$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrincipal$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // TEXTO ::= txt 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisPrincipal$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisPrincipal$stack.peek()).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$SintaxisPrincipal$stack.peek()).value;
		RESULT = e1;
              CUP$SintaxisPrincipal$result = parser.getSymbolFactory().newSymbol("TEXTO",5, ((java_cup.runtime.Symbol)CUP$SintaxisPrincipal$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisPrincipal$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrincipal$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // TEXTO ::= esp 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisPrincipal$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisPrincipal$stack.peek()).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$SintaxisPrincipal$stack.peek()).value;
		RESULT = e1;
              CUP$SintaxisPrincipal$result = parser.getSymbolFactory().newSymbol("TEXTO",5, ((java_cup.runtime.Symbol)CUP$SintaxisPrincipal$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisPrincipal$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrincipal$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$SintaxisPrincipal$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$SintaxisPrincipal$do_action(
    int                        CUP$SintaxisPrincipal$act_num,
    java_cup.runtime.lr_parser CUP$SintaxisPrincipal$parser,
    java.util.Stack            CUP$SintaxisPrincipal$stack,
    int                        CUP$SintaxisPrincipal$top)
    throws java.lang.Exception
    {
              return CUP$SintaxisPrincipal$do_action_part00000000(
                               CUP$SintaxisPrincipal$act_num,
                               CUP$SintaxisPrincipal$parser,
                               CUP$SintaxisPrincipal$stack,
                               CUP$SintaxisPrincipal$top);
    }
}

}
