package com.mycompany.assofjpybasic.backend.analizador.visual;

import java_cup.runtime.*;
import com.mycompany.assofjpybasic.backend.semantica.visual.*;
import com.mycompany.assofjpybasic.backend.semantica.programa.*;
import com.mycompany.assofjpybasic.backend.semantica.python.*;
import com.mycompany.assofjpybasic.backend.semantica.programa.cod3.*;
import com.mycompany.assofjpybasic.backend.error.Errores;
import java.util.ArrayList;
import java.util.List;

class SintaxisVisual;

parser code
{:
    private Symbol s;
    private VisualSemantica sem = new VisualSemantica();
    private boolean error = false;
    private MetodoVisual actual;
    private Errores errores = new Errores();
    private int linea;

    public void setLinea(int line){
            this.linea = line;
    }

    public void syntax_error(Symbol sym){
            errores.errorSintactico(sym, this.linea);
    }

    public void unrecovered_syntax_error(Symbol sym) throws java.lang.Exception{
            errores.errorSintactico(sym, this.linea); 
    }

    public VisualSemantica getVisual(){
            return sem;
    }
    
    public void reportarSem(String texto){
            errores.errorSemantico(getS(), texto, this.linea);
    }
    
    public Symbol getS(){
        return this.cur_token;
    }
:};

terminal String espacio, subb, functionn, endd, publicc, dimm, ass, nott, andd;
terminal String orr, integerr, decimall, charr, iff, elseiff, elsee, thenn, selectt;
terminal String casee, forr, to, stepp, nextt, whilee, doo, loopp, igual, noigual, menor;
terminal String menorig, mayor, mayorig, mas, menos, por, div, mod, para, parc, coma;
terminal String id, decimal, entero, character, y, string;
terminal String write, writeln, charinput, floatinput, intinput, byval;
terminal String returnn;

non terminal VISUAL, STATESM, STATEM, SUB, FUNCTION;
non terminal ESP, BYVAL;
non terminal THEN, CA, PUBLIC;
non terminal List<VariableVisual> LISTPARAMM, LISTPARAM, LISTVAR;
non terminal String TYPE, TYPEE;
non terminal OperacionVisual EXPR, OPERACION_A, OPERACION_M, OPERACION_U, ATOM, DEF, INPUT, STEP, LLAMADA_METODO;
non terminal ListaTripletes STATEMENTS, STATEMENT, CONSOLEWRITE, STRING, CASEELSE, STATEMENTSF, ASIGVAR;
non terminal ListaTripletes ELSE, IF_ELSE, SELECT, STATEMENTLINE, WHILE, DO_WHILE, FOR, DEFVAR;
non terminal CondicionPrograma CONDICION, NOT, AND;
non terminal Triplete COMPARACION;
non terminal String ID;
non terminal List<OperacionVisual> LIST_CASE, LIST, LIST_PARAM;
non terminal CaseVisual CASES;
non terminal Else_Operator ELSE_IF;

start with VISUAL;

VISUAL ::= ESP STATESM {:sem.mostrarMetodos();:}
;

ESP ::= espacio
    |
;

PUBLIC ::= publicc
        |
;

STATESM ::= STATEM STATESM
        |
;

STATEM ::= SUB
        | FUNCTION
        | error STATEM {:sem.eliminarAmbito(VisualSemantica.AMBITO); VisualSemantica.AMBITO = 0;:}
;

SUB ::= PUBLIC subb id:e1 para LISTPARAMM:e2 parc espacio {:VisualSemantica.AMBITO += 1;
                                        MetodoVisual met = new MetodoVisual(e1, e2, VisualSemantica.VOID);
                                        actual = met;
                                        sem.addListVar(e2);
                                        if(!sem.addMetodo(met)){
                                                reportarSem("Metodo ya existente con id: <"+e1+"> con mismos parametros");}:}
                                        STATEMENTS:e3 endd subb espacio {:sem.eliminarAmbito(VisualSemantica.AMBITO);
                                        VisualSemantica.AMBITO -= 1;
                                        actual.getTripletes().addAll(e3); sem.setDireccion(0);:}
;

FUNCTION ::= PUBLIC functionn id:e1 para LISTPARAMM:e2 parc TYPE:e3 espacio {:VisualSemantica.AMBITO += 1;
                                        MetodoVisual met = new MetodoVisual(e1, e2, e3);
                                        actual = met; met.setVisual(new VariableVisual(e1, VisualSemantica.AMBITO, e3,
                                        new AsignarValor(new TerminalOperator(e1), null, e3)));
                                        VariableVisual var = new VariableVisual(e1, VisualSemantica.AMBITO, e3, new TerminalOperator(e1)); var.setDireccion(-1);
                                        sem.getVariables().add(var);
                                        if(!sem.addListVar(e2)){
                                                reportarSem("Un parametro tiene el mismo nombre del de la funci贸n con id: <"+e1+">");
                                        } if(!sem.addMetodo(met)){
                                                reportarSem("Metodo ya existente con id: <"+e1+"> con mismos parametros");}:}
                                        STATEMENTSF:e4 endd functionn espacio {:sem.eliminarAmbito(VisualSemantica.AMBITO);
                                        VisualSemantica.AMBITO -= 1;
                                        actual.getTripletes().addAll(e4); sem.setDireccion(0);:}
;

DEFVAR ::= dimm LISTVAR:e1 {:if(VisualSemantica.tienenTipos(e1)&&sem.addListVar(e1)){}
                                        else{reportarSem("Error con el tipado de variables");} 
                                        RESULT = new ListaTripletes(sem.devolverTrip(e1));:}
;

LISTPARAMM ::= LISTPARAM:e1 {:RESULT = e1;:}
            | {:RESULT = new ArrayList<>();:}
;

LISTPARAM ::= LISTPARAM:e1 coma BYVAL id:e2 TYPE:e3 {:e1.add(new VariableVisual(e2, (VisualSemantica.AMBITO + 1), e3, new TerminalOperator(e2)));
                                        RESULT = e1;:}
        | BYVAL id:e1 TYPE:e2 {:List<VariableVisual> var = new ArrayList<>();
                        var.add(new VariableVisual(e1, (VisualSemantica.AMBITO + 1), e2, new TerminalOperator(e1)));
                        RESULT = var;:}
        | LISTPARAM:e1 error BYVAL id TYPE {:reportarSem("Error con los parametros, se esperaba una coma"); RESULT = e1;:}
        | LISTPARAM:e1 coma BYVAL error TYPE {:reportarSem("Error con los parametros, se esperaba un id"); RESULT = e1;:}
;

BYVAL ::= byval 
        |
;

LISTVAR ::= LISTVAR:e1 coma id:e2 TYPEE:e3 DEF:e4 {:String tipo = VariableVisual.verificarTipo(e3, e4); VariableVisual va;
                        if(e4!=null){va = new VariableVisual(e2, VisualSemantica.AMBITO, tipo, 
                        new AsignarValor(new TerminalOperator(e2), e4.getTriplete(), OperacionVisual.obtenerTipo(e3)));
                        va.getTripletes().addAll(e4.mostrarTripletes());
                        }else{va = new VariableVisual(e2, VisualSemantica.AMBITO, tipo, 
                        new AsignarValor(new TerminalOperator(e2), null,OperacionVisual.obtenerTipo(e3)));}
                        va.setDefinido(e4 != null); va.setAstipo(e3 != null && e4 == null);
                        if(tipo == null && e3 != null && e4 != null){
                                reportarSem("No coincide el tipo con la asignaci贸n de la variable con id: " + e2);
                        } else if(e3 != null && e4 == null){
                                e1.add(va);
                                VisualSemantica.cambiarT(e1, e3);
                        } else {
                                e1.add(va);
                        } RESULT = e1;:}
        | id:e1 TYPEE:e2 DEF:e3 {:List<VariableVisual> vars = new ArrayList<>(); String tipo = VariableVisual.verificarTipo(e2, e3); VariableVisual va;
                        if(e3!=null){va = new VariableVisual(e1, VisualSemantica.AMBITO, tipo, 
                        new AsignarValor(new TerminalOperator(e1), e3.getTriplete(),OperacionVisual.obtenerTipo(e2)));
                        va.getTripletes().addAll(e3.mostrarTripletes());
                        }else{va = new VariableVisual(e1, VisualSemantica.AMBITO, tipo, 
                        new AsignarValor(new TerminalOperator(e1), null,OperacionVisual.obtenerTipo(e2)));}
                        va.setDefinido(e3 != null); va.setAstipo(e2 != null && e3 == null);
                        if(tipo == null && e2 != null && e3 != null){
                                reportarSem("No coincide el tipo con la asignaci贸n de la variable con id: " + e1);
                        } vars.add(va); RESULT = vars;:}
        | LISTVAR error id TYPEE DEF {:reportarSem("Error con la asignacion de variables, se esperaba una coma"); RESULT = new ArrayList<>();:}
;

ASIGVAR ::= id:e1 igual EXPR:e2 {:VariableVisual var = sem.existeVar(new VariableVisual(e1, VisualSemantica.AMBITO, null));
                                ListaTripletes trip = new ListaTripletes();
                                if(var==null || !var.getTipo().contains(e2.getTipo())){
                                reportarSem("No coincide el tipo con la asignaci贸n de la variable con id: " + e2);}
                                else{trip.addAll(e2.mostrarTripletes()); SumOperator sum = sem.devolverSum(e1);
                                trip.add(sum);
                                trip.add(new AsignarValor(sem.devolverDireccion(sum), e2.getTriplete(), null));}
                                RESULT = trip;:}
        | error igual EXPR {:reportarSem("Error en la asignacion de variable, se esperaba un id"); RESULT = new ListaTripletes();:}
        | id error EXPR {:reportarSem("Error en la asignacion de variable, se esperaba un igual"); RESULT = new ListaTripletes();:}
        | id igual error {:reportarSem("Error en la asignacion de variable, se esperaba una operacion"); RESULT = new ListaTripletes();:}
;

TYPE ::= ass integerr {:RESULT = VisualSemantica.INT;:}
        | ass charr {:RESULT = VisualSemantica.CHAR;:}
        | ass decimall {:RESULT = VisualSemantica.FLOAT;:}
;

TYPEE ::= ass integerr {:RESULT = VisualSemantica.INT;:}
        | ass charr {:RESULT = VisualSemantica.CHAR;:}
        | ass decimall {:RESULT = VisualSemantica.FLOAT;:}
        | {:RESULT = null;:}
;

DEF ::= igual EXPR:e1 {:RESULT = e1;:}
        | {:RESULT = null;:}
;

OPERACION_A ::= OPERACION_A:e1 mas OPERACION_M:e2 {:if(e1!=null && e2 !=null){RESULT = new OperacionVisual(e1, e2,
                        new SumOperator(null, e1.getTriplete(), e2.getTriplete(), OperacionVisual.obtenerTipo(e1, e2)));};:}
        | OPERACION_A:e1 menos OPERACION_M:e2 {:if(e1!=null && e2 !=null){RESULT = new OperacionVisual(e1, e2,
                        new RestOperator(null, e1.getTriplete(), e2.getTriplete(), OperacionVisual.obtenerTipo(e1, e2)));}:}
        | OPERACION_M:e1 {:RESULT = e1;:}
;

OPERACION_M ::= OPERACION_M:e1 por OPERACION_U:e2 {:if(e1!=null && e2 !=null){RESULT = new OperacionVisual(e1, e2,
                                new PorOperator(null, e1.getTriplete(), e2.getTriplete(), OperacionVisual.obtenerTipo(e1, e2)));}:}
        | OPERACION_M:e1 div OPERACION_U:e2 {:if(e1!=null && e2 !=null){RESULT = new OperacionVisual(e1, e2,
                                new DivOperator(null, e1.getTriplete(), e2.getTriplete(), OperacionVisual.obtenerTipo(e1, e2)));}:}
        | OPERACION_M:e1 mod OPERACION_U:e2 {:if(e1!=null && e2 !=null){RESULT = new OperacionVisual(e1, e2,
                                new ModOperator(null, e1.getTriplete(), e2.getTriplete(), OperacionVisual.obtenerTipo(e1, e2)));}:}
        | OPERACION_U:e1 {:RESULT = e1;:}
;

OPERACION_U ::= menos OPERACION_U:e1 {:RESULT = new OperacionVisual(new OperacionVisual(PythonSemantica.INT, new TerminalOperator("0")),
                        e1, new RestOperator(null, new TerminalOperator("0"), e1.getTriplete(), OperacionVisual.obtenerTipo(e1)));:}
        | mas OPERACION_U:e1 {:RESULT = e1;:}
        | ATOM:e1 {:RESULT = e1;:}
        | LLAMADA_METODO:e1 {:RESULT = e1;:}
;

ATOM ::= id:e1 {:VariableVisual var = sem.existeVar(new VariableVisual(e1, VisualSemantica.AMBITO, null)); 
                if(var==null){
                        reportarSem("No existe la variable con id: " + e1);
                } else {
                        SumOperator sum = sem.devolverSum(e1);
                        OperacionVisual op = new OperacionVisual(var.getTipo(), sem.devolverDireccion(sum));
                        op.getTripletes().add(sum);
                        RESULT = op;
                }:}
        | entero:e1 {:RESULT = new OperacionVisual(VisualSemantica.INT, new TerminalOperator(e1));:}
        | decimal:e1 {:RESULT = new OperacionVisual(VisualSemantica.FLOAT, new TerminalOperator(e1));:}
        | para OPERACION_A:e1 parc {:RESULT = e1;:}
;

STATEMENTS ::= STATEMENTS:e1 STATEMENT:e2 {:e1.addAll(e2); RESULT = e1;:}
        | {:RESULT = new ListaTripletes();:}
;

STATEMENTSF ::= STATEMENT:e1 STATEMENTSF:e2 {:if(e1.isRet() && e2.isRet()){
                                                        reportarSem("ya existe varios returns, algunos no se toman en cuenta");
                                                }else {e1.addAll(e2);} RESULT = e1;:}
        | returnn EXPR:e1 espacio {:ListaTripletes tri = new ListaTripletes();
                if(e1 == null || !actual.getTIPO().contains(e1.getTipo())){
                        reportarSem("No coincide el tipo del return con el tipo de la funci贸n con id: " + actual.getId());}
                else{
                        tri.setRet(true);
                        tri.addAll(e1.mostrarTripletes());
                        tri.add(new Return(e1.getTriplete()));}
                        RESULT = tri;:}
        | {:RESULT = new ListaTripletes();:}
;

EXPR ::= OPERACION_A:e1 {:RESULT = e1;:}
        | INPUT:e1 {:RESULT = e1;:}
        | character:e1 {:RESULT = new OperacionVisual(VisualSemantica.CHAR, new TerminalOperator("'"+e1+"'"));:}
;

STATEMENT ::= IF_ELSE:e1 {:RESULT = e1;:}
        | SELECT:e1 {:RESULT = e1;:}
        | FOR:e1 {:RESULT = e1;:}
        | WHILE:e1 {:RESULT = e1;:}
        | DO_WHILE:e1 {:RESULT = e1;:}
        | STATEMENTLINE:e1 espacio {:RESULT = e1;:}
        | error {:RESULT = new ListaTripletes();:}
;

IF_ELSE ::= iff CONDICION:e1 THEN espacio {:VisualSemantica.AMBITO += 1;:} STATEMENTS:e2
                {:sem.eliminarAmbito(VisualSemantica.AMBITO); VisualSemantica.AMBITO -= 1;:} ELSE_IF:e3 ELSE:e4 endd iff espacio 
                {:e3.agregarIf(e1, e2); RESULT = e3.juntarTripletes(e4);:}
        | iff CONDICION:e1 thenn {:VisualSemantica.AMBITO += 1;:} STATEMENTLINE:e2
                espacio {:sem.eliminarAmbito(VisualSemantica.AMBITO); VisualSemantica.AMBITO -= 1; 
                RESULT = Else_Operator.IFSIMPLE(e1, e2);:}
        | iff error THEN espacio {:reportarSem("Error en el if, se esperaba la condicion"); VisualSemantica.AMBITO += 1;:} STATEMENTS:e2
                {:sem.eliminarAmbito(VisualSemantica.AMBITO); VisualSemantica.AMBITO -= 1;:} ELSE_IF:e3 ELSE:e4 endd iff espacio 
                {:RESULT = new ListaTripletes();:}
        | iff CONDICION error {:reportarSem("Error en el if, se esperaba un salto de linea despues de la condicion"); VisualSemantica.AMBITO += 1;:} STATEMENTS:e2
                {:sem.eliminarAmbito(VisualSemantica.AMBITO); VisualSemantica.AMBITO -= 1;:} ELSE_IF:e3 ELSE:e4 endd iff espacio 
                {:RESULT = new ListaTripletes();:}
;

ELSE_IF ::= ELSE_IF:e1 elseiff CONDICION:e2 THEN espacio {:VisualSemantica.AMBITO += 1;:} STATEMENTS:e3
                {:sem.eliminarAmbito(VisualSemantica.AMBITO); VisualSemantica.AMBITO -= 1; RESULT = e1.agregarElseIf(e2, e3);:}
        | {:RESULT = new Else_Operator();:}
        | ELSE_IF:e1 elseiff error THEN espacio {:reportarSem("Error en el else if, se esperaba la condicion"); VisualSemantica.AMBITO += 1;:} STATEMENTS:e3
                {:sem.eliminarAmbito(VisualSemantica.AMBITO); VisualSemantica.AMBITO -= 1; RESULT = new Else_Operator();:}
        | ELSE_IF:e1 elseiff CONDICION THEN error {:reportarSem("Error en el else if, se esperaba un salto de linea despues del then"); VisualSemantica.AMBITO += 1;:} STATEMENTS:e3
                {:sem.eliminarAmbito(VisualSemantica.AMBITO); VisualSemantica.AMBITO -= 1; RESULT = new Else_Operator();:}
;

ELSE ::= elsee espacio {:VisualSemantica.AMBITO += 1;:} STATEMENTS:e1 
        {:sem.eliminarAmbito(VisualSemantica.AMBITO); VisualSemantica.AMBITO -= 1;
        RESULT = e1;:}
        | {:RESULT = new ListaTripletes();:}
;

THEN ::= thenn
        |
;

STATEMENTLINE ::= CONSOLEWRITE:e1 {:RESULT = e1;:}
        | INPUT:e1 {:AsignarValor vl = new AsignarValor(new AsignarTemporal(null, null, e1.getTipo()),null
                ,OperacionVisual.obtenerTipo(e1)); 
                ListaTripletes tri = new ListaTripletes(); tri.add(vl); 
                tri.add(new AsignarValor(vl.getOperando1(), e1.getTriplete(), null)); RESULT = tri;:}
        | DEFVAR:e1 {:RESULT = e1;:}
        | ASIGVAR:e1 {:RESULT = e1;:}
        | LLAMADA_METODO:e1 {:RESULT = new ListaTripletes(e1.getTripletes());:}
;

SELECT ::= selectt CA EXPR:e1 espacio CASES:e2 CASEELSE:e3 endd selectt espacio
                {:RESULT = e2.agregarDefault(e1, e3);:}
        | error espacio CASES CASEELSE endd selectt espacio {: reportarSem("Error en el select, no hay un inicio correcto");
        RESULT = new ListaTripletes();:}
;

CA ::= casee
        | 
;

CASEELSE ::= casee elsee espacio {:VisualSemantica.AMBITO += 1;:}
                STATEMENTS:e1 {:sem.eliminarAmbito(VisualSemantica.AMBITO); VisualSemantica.AMBITO -= 1; RESULT = e1;:}
        |
;

CASES ::= CASES:e1 casee LIST_CASE:e2 espacio {:VisualSemantica.AMBITO += 1;:}
                 STATEMENTS:e3 {:sem.eliminarAmbito(VisualSemantica.AMBITO); VisualSemantica.AMBITO -= 1; RESULT = e1.agregarCase(e2, e3);:}
        | {:RESULT = new CaseVisual();:}
;

LIST_CASE ::= LIST_CASE:e1 coma OPERACION_A:e2 {:e1.add(e2); RESULT = e1;:}
        | OPERACION_A:e1 {:List<OperacionVisual> op = new ArrayList<>(); op.add(e1); RESULT =op;:}
;

FOR ::= forr id:e1 TYPE:e2 igual OPERACION_A:e3 to OPERACION_A:e4 STEP:e5 espacio {:VisualSemantica.AMBITO += 1;
                VariableVisual vr = new VariableVisual(e1, VisualSemantica.AMBITO, null);
                if(sem.addVar(vr)){
                        
                }:}
                STATEMENTS:e6 nextt ID:e7 espacio 
                {:sem.eliminarAmbito(VisualSemantica.AMBITO); VisualSemantica.AMBITO -= 1;
                if(e7!=null && !e1.equals(e1)){
                        reportarSem("No coincide el id del for, con el next del mismo for, id1: " + e1 + "  id2: " + e7);}
                else{RESULT = Else_Operator.FORV(sem.obtenerDireccion(e1), e2, e3, e4, e5, e6);}:}
        | forr error TYPE igual OPERACION_A to OPERACION_A STEP espacio {:reportarSem("Error en el for, se esperaba el id de la variable for");
                VisualSemantica.AMBITO += 1;:}
        STATEMENTS nextt ID espacio {:sem.eliminarAmbito(VisualSemantica.AMBITO); VisualSemantica.AMBITO -= 1; RESULT = new ListaTripletes();:}
        | forr id TYPE error OPERACION_A to OPERACION_A STEP espacio {:reportarSem("Error en el for, se esperaba el igual despues del tipado");
                VisualSemantica.AMBITO += 1;:}
        STATEMENTS nextt ID espacio {:sem.eliminarAmbito(VisualSemantica.AMBITO); VisualSemantica.AMBITO -= 1; RESULT = new ListaTripletes();:}
        | forr id TYPE igual error to OPERACION_A STEP espacio {:reportarSem("Error en el for, se esperaba la operaci贸n de inicio");
                VisualSemantica.AMBITO += 1;:}
        STATEMENTS nextt ID espacio {:sem.eliminarAmbito(VisualSemantica.AMBITO); VisualSemantica.AMBITO -= 1; RESULT = new ListaTripletes();:}
        | forr id TYPE igual OPERACION_A to error STEP espacio {:reportarSem("Error en el for, se esperaba la operaci贸n del final");
                VisualSemantica.AMBITO += 1;:}
        STATEMENTS nextt ID espacio {:sem.eliminarAmbito(VisualSemantica.AMBITO); VisualSemantica.AMBITO -= 1; RESULT = new ListaTripletes();:}
        | forr id TYPE igual OPERACION_A error OPERACION_A STEP espacio {:reportarSem("Error en el for, se esperaba el simbolo to, entre operaciones");
                VisualSemantica.AMBITO += 1;:}
        STATEMENTS nextt ID espacio {:sem.eliminarAmbito(VisualSemantica.AMBITO); VisualSemantica.AMBITO -= 1; RESULT = new ListaTripletes();:}
        | forr id TYPE igual OPERACION_A to OPERACION_A error espacio {:reportarSem("Error en el for, se esperaba la operaci贸n del paso (STEP)");
                VisualSemantica.AMBITO += 1;:}
        STATEMENTS nextt ID espacio {:sem.eliminarAmbito(VisualSemantica.AMBITO); VisualSemantica.AMBITO -= 1; RESULT = new ListaTripletes();:}
;

ID ::= id:e1 {:RESULT = e1;:}
    | {:RESULT = null;:}
;

STEP ::= stepp OPERACION_A:e1 {:RESULT = e1;:}
;

WHILE ::= whilee CONDICION:e1 espacio {:VisualSemantica.AMBITO += 1;:} STATEMENTS:e2 endd whilee espacio
         {:sem.eliminarAmbito(VisualSemantica.AMBITO); VisualSemantica.AMBITO -= 1; RESULT = Else_Operator.WHILE(e1, e2);:}
        | whilee error espacio {:reportarSem("Se esperaba la condicion del while"); VisualSemantica.AMBITO += 1;:} STATEMENTS:e2 endd whilee espacio
         {:sem.eliminarAmbito(VisualSemantica.AMBITO); VisualSemantica.AMBITO -= 1; RESULT = new ListaTripletes();:}
        | whilee CONDICION error {:reportarSem("Se esperaba un salto de linea, despues de la condicion del while"); VisualSemantica.AMBITO += 1;:} STATEMENTS:e2 endd whilee espacio
         {:sem.eliminarAmbito(VisualSemantica.AMBITO); VisualSemantica.AMBITO -= 1; RESULT = new ListaTripletes();:}
;

DO_WHILE ::= doo whilee CONDICION:e1 espacio {:VisualSemantica.AMBITO += 1;:} 
                STATEMENTS:e2 loopp espacio 
        {:sem.eliminarAmbito(VisualSemantica.AMBITO); VisualSemantica.AMBITO -= 1; RESULT = Else_Operator.DOWHILE(e1, e2);:}
        | doo espacio {:VisualSemantica.AMBITO += 1;:} 
                STATEMENTS:e2 loopp whilee CONDICION:e1 espacio
        {:sem.eliminarAmbito(VisualSemantica.AMBITO); VisualSemantica.AMBITO -= 1; RESULT = Else_Operator.DOWHILE(e1, e2);:}
        | doo error {:reportarSem("Error en el do while, se espera un salto de linea despues del do"); VisualSemantica.AMBITO += 1;:} 
                STATEMENTS:e2 loopp whilee CONDICION:e1 espacio
        {:sem.eliminarAmbito(VisualSemantica.AMBITO); VisualSemantica.AMBITO -= 1; RESULT = new ListaTripletes();:}
;

CONSOLEWRITE ::= write para STRING:e1 parc {:RESULT = e1;:}
        | writeln para STRING:e1 parc {:e1.add(new Printf("\\n")); RESULT = e1;:}
        | write error STRING parc {:reportarSem("Error en el write, se esperaba un ( antes del valor"); RESULT = new ListaTripletes();:}
        | write para error parc {:reportarSem("Error en el write, se esperaba un valor dentro de los ()"); RESULT = new ListaTripletes();:}
        | write para STRING error {:reportarSem("Error en el write, se esperaba un ) despues del valor"); RESULT = new ListaTripletes();:}
        | writeln error STRING parc {:reportarSem("Error en el write, se esperaba un ( antes del valor"); RESULT = new ListaTripletes();:}
        | writeln para error parc {:reportarSem("Error en el write, se esperaba un valor dentro de los ()"); RESULT = new ListaTripletes();:}
        | writeln para STRING error {:reportarSem("Error en el write, se esperaba un ) despues del valor"); RESULT = new ListaTripletes();:}
;

INPUT ::= charinput para string:e1 parc {:OperacionVisual op = new OperacionVisual(VisualSemantica.CHAR,
                                new Input("%d"));
                                op.getTripletes().add(new Printf(e1));
                                RESULT = op;:}
        | floatinput para string:e1 parc {:OperacionVisual op = new OperacionVisual(VisualSemantica.FLOAT,
                                new Input("%c"));
                                op.getTripletes().add(new Printf(e1));
                                RESULT = op;:}
        | intinput para string:e1 parc {:OperacionVisual op = new OperacionVisual(VisualSemantica.INT,
                                new Input("%f"));
                                op.getTripletes().add(new Printf(e1));
                                RESULT = op;:}
        | charinput error string parc {:reportarSem("error en el charinput, se esperaba un parentesis antes del string");:}
        | charinput para error parc {:reportarSem("error en el charinput, se esperaba un string entre los parentesis");:}
        | charinput para string error {:reportarSem("error en el charinput, se esperaba un parentesis despues del string");:}
        | floatinput error string parc {:reportarSem("error en el floatinput, se esperaba un parentesis antes del string");:}
        | floatinput para error parc {:reportarSem("error en el floatinput, se esperaba un string entre los parentesis");:}
        | floatinput para string error {:reportarSem("error en el floatinput, se esperaba un parentesis despues del string");:}
        | intinput error string parc {:reportarSem("error en el intinput, se esperaba un parentesis antes del string");:}
        | intinput para error parc {:reportarSem("error en el intinput, se esperaba un string entre los parentesis");:}
        | intinput para string error {:reportarSem("error en el intinput, se esperaba un parentesis despues del string");:}
;

CONDICION ::= CONDICION:e1 orr AND:e2 {:RESULT = IfPrograma.OR(e1, e2);:}
        | AND:e1 {:RESULT = e1;:}
        | error AND:e1 {:RESULT = e1;:}
;

AND ::= AND:e1 andd NOT:e2 {:RESULT = IfPrograma.AND(e1, e2);:}
        | NOT:e1 {:RESULT = e1;:}
;

NOT ::= nott NOT:e1 {:RESULT = IfPrograma.NOT(e1);:}
    | COMPARACION:e1 {:RESULT = new IfPrograma(new If_Operator(e1, new Etiqueta()), ((CondicionalOperator)e1).getTripletes());:}
    | para CONDICION:e1 parc {:RESULT = e1;:}
;

COMPARACION ::= OPERACION_A:e1 igual OPERACION_A:e2 {:RESULT = new IgualOperator(e1.getTriplete(), e2.getTriplete(),
                e1.getTripletes(), e2.getTripletes());:}
    | OPERACION_A:e1 noigual OPERACION_A:e2 {:RESULT = new NoIgualOperator(e1.getTriplete(), e2.getTriplete(),
                e1.getTripletes(), e2.getTripletes());:}
    | OPERACION_A:e1 menor OPERACION_A:e2 {:RESULT = new MenorOperator(e1.getTriplete(), e2.getTriplete(),
                e1.getTripletes(), e2.getTripletes());:}
    | OPERACION_A:e1 menorig OPERACION_A:e2 {:RESULT = new MenorIgOperator(e1.getTriplete(), e2.getTriplete(),
                e1.getTripletes(), e2.getTripletes());:}
    | OPERACION_A:e1 mayor OPERACION_A:e2 {:RESULT = new MayorOperator(e1.getTriplete(), e2.getTriplete(),
                e1.getTripletes(), e2.getTripletes());:}
    | OPERACION_A:e1 mayorig OPERACION_A:e2 {:RESULT = new MayorIgOperator(e1.getTriplete(), e2.getTriplete(),
                e1.getTripletes(), e2.getTripletes());:}
;

STRING ::= STRING:e1 y EXPR:e2 {:e1.addAll(e2.getTripletes()); e1.add(new Printf(Input.tipoVisual(e2), e2.getTriplete(), Input.tipoVisualf(e2))); RESULT = e1;:}
        | STRING:e1 y string:e2 {:e1.add(new Printf(e2)); RESULT = e1;:}
        | EXPR:e1 {:ListaTripletes tri = new ListaTripletes(); tri.addAll(e1.getTripletes());
                tri.add(new Printf(Input.tipoVisual(e1), e1.getTriplete(), Input.tipoVisualf(e1)));
                RESULT = tri;:}
        | string:e1 {:ListaTripletes tri = new ListaTripletes(); tri.add(new Printf(e1));
                RESULT = tri;:}
;

LLAMADA_METODO ::= id:e1 para LIST_PARAM:e2 parc {:MetodoVisual met = sem.existeMetodo(e1, e2);
                        if(met == null){
                                reportarSem("Metodo de Visual no existente con id: <" + e1 + ">");
                        }else {
                                List<Triplete> tri = new ArrayList<>();
                                tri.addAll(met.verMetodo(sem.getVariables().size(), e2));
                                SumOperator s = new SumOperator(null, new P(), new TerminalOperator(""+sem.getVariables().size()),"int");
                                tri.add(s);
                                OperacionVisual op = new OperacionVisual(met.getTIPO(), new Stack(s));
                                op.getTripletes().addAll(tri);
                                RESULT = op;
                        }:}
                | id para LIST_PARAM error {:reportarSem("Error en la llamada de metodo, se esperaba un parentesis despues de los parametros");:}
;

LIST_PARAM ::= LIST:e1 {:RESULT = e1;:}
        | {:RESULT = new ArrayList<>();:}
;

LIST ::= LIST_PARAM:e1 coma OPERACION_A:e2 {:e1.add(e2); RESULT = e1;:}
        | OPERACION_A:e1 {:List<OperacionVisual> params = new ArrayList<>(); params.add(e1); RESULT = params;:}
;