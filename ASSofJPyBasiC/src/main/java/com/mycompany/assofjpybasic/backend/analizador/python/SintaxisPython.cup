package com.mycompany.assofjpybasic.backend.analizador.python;

import java_cup.runtime.*;
import com.mycompany.assofjpybasic.backend.semantica.python.*;
import com.mycompany.assofjpybasic.backend.semantica.programa.*;
import com.mycompany.assofjpybasic.backend.semantica.programa.cod3.*;
import java.util.ArrayList;
import java.util.List;

class SintaxisPython;

parser code
{:
    private Symbol s;
    private PythonSemantica sem = new PythonSemantica();
    private MetodoPython actual;
    
    public void syntax_error(Symbol sym){
        System.out.println("\n" + sym.value + sym.sym);
        System.out.println("Error Sintactico en la letra: " + sym.value + "   <linea>: "  + (sym.right + 1) + "    <columna>: " + (sym.left + 1) + "\n");
    }

    public void unrecovered_syntax_error(Symbol sym) throws java.lang.Exception{
        System.out.println("\n" + sym.value + sym.sym);
        System.out.println("Error Sintactico en la letra: " + sym.value + "   <linea>: "  + (sym.right + 1) + "    <columna>: " + (sym.left + 1) + "\n");
    }

    public PythonSemantica getPython(){
            return sem;
    }

    public Symbol getS(){
        return this.cur_token;
    }
:};

terminal String deff, nott, andd, orr, iff, elseiff, elsee, forr, inn, range, whilee;
terminal String noigual, menor, menorig, mayor, mayorig, igig, mas, menos, por, div;
terminal String mod, floor, para, parc, coma, dosp, print, charinput, intinput, floatinput;
terminal String igual, puntocoma, returnn;
terminal String com, id, entero, decimal, character, string, indent, dedent, newline;

non terminal PYTHON, ESP, DEFS, PC;
non terminal COMA;
non terminal RETURN;
non terminal CondicionPrograma NOT, AND, CONDICION;
non terminal Triplete COMPARACION;
non terminal DEF;
non terminal List<VariablePython> LISTVAR, PAR_LIST;
non terminal List<OperacionPython> LISTDEF, RANGE;
non terminal OperacionPython INPUT, OPERACION_A, D, OPERACION_M, OPERACION_U, ATOM;
non terminal List<Triplete> SUITE, STATEMENTS, STATEMENTLINE, STATEMENT, STMT_LIST, IF, FOR, WHILE, ELSE;
non terminal List<Triplete> STRING, WRITE, AS_VAR;
non terminal Else_Operator ELSEIF;

start with PYTHON;

PYTHON ::= ESP DEFS {:for(MetodoPython me : sem.getMetodos()) {System.out.println(me.getId() + " METODO\n");
                        for(Triplete trip : me.getTrip()){
                                System.out.println(trip.devolverString());
                        }}:}
        | ESP
;

ESP ::= newline
    |
;

DEFS ::= DEFS DEF
        | DEF 
;

DEF ::= deff id:e1 para PAR_LIST:e2 parc dosp {:MetodoPython met = new MetodoPython(e1, e2);
                                actual = met;
                                sem.addVar(e2);
                                if(!sem.addMetodo(met)){
                                        syntax_error(getS());
                                }:} SUITE:e3 {:if(actual.getTIPO() == null){
                                        actual.setTIPO(PythonSemantica.VOID);
                                } actual.getTrip().addAll(e3);:}
        | deff id:e1 para parc dosp {:MetodoPython met = new MetodoPython(e1, new ArrayList<>());
                                actual = met;
                                if(!sem.addMetodo(met)){
                                        syntax_error(getS());
                                }:} SUITE:e2 {:if(actual.getTIPO() == null){
                                        actual.setTIPO(PythonSemantica.VOID);
                                } actual.getTrip().addAll(e2);:}
;

PAR_LIST ::= PAR_LIST:e1 coma id:e2 {:e1.add(new VariablePython(e2, 1)); RESULT = e1;:}
        | id:e1 {:List<VariablePython> var = new ArrayList<>(); var.add(new VariablePython(e1, 1)); RESULT = var;:}
;

SUITE ::=  {:PythonSemantica.AMBITO += 1;:} STMT_LIST:e1 newline  {:sem.eliminarAmbito(PythonSemantica.AMBITO);
                                                PythonSemantica.AMBITO -= 1;
                                                RESULT = e1;:}
        |  {:PythonSemantica.AMBITO += 1;:} newline indent STATEMENTS:e1 dedent  {:sem.eliminarAmbito(PythonSemantica.AMBITO);
                                                PythonSemantica.AMBITO -= 1;
                                                RESULT = e1;:}
;

STMT_LIST ::= STATEMENTLINE:e1 puntocoma STMT_LIST:e2 {:e1.addAll(e2); RESULT = e1;:}
        | STATEMENTLINE:e1 PC {:RESULT = e1;:}
;

PC ::= puntocoma
        |
;

STATEMENTLINE ::= AS_VAR:e1 {:RESULT = e1;:}
        | WRITE:e1 {:RESULT = e1;:}
        | INPUT:e1 {:AsignarValor vl = new AsignarValor(new AsignarTemporal(null, null, e1.getTipo()),null
                ,OperacionPython.obtenerTipo(e1));
                List<Triplete> tri = new ArrayList<>(); tri.add(vl); 
                tri.add(new AsignarValor(vl.getOperando1(), e1.getTriplete(), null)); RESULT = tri;:}
        | returnn D:e1 {:List<Triplete> tri = new ArrayList<>();
        if(actual.getTIPO() == null || actual.getTIPO().equals(PythonSemantica.VAR)){
                actual.setTIPO(e1.getTipo()); tri.addAll(e1.mostrarTripletes());
                tri.add(new Return(e1.getTriplete()));
        } else if(!actual.getTIPO().contains(e1.getTipo())){
                syntax_error(getS());
        } else {
                actual.setTIPO(e1.getTipo()); tri.addAll(e1.mostrarTripletes());
                tri.add(new Return(e1.getTriplete()));
        } RESULT = tri;:}
;

AS_VAR ::= LISTVAR:e1 coma igual LISTDEF:e2 coma {:if(!sem.addVar(e1, e2)){syntax_error(getS()); RESULT  = new ArrayList<>();} 
        else{RESULT = PythonSemantica.devolverAsig(e1, e2);}:}
        | LISTVAR:e1 igual LISTDEF:e2 {:if(!sem.addVar(e1, e2)){syntax_error(getS()); RESULT  = new ArrayList<>();} 
        else{RESULT = PythonSemantica.devolverAsig(e1, e2);}:}
;

LISTVAR ::= LISTVAR:e1 coma id:e2 {:e1.add(new VariablePython(e2, PythonSemantica.AMBITO)); RESULT = e1;:}
        | id:e1 {:List<VariablePython> var = new ArrayList<>();
                var.add(new VariablePython(e1, PythonSemantica.AMBITO)); RESULT = var;:}
;

LISTDEF ::= LISTDEF:e1 coma D:e2 {:e1.add(e2); RESULT = e1;:}
        | D:e1 {:List<OperacionPython> op = new ArrayList<>(); op.add(e1); RESULT = op;:}
;

D ::= character:e1 {:RESULT = new OperacionPython(PythonSemantica.CHAR, new TerminalOperator(e1));:}
    | OPERACION_A:e1 {:RESULT = e1;:}
    | INPUT:e1 {:RESULT = e1;:}
;

WRITE ::= print para STRING:e1 parc {:e1.add(new Printf("\n")); RESULT = e1;:}
;

INPUT ::= intinput para string:e1 parc {:OperacionPython op = new OperacionPython(PythonSemantica.INT,
                                new Input("%d"));
                                op.getTripletes().add(new Printf(e1));
                                RESULT = op;:}
        | charinput para string:e1 parc {:OperacionPython op = new OperacionPython(PythonSemantica.CHAR,
                                new Input("%c"));
                                op.getTripletes().add(new Printf(e1));
                                RESULT = op;:}
        | floatinput para string:e1 parc {:OperacionPython op = new OperacionPython(PythonSemantica.FLOAT,
                                new Input("%f"));
                                op.getTripletes().add(new Printf(e1));
                                RESULT = op;:}
;

STATEMENTS ::= STATEMENT:e1 STATEMENTS:e2 {:e1.addAll(e2); RESULT = e1;:}
        | STATEMENT:e1 {:RESULT = e1;:}
;

STATEMENT ::= IF:e1 {:RESULT = e1;:}
        | FOR:e1 {:RESULT = e1;:}
        | WHILE:e1 {:RESULT = e1;:}
        | STMT_LIST:e1 newline {:RESULT = e1;:}
;

IF ::= iff CONDICION:e1 dosp SUITE:e2 ELSEIF:e3 ELSE:e4 {:e3.agregarIf(e1, e2); RESULT = e3.juntarTripletes(e4);:}
;

ELSEIF ::= ELSEIF:e1 elseiff CONDICION:e2 dosp SUITE:e3 {:RESULT = e1.agregarElseIf(e2, e3);:}
        | {:RESULT = new Else_Operator();:}
;

ELSE ::= elsee dosp SUITE:e1 {:RESULT = e1;:}
        | {:RESULT = new ArrayList<>();:}
;

WHILE ::= whilee CONDICION:e1 dosp SUITE:e2 {:RESULT = Else_Operator.WHILE(e1, e2);:}
;

COMA ::= coma
        |
;

FOR ::= forr id:e1 COMA inn RANGE:e2 dosp SUITE:e3 {:RESULT = Else_Operator.FORP(e1, e2, e3);:}
;

RANGE ::= range para OPERACION_A:e1 parc {:List<OperacionPython> op = new ArrayList<>();
                        op.add(e1); RESULT = op;:}
        | range para OPERACION_A:e1 coma OPERACION_A:e2 parc {:List<OperacionPython> op = new ArrayList<>();
                        op.add(e1); op.add(e2); RESULT = op;:}
        | range para OPERACION_A:e1 coma OPERACION_A:e2 coma OPERACION_A:e3 parc {:List<OperacionPython> op = new ArrayList<>();
                        op.add(e1); op.add(e2); op.add(e3); RESULT = op;:}
;

OPERACION_A ::= OPERACION_A:e1 mas OPERACION_M:e2 {:RESULT = new OperacionPython(e1, e2,
                        new SumOperator(null, e1.getTriplete(), e2.getTriplete(), OperacionPython.obtenerTipo(e1, e2)));:}
        | OPERACION_M:e1 menos OPERACION_M:e2 {:RESULT = new OperacionPython(e1, e2,
                        new RestOperator(null, e1.getTriplete(), e2.getTriplete(), OperacionPython.obtenerTipo(e1, e2)));:}
        | OPERACION_M:e1 {:RESULT = e1;:}
;

OPERACION_M ::= OPERACION_M:e1 por OPERACION_U:e2 {:RESULT = new OperacionPython(e1, e2,
                        new PorOperator(null, e1.getTriplete(), e2.getTriplete(), OperacionPython.obtenerTipo(e1, e2)));:}
        | OPERACION_M:e1 div OPERACION_U:e2 {:RESULT = new OperacionPython(e1, e2,
                        new DivOperator(null, e1.getTriplete(), e2.getTriplete(), OperacionPython.obtenerTipo(e1, e2)));:}
        | OPERACION_M:e1 mod OPERACION_U:e2 {:RESULT = new OperacionPython(e1, e2,
                        new ModOperator(null, e1.getTriplete(), e2.getTriplete(), OperacionPython.obtenerTipo(e1, e2)));:}
        | OPERACION_U:e1 {:RESULT = e1;:}
;

OPERACION_U ::= menos OPERACION_U:e1 {:RESULT = new OperacionPython(new OperacionPython(PythonSemantica.INT, new TerminalOperator("0")),
                        e1, new RestOperator(null, new TerminalOperator("0"), e1.getTriplete(), OperacionPython.obtenerTipo(e1)));:}
        | mas OPERACION_U:e1 {:RESULT  = e1;:}
        | ATOM:e1 {:RESULT = e1;:}
;

ATOM ::= id:e1 {:VariablePython tipo = sem.existeVar(new VariablePython(e1, PythonSemantica.AMBITO));
                if(tipo==null){syntax_error(getS());} else {RESULT = new OperacionPython(tipo.getTipo(),
                 new TerminalOperator(e1));}:}
        | entero:e1 {:RESULT = new OperacionPython(PythonSemantica.INT, new TerminalOperator(e1));:}
        | decimal:e1 {:RESULT  = new OperacionPython(PythonSemantica.FLOAT, new TerminalOperator(e1));:}
        | para OPERACION_A:e1 parc {:RESULT = e1;:}
;

CONDICION ::= CONDICION:e1 orr AND:e2 {:RESULT = IfPrograma.OR(e1, e2);:}
        | AND:e1 {:RESULT = e1;:}
;

AND ::= AND:e1 andd NOT:e2 {:RESULT = IfPrograma.AND(e1, e2);:}
        | NOT:e1 {:RESULT = e1;:}
;

NOT ::= nott NOT:e1 {:RESULT = IfPrograma.NOT(e1);:}
    | COMPARACION:e1 {:RESULT = new IfPrograma(new If_Operator(e1, new Etiqueta()), ((CondicionalOperator)e1).getTripletes());:}
    | para CONDICION:e1 parc {:RESULT = e1;:}
;

COMPARACION ::= OPERACION_A:e1 igig OPERACION_A:e2 {:RESULT = new IgualOperator(e1.getTriplete(), e2.getTriplete(),
                e1.getTripletes(), e2.getTripletes());:}
    | OPERACION_A:e1 noigual OPERACION_A:e2 {:RESULT = new NoIgualOperator(e1.getTriplete(), e2.getTriplete(),
                e1.getTripletes(), e2.getTripletes());:}
    | OPERACION_A:e1 menor OPERACION_A:e2 {:RESULT = new MenorOperator(e1.getTriplete(), e2.getTriplete(),
                e1.getTripletes(), e2.getTripletes());:}
    | OPERACION_A:e1 menorig OPERACION_A:e2 {:RESULT = new MenorIgOperator(e1.getTriplete(), e2.getTriplete(),
                e1.getTripletes(), e2.getTripletes());:}
    | OPERACION_A:e1 mayor OPERACION_A:e2 {:RESULT = new MayorOperator(e1.getTriplete(), e2.getTriplete(),
                e1.getTripletes(), e2.getTripletes());:}
    | OPERACION_A:e1 mayorig OPERACION_A:e2 {:RESULT = new MayorIgOperator(e1.getTriplete(), e2.getTriplete(),
                e1.getTripletes(), e2.getTripletes());:}
;

STRING ::= STRING:e1 coma D:e2 {:e1.addAll(e2.getTripletes()); e1.add(new Printf(Input.tipoPython(e2), e2.getTriplete())); RESULT = e1;:}
        | STRING:e1 coma string:e2 {:e1.add(new Printf(e2)); RESULT = e1;:}
        | D:e1 {:List<Triplete> tri = new ArrayList<>(); tri.addAll(e1.getTripletes());
                tri.add(new Printf(Input.tipoPython(e1), e1.getTriplete()));
                RESULT = tri;:}
        | string:e1 {:List<Triplete> tri = new ArrayList<>(); tri.add(new Printf(e1));
                RESULT = tri;:}
;