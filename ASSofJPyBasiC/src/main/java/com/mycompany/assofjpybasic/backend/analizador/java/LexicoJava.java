/* The following code was generated by JFlex 1.4.3 on 14/10/20 15:14 */

package com.mycompany.assofjpybasic.backend.analizador.java;

import java_cup.runtime.*;
import java.util.ArrayList;
import java.util.List;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 14/10/20 15:14 from the specification file
 * <tt>LexicoJava.flex</tt>
 */
public class LexicoJava implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int STRING = 2;
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1, 1
  };

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = {
     0,  0,  0,  0,  0,  0,  0,  0,  0,  1, 46,  0,  1,  1,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     1, 24, 49,  0,  0, 34, 22, 48, 35, 36, 32, 30, 39, 31, 41, 33, 
     4,  3,  3,  3,  3,  3,  3,  3,  3,  3, 42, 40, 28, 27, 29,  0, 
     0,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2, 
     2,  2,  2, 43,  2,  2,  2,  2,  2,  2,  2,  0,  0,  0,  0, 47, 
     0, 11,  7, 10, 15, 19, 21,  2, 17,  9,  2, 26,  8, 45, 20, 14, 
     5,  2, 18, 12, 16,  6, 13, 25,  2, 44,  2, 37, 23, 38,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0
  };

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\2\0\1\1\1\2\1\3\2\4\13\3\1\1\1\2"+
    "\1\5\1\3\1\6\1\7\1\10\1\11\1\12\1\13"+
    "\1\14\1\15\1\16\1\17\1\20\1\21\1\22\1\23"+
    "\1\24\1\25\1\3\2\1\1\0\3\3\1\26\5\3"+
    "\1\27\6\3\1\30\1\31\1\32\1\3\1\33\1\34"+
    "\1\35\1\36\1\37\2\0\1\3\2\0\1\40\1\41"+
    "\2\3\1\42\12\3\1\43\1\3\1\0\1\44\1\3"+
    "\1\45\4\3\1\46\1\47\1\3\1\50\1\3\1\51"+
    "\1\3\1\52\2\3\1\44\2\3\1\53\1\3\1\54"+
    "\4\3\1\55\1\56\1\3\1\57\2\3\1\60\1\3"+
    "\1\61\4\3\1\62\1\3\1\0\1\63\2\3\1\0"+
    "\1\64\1\3\1\0\1\65\6\0\1\66\1\0\1\67";

  private static int [] zzUnpackAction() {
    int [] result = new int[150];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\62\0\144\0\62\0\226\0\310\0\372\0\u012c"+
    "\0\u015e\0\u0190\0\u01c2\0\u01f4\0\u0226\0\u0258\0\u028a\0\u02bc"+
    "\0\u02ee\0\u0320\0\u0352\0\u0384\0\u03b6\0\u03e8\0\u041a\0\u044c"+
    "\0\u047e\0\u04b0\0\u04e2\0\144\0\u0514\0\144\0\144\0\144"+
    "\0\144\0\144\0\144\0\144\0\144\0\144\0\u0546\0\u0578"+
    "\0\u05aa\0\u05dc\0\u060e\0\u0640\0\u0672\0\226\0\u06a4\0\u06d6"+
    "\0\u0708\0\u073a\0\u076c\0\226\0\u079e\0\u07d0\0\u0802\0\u0834"+
    "\0\u0866\0\u0898\0\144\0\62\0\144\0\u08ca\0\144\0\144"+
    "\0\144\0\144\0\144\0\u08fc\0\u092e\0\u0960\0\u0992\0\u05aa"+
    "\0\u05aa\0\u05dc\0\u09c4\0\u09f6\0\u0a28\0\u0a5a\0\u0a8c\0\u0abe"+
    "\0\u0af0\0\u0b22\0\u0b54\0\u0b86\0\u0bb8\0\u0bea\0\u0c1c\0\226"+
    "\0\u0c4e\0\u0c80\0\144\0\u0cb2\0\144\0\u0ce4\0\u0d16\0\u0d48"+
    "\0\u0d7a\0\226\0\u0dac\0\u0dde\0\226\0\u0e10\0\226\0\u0e42"+
    "\0\226\0\u0e74\0\u0ea6\0\u08fc\0\u0ed8\0\u0f0a\0\226\0\u0f3c"+
    "\0\226\0\u0f6e\0\u0fa0\0\u0fd2\0\u1004\0\u1036\0\226\0\u1068"+
    "\0\226\0\u109a\0\u10cc\0\226\0\u10fe\0\226\0\u1130\0\u1162"+
    "\0\u1194\0\u11c6\0\226\0\u11f8\0\u122a\0\226\0\u125c\0\u128e"+
    "\0\u12c0\0\226\0\u12f2\0\u1324\0\226\0\u1356\0\u1388\0\u13ba"+
    "\0\u13ec\0\u141e\0\u1450\0\u1482\0\u14b4\0\144";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[150];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\3\1\4\1\5\1\6\1\7\1\10\1\5\1\11"+
    "\1\5\1\12\1\13\1\5\1\14\1\15\1\5\1\16"+
    "\1\17\1\5\1\20\1\21\1\5\1\22\1\23\1\24"+
    "\1\25\1\26\1\5\1\27\1\30\1\31\1\32\1\33"+
    "\1\34\1\35\1\36\1\37\1\40\1\41\1\42\1\43"+
    "\1\44\1\45\1\46\1\47\2\5\1\4\1\3\1\50"+
    "\1\51\1\0\1\4\25\0\1\4\26\0\1\4\67\0"+
    "\24\5\3\0\2\5\20\0\3\5\1\0\1\5\5\0"+
    "\2\6\44\0\1\52\61\0\1\52\12\0\4\5\1\53"+
    "\17\5\3\0\2\5\20\0\3\5\1\0\1\5\4\0"+
    "\20\5\1\54\3\5\3\0\2\5\20\0\3\5\1\0"+
    "\1\5\4\0\22\5\1\55\1\56\3\0\2\5\20\0"+
    "\3\5\1\0\1\5\4\0\6\5\1\57\2\5\1\60"+
    "\5\5\1\61\4\5\3\0\2\5\20\0\3\5\1\0"+
    "\1\5\4\0\24\5\3\0\1\62\1\5\20\0\3\5"+
    "\1\0\1\5\4\0\14\5\1\63\7\5\3\0\2\5"+
    "\20\0\3\5\1\0\1\5\4\0\14\5\1\64\4\5"+
    "\1\65\2\5\3\0\2\5\20\0\3\5\1\0\1\5"+
    "\4\0\17\5\1\66\4\5\3\0\2\5\20\0\3\5"+
    "\1\0\1\5\4\0\21\5\1\67\2\5\3\0\2\5"+
    "\20\0\3\5\1\0\1\5\4\0\6\5\1\70\15\5"+
    "\3\0\2\5\20\0\3\5\1\0\1\5\4\0\6\5"+
    "\1\71\5\5\1\72\7\5\3\0\2\5\20\0\3\5"+
    "\1\0\1\5\30\0\1\73\34\0\1\4\25\0\1\74"+
    "\26\0\1\4\36\0\1\75\30\0\17\5\1\76\4\5"+
    "\3\0\2\5\20\0\3\5\1\0\1\5\35\0\1\77"+
    "\61\0\1\100\61\0\1\101\64\0\1\102\62\0\1\103"+
    "\62\0\1\104\1\105\22\0\24\5\3\0\2\5\20\0"+
    "\1\5\1\106\1\5\1\0\1\5\2\0\56\107\1\0"+
    "\3\107\56\110\1\0\2\110\1\111\3\0\1\112\1\52"+
    "\57\0\5\5\1\113\16\5\3\0\2\5\20\0\3\5"+
    "\1\0\1\5\4\0\21\5\1\114\2\5\3\0\2\5"+
    "\20\0\3\5\1\0\1\5\4\0\16\5\1\115\5\5"+
    "\3\0\2\5\20\0\3\5\1\0\1\5\4\0\11\5"+
    "\1\116\12\5\3\0\2\5\20\0\3\5\1\0\1\5"+
    "\4\0\12\5\1\117\11\5\3\0\2\5\20\0\3\5"+
    "\1\0\1\5\4\0\11\5\1\120\12\5\3\0\2\5"+
    "\20\0\3\5\1\0\1\5\4\0\7\5\1\121\14\5"+
    "\3\0\2\5\20\0\3\5\1\0\1\5\4\0\7\5"+
    "\1\122\14\5\3\0\2\5\20\0\3\5\1\0\1\5"+
    "\4\0\23\5\1\123\3\0\2\5\20\0\3\5\1\0"+
    "\1\5\4\0\7\5\1\124\14\5\3\0\2\5\20\0"+
    "\3\5\1\0\1\5\4\0\16\5\1\125\5\5\3\0"+
    "\2\5\20\0\3\5\1\0\1\5\4\0\12\5\1\126"+
    "\11\5\3\0\2\5\20\0\3\5\1\0\1\5\4\0"+
    "\14\5\1\127\7\5\3\0\2\5\20\0\3\5\1\0"+
    "\1\5\4\0\20\5\1\130\3\5\3\0\2\5\20\0"+
    "\3\5\1\0\1\5\4\0\7\5\1\131\14\5\3\0"+
    "\2\5\20\0\3\5\1\0\1\5\2\0\40\104\1\132"+
    "\21\104\56\105\1\133\3\105\2\0\12\5\1\134\11\5"+
    "\3\0\2\5\20\0\3\5\1\0\1\5\62\0\1\135"+
    "\3\0\6\5\1\136\15\5\3\0\2\5\20\0\3\5"+
    "\1\0\1\5\4\0\11\5\1\137\12\5\3\0\2\5"+
    "\20\0\3\5\1\0\1\5\4\0\7\5\1\140\14\5"+
    "\3\0\2\5\20\0\3\5\1\0\1\5\4\0\12\5"+
    "\1\141\11\5\3\0\2\5\20\0\3\5\1\0\1\5"+
    "\4\0\21\5\1\142\2\5\3\0\2\5\20\0\3\5"+
    "\1\0\1\5\4\0\20\5\1\143\3\5\3\0\2\5"+
    "\20\0\3\5\1\0\1\5\4\0\16\5\1\144\5\5"+
    "\3\0\2\5\20\0\3\5\1\0\1\5\4\0\15\5"+
    "\1\145\6\5\3\0\2\5\20\0\3\5\1\0\1\5"+
    "\4\0\11\5\1\146\12\5\3\0\2\5\20\0\3\5"+
    "\1\0\1\5\4\0\12\5\1\147\11\5\3\0\2\5"+
    "\20\0\3\5\1\0\1\5\4\0\4\5\1\150\17\5"+
    "\3\0\2\5\20\0\3\5\1\0\1\5\4\0\21\5"+
    "\1\151\2\5\3\0\2\5\20\0\3\5\1\0\1\5"+
    "\4\0\11\5\1\152\12\5\3\0\2\5\20\0\3\5"+
    "\1\0\1\5\4\0\6\5\1\153\15\5\3\0\2\5"+
    "\20\0\3\5\1\0\1\5\2\0\40\104\1\132\1\154"+
    "\20\104\2\0\16\5\1\155\5\5\3\0\2\5\20\0"+
    "\3\5\1\0\1\5\4\0\7\5\1\156\14\5\3\0"+
    "\2\5\20\0\3\5\1\0\1\5\4\0\24\5\3\0"+
    "\1\5\1\157\20\0\3\5\1\0\1\5\4\0\22\5"+
    "\1\160\1\5\3\0\2\5\20\0\3\5\1\0\1\5"+
    "\4\0\12\5\1\161\11\5\3\0\2\5\20\0\3\5"+
    "\1\0\1\5\4\0\7\5\1\162\14\5\3\0\2\5"+
    "\20\0\3\5\1\0\1\5\4\0\10\5\1\163\13\5"+
    "\3\0\2\5\20\0\3\5\1\0\1\5\4\0\4\5"+
    "\1\164\17\5\3\0\2\5\20\0\3\5\1\0\1\5"+
    "\4\0\20\5\1\165\3\5\3\0\2\5\20\0\3\5"+
    "\1\0\1\5\4\0\16\5\1\166\5\5\3\0\2\5"+
    "\20\0\3\5\1\0\1\5\4\0\21\5\1\167\2\5"+
    "\3\0\2\5\20\0\3\5\1\0\1\5\4\0\21\5"+
    "\1\170\2\5\3\0\2\5\20\0\3\5\1\0\1\5"+
    "\4\0\10\5\1\171\13\5\3\0\2\5\20\0\3\5"+
    "\1\0\1\5\4\0\3\5\1\172\20\5\3\0\2\5"+
    "\20\0\3\5\1\0\1\5\4\0\22\5\1\173\1\5"+
    "\3\0\2\5\20\0\3\5\1\0\1\5\4\0\17\5"+
    "\1\174\4\5\3\0\2\5\20\0\3\5\1\0\1\5"+
    "\4\0\6\5\1\175\15\5\3\0\2\5\20\0\3\5"+
    "\1\0\1\5\4\0\22\5\1\176\1\5\3\0\2\5"+
    "\20\0\3\5\1\0\1\5\4\0\7\5\1\177\14\5"+
    "\3\0\2\5\20\0\3\5\1\0\1\5\4\0\24\5"+
    "\3\0\2\5\20\0\2\5\1\200\1\0\1\5\4\0"+
    "\4\5\1\201\17\5\3\0\2\5\20\0\3\5\1\0"+
    "\1\5\4\0\3\5\1\202\20\5\3\0\2\5\20\0"+
    "\3\5\1\0\1\5\4\0\16\5\1\203\5\5\3\0"+
    "\2\5\20\0\3\5\1\0\1\5\4\0\22\5\1\204"+
    "\1\5\3\0\2\5\20\0\3\5\1\0\1\5\4\0"+
    "\24\5\3\0\2\5\16\0\1\205\1\0\3\5\1\0"+
    "\1\5\4\0\16\5\1\206\5\5\3\0\2\5\20\0"+
    "\3\5\1\0\1\5\4\0\4\5\1\207\17\5\3\0"+
    "\2\5\20\0\3\5\1\0\1\5\4\0\3\5\1\210"+
    "\20\5\3\0\2\5\20\0\3\5\1\0\1\5\20\0"+
    "\1\211\45\0\16\5\1\212\5\5\3\0\2\5\20\0"+
    "\3\5\1\0\1\5\4\0\4\5\1\213\17\5\3\0"+
    "\2\5\20\0\3\5\1\0\1\5\10\0\1\214\55\0"+
    "\16\5\1\215\5\5\3\0\2\5\20\0\3\5\1\0"+
    "\1\5\22\0\1\216\112\0\1\217\15\0\1\220\76\0"+
    "\1\221\50\0\1\222\74\0\1\223\55\0\1\224\51\0"+
    "\1\225\75\0\1\226\35\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[5350];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\2\0\1\11\30\1\1\11\1\1\11\11\3\1\1\0"+
    "\20\1\1\11\1\1\1\11\1\1\5\11\2\0\1\1"+
    "\2\0\21\1\1\0\1\11\1\1\1\11\47\1\1\0"+
    "\3\1\1\0\2\1\1\0\1\1\6\0\1\1\1\0"+
    "\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[150];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
    StringBuffer string = new StringBuffer();
    
    private Symbol symbol(int type, Object value){
        System.out.println(value);
        return new Symbol(type, yyline, yycolumn, value);
    }
    
    private Symbol symbol(int type){
        System.out.println(type);
        return new Symbol(type, yyline, yycolumn);
    }


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public LexicoJava(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public LexicoJava(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn++;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 25: 
          { System.out.print(yytext()); return new Symbol(SintaxisJavaSym.orr, yycolumn, yyline, yytext());
          }
        case 56: break;
        case 41: 
          { System.out.print(yytext()); return new Symbol(SintaxisJavaSym.thiss, yycolumn, yyline, yytext());
          }
        case 57: break;
        case 27: 
          { System.out.print(yytext()); return new Symbol(SintaxisJavaSym.igig, yycolumn, yyline, yytext());
          }
        case 58: break;
        case 15: 
          { System.out.print(yytext()); return new Symbol(SintaxisJavaSym.parc, yycolumn, yyline, yytext());
          }
        case 59: break;
        case 20: 
          { System.out.print(yytext()); return new Symbol(SintaxisJavaSym.punto, yycolumn, yyline, yytext());
          }
        case 60: break;
        case 37: 
          { System.out.print(yytext()); return new Symbol(SintaxisJavaSym.character, yycolumn, yyline, yytext());
          }
        case 61: break;
        case 49: 
          { System.out.print(yytext()); return new Symbol(SintaxisJavaSym.returnn, yycolumn, yyline, yytext());
          }
        case 62: break;
        case 52: 
          { System.out.print(yytext()); return new Symbol(SintaxisJavaSym.charinput, yycolumn, yyline, yytext());
          }
        case 63: break;
        case 32: 
          { System.out.print(yytext()); return new Symbol(SintaxisJavaSym.string, yycolumn, yyline, yytext().substring(1, yytext().length() - 1));
          }
        case 64: break;
        case 19: 
          { System.out.print(yytext()); return new Symbol(SintaxisJavaSym.puntocoma, yycolumn, yyline, yytext());
          }
        case 65: break;
        case 42: 
          { System.out.print(yytext()); return new Symbol(SintaxisJavaSym.elsee, yycolumn, yyline, yytext());
          }
        case 66: break;
        case 9: 
          { System.out.print(yytext()); return new Symbol(SintaxisJavaSym.mas, yycolumn, yyline, yytext());
          }
        case 67: break;
        case 44: 
          { System.out.print(yytext()); return new Symbol(SintaxisJavaSym.classs, yycolumn, yyline, yytext());
          }
        case 68: break;
        case 53: 
          { System.out.print(yytext()); return new Symbol(SintaxisJavaSym.floatinput, yycolumn, yyline, yytext());
          }
        case 69: break;
        case 2: 
          { System.out.print(yytext()); /*IGNORAR*/
          }
        case 70: break;
        case 48: 
          { System.out.print(yytext()); return new Symbol(SintaxisJavaSym.switchh, yycolumn, yyline, yytext());
          }
        case 71: break;
        case 54: 
          { System.out.print(yytext()); return new Symbol(SintaxisJavaSym.print, yycolumn, yyline, yytext());
          }
        case 72: break;
        case 40: 
          { System.out.print(yytext()); return new Symbol(SintaxisJavaSym.voidd, yycolumn, yyline, yytext());
          }
        case 73: break;
        case 18: 
          { System.out.print(yytext()); return new Symbol(SintaxisJavaSym.coma, yycolumn, yyline, yytext());
          }
        case 74: break;
        case 6: 
          { System.out.print(yytext()); return new Symbol(SintaxisJavaSym.igual, yycolumn, yyline, yytext());
          }
        case 75: break;
        case 29: 
          { System.out.print(yytext()); return new Symbol(SintaxisJavaSym.mayorig, yycolumn, yyline, yytext());
          }
        case 76: break;
        case 30: 
          { System.out.print(yytext()); return new Symbol(SintaxisJavaSym.masmas, yycolumn, yyline, yytext());
          }
        case 77: break;
        case 22: 
          { System.out.print(yytext()); return new Symbol(SintaxisJavaSym.iff, yycolumn, yyline, yytext());
          }
        case 78: break;
        case 38: 
          { System.out.print(yytext()); return new Symbol(SintaxisJavaSym.casee, yycolumn, yyline, yytext());
          }
        case 79: break;
        case 39: 
          { System.out.print(yytext()); return new Symbol(SintaxisJavaSym.charr, yycolumn, yyline, yytext());
          }
        case 80: break;
        case 16: 
          { System.out.print(yytext()); return new Symbol(SintaxisJavaSym.llavea, yycolumn, yyline, yytext());
          }
        case 81: break;
        case 26: 
          { System.out.print(yytext()); return new Symbol(SintaxisJavaSym.noigual, yycolumn, yyline, yytext());
          }
        case 82: break;
        case 46: 
          { System.out.print(yytext()); return new Symbol(SintaxisJavaSym.whilee, yycolumn, yyline, yytext());
          }
        case 83: break;
        case 50: 
          { System.out.print(yytext()); return new Symbol(SintaxisJavaSym.defaultt, yycolumn, yyline, yytext());
          }
        case 84: break;
        case 11: 
          { System.out.print(yytext()); return new Symbol(SintaxisJavaSym.por, yycolumn, yyline, yytext());
          }
        case 85: break;
        case 33: 
          { System.out.print(yytext()); return new Symbol(SintaxisJavaSym.decimal, yycolumn, yyline, yytext());
          }
        case 86: break;
        case 7: 
          { System.out.print(yytext()); return new Symbol(SintaxisJavaSym.menor, yycolumn, yyline, yytext());
          }
        case 87: break;
        case 17: 
          { System.out.print(yytext()); return new Symbol(SintaxisJavaSym.llavec, yycolumn, yyline, yytext());
          }
        case 88: break;
        case 43: 
          { System.out.print(yytext()); return new Symbol(SintaxisJavaSym.breakk, yycolumn, yyline, yytext());
          }
        case 89: break;
        case 28: 
          { System.out.print(yytext()); return new Symbol(SintaxisJavaSym.menorig, yycolumn, yyline, yytext());
          }
        case 90: break;
        case 45: 
          { System.out.print(yytext()); return new Symbol(SintaxisJavaSym.floatt, yycolumn, yyline, yytext());
          }
        case 91: break;
        case 21: 
          { System.out.print(yytext()); return new Symbol(SintaxisJavaSym.dosp, yycolumn, yyline, yytext());
          }
        case 92: break;
        case 10: 
          { System.out.print(yytext()); return new Symbol(SintaxisJavaSym.menos, yycolumn, yyline, yytext());
          }
        case 93: break;
        case 13: 
          { System.out.print(yytext()); return new Symbol(SintaxisJavaSym.mod, yycolumn, yyline, yytext());
          }
        case 94: break;
        case 12: 
          { System.out.print(yytext()); return new Symbol(SintaxisJavaSym.div, yycolumn, yyline, yytext());
          }
        case 95: break;
        case 1: 
          { System.out.print(yytext()); /*error*/
          }
        case 96: break;
        case 23: 
          { System.out.print(yytext()); return new Symbol(SintaxisJavaSym.doo, yycolumn, yyline, yytext());
          }
        case 97: break;
        case 8: 
          { System.out.print(yytext()); return new Symbol(SintaxisJavaSym.mayor, yycolumn, yyline, yytext());
          }
        case 98: break;
        case 5: 
          { System.out.print(yytext()); return new Symbol(SintaxisJavaSym.nott, yycolumn, yyline, yytext());
          }
        case 99: break;
        case 36: 
          { System.out.print(yytext()); /*return new Symbol(SintaxisJavaSym.com, yycolumn, yyline, yytext());*/
          }
        case 100: break;
        case 51: 
          { System.out.print(yytext()); return new Symbol(SintaxisJavaSym.intinput, yycolumn, yyline, yytext());
          }
        case 101: break;
        case 35: 
          { System.out.print(yytext()); return new Symbol(SintaxisJavaSym.forr, yycolumn, yyline, yytext());
          }
        case 102: break;
        case 55: 
          { System.out.print(yytext()); return new Symbol(SintaxisJavaSym.println, yycolumn, yyline, yytext());
          }
        case 103: break;
        case 34: 
          { System.out.print(yytext()); return new Symbol(SintaxisJavaSym.intt, yycolumn, yyline, yytext());
          }
        case 104: break;
        case 14: 
          { System.out.print(yytext()); return new Symbol(SintaxisJavaSym.para, yycolumn, yyline, yytext());
          }
        case 105: break;
        case 47: 
          { System.out.print(yytext()); return new Symbol(SintaxisJavaSym.publicc, yycolumn, yyline, yytext());
          }
        case 106: break;
        case 3: 
          { System.out.print(yytext()); return new Symbol(SintaxisJavaSym.id, yycolumn, yyline, yytext());
          }
        case 107: break;
        case 4: 
          { System.out.print(yytext()); return new Symbol(SintaxisJavaSym.entero, yycolumn, yyline, yytext());
          }
        case 108: break;
        case 31: 
          { System.out.print(yytext()); return new Symbol(SintaxisJavaSym.menosmenos, yycolumn, yyline, yytext());
          }
        case 109: break;
        case 24: 
          { System.out.print(yytext()); return new Symbol(SintaxisJavaSym.andd, yycolumn, yyline, yytext());
          }
        case 110: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
              { return new java_cup.runtime.Symbol(SintaxisJavaSym.EOF); }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
