package com.mycompany.assofjpybasic.backend.analizador.java;

import java_cup.runtime.*;
import com.mycompany.assofjpybasic.backend.semantica.java.*;
import com.mycompany.assofjpybasic.backend.semantica.programa.*;
import com.mycompany.assofjpybasic.backend.semantica.programa.cod3.*;
import com.mycompany.assofjpybasic.backend.semantica.python.*;
import com.mycompany.assofjpybasic.backend.error.Errores;
import java.util.ArrayList;
import java.util.List;

class SintaxisJava;

parser code
{:
    private Symbol s;
    private JavaSemantica java = new JavaSemantica();
    private TablaJava tabla;
    private List<VariableJava> variables;
    private MetodoJava actual;
    private Errores errores = new Errores();
    int ret = 4;
    int cas = 0;
    private int linea;

    public void setLinea(int line){
            this.linea = line;
    }
    
    public void syntax_error(Symbol sym){
            errores.errorSintactico(sym, linea); 
    }

    public void unrecovered_syntax_error(Symbol sym) throws java.lang.Exception{
            errores.errorSintactico(sym, linea); 
    }

    public JavaSemantica getJava() {
            return java;
    }
    
    public void reportarSem(String texto){
            errores.errorSemantico(getS(), texto, linea);
    }

    public Symbol getS(){
        return this.cur_token;
    }
:};

terminal String publicc, classs, voidd, intt, floatt, charr, andd, orr, nott, iff, elsee;
terminal String forr, whilee, doo, switchh, casee, dosp, defaultt, returnn, thiss, punto, breakk;
terminal String noigual, menor, menorig, mayor, mayorig, igig, mas, menos, por, div, mod;
terminal String para, parc, llavea, llavec, coma, puntocoma, println, print, charinput, intinput, floatinput;
terminal String igual, masmas, menosmenos, id, entero, decimal, character, string;

non terminal JAVA, CLASSES, CLASS, METODO, CONSTRUCTOR;
non terminal Integer TYPE_V, TYPE;
non terminal Boolean THIS;
non terminal List<VariableJava> LIST_PAR, LIST_PARR;
non terminal OperacionJava OPERACION_A, OPERACION_M, OPERACION_U, ATOM, EXPR, INPUT, LLAMADA_METODO;
non terminal Else_Operator ELSEIF;
non terminal CondicionPrograma NOT, AND, CONDICION;
non terminal Triplete COMPARACION;
non terminal ListaTripletes STATEMENT_CLASS, STATEMENT_LINE, WHILE, FOR, DO_WHILE, IF_ELSE, ELSE;
non terminal ListaTripletes STATEMENTS_CLASS, BLOQUE, STATEMENTS_METODO, STATEMENT_METODO, DEF_VAR, RETURN;
non terminal ListaTripletes COMP_STATE, SWITCH, DEFAULT, WRITE, STRING, INICIO, STEP, OP_VAR, AS_VAR_LINE;
non terminal CasePrograma CASES;
non terminal VariableJava AS_VAR;
non terminal List<OperacionJava> LIST, LIST_PARAM, PP;
non terminal List<VariableJava> LIST_VAR;

start with JAVA;

JAVA ::= CLASSES {:java.mostrarClases();:}
;

CLASSES ::= CLASSES CLASS
        | 
;

CLASS ::= publicc classs id:e1 llavea {:TablaJava sem = new TablaJava(e1); if(!java.agregarTabla(sem)){
                                reportarSem("Clase ya existente con id: <"+e1+">");}
                                tabla = sem; TablaJava.AMBITO += 1;:}
        STATEMENTS_CLASS llavec {:tabla.eliminarAmbito(TablaJava.AMBITO); TablaJava.AMBITO -= 1; 
                tabla.verificarConstructores(); tabla = null;:}
        | error CLASS
;

STATEMENTS_CLASS ::= STATEMENTS_CLASS STATEMENT_CLASS
        | {::}
;

STATEMENT_CLASS ::= METODO
        | CONSTRUCTOR
        | DEF_VAR:e1 puntocoma {:tabla.getPrincipales().addAll(e1);:}
        | error STATEMENT_CLASS
;

CONSTRUCTOR ::= publicc id:e2 para LIST_PAR:e3 parc llavea {:
                MetodoJava met = new MetodoJava(e2, 5, e3);
                actual = met;
                if(!tabla.addConstructor(met)){
                        reportarSem("Constructor de la clase : "+ e2 +" ya existente con mismos parametros");
                }
                        TablaJava.AMBITO += 1;:}
                STATEMENTS_METODO:e4 llavec {:tabla.eliminarAmbito(TablaJava.AMBITO); TablaJava.AMBITO -= 1;
                actual.getTripletes().addAll(e4);
                actual = null;
                :}
;

METODO ::= publicc TYPE_V:e1 id:e2 para LIST_PAR:e3 parc llavea {:ret = e1;
                MetodoJava met = new MetodoJava(e2, e1, e3);
                actual = met;
                if(!tabla.addMetodo(met)){
                        reportarSem("Metodo ya existente con id: <"+e2+"> con mismos parametros");
                }
                        TablaJava.AMBITO += 1;:}
                STATEMENTS_METODO:e4 llavec {:tabla.eliminarAmbito(TablaJava.AMBITO); TablaJava.AMBITO -= 1;
                actual.getTripletes().addAll(e4);
                actual = null;
                :}
;

TYPE_V ::= voidd {:RESULT = TablaJava.VOID;:}
        | TYPE:e1 {:RESULT = e1;:}
;

TYPE ::= intt {:RESULT = TablaJava.INT;:}
        | floatt {:RESULT = TablaJava.FLOAT;:}
        | charr {:RESULT = TablaJava.CHAR;:}
;

LIST_PAR ::= TYPE:e1 id:e2 LIST_PARR:e3 {:
                VariableJava var = new VariableJava(e2, e1, TablaJava.AMBITO+1, null);
                var.setDireccion(tabla.getVariables().size());
                tabla.getVariables().add(var);
                e3.add(var); RESULT = e3;:}
        | {:RESULT = new ArrayList<>();:}
;

LIST_PARR ::= coma TYPE:e1 id:e2 LIST_PARR:e3 {:
                VariableJava var = new VariableJava(e2, e1, TablaJava.AMBITO+1, null);
                var.setDireccion(tabla.getVariables().size());
                tabla.getVariables().add(var);
                e3.add(var); RESULT = e3;:}
        | {:RESULT = new ArrayList<>();:}
;

STATEMENTS_METODO ::= STATEMENT_METODO:e1 STATEMENTS_METODO:e2 {:if(!e2.isFin()){
                                                                if(e1.isRet()){
                                                                        reportarSem("ya existe varios returns, algunos no se toman en cuenta");
                                                                }else {e1.addAll(e2);}} RESULT = e1;:}
        | RETURN:e1 {:RESULT = e1;:}
        | breakk puntocoma {:if(cas==0){
                reportarSem("Break no esta dentro de un switch");
                } RESULT = new ListaTripletes();:}
        | {:RESULT = new ListaTripletes(true);:}
;

RETURN ::= returnn OPERACION_A:e1 puntocoma {:ListaTripletes tri = new ListaTripletes();
                        if(e1==null || e1.getTipo() != ret){
                                reportarSem("Return de tipo " + OperacionJava.obtenerTipo(e1.getTipo())
                                + " y se espera un tipo: " + OperacionJava.obtenerTipo(actual.getTIPO()));
                                RESULT = tri;}
                        else{tri.setRet(true); tri.addAll(e1.mostrarTripletes()); tri.add(new Return(e1.getTriplete()));
                        RESULT = tri;}:}
;

STATEMENT_METODO ::= COMP_STATE:e1 {:RESULT = e1;:}
        | STATEMENT_LINE:e1 {:RESULT = e1;:}
        | error STATEMENT_METODO:e1 {:RESULT = e1;:}
;

DEF_VAR ::= TYPE:e1 {:variables = new ArrayList<>();:} LIST_VAR:e2 {:VariableJava.agregarTipo(variables, e1);
                        if(!tabla.addListVar(variables)){
                                reportarSem("Unas variables de las registradas ya existen");}
                                variables = new ArrayList<>();
                        RESULT = new ListaTripletes(tabla.obtenerTripletes(e2, e1));:}
;

LIST_VAR ::= LIST_VAR:e1 coma AS_VAR:e2 {:e1.add(e2); RESULT = e1;:}
        | AS_VAR:e1 {:List<VariableJava> var = new ArrayList<>(); var.add(e1); RESULT = var;:}
;

AS_VAR ::= id:e1 igual OPERACION_A:e2 {:variables.add(new VariableJava(e1, TablaJava.AMBITO, null));
        VariableJava var = new VariableJava(e1, TablaJava.AMBITO, new AsignarValor(new TerminalOperator(e1), e2.getTriplete(),null));
        var.getTripletes().addAll(e2.mostrarTripletes()); RESULT = var;:}
        | id:e1 {:variables.add(new VariableJava(e1, TablaJava.AMBITO, null));
        RESULT = new VariableJava(e1, TablaJava.AMBITO, new AsignarValor(new TerminalOperator(e1), null, null));:}
;

COMP_STATE ::= WHILE:e1 {:RESULT = e1;:}
        | FOR:e1 {:RESULT = e1;:}
        | DO_WHILE:e1 {:RESULT = e1;:}
        | IF_ELSE:e1 {:RESULT = e1;:}
        | SWITCH:e1 {:RESULT = e1;:}
;

WHILE ::= whilee para CONDICION:e1 parc BLOQUE:e2 
        {:RESULT = Else_Operator.WHILE(e1, e2);:}
;

BLOQUE ::= llavea {:TablaJava.AMBITO += 1;:}  STATEMENTS_METODO:e1 llavec {:tabla.eliminarAmbito(TablaJava.AMBITO); TablaJava.AMBITO -= 1;
                                                RESULT = e1;:}
        | STATEMENT_LINE:e1 {:RESULT = e1;:}
;

FOR ::= forr para INICIO:e1 puntocoma CONDICION:e2 puntocoma STEP:e3 parc BLOQUE:e4 
                {:RESULT = Else_Operator.FOR(e1, e3, e2, e4);:}
;

INICIO ::= THIS:e0 id:e1 {:List<Triplete> tri = new ArrayList<>();
                        int num; if(e0){num = tabla.existeVarGlobal(new VariableJava(e1, TablaJava.AMBITO, null));}
                        else {num = tabla.existeVar(new VariableJava(e1, TablaJava.AMBITO, null));}
                        if(num == -1){
                                reportarSem("No existe variable con id: " + e1);
                        }
                        RESULT = new ListaTripletes(tri);:}
        | TYPE:e1 {:TablaJava.AMBITO += 1; variables = new ArrayList<>();:} 
                AS_VAR:e2 {:ListaTripletes tri = new ListaTripletes();
                VariableJava.agregarTipo(variables, e1);
                if(!tabla.addListVar(variables)){
                        reportarSem("Ya existe variable con id: " + e2.getId());
                }else { TablaJava.AMBITO -= 1;
                ((AsignarValor) e2.getTriplete()).setTipo(OperacionJava.obtenerTipo(e1));
                tri.addAll(e2.getTripletes());
                SumOperator sum = tabla.devolverSum(e2.getId(), false);
                tri.add(sum);
                tri.add(new AsignarValor(new TerminalOperator(tabla.devolverDireccion(sum.getId())), e2.getTriplete().getOperando2(), null));} RESULT = tri;:}
;

STEP ::= AS_VAR_LINE:e1 {:RESULT = e1;:}
        | OP_VAR:e1 {:RESULT = e1;:}
;

DO_WHILE ::= doo BLOQUE:e1 whilee para CONDICION:e2 parc puntocoma 
        {:RESULT = Else_Operator.DOWHILE(e2, e1);:}
;

IF_ELSE ::= iff para CONDICION:e1 parc BLOQUE:e2 ELSEIF:e3 ELSE:e4  
                {:e3.agregarIf(e1, e2); RESULT = e3.juntarTripletes(e4);:}
;

ELSEIF ::= ELSEIF:e1 elsee iff para CONDICION:e2 parc BLOQUE:e3  
                {:RESULT = e1.agregarElseIf(e2, e3);:}
        | {:RESULT = new Else_Operator();:}
;

ELSE ::= elsee BLOQUE:e1 {:RESULT = e1;:}
        | {:RESULT = new ListaTripletes();:}
;

SWITCH ::= switchh para OPERACION_A:e1 parc llavea CASES:e2 DEFAULT:e3 llavec {:RESULT = e2.agregarDefault(e1, e3);:}
;

CASES ::= CASES:e1 casee OPERACION_A:e2 dosp {:cas++;:} STATEMENTS_METODO:e3
        {:cas--; if(e2!=null){RESULT  = e1.agregarCase(e2, e3);}:}
        | {:RESULT = new CasePrograma();:}
;


DEFAULT ::= defaultt dosp {:cas++;:} STATEMENTS_METODO:e1  {:cas--;
                RESULT = new ListaTripletes(e1);:}
        | {:RESULT = new ListaTripletes();:}
;

STATEMENT_LINE ::= AS_VAR_LINE:e1 puntocoma {:RESULT = e1;:}
        | DEF_VAR:e1 puntocoma {:RESULT = e1;:}
        | WRITE:e1 puntocoma {:RESULT = e1;:}
        | INPUT:e1 puntocoma {:AsignarValor vl = new AsignarValor(new AsignarTemporal(null, null, OperacionJava.obtenerTipo(e1)),null
                ,OperacionJava.obtenerTipo(e1)); 
                ListaTripletes tri = new ListaTripletes(); tri.add(vl); 
                tri.add(new AsignarValor(vl.getOperando1(), e1.getTriplete(), null)); RESULT = tri;:}
        | THIS LLAMADA_METODO:e1 {:RESULT = new ListaTripletes(e1.getTripletes());:}
;

AS_VAR_LINE ::= THIS:e0 id:e1 igual OPERACION_A:e2 {:ListaTripletes tri = new ListaTripletes();
                                int num = -1; if(!e0){num = tabla.existeVar(new VariableJava(e1, TablaJava.AMBITO, null));}
                        else {num = tabla.existeVarGlobal(new VariableJava(e1, TablaJava.AMBITO, null));}
                        if(num==-1){
                                reportarSem("Variable con id: "+ e1 + " no ha sido declarada");
                        } else if (num<e2.getTipo()) {
                                reportarSem("Variable con tipo: "+ OperacionJava.obtenerTipo(num) 
                                + " solo acepta tipo " + OperacionJava.obtenerTipo(e2.getTipo()));
                        } else {
                                tri.addAll(e2.mostrarTripletes());
                                SumOperator sum = tabla.devolverSum(e1, e0);
                                tri.add(sum);
                                tri.add(new AsignarValor(new TerminalOperator(tabla.devolverDireccion(sum.getId())), e2.getTriplete(), null));}
                        RESULT = tri;:}
;

WRITE ::= println para STRING:e1 parc {:e1.add(new Printf("\\n")); RESULT = e1;:}
       | print para STRING:e1 parc {:RESULT = e1;:}
;

OP_VAR ::= THIS:e0 id:e1 masmas {:ListaTripletes tri = new ListaTripletes();
                        int num; if(e0){num = tabla.existeVarGlobal(new VariableJava(e1, TablaJava.AMBITO, null));}
                        else {num = tabla.existeVar(new VariableJava(e1, TablaJava.AMBITO, null));}
                        if(num == -1){
                                reportarSem("Variable con id: "+ e1 + " no ha sido declarada");
                        }else{
                                SumOperator ss1 = tabla.devolverSum(e1, e0);
                                tri.add(ss1);
                                SumOperator sum = new SumOperator(null, new TerminalOperator(tabla.devolverDireccion(ss1.getId())), new TerminalOperator("1"), OperacionJava.obtenerTipo(num));
                                tri.add(sum);
                                SumOperator ss2 = tabla.devolverSum(e1, e0);
                                tri.add(ss2);
                                tri.add(new AsignarValor(new TerminalOperator(tabla.devolverDireccion(ss2.getId())), sum, null));}
                                RESULT = tri;:}
        | THIS:e0 id:e1 menosmenos {:ListaTripletes tri = new ListaTripletes();
                        int num; if(e0){num = tabla.existeVarGlobal(new VariableJava(e1, TablaJava.AMBITO, null));}
                        else {num = tabla.existeVar(new VariableJava(e1, TablaJava.AMBITO, null));}
                        if(num == -1){
                                reportarSem("Variable con id: "+ e1 + " no ha sido declarada");
                        } else {
                                SumOperator ss1 = tabla.devolverSum(e1, e0);
                                tri.add(ss1);
                                RestOperator rest = new RestOperator(null, new TerminalOperator(tabla.devolverDireccion(ss1.getId())), new TerminalOperator("1"), OperacionJava.obtenerTipo(num));
                                tri.add(rest); 
                                SumOperator ss2 = tabla.devolverSum(e1, e0);
                                tri.add(ss2);
                                tri.add(new AsignarValor(new TerminalOperator(tabla.devolverDireccion(ss2.getId())), rest, null));}
                                RESULT = tri;:}
;

OPERACION_A ::= OPERACION_A:e1 mas OPERACION_M:e2 {:if(e1!=null&&e2!=null){
                        RESULT = new OperacionJava(e1, e2,
                        new SumOperator(null, e1.getTriplete(), e2.getTriplete(), OperacionJava.obtenerTipo(e1, e2)));}:}
        | OPERACION_A:e1 menos OPERACION_M:e2 {:if(e1!=null&&e2!=null){
                        RESULT = new OperacionJava(e1, e2,
                        new RestOperator(null, e1.getTriplete(), e2.getTriplete(), OperacionJava.obtenerTipo(e1, e2)));}:}
        | OPERACION_M:e1 {:RESULT = e1;:}
        | error OPERACION_M:e1 {:RESULT = e1;:}
;

OPERACION_M ::= OPERACION_M:e1 por OPERACION_U:e2 {:if(e1!=null&&e2!=null){
                                RESULT = new OperacionJava(e1, e2,
                                new PorOperator(null, e1.getTriplete(), e2.getTriplete(), OperacionJava.obtenerTipo(e1, e2)));}:}
        | OPERACION_M:e1 div OPERACION_U:e2 {:if(e1!=null&&e2!=null){
                                RESULT = new OperacionJava(e1, e2,
                                new DivOperator(null, e1.getTriplete(), e2.getTriplete(), OperacionJava.obtenerTipo(e1, e2)));}:}
        | OPERACION_M:e1 mod OPERACION_U:e2 {:if(e1!=null&&e2!=null){
                                RESULT = new OperacionJava(e1, e2,
                               new ModOperator(null, e1.getTriplete(), e2.getTriplete(), OperacionJava.obtenerTipo(e1, e2)));}:}
        | OPERACION_U:e1 {:RESULT = e1;:}
;

OPERACION_U ::= menos OPERACION_U:e1 {:RESULT = new OperacionJava(new OperacionJava(TablaJava.INT, new TerminalOperator("0")),
                        e1, new RestOperator(null, new TerminalOperator("0"), e1.getTriplete(), OperacionJava.obtenerTipo(e1)));:}
        | mas OPERACION_U:e1 {:RESULT = e1;:}
        | ATOM:e1 {:RESULT = e1;:}
;

ATOM ::= THIS:e0 id:e1 PP:e2 {:if(e2==null){int num;
                        if(e0){num = tabla.existeVarGlobal(new VariableJava(e1, TablaJava.AMBITO, 
                                new TerminalOperator(e1)));}
                        else {num = tabla.existeVar(new VariableJava(e1, TablaJava.AMBITO,
                                new TerminalOperator(e1)));}
                        if(num == -1){
                                reportarSem("Variable con id: "+ e1 + " no ha sido declarada");
                        } else {
                                SumOperator sum = tabla.devolverSum(e1, e0);
                                OperacionJava op = new OperacionJava(num, new TerminalOperator(tabla.devolverDireccion(sum.getId())));
                                op.getTripletes().add(sum);
                                RESULT = op;}}
                        else { MetodoJava met = tabla.existeMetodo(e2, e1);
                        if(met == null){
                                reportarSem("Metodo de Python no existente con id: <" + e1 + ">");
                        }else{
                                List<Triplete> tri = new ArrayList<>();
                                tri.addAll(met.verMetodo(tabla.getVariables().size(), e2));
                                SumOperator s = new SumOperator(null, new TerminalOperator("p"), new TerminalOperator(""+tabla.getVariables().size()),"int");
                                tri.add(s);
                                OperacionJava op = new OperacionJava(met.getTIPO(), new TerminalOperator("stack["+s.getId()+"]"));
                                op.getTripletes().addAll(tri);
                                RESULT = op;
                        }}:}
        | entero:e1 {:RESULT = new OperacionJava(TablaJava.INT, new TerminalOperator(e1));:}
        | decimal:e1 {:RESULT = new OperacionJava(TablaJava.FLOAT, new TerminalOperator(e1));:}
        | character:e1 {:RESULT = new OperacionJava(TablaJava.CHAR, new TerminalOperator(e1));:}
        | para OPERACION_A:e1 parc {:RESULT = e1;:}
        | INPUT:e1 {:RESULT = e1;:}
;

PP ::= para LIST_PARAM:e1 parc {:RESULT = e1;:}
        | {:RESULT = null;:}
;

THIS ::= thiss punto {:RESULT = true;:}
        | {:RESULT = false;:}
;

CONDICION ::= CONDICION:e1 orr AND:e2 {:RESULT = IfPrograma.OR(e1, e2);:}
        | AND:e1 {:RESULT = e1;:}
;

AND ::= AND:e1 andd NOT:e2 {:RESULT = IfPrograma.AND(e1, e2);:}
        | NOT:e1 {:RESULT = e1;:}
;

NOT ::= nott NOT:e1 {:RESULT = IfPrograma.NOT(e1);:}
    | COMPARACION:e1 {:RESULT = new IfPrograma(new If_Operator(e1, new Etiqueta()), ((CondicionalOperator)e1).getTripletes());:}
    | para CONDICION:e1 parc {:RESULT = e1;:}
;

COMPARACION ::= OPERACION_A:e1 igig OPERACION_A:e2 {:RESULT = new IgualOperator(e1.getTriplete(), e2.getTriplete(),
                e1.getTripletes(), e2.getTripletes());:}
    | OPERACION_A:e1 noigual OPERACION_A:e2 {:RESULT = new NoIgualOperator(e1.getTriplete(), e2.getTriplete(),
                e1.getTripletes(), e2.getTripletes());:}
    | OPERACION_A:e1 menor OPERACION_A:e2 {:RESULT = new MenorOperator(e1.getTriplete(), e2.getTriplete(),
                e1.getTripletes(), e2.getTripletes());:}
    | OPERACION_A:e1 menorig OPERACION_A:e2 {:RESULT = new MenorIgOperator(e1.getTriplete(), e2.getTriplete(),
                e1.getTripletes(), e2.getTripletes());:}
    | OPERACION_A:e1 mayor OPERACION_A:e2 {:RESULT = new MayorOperator(e1.getTriplete(), e2.getTriplete(),
                e1.getTripletes(), e2.getTripletes());:}
    | OPERACION_A:e1 mayorig OPERACION_A:e2 {:RESULT = new MayorIgOperator(e1.getTriplete(), e2.getTriplete(),
                e1.getTripletes(), e2.getTripletes());:}
;

STRING ::= STRING:e1 mas EXPR:e2 {:e1.addAll(e2.getTripletes()); e1.add(new Printf(Input.tipoJAVA(e2), e2.getTriplete())); RESULT = e1;:}
        | STRING:e1 mas string:e2 {:e1.add(new Printf(e2)); RESULT = e1;:}
        | EXPR:e1 {:ListaTripletes tri = new ListaTripletes(); tri.addAll(e1.getTripletes());
                tri.add(new Printf(Input.tipoJAVA(e1), e1.getTriplete()));
                RESULT = tri;:}
        | string:e1 {:ListaTripletes tri = new ListaTripletes(); tri.add(new Printf(e1));
                RESULT = tri;:}
;

EXPR ::= INPUT:e1 {:RESULT = e1;:}
        | THIS:e0 id:e1 {:int num; if(e0){num = tabla.existeVarGlobal(new VariableJava(e1, TablaJava.AMBITO, null));}
                        else {num = tabla.existeVar(new VariableJava(e1, TablaJava.AMBITO, null));}
                        if(num == -1){
                                reportarSem("Variable con id: "+ e1 + " no ha sido declarada");
                        }else{
                                SumOperator sum = tabla.devolverSum(e1, e0);
                                OperacionJava op = new OperacionJava(num, new TerminalOperator(tabla.devolverDireccion(sum.getId())));
                                op.getTripletes().add(sum);
                                RESULT = op;}:}
        | entero:e1 {:RESULT = new OperacionJava(TablaJava.INT, new TerminalOperator(e1));:}
        | decimal:e1 {:RESULT = new OperacionJava(TablaJava.FLOAT, new TerminalOperator(e1));:}
        | character:e1 {:RESULT = new OperacionJava(TablaJava.CHAR, new TerminalOperator(e1));:}
        | para OPERACION_A:e1 parc {:RESULT = e1;:}
;

INPUT ::= charinput para string:e1 parc {:OperacionJava op = new OperacionJava(TablaJava.CHAR,
                                new Input("%c"));
                                op.getTripletes().add(new Printf(e1));
                                RESULT = op;:}
        | intinput para string:e1 parc {:OperacionJava op = new OperacionJava(TablaJava.INT,
                                new Input("%d"));
                                op.getTripletes().add(new Printf(e1));
                                RESULT = op;:}
        | floatinput para string:e1 parc {:OperacionJava op = new OperacionJava(TablaJava.FLOAT,
                                new Input("%f"));
                                op.getTripletes().add(new Printf(e1));
                                RESULT = op;:}
;

LLAMADA_METODO ::= id:e1 para LIST_PARAM:e2 parc {:MetodoJava met = tabla.existeMetodo(e2, e1);
                        if(met == null){
                                reportarSem("Metodo de Python no existente con id: <" + e1 + ">");
                        }else{
                                List<Triplete> tri = new ArrayList<>();
                                tri.addAll(met.verMetodo(tabla.getVariables().size(), e2));
                                SumOperator s = new SumOperator(null, new TerminalOperator("p"), new TerminalOperator(""+tabla.getVariables().size()),"int");
                                tri.add(s);
                                OperacionJava op = new OperacionJava(met.getTIPO(), new TerminalOperator("stack["+s.getId()+"]"));
                                op.getTripletes().addAll(tri);
                                RESULT = op;
                        }:}
;

LIST_PARAM ::= LIST:e1 {:RESULT = e1;:}
        | {:RESULT = new ArrayList<>();:}
;

LIST ::= LIST_PARAM:e1 coma OPERACION_A:e2 {:e1.add(e2); RESULT = e1;:}
        | OPERACION_A:e1 {:List<OperacionJava> params = new ArrayList<>(); params.add(e1); RESULT = params;:}
;