/* The following code was generated by JFlex 1.4.3 on 24/09/20 13:23 */

package com.mycompany.assofjpybasic.backend.analizador.principal;

import java_cup.runtime.*;
import java.util.ArrayList;
import java.util.List;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 24/09/20 13:23 from the specification file
 * <tt>LexicoPrograma.flex</tt>
 */
public class LexicoPrograma implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int STRING = 2;
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1, 1
  };

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = {
     0,  0,  0,  0,  0,  0,  0,  0,  0,  1, 55,  0,  1,  1,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     1, 25, 48, 12,  0, 22, 23, 57, 36, 37, 34, 32, 42, 33, 43, 35, 
     4,  3,  3,  3,  3,  3,  3,  3,  3,  3, 45, 44, 30, 29, 31,  0, 
     0, 50, 54,  2,  2,  2,  2,  2,  2,  2, 49,  2,  2,  2,  2,  2, 
    52,  2,  2,  2,  2,  2, 51,  2,  2, 53,  2, 40,  0, 41,  0, 56, 
     0, 10, 27, 13,  8, 16, 19, 47, 20,  7,  2, 28, 14,  9, 11,  6, 
    46,  2, 21, 17, 18, 15,  5, 26,  2,  2,  2, 38, 24, 39,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0
  };

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\2\0\1\1\1\2\1\3\2\4\4\3\1\1\4\3"+
    "\1\5\1\6\1\2\1\7\2\3\1\10\1\11\1\12"+
    "\1\13\1\14\1\15\1\16\1\17\1\20\1\21\1\22"+
    "\1\23\1\24\1\25\1\26\1\27\1\30\2\3\1\31"+
    "\3\3\1\2\3\1\2\3\1\32\3\3\1\1\11\3"+
    "\1\33\1\34\1\35\1\36\1\37\1\40\2\3\1\41"+
    "\1\42\1\43\1\44\1\45\2\1\3\3\1\46\1\47"+
    "\1\1\1\50\1\51\1\3\1\52\1\53\2\3\1\1"+
    "\7\3\1\54\3\3\1\1\1\0\1\55\3\3\1\56"+
    "\1\57\1\3\1\60\1\1\1\3\1\61\1\3\1\62"+
    "\1\63\5\3\1\55\1\0\2\3\1\64\1\3\1\1"+
    "\1\65\1\3\1\66\1\3\1\67\1\70\1\71\1\55"+
    "\3\3\1\1\1\3\1\72\1\73\1\1\1\74\2\1"+
    "\1\75\1\76\1\77";

  private static int [] zzUnpackAction() {
    int [] result = new int[155];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\72\0\164\0\256\0\350\0\u0122\0\u015c\0\u0196"+
    "\0\u01d0\0\u020a\0\u0244\0\u027e\0\u02b8\0\u02f2\0\u032c\0\u0366"+
    "\0\u03a0\0\u03da\0\u0414\0\u044e\0\u0488\0\u04c2\0\u04fc\0\u0536"+
    "\0\u0570\0\u05aa\0\u05e4\0\164\0\u061e\0\164\0\164\0\164"+
    "\0\164\0\164\0\164\0\164\0\164\0\164\0\164\0\u0658"+
    "\0\u0692\0\164\0\u06cc\0\u0706\0\u0740\0\72\0\u077a\0\u07b4"+
    "\0\u07ee\0\u0828\0\u0862\0\350\0\u089c\0\u08d6\0\u0910\0\u094a"+
    "\0\u0984\0\u09be\0\u09f8\0\u0a32\0\u0a6c\0\u0aa6\0\u0ae0\0\u0b1a"+
    "\0\u0b54\0\164\0\164\0\164\0\164\0\256\0\164\0\u0b8e"+
    "\0\u0bc8\0\164\0\164\0\164\0\164\0\164\0\u0c02\0\u0c3c"+
    "\0\u0c76\0\u0cb0\0\u0cea\0\350\0\350\0\u0d24\0\164\0\u07ee"+
    "\0\u0d5e\0\350\0\350\0\u0d98\0\u0dd2\0\u0e0c\0\u0e46\0\u0e80"+
    "\0\u0eba\0\u0ef4\0\u0f2e\0\u0f68\0\u0fa2\0\350\0\u0fdc\0\u1016"+
    "\0\u1050\0\u108a\0\u10c4\0\u10fe\0\u1138\0\u1172\0\u11ac\0\164"+
    "\0\350\0\u11e6\0\350\0\u1220\0\u125a\0\350\0\u1294\0\350"+
    "\0\350\0\u12ce\0\u1308\0\u1342\0\u137c\0\u13b6\0\u0c02\0\u13f0"+
    "\0\u142a\0\u1464\0\350\0\u149e\0\u14d8\0\350\0\u1512\0\350"+
    "\0\u154c\0\350\0\350\0\350\0\u10c4\0\u1586\0\u15c0\0\u15fa"+
    "\0\u1634\0\u166e\0\350\0\350\0\u16a8\0\350\0\u16e2\0\u171c"+
    "\0\164\0\164\0\164";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[155];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\3\1\4\1\5\1\6\1\7\1\10\1\5\1\11"+
    "\1\12\1\13\2\5\1\14\1\15\2\5\1\16\1\17"+
    "\1\5\1\20\2\5\1\21\1\22\1\23\1\24\1\25"+
    "\1\26\1\5\1\27\1\30\1\31\1\32\1\33\1\34"+
    "\1\35\1\36\1\37\1\40\1\41\1\42\1\43\1\44"+
    "\1\45\1\46\1\47\1\50\1\51\1\52\1\53\1\5"+
    "\1\54\1\55\2\5\1\56\1\3\1\57\1\0\1\56"+
    "\26\0\1\56\36\0\1\56\2\0\67\3\1\0\3\3"+
    "\1\4\26\3\1\4\36\3\1\56\4\3\12\5\1\3"+
    "\11\5\4\3\3\5\16\3\1\60\2\3\2\5\1\3"+
    "\6\5\1\0\1\5\4\3\2\6\46\3\1\61\13\3"+
    "\1\0\55\3\1\61\13\3\1\0\4\3\4\5\1\62"+
    "\5\5\1\3\11\5\4\3\3\5\16\3\1\60\2\3"+
    "\2\5\1\3\6\5\1\0\1\5\3\3\11\5\1\63"+
    "\1\3\6\5\1\64\2\5\4\3\3\5\16\3\1\60"+
    "\2\3\2\5\1\3\6\5\1\0\1\5\3\3\4\5"+
    "\1\65\5\5\1\3\3\5\1\66\5\5\4\3\3\5"+
    "\16\3\1\60\2\3\2\5\1\3\6\5\1\0\1\5"+
    "\3\3\10\5\1\67\1\5\1\3\11\5\4\3\3\5"+
    "\16\3\1\60\2\3\2\5\1\3\6\5\1\0\1\5"+
    "\10\3\1\70\57\3\1\0\4\3\4\5\1\71\3\5"+
    "\1\72\1\5\1\3\1\5\1\73\5\5\1\74\1\5"+
    "\4\3\3\5\16\3\1\60\2\3\2\5\1\3\6\5"+
    "\1\0\1\5\3\3\12\5\1\3\1\5\1\75\7\5"+
    "\4\3\3\5\16\3\1\60\2\3\2\5\1\3\6\5"+
    "\1\0\1\5\3\3\12\5\1\3\1\76\10\5\4\3"+
    "\1\77\2\5\16\3\1\60\2\3\2\5\1\3\6\5"+
    "\1\0\1\5\3\3\4\5\1\100\5\5\1\3\1\5"+
    "\1\101\7\5\4\3\3\5\16\3\1\60\2\3\2\5"+
    "\1\3\6\5\1\0\1\5\11\3\1\102\4\3\1\103"+
    "\5\3\1\104\43\3\1\0\31\3\1\105\37\3\1\0"+
    "\3\3\1\4\26\3\1\106\36\3\1\56\37\3\1\107"+
    "\31\3\1\0\4\3\12\5\1\3\7\5\1\110\1\5"+
    "\4\3\3\5\16\3\1\60\2\3\2\5\1\3\6\5"+
    "\1\0\1\5\3\3\12\5\1\3\10\5\1\111\4\3"+
    "\3\5\16\3\1\60\2\3\2\5\1\3\6\5\1\0"+
    "\1\5\36\3\1\112\31\3\1\0\37\3\1\113\31\3"+
    "\1\0\37\3\1\114\31\3\1\0\42\3\1\115\26\3"+
    "\1\0\43\3\1\116\25\3\1\0\44\3\1\117\1\120"+
    "\23\3\1\0\4\3\12\5\1\3\10\5\1\121\4\3"+
    "\3\5\16\3\1\60\2\3\2\5\1\3\6\5\1\0"+
    "\1\5\3\3\12\5\1\3\3\5\1\122\5\5\4\3"+
    "\3\5\16\3\1\60\2\3\2\5\1\3\6\5\1\0"+
    "\1\5\3\3\12\5\1\3\11\5\4\3\3\5\16\3"+
    "\1\60\2\3\2\5\1\3\1\5\1\123\4\5\1\0"+
    "\1\5\3\3\12\5\1\3\11\5\4\3\3\5\16\3"+
    "\1\60\2\3\2\5\1\3\5\5\1\124\1\0\1\5"+
    "\3\3\12\5\1\3\11\5\4\3\3\5\16\3\1\60"+
    "\2\3\2\5\1\3\4\5\1\125\1\5\1\0\1\5"+
    "\1\3\67\126\1\0\2\126\24\3\1\127\42\3\1\0"+
    "\5\3\1\130\1\61\62\3\1\0\4\3\5\5\1\131"+
    "\4\5\1\3\11\5\4\3\3\5\16\3\1\60\2\3"+
    "\2\5\1\3\6\5\1\0\1\5\3\3\12\5\1\3"+
    "\5\5\1\132\3\5\4\3\3\5\16\3\1\60\2\3"+
    "\2\5\1\3\6\5\1\0\1\5\3\3\4\5\1\133"+
    "\5\5\1\3\11\5\4\3\3\5\16\3\1\60\2\3"+
    "\2\5\1\3\6\5\1\0\1\5\3\3\12\5\1\3"+
    "\6\5\1\134\2\5\4\3\3\5\16\3\1\60\2\3"+
    "\2\5\1\3\6\5\1\0\1\5\3\3\5\5\1\135"+
    "\4\5\1\3\11\5\4\3\3\5\16\3\1\60\2\3"+
    "\2\5\1\3\6\5\1\0\1\5\14\3\1\136\53\3"+
    "\1\0\4\3\11\5\1\137\1\3\11\5\4\3\3\5"+
    "\16\3\1\60\2\3\2\5\1\3\6\5\1\0\1\5"+
    "\3\3\12\5\1\3\4\5\1\140\4\5\4\3\3\5"+
    "\16\3\1\60\2\3\2\5\1\3\6\5\1\0\1\5"+
    "\3\3\12\5\1\3\10\5\1\141\4\3\3\5\16\3"+
    "\1\60\2\3\2\5\1\3\6\5\1\0\1\5\3\3"+
    "\10\5\1\142\1\5\1\3\11\5\4\3\3\5\16\3"+
    "\1\60\2\3\2\5\1\3\6\5\1\0\1\5\3\3"+
    "\12\5\1\3\4\5\1\143\4\5\4\3\3\5\16\3"+
    "\1\60\2\3\2\5\1\3\6\5\1\0\1\5\3\3"+
    "\10\5\1\144\1\5\1\3\11\5\4\3\3\5\16\3"+
    "\1\60\2\3\2\5\1\3\6\5\1\0\1\5\3\3"+
    "\5\5\1\145\4\5\1\3\11\5\4\3\3\5\16\3"+
    "\1\60\2\3\2\5\1\3\6\5\1\0\1\5\3\3"+
    "\12\5\1\3\10\5\1\146\4\3\3\5\16\3\1\60"+
    "\2\3\2\5\1\3\6\5\1\0\1\5\3\3\4\5"+
    "\1\147\5\5\1\3\11\5\4\3\3\5\16\3\1\60"+
    "\2\3\2\5\1\3\6\5\1\0\1\5\3\3\5\5"+
    "\1\150\4\5\1\3\11\5\4\3\3\5\16\3\1\60"+
    "\2\3\2\5\1\3\6\5\1\0\1\5\3\3\12\5"+
    "\1\3\3\5\1\151\5\5\4\3\3\5\16\3\1\60"+
    "\2\3\2\5\1\3\6\5\1\0\1\5\1\3\42\117"+
    "\1\152\24\117\1\153\2\117\67\120\1\154\2\120\2\3"+
    "\5\5\1\155\4\5\1\3\11\5\4\3\3\5\16\3"+
    "\1\60\2\3\2\5\1\3\6\5\1\0\1\5\3\3"+
    "\12\5\1\3\5\5\1\156\3\5\4\3\3\5\16\3"+
    "\1\60\2\3\2\5\1\3\6\5\1\0\1\5\3\3"+
    "\12\5\1\3\11\5\4\3\3\5\16\3\1\60\2\3"+
    "\2\5\1\3\2\5\1\157\3\5\1\0\1\5\70\3"+
    "\1\0\1\3\1\160\2\3\6\5\1\161\3\5\1\3"+
    "\11\5\4\3\3\5\16\3\1\60\2\3\2\5\1\3"+
    "\6\5\1\0\1\5\3\3\10\5\1\162\1\5\1\3"+
    "\11\5\4\3\3\5\16\3\1\60\2\3\2\5\1\3"+
    "\6\5\1\0\1\5\3\3\11\5\1\163\1\3\11\5"+
    "\4\3\3\5\16\3\1\60\2\3\2\5\1\3\6\5"+
    "\1\0\1\5\16\3\1\164\51\3\1\0\4\3\12\5"+
    "\1\3\4\5\1\165\4\5\4\3\3\5\16\3\1\60"+
    "\2\3\2\5\1\3\6\5\1\0\1\5\3\3\12\5"+
    "\1\3\3\5\1\166\5\5\4\3\3\5\16\3\1\60"+
    "\2\3\2\5\1\3\6\5\1\0\1\5\3\3\12\5"+
    "\1\3\4\5\1\167\4\5\4\3\3\5\16\3\1\60"+
    "\2\3\2\5\1\3\6\5\1\0\1\5\3\3\12\5"+
    "\1\3\10\5\1\170\4\3\3\5\16\3\1\60\2\3"+
    "\2\5\1\3\6\5\1\0\1\5\3\3\12\5\1\3"+
    "\3\5\1\171\5\5\4\3\3\5\16\3\1\60\2\3"+
    "\2\5\1\3\6\5\1\0\1\5\3\3\11\5\1\172"+
    "\1\3\11\5\4\3\3\5\16\3\1\60\2\3\2\5"+
    "\1\3\6\5\1\0\1\5\3\3\12\5\1\3\5\5"+
    "\1\173\3\5\4\3\3\5\16\3\1\60\2\3\2\5"+
    "\1\3\6\5\1\0\1\5\3\3\10\5\1\174\1\5"+
    "\1\3\11\5\4\3\3\5\16\3\1\60\2\3\2\5"+
    "\1\3\6\5\1\0\1\5\3\3\12\5\1\3\1\5"+
    "\1\175\7\5\4\3\3\5\16\3\1\60\2\3\2\5"+
    "\1\3\6\5\1\0\1\5\3\3\10\5\1\176\1\5"+
    "\1\3\11\5\4\3\3\5\16\3\1\60\2\3\2\5"+
    "\1\3\6\5\1\0\1\5\1\3\42\117\1\152\1\177"+
    "\23\117\1\153\2\117\42\153\1\200\27\153\72\0\2\3"+
    "\11\5\1\201\1\3\11\5\4\3\3\5\16\3\1\60"+
    "\2\3\2\5\1\3\6\5\1\0\1\5\3\3\12\5"+
    "\1\3\1\202\10\5\4\3\3\5\16\3\1\60\2\3"+
    "\2\5\1\3\6\5\1\0\1\5\3\3\12\5\1\3"+
    "\11\5\4\3\3\5\16\3\1\60\2\3\2\5\1\3"+
    "\1\5\1\203\4\5\1\0\1\5\3\3\12\5\1\3"+
    "\2\5\1\204\6\5\4\3\3\5\16\3\1\60\2\3"+
    "\2\5\1\3\6\5\1\0\1\5\17\3\1\205\50\3"+
    "\1\0\4\3\12\5\1\3\5\5\1\206\3\5\4\3"+
    "\3\5\16\3\1\60\2\3\2\5\1\3\6\5\1\0"+
    "\1\5\3\3\12\5\1\3\1\207\10\5\4\3\3\5"+
    "\16\3\1\60\2\3\2\5\1\3\6\5\1\0\1\5"+
    "\3\3\12\5\1\3\6\5\1\210\2\5\4\3\3\5"+
    "\16\3\1\60\2\3\2\5\1\3\6\5\1\0\1\5"+
    "\3\3\12\5\1\3\1\211\10\5\4\3\3\5\16\3"+
    "\1\60\2\3\2\5\1\3\6\5\1\0\1\5\3\3"+
    "\12\5\1\3\5\5\1\212\3\5\4\3\3\5\16\3"+
    "\1\60\2\3\2\5\1\3\6\5\1\0\1\5\3\3"+
    "\12\5\1\3\3\5\1\213\5\5\4\3\3\5\16\3"+
    "\1\60\2\3\2\5\1\3\6\5\1\0\1\5\3\3"+
    "\12\5\1\3\11\5\4\3\2\5\1\214\16\3\1\60"+
    "\2\3\2\5\1\3\6\5\1\0\1\5\1\3\42\153"+
    "\1\200\1\215\26\153\2\3\12\5\1\3\5\5\1\216"+
    "\3\5\4\3\3\5\16\3\1\60\2\3\2\5\1\3"+
    "\6\5\1\0\1\5\3\3\12\5\1\3\7\5\1\217"+
    "\1\5\4\3\3\5\16\3\1\60\2\3\2\5\1\3"+
    "\6\5\1\0\1\5\3\3\12\5\1\3\1\5\1\220"+
    "\7\5\4\3\3\5\16\3\1\60\2\3\2\5\1\3"+
    "\6\5\1\0\1\5\20\3\1\221\47\3\1\0\4\3"+
    "\12\5\1\3\10\5\1\222\4\3\3\5\16\3\1\60"+
    "\2\3\2\5\1\3\6\5\1\0\1\5\3\3\12\5"+
    "\1\3\7\5\1\223\1\5\4\3\3\5\16\3\1\60"+
    "\2\3\2\5\1\3\6\5\1\0\1\5\3\3\12\5"+
    "\1\3\6\5\1\224\2\5\4\3\3\5\16\3\1\60"+
    "\2\3\2\5\1\3\6\5\1\0\1\5\3\3\12\5"+
    "\1\3\11\5\4\3\3\5\7\3\1\225\6\3\1\60"+
    "\2\3\2\5\1\3\6\5\1\0\1\5\3\3\12\5"+
    "\1\3\5\5\1\226\3\5\4\3\3\5\16\3\1\60"+
    "\2\3\2\5\1\3\6\5\1\0\1\5\11\3\1\227"+
    "\56\3\1\0\4\3\12\5\1\3\11\5\4\3\3\5"+
    "\7\3\1\230\6\3\1\60\2\3\2\5\1\3\6\5"+
    "\1\0\1\5\46\3\1\231\21\3\1\0\22\3\1\232"+
    "\46\3\1\0\47\3\1\233\21\3\1\0\2\3";

  private static int [] zzUnpackTrans() {
    int [] result = new int[5974];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\2\0\150\1\1\0\1\11\23\1\1\0\33\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[155];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
    StringBuffer string = new StringBuffer();
    
    private Symbol symbol(int type, Object value){
        System.out.println(value);
        return new Symbol(type, yyline, yycolumn, value);
    }
    
    private Symbol symbol(int type){
        System.out.println(type);
        return new Symbol(type, yyline, yycolumn);
    }


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public LexicoPrograma(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public LexicoPrograma(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn++;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 24: 
          { System.out.print(yytext()); return new Symbol(SintaxisProgramaSym.dosp, yycolumn, yyline, yytext());
          }
        case 64: break;
        case 54: 
          { System.out.print(yytext()); return new Symbol(SintaxisProgramaSym.scanf, yycolumn, yyline, yytext());
          }
        case 65: break;
        case 37: 
          { System.out.print(yytext()); return new Symbol(SintaxisProgramaSym.menosmenos, yycolumn, yyline, yytext());
          }
        case 66: break;
        case 7: 
          { System.out.print(yytext()); return new Symbol(SintaxisProgramaSym.nott, yycolumn, yyline, yytext());
          }
        case 67: break;
        case 27: 
          { System.out.print(yytext()); return new Symbol(SintaxisProgramaSym.intpor, yycolumn, yyline, yytext());
          }
        case 68: break;
        case 44: 
          { System.out.print(yytext()); return new Symbol(SintaxisProgramaSym.forr, yycolumn, yyline, yytext());
          }
        case 69: break;
        case 42: 
          { System.out.print(yytext()); return new Symbol(SintaxisProgramaSym.intt, yycolumn, yyline, yytext());
          }
        case 70: break;
        case 11: 
          { System.out.print(yytext()); return new Symbol(SintaxisProgramaSym.mas, yycolumn, yyline, yytext());
          }
        case 71: break;
        case 15: 
          { System.out.print(yytext()); return new Symbol(SintaxisProgramaSym.para, yycolumn, yyline, yytext());
          }
        case 72: break;
        case 38: 
          { System.out.print(yytext()); return new Symbol(SintaxisProgramaSym.vb, yycolumn, yyline, yytext());
          }
        case 73: break;
        case 36: 
          { System.out.print(yytext()); return new Symbol(SintaxisProgramaSym.masmas, yycolumn, yyline, yytext());
          }
        case 74: break;
        case 2: 
          { System.out.print(yytext()); /*IGNORAR*/
          }
        case 75: break;
        case 17: 
          { System.out.print(yytext()); return new Symbol(SintaxisProgramaSym.llavea, yycolumn, yyline, yytext());
          }
        case 76: break;
        case 30: 
          { System.out.print(yytext()); return new Symbol(SintaxisProgramaSym.andd, yycolumn, yyline, yytext());
          }
        case 77: break;
        case 59: 
          { System.out.print(yytext()); return new Symbol(SintaxisProgramaSym.printf, yycolumn, yyline, yytext());
          }
        case 78: break;
        case 29: 
          { System.out.print(yytext()); return new Symbol(SintaxisProgramaSym.charpor, yycolumn, yyline, yytext());
          }
        case 79: break;
        case 22: 
          { System.out.print(yytext()); return new Symbol(SintaxisProgramaSym.punto, yycolumn, yyline, yytext());
          }
        case 80: break;
        case 26: 
          { System.out.print(yytext()); return new Symbol(SintaxisProgramaSym.iff, yycolumn, yyline, yytext());
          }
        case 81: break;
        case 56: 
          { System.out.print(yytext()); return new Symbol(SintaxisProgramaSym.whilee, yycolumn, yyline, yytext());
          }
        case 82: break;
        case 33: 
          { System.out.print(yytext()); return new Symbol(SintaxisProgramaSym.igig, yycolumn, yyline, yytext());
          }
        case 83: break;
        case 3: 
          { System.out.print(yytext()); return new Symbol(SintaxisProgramaSym.id, yycolumn, yyline, yytext());
          }
        case 84: break;
        case 51: 
          { System.out.print(yytext()); return new Symbol(SintaxisProgramaSym.elsee, yycolumn, yyline, yytext());
          }
        case 85: break;
        case 16: 
          { System.out.print(yytext()); return new Symbol(SintaxisProgramaSym.parc, yycolumn, yyline, yytext());
          }
        case 86: break;
        case 63: 
          { System.out.print(yytext()); return new Symbol(SintaxisProgramaSym.clrs, yycolumn, yyline, yytext());
          }
        case 87: break;
        case 58: 
          { System.out.print(yytext()); return new Symbol(SintaxisProgramaSym.switchh, yycolumn, yyline, yytext());
          }
        case 88: break;
        case 18: 
          { System.out.print(yytext()); return new Symbol(SintaxisProgramaSym.llavec, yycolumn, yyline, yytext());
          }
        case 89: break;
        case 19: 
          { System.out.print(yytext()); return new Symbol(SintaxisProgramaSym.cora, yycolumn, yyline, yytext());
          }
        case 90: break;
        case 57: 
          { System.out.print(yytext()); return new Symbol(SintaxisProgramaSym.breakk, yycolumn, yyline, yytext());
          }
        case 91: break;
        case 1: 
          { System.out.print(yytext()); return new Symbol(SintaxisProgramaSym.txt, yycolumn, yyline, yytext());/*error*/
          }
        case 92: break;
        case 35: 
          { System.out.print(yytext()); return new Symbol(SintaxisProgramaSym.mayorig, yycolumn, yyline, yytext());
          }
        case 93: break;
        case 13: 
          { System.out.print(yytext()); return new Symbol(SintaxisProgramaSym.por, yycolumn, yyline, yytext());
          }
        case 94: break;
        case 55: 
          { System.out.print(yytext()); return new Symbol(SintaxisProgramaSym.floatt, yycolumn, yyline, yytext());
          }
        case 95: break;
        case 47: 
          { System.out.print(yytext()); return new Symbol(SintaxisProgramaSym.voidd, yycolumn, yyline, yytext());
          }
        case 96: break;
        case 60: 
          { System.out.print(yytext()); return new Symbol(SintaxisProgramaSym.defaultt, yycolumn, yyline, yytext());
          }
        case 97: break;
        case 32: 
          { System.out.print(yytext()); return new Symbol(SintaxisProgramaSym.noigual, yycolumn, yyline, yytext());
          }
        case 98: break;
        case 8: 
          { System.out.print(yytext()); return new Symbol(SintaxisProgramaSym.igual, yycolumn, yyline, yytext());
          }
        case 99: break;
        case 45: 
          { System.out.print(yytext()); return new Symbol(SintaxisProgramaSym.com, yycolumn, yyline, yytext());
          }
        case 100: break;
        case 25: 
          { System.out.print(yytext()); return new Symbol(SintaxisProgramaSym.comilla, yycolumn, yyline, yytext());
          }
        case 101: break;
        case 21: 
          { System.out.print(yytext()); return new Symbol(SintaxisProgramaSym.coma, yycolumn, yyline, yytext());
          }
        case 102: break;
        case 5: 
          { System.out.print(yytext()); return new Symbol(SintaxisProgramaSym.mod, yycolumn, yyline, yytext());
          }
        case 103: break;
        case 49: 
          { System.out.print(yytext()); return new Symbol(SintaxisProgramaSym.casee, yycolumn, yyline, yytext());
          }
        case 104: break;
        case 46: 
          { System.out.print(yytext()); return new Symbol(SintaxisProgramaSym.character, yycolumn, yyline, yytext().substring(1, yytext().length() - 1));
          }
        case 105: break;
        case 20: 
          { System.out.print(yytext()); return new Symbol(SintaxisProgramaSym.corc, yycolumn, yyline, yytext());
          }
        case 106: break;
        case 50: 
          { System.out.print(yytext()); return new Symbol(SintaxisProgramaSym.charr, yycolumn, yyline, yytext());
          }
        case 107: break;
        case 43: 
          { System.out.print(yytext()); return new Symbol(SintaxisProgramaSym.doo, yycolumn, yyline, yytext());
          }
        case 108: break;
        case 39: 
          { System.out.print(yytext()); return new Symbol(SintaxisProgramaSym.py, yycolumn, yyline, yytext());
          }
        case 109: break;
        case 14: 
          { System.out.print(yytext()); return new Symbol(SintaxisProgramaSym.div, yycolumn, yyline, yytext());
          }
        case 110: break;
        case 61: 
          { System.out.print(yytext()); return new Symbol(SintaxisProgramaSym.getch, yycolumn, yyline, yytext());
          }
        case 111: break;
        case 48: 
          { System.out.print(yytext()); return new Symbol(SintaxisProgramaSym.mainn, yycolumn, yyline, yytext());
          }
        case 112: break;
        case 53: 
          { System.out.print(yytext()); return new Symbol(SintaxisProgramaSym.constt, yycolumn, yyline, yytext());
          }
        case 113: break;
        case 41: 
          { System.out.print(yytext()); return new Symbol(SintaxisProgramaSym.decimal, yycolumn, yyline, yytext());
          }
        case 114: break;
        case 62: 
          { System.out.print(yytext()); return new Symbol(SintaxisProgramaSym.includee, yycolumn, yyline, yytext());
          }
        case 115: break;
        case 40: 
          { System.out.print(yytext()); return new Symbol(SintaxisProgramaSym.idlib, yycolumn, yyline, yytext());
          }
        case 116: break;
        case 23: 
          { System.out.print(yytext()); return new Symbol(SintaxisProgramaSym.puntocoma, yycolumn, yyline, yytext());
          }
        case 117: break;
        case 34: 
          { System.out.print(yytext()); return new Symbol(SintaxisProgramaSym.menorig, yycolumn, yyline, yytext());
          }
        case 118: break;
        case 6: 
          { System.out.print(yytext()); return new Symbol(SintaxisProgramaSym.asig, yycolumn, yyline, yytext());
          }
        case 119: break;
        case 4: 
          { System.out.print(yytext()); return new Symbol(SintaxisProgramaSym.entero, yycolumn, yyline, yytext());
          }
        case 120: break;
        case 9: 
          { System.out.print(yytext()); return new Symbol(SintaxisProgramaSym.menor, yycolumn, yyline, yytext());
          }
        case 121: break;
        case 12: 
          { System.out.print(yytext()); return new Symbol(SintaxisProgramaSym.menos, yycolumn, yyline, yytext());
          }
        case 122: break;
        case 28: 
          { System.out.print(yytext()); return new Symbol(SintaxisProgramaSym.floatpor, yycolumn, yyline, yytext());
          }
        case 123: break;
        case 31: 
          { System.out.print(yytext()); return new Symbol(SintaxisProgramaSym.orr, yycolumn, yyline, yytext());
          }
        case 124: break;
        case 10: 
          { System.out.print(yytext()); return new Symbol(SintaxisProgramaSym.mayor, yycolumn, yyline, yytext());
          }
        case 125: break;
        case 52: 
          { System.out.print(yytext()); return new Symbol(SintaxisProgramaSym.java, yycolumn, yyline, yytext());
          }
        case 126: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
              { return new java_cup.runtime.Symbol(SintaxisProgramaSym.EOF); }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
