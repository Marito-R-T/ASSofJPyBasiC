
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package com.mycompany.assofjpybasic.backend.analizador.principal;

import java_cup.runtime.*;
import com.mycompany.assofjpybasic.backend.semantica.programa.*;
import java.util.ArrayList;
import java.util.List;
import com.mycompany.assofjpybasic.backend.semantica.programa.cod3.*;
import com.mycompany.assofjpybasic.backend.semantica.python.*;
import com.mycompany.assofjpybasic.backend.semantica.java.*;
import com.mycompany.assofjpybasic.backend.semantica.visual.*;
import com.mycompany.assofjpybasic.backend.error.Errores;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class SintaxisPrograma extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return SintaxisProgramaSym.class;
}

  /** Default constructor. */
  @Deprecated
  public SintaxisPrograma() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public SintaxisPrograma(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public SintaxisPrograma(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\364\000\002\002\004\000\002\066\005\000\002\002" +
    "\004\000\002\002\002\000\002\003\003\000\002\003\003" +
    "\000\002\003\005\000\002\003\004\000\002\003\004\000" +
    "\002\031\003\000\002\031\003\000\002\004\011\000\002" +
    "\004\004\000\002\004\002\000\002\004\011\000\002\004" +
    "\010\000\002\004\011\000\002\004\011\000\002\006\003" +
    "\000\002\006\003\000\002\006\003\000\002\010\005\000" +
    "\002\010\006\000\002\010\006\000\002\010\006\000\002" +
    "\025\006\000\002\025\005\000\002\025\005\000\002\025" +
    "\005\000\002\025\005\000\002\025\006\000\002\025\006" +
    "\000\002\025\006\000\002\024\006\000\002\024\005\000" +
    "\002\024\005\000\002\024\005\000\002\024\006\000\002" +
    "\007\006\000\002\007\004\000\002\007\006\000\002\007" +
    "\004\000\002\012\004\000\002\012\004\000\002\012\002" +
    "\000\002\013\005\000\002\013\005\000\002\013\003\000" +
    "\002\013\004\000\002\014\005\000\002\014\005\000\002" +
    "\014\005\000\002\014\003\000\002\015\004\000\002\015" +
    "\004\000\002\015\003\000\002\016\003\000\002\016\003" +
    "\000\002\016\003\000\002\016\003\000\002\016\004\000" +
    "\002\016\005\000\002\016\004\000\002\005\011\000\002" +
    "\005\011\000\002\005\011\000\002\005\011\000\002\005" +
    "\011\000\002\042\004\000\002\042\002\000\002\043\003" +
    "\000\002\043\003\000\002\043\003\000\002\044\003\000" +
    "\002\044\003\000\002\044\003\000\002\044\003\000\002" +
    "\044\003\000\002\041\004\000\002\041\003\000\002\041" +
    "\004\000\002\041\003\000\002\041\003\000\002\041\004" +
    "\000\002\041\004\000\002\041\003\000\002\040\005\000" +
    "\002\040\006\000\002\040\005\000\002\040\006\000\002" +
    "\040\006\000\002\040\006\000\002\040\006\000\002\036" +
    "\012\000\002\036\010\000\002\036\012\000\002\063\004" +
    "\000\002\063\002\000\002\062\005\000\002\062\002\000" +
    "\002\062\005\000\002\037\012\000\002\037\010\000\002" +
    "\061\006\000\002\061\002\000\002\061\006\000\002\061" +
    "\006\000\002\061\006\000\002\070\002\000\002\051\014" +
    "\000\002\071\002\000\002\051\014\000\002\072\002\000" +
    "\002\051\014\000\002\073\002\000\002\051\014\000\002" +
    "\074\002\000\002\051\014\000\002\075\002\000\002\051" +
    "\014\000\002\076\002\000\002\064\014\000\002\077\002" +
    "\000\002\064\014\000\002\100\002\000\002\064\014\000" +
    "\002\101\002\000\002\064\014\000\002\102\002\000\002" +
    "\064\014\000\002\103\002\000\002\064\014\000\002\064" +
    "\002\000\002\104\002\000\002\052\007\000\002\052\002" +
    "\000\002\045\012\000\002\045\012\000\002\045\012\000" +
    "\002\045\012\000\002\045\012\000\002\105\002\000\002" +
    "\065\010\000\002\106\002\000\002\065\010\000\002\065" +
    "\002\000\002\056\004\000\002\056\004\000\002\056\002" +
    "\000\002\107\002\000\002\057\006\000\002\057\002\000" +
    "\002\110\002\000\002\053\012\000\002\111\002\000\002" +
    "\053\012\000\002\112\002\000\002\054\014\000\002\113" +
    "\002\000\002\055\016\000\002\114\002\000\002\055\016" +
    "\000\002\115\002\000\002\055\016\000\002\116\002\000" +
    "\002\055\016\000\002\117\002\000\002\055\012\000\002" +
    "\120\002\000\002\055\016\000\002\121\002\000\002\055" +
    "\016\000\002\050\003\000\002\050\003\000\002\050\006" +
    "\000\002\047\003\000\002\047\003\000\002\046\004\000" +
    "\002\046\004\000\002\046\004\000\002\046\004\000\002" +
    "\046\004\000\002\035\005\000\002\035\003\000\002\034" +
    "\005\000\002\034\003\000\002\033\004\000\002\033\003" +
    "\000\002\033\005\000\002\032\005\000\002\032\005\000" +
    "\002\032\005\000\002\032\005\000\002\032\005\000\002" +
    "\032\005\000\002\017\010\000\002\017\010\000\002\017" +
    "\012\000\002\017\010\000\002\017\012\000\002\017\010" +
    "\000\002\017\010\000\002\017\010\000\002\017\010\000" +
    "\002\017\010\000\002\017\010\000\002\017\012\000\002" +
    "\017\012\000\002\017\012\000\002\017\012\000\002\011" +
    "\003\000\002\011\003\000\002\011\003\000\002\060\007" +
    "\000\002\060\007\000\002\060\007\000\002\060\007\000" +
    "\002\060\007\000\002\067\006\000\002\067\004\000\002" +
    "\067\006\000\002\030\005\000\002\030\005\000\002\030" +
    "\002\000\002\026\003\000\002\026\002\000\002\027\005" +
    "\000\002\027\003\000\002\027\005\000\002\020\005\000" +
    "\002\020\005\000\002\020\003\000\002\021\005\000\002" +
    "\021\005\000\002\021\005\000\002\021\003\000\002\022" +
    "\004\000\002\022\004\000\002\022\003\000\002\023\003" +
    "\000\002\023\003\000\002\023\003\000\002\023\003\000" +
    "\002\023\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u026c\000\026\003\ufffe\004\ufffe\006\ufffe\007\ufffe\010" +
    "\ufffe\011\ufffe\027\ufffe\064\ufffe\065\ufffe\066\ufffe\001\002" +
    "\000\026\003\011\004\ufff4\006\ufff4\007\ufff4\010\ufff4\011" +
    "\ufff4\027\015\064\012\065\010\066\013\001\002\000\004" +
    "\002\006\001\002\000\004\002\001\001\002\000\014\004" +
    "\033\006\024\007\031\010\030\011\027\001\002\000\026" +
    "\003\ufffd\004\ufffd\006\ufffd\007\ufffd\010\ufffd\011\ufffd\027" +
    "\ufffd\064\ufffd\065\ufffd\066\ufffd\001\002\000\014\003\011" +
    "\027\015\064\012\065\010\066\013\001\002\000\006\040" +
    "\017\070\021\001\002\000\026\003\ufffc\004\ufffc\006\ufffc" +
    "\007\ufffc\010\ufffc\011\ufffc\027\ufffc\064\ufffc\065\ufffc\066" +
    "\ufffc\001\002\000\026\003\uffff\004\uffff\006\uffff\007\uffff" +
    "\010\uffff\011\uffff\027\uffff\064\uffff\065\uffff\066\uffff\001" +
    "\002\000\004\067\016\001\002\000\026\003\ufffa\004\ufffa" +
    "\006\ufffa\007\ufffa\010\ufffa\011\ufffa\027\ufffa\064\ufffa\065" +
    "\ufffa\066\ufffa\001\002\000\004\074\ufff8\001\002\000\004" +
    "\074\022\001\002\000\004\074\ufff7\001\002\000\026\003" +
    "\ufffb\004\ufffb\006\ufffb\007\ufffb\010\ufffb\011\ufffb\027\ufffb" +
    "\064\ufffb\065\ufffb\066\ufffb\001\002\000\026\003\ufff9\004" +
    "\ufff9\006\ufff9\007\ufff9\010\ufff9\011\ufff9\027\ufff9\064\ufff9" +
    "\065\ufff9\066\ufff9\001\002\000\012\003\u0260\007\031\010" +
    "\030\011\027\001\002\000\014\004\ufff5\006\ufff5\007\ufff5" +
    "\010\ufff5\011\ufff5\001\002\000\004\002\000\001\002\000" +
    "\006\003\uffed\070\uffed\001\002\000\006\003\uffee\070\uffee" +
    "\001\002\000\006\003\uffef\070\uffef\001\002\000\006\003" +
    "\u0223\070\u0224\001\002\000\006\003\034\005\035\001\002" +
    "\000\004\043\u021d\001\002\000\006\003\037\043\036\001" +
    "\002\000\006\003\u0212\044\u0213\001\002\000\004\044\040" +
    "\001\002\000\004\045\041\001\002\000\046\003\065\007" +
    "\031\010\030\011\027\016\063\020\076\021\047\023\054" +
    "\026\067\046\uffbc\055\074\056\062\057\072\060\050\070" +
    "\061\075\057\076\056\077\042\001\002\000\006\003\u0207" +
    "\054\u0206\001\002\000\054\003\uffac\007\uffac\010\uffac\011" +
    "\uffac\016\uffac\020\uffac\021\uffac\022\uffac\023\uffac\024\uffac" +
    "\025\uffac\026\uffac\046\uffac\055\uffac\056\uffac\057\uffac\060" +
    "\uffac\070\uffac\075\uffac\076\uffac\077\uffac\001\002\000\004" +
    "\052\u0205\001\002\000\054\003\uffb8\007\uffb8\010\uffb8\011" +
    "\uffb8\016\uffb8\020\uffb8\021\uffb8\022\uffb8\023\uffb8\024\uffb8" +
    "\025\uffb8\026\uffb8\046\uffb8\055\uffb8\056\uffb8\057\uffb8\060" +
    "\uffb8\070\uffb8\075\uffb8\076\uffb8\077\uffb8\001\002\000\054" +
    "\003\uffaf\007\uffaf\010\uffaf\011\uffaf\016\uffaf\020\uffaf\021" +
    "\uffaf\022\uffaf\023\uffaf\024\uffaf\025\uffaf\026\uffaf\046\uffaf" +
    "\055\uffaf\056\uffaf\057\uffaf\060\uffaf\070\uffaf\075\uffaf\076" +
    "\uffaf\077\uffaf\001\002\000\006\003\u01d8\043\u01d7\001\002" +
    "\000\004\052\u01d6\001\002\000\054\003\uffb4\007\uffb4\010" +
    "\uffb4\011\uffb4\016\uffb4\020\uffb4\021\uffb4\022\uffb4\023\uffb4" +
    "\024\uffb4\025\uffb4\026\uffb4\046\uffb4\055\uffb4\056\uffb4\057" +
    "\uffb4\060\uffb4\070\uffb4\075\uffb4\076\uffb4\077\uffb4\001\002" +
    "\000\054\003\uffb0\007\uffb0\010\uffb0\011\uffb0\016\uffb0\020" +
    "\uffb0\021\uffb0\022\uffb0\023\uffb0\024\uffb0\025\uffb0\026\uffb0" +
    "\046\uffb0\055\uffb0\056\uffb0\057\uffb0\060\uffb0\070\uffb0\075" +
    "\uffb0\076\uffb0\077\uffb0\001\002\000\054\003\uffb5\007\uffb5" +
    "\010\uffb5\011\uffb5\016\uffb5\020\uffb5\021\uffb5\022\uffb5\023" +
    "\uffb5\024\uffb5\025\uffb5\026\uffb5\046\uffb5\055\uffb5\056\uffb5" +
    "\057\uffb5\060\uffb5\070\uffb5\075\uffb5\076\uffb5\077\uffb5\001" +
    "\002\000\004\043\u01c9\001\002\000\004\046\u01c8\001\002" +
    "\000\006\003\u01b8\054\u01b7\001\002\000\006\003\u01a7\054" +
    "\u01a6\001\002\000\054\003\uffb7\007\uffb7\010\uffb7\011\uffb7" +
    "\016\uffb7\020\uffb7\021\uffb7\022\uffb7\023\uffb7\024\uffb7\025" +
    "\uffb7\026\uffb7\046\uffb7\055\uffb7\056\uffb7\057\uffb7\060\uffb7" +
    "\070\uffb7\075\uffb7\076\uffb7\077\uffb7\001\002\000\010\003" +
    "\107\047\111\061\110\001\002\000\004\043\u0193\001\002" +
    "\000\006\003\u016d\043\u016c\001\002\000\004\052\u016b\001" +
    "\002\000\064\003\uffb9\007\uffb9\010\uffb9\011\uffb9\016\uffb9" +
    "\020\uffb9\021\uffb9\022\uffb9\023\uffb9\024\uffb9\025\uffb9\026" +
    "\uffb9\043\u0127\046\uffb9\047\111\054\u0128\055\uffb9\056\uffb9" +
    "\057\uffb9\060\uffb9\061\304\070\uffb9\075\uffb9\076\uffb9\077" +
    "\uffb9\001\002\000\054\003\uffba\007\uffba\010\uffba\011\uffba" +
    "\016\uffba\020\uffba\021\uffba\022\uffba\023\uffba\024\uffba\025" +
    "\uffba\026\uffba\046\uffba\055\uffba\056\uffba\057\uffba\060\uffba" +
    "\070\uffba\075\uffba\076\uffba\077\uffba\001\002\000\004\045" +
    "\u011e\001\002\000\054\003\uffb2\007\uffb2\010\uffb2\011\uffb2" +
    "\016\uffb2\020\uffb2\021\uffb2\022\uffb2\023\uffb2\024\uffb2\025" +
    "\uffb2\026\uffb2\046\uffb2\055\uffb2\056\uffb2\057\uffb2\060\uffb2" +
    "\070\uffb2\075\uffb2\076\uffb2\077\uffb2\001\002\000\046\003" +
    "\065\007\031\010\030\011\027\016\063\020\076\021\047" +
    "\023\054\026\067\046\uffbc\055\074\056\062\057\072\060" +
    "\050\070\061\075\057\076\056\077\042\001\002\000\004" +
    "\052\u011c\001\002\000\054\003\uffb6\007\uffb6\010\uffb6\011" +
    "\uffb6\016\uffb6\020\uffb6\021\uffb6\022\uffb6\023\uffb6\024\uffb6" +
    "\025\uffb6\026\uffb6\046\uffb6\055\uffb6\056\uffb6\057\uffb6\060" +
    "\uffb6\070\uffb6\075\uffb6\076\uffb6\077\uffb6\001\002\000\004" +
    "\043\u010a\001\002\000\054\003\uffbb\007\uffbb\010\uffbb\011" +
    "\uffbb\016\uffbb\020\uffbb\021\uffbb\022\uffbb\023\uffbb\024\uffbb" +
    "\025\uffbb\026\uffbb\046\uffbb\055\uffbb\056\uffbb\057\uffbb\060" +
    "\uffbb\070\uffbb\075\uffbb\076\uffbb\077\uffbb\001\002\000\006" +
    "\003\100\043\077\001\002\000\014\003\337\007\031\010" +
    "\030\011\027\070\105\001\002\000\014\003\101\007\031" +
    "\010\030\011\027\070\105\001\002\000\006\047\111\061" +
    "\304\001\002\000\004\052\uff55\001\002\000\004\052\255" +
    "\001\002\000\004\070\252\001\002\000\012\003\107\047" +
    "\111\052\uff54\061\110\001\002\000\006\047\141\061\247" +
    "\001\002\000\004\061\244\001\002\000\032\003\166\036" +
    "\124\037\116\043\125\060\162\070\112\071\122\072\115" +
    "\073\120\075\057\076\056\077\161\001\002\000\022\003" +
    "\123\036\124\037\116\043\125\070\112\071\122\072\115" +
    "\073\120\001\002\000\052\003\uffc9\013\uffc9\014\uffc9\030" +
    "\uffc9\031\uffc9\032\uffc9\033\uffc9\034\uffc9\035\uffc9\036\uffc9" +
    "\037\uffc9\040\uffc9\041\uffc9\042\uffc9\044\uffc9\047\111\050" +
    "\uffc9\051\uffc9\052\uffc9\053\uffc9\001\002\000\012\003\156" +
    "\036\146\037\147\050\157\001\002\000\050\003\uffcd\013" +
    "\uffcd\014\uffcd\030\uffcd\031\uffcd\032\uffcd\033\uffcd\034\uffcd" +
    "\035\uffcd\036\uffcd\037\uffcd\040\uffcd\041\uffcd\042\uffcd\044" +
    "\uffcd\050\uffcd\051\uffcd\052\uffcd\053\uffcd\001\002\000\050" +
    "\003\uffc7\013\uffc7\014\uffc7\030\uffc7\031\uffc7\032\uffc7\033" +
    "\uffc7\034\uffc7\035\uffc7\036\uffc7\037\uffc7\040\uffc7\041\uffc7" +
    "\042\uffc7\044\uffc7\050\uffc7\051\uffc7\052\uffc7\053\uffc7\001" +
    "\002\000\022\003\132\036\124\037\116\043\125\070\112" +
    "\071\122\072\115\073\120\001\002\000\050\003\uffca\013" +
    "\uffca\014\uffca\030\uffca\031\uffca\032\uffca\033\uffca\034\uffca" +
    "\035\uffca\036\uffca\037\uffca\040\uffca\041\uffca\042\uffca\044" +
    "\uffca\050\uffca\051\uffca\052\uffca\053\uffca\001\002\000\050" +
    "\003\uffc6\013\uffc6\014\uffc6\030\uffc6\031\uffc6\032\uffc6\033" +
    "\uffc6\034\uffc6\035\uffc6\036\uffc6\037\uffc6\040\uffc6\041\uffc6" +
    "\042\uffc6\044\uffc6\050\uffc6\051\uffc6\052\uffc6\053\uffc6\001" +
    "\002\000\050\003\uffd2\013\uffd2\014\uffd2\030\uffd2\031\uffd2" +
    "\032\uffd2\033\uffd2\034\uffd2\035\uffd2\036\uffd2\037\uffd2\040" +
    "\133\041\135\042\134\044\uffd2\050\uffd2\051\uffd2\052\uffd2" +
    "\053\uffd2\001\002\000\050\003\uffc8\013\uffc8\014\uffc8\030" +
    "\uffc8\031\uffc8\032\uffc8\033\uffc8\034\uffc8\035\uffc8\036\uffc8" +
    "\037\uffc8\040\uffc8\041\uffc8\042\uffc8\044\uffc8\050\uffc8\051" +
    "\uffc8\052\uffc8\053\uffc8\001\002\000\026\003\132\036\124" +
    "\037\116\043\125\047\111\050\154\070\112\071\122\072" +
    "\115\073\120\001\002\000\022\003\132\036\124\037\116" +
    "\043\125\070\112\071\122\072\115\073\120\001\002\000" +
    "\022\003\127\036\124\037\116\043\125\070\112\071\122" +
    "\072\115\073\120\001\002\000\010\036\146\037\147\044" +
    "\152\001\002\000\024\003\132\036\124\037\116\043\125" +
    "\047\111\070\112\071\122\072\115\073\120\001\002\000" +
    "\052\003\uffc3\013\uffc3\014\uffc3\030\uffc3\031\uffc3\032\uffc3" +
    "\033\uffc3\034\uffc3\035\uffc3\036\uffc3\037\uffc3\040\uffc3\041" +
    "\uffc3\042\uffc3\044\uffc3\047\141\050\uffc3\051\uffc3\052\uffc3" +
    "\053\uffc3\001\002\000\050\003\uffd1\013\uffd1\014\uffd1\030" +
    "\uffd1\031\uffd1\032\uffd1\033\uffd1\034\uffd1\035\uffd1\036\uffd1" +
    "\037\uffd1\040\133\041\135\042\134\044\uffd1\050\uffd1\051" +
    "\uffd1\052\uffd1\053\uffd1\001\002\000\004\047\111\001\002" +
    "\000\022\003\132\036\124\037\116\043\125\070\112\071" +
    "\122\072\115\073\120\001\002\000\022\003\132\036\124" +
    "\037\116\043\125\070\112\071\122\072\115\073\120\001" +
    "\002\000\022\003\132\036\124\037\116\043\125\070\112" +
    "\071\122\072\115\073\120\001\002\000\050\003\uffcf\013" +
    "\uffcf\014\uffcf\030\uffcf\031\uffcf\032\uffcf\033\uffcf\034\uffcf" +
    "\035\uffcf\036\uffcf\037\uffcf\040\uffcf\041\uffcf\042\uffcf\044" +
    "\uffcf\050\uffcf\051\uffcf\052\uffcf\053\uffcf\001\002\000\050" +
    "\003\uffce\013\uffce\014\uffce\030\uffce\031\uffce\032\uffce\033" +
    "\uffce\034\uffce\035\uffce\036\uffce\037\uffce\040\uffce\041\uffce" +
    "\042\uffce\044\uffce\050\uffce\051\uffce\052\uffce\053\uffce\001" +
    "\002\000\050\003\uffd0\013\uffd0\014\uffd0\030\uffd0\031\uffd0" +
    "\032\uffd0\033\uffd0\034\uffd0\035\uffd0\036\uffd0\037\uffd0\040" +
    "\uffd0\041\uffd0\042\uffd0\044\uffd0\050\uffd0\051\uffd0\052\uffd0" +
    "\053\uffd0\001\002\000\022\003\143\036\124\037\116\043" +
    "\125\070\112\071\122\072\115\073\120\001\002\000\010" +
    "\036\146\037\147\050\145\001\002\000\026\003\132\036" +
    "\124\037\116\043\125\047\111\050\144\070\112\071\122" +
    "\072\115\073\120\001\002\000\054\003\uffdc\013\uffdc\014" +
    "\uffdc\030\uffdc\031\uffdc\032\uffdc\033\uffdc\034\uffdc\035\uffdc" +
    "\036\uffdc\037\uffdc\040\uffdc\041\uffdc\042\uffdc\044\uffdc\047" +
    "\uffdc\050\uffdc\051\uffdc\052\uffdc\053\uffdc\061\uffdc\001\002" +
    "\000\054\003\uffe0\013\uffe0\014\uffe0\030\uffe0\031\uffe0\032" +
    "\uffe0\033\uffe0\034\uffe0\035\uffe0\036\uffe0\037\uffe0\040\uffe0" +
    "\041\uffe0\042\uffe0\044\uffe0\047\uffe0\050\uffe0\051\uffe0\052" +
    "\uffe0\053\uffe0\061\uffe0\001\002\000\022\003\132\036\124" +
    "\037\116\043\125\070\112\071\122\072\115\073\120\001" +
    "\002\000\022\003\132\036\124\037\116\043\125\070\112" +
    "\071\122\072\115\073\120\001\002\000\050\003\uffd3\013" +
    "\uffd3\014\uffd3\030\uffd3\031\uffd3\032\uffd3\033\uffd3\034\uffd3" +
    "\035\uffd3\036\uffd3\037\uffd3\040\133\041\135\042\134\044" +
    "\uffd3\050\uffd3\051\uffd3\052\uffd3\053\uffd3\001\002\000\050" +
    "\003\uffd4\013\uffd4\014\uffd4\030\uffd4\031\uffd4\032\uffd4\033" +
    "\uffd4\034\uffd4\035\uffd4\036\uffd4\037\uffd4\040\133\041\135" +
    "\042\134\044\uffd4\050\uffd4\051\uffd4\052\uffd4\053\uffd4\001" +
    "\002\000\050\003\uffc4\013\uffc4\014\uffc4\030\uffc4\031\uffc4" +
    "\032\uffc4\033\uffc4\034\uffc4\035\uffc4\036\uffc4\037\uffc4\040" +
    "\uffc4\041\uffc4\042\uffc4\044\uffc4\050\uffc4\051\uffc4\052\uffc4" +
    "\053\uffc4\001\002\000\050\003\uffcb\013\uffcb\014\uffcb\030" +
    "\uffcb\031\uffcb\032\uffcb\033\uffcb\034\uffcb\035\uffcb\036\uffcb" +
    "\037\uffcb\040\uffcb\041\uffcb\042\uffcb\044\uffcb\050\uffcb\051" +
    "\uffcb\052\uffcb\053\uffcb\001\002\000\054\003\uffde\013\uffde" +
    "\014\uffde\030\uffde\031\uffde\032\uffde\033\uffde\034\uffde\035" +
    "\uffde\036\uffde\037\uffde\040\uffde\041\uffde\042\uffde\044\uffde" +
    "\047\uffde\050\uffde\051\uffde\052\uffde\053\uffde\061\uffde\001" +
    "\002\000\050\003\uffcc\013\uffcc\014\uffcc\030\uffcc\031\uffcc" +
    "\032\uffcc\033\uffcc\034\uffcc\035\uffcc\036\uffcc\037\uffcc\040" +
    "\uffcc\041\uffcc\042\uffcc\044\uffcc\050\uffcc\051\uffcc\052\uffcc" +
    "\053\uffcc\001\002\000\054\003\uffdd\013\uffdd\014\uffdd\030" +
    "\uffdd\031\uffdd\032\uffdd\033\uffdd\034\uffdd\035\uffdd\036\uffdd" +
    "\037\uffdd\040\uffdd\041\uffdd\042\uffdd\044\uffdd\047\uffdd\050" +
    "\uffdd\051\uffdd\052\uffdd\053\uffdd\061\uffdd\001\002\000\054" +
    "\003\uffdf\013\uffdf\014\uffdf\030\uffdf\031\uffdf\032\uffdf\033" +
    "\uffdf\034\uffdf\035\uffdf\036\uffdf\037\uffdf\040\uffdf\041\uffdf" +
    "\042\uffdf\044\uffdf\047\uffdf\050\uffdf\051\uffdf\052\uffdf\053" +
    "\uffdf\061\uffdf\001\002\000\052\003\uffc5\013\uffc5\014\uffc5" +
    "\030\uffc5\031\uffc5\032\uffc5\033\uffc5\034\uffc5\035\uffc5\036" +
    "\uffc5\037\uffc5\040\uffc5\041\uffc5\042\uffc5\044\uffc5\047\141" +
    "\050\uffc5\051\uffc5\052\uffc5\053\uffc5\001\002\000\006\003" +
    "\210\054\207\001\002\000\012\003\uff2d\044\uff2d\051\uff2d" +
    "\052\uff2d\001\002\000\006\044\uffab\052\uffab\001\002\000" +
    "\016\003\uff2e\036\146\037\147\044\uff2e\051\uff2e\052\uff2e" +
    "\001\002\000\012\003\uff2f\044\uff2f\051\uff2f\052\uff2f\001" +
    "\002\000\032\003\132\036\124\037\116\043\125\044\uffa9" +
    "\047\111\052\uffa9\054\167\070\112\071\122\072\115\073" +
    "\120\001\002\000\004\070\170\001\002\000\006\043\171" +
    "\054\172\001\002\000\024\003\127\036\124\037\116\043" +
    "\125\044\uff20\070\112\071\122\072\115\073\120\001\002" +
    "\000\004\070\173\001\002\000\004\043\174\001\002\000" +
    "\024\003\127\036\124\037\116\043\125\044\uff20\070\112" +
    "\071\122\072\115\073\120\001\002\000\014\003\uff1e\036" +
    "\146\037\147\044\uff1e\051\uff1e\001\002\000\004\044\204" +
    "\001\002\000\010\003\200\044\uff21\051\201\001\002\000" +
    "\022\003\127\036\124\037\116\043\125\070\112\071\122" +
    "\072\115\073\120\001\002\000\022\003\127\036\124\037" +
    "\116\043\125\070\112\071\122\072\115\073\120\001\002" +
    "\000\014\003\uff1f\036\146\037\147\044\uff1f\051\uff1f\001" +
    "\002\000\014\003\uff1d\036\146\037\147\044\uff1d\051\uff1d" +
    "\001\002\000\012\003\uff3a\044\uff3a\051\uff3a\052\uff3a\001" +
    "\002\000\004\044\206\001\002\000\012\003\uff3b\044\uff3b" +
    "\051\uff3b\052\uff3b\001\002\000\006\003\217\070\220\001" +
    "\002\000\004\070\211\001\002\000\004\054\212\001\002" +
    "\000\004\070\213\001\002\000\004\043\214\001\002\000" +
    "\024\003\127\036\124\037\116\043\125\044\uff20\070\112" +
    "\071\122\072\115\073\120\001\002\000\004\044\216\001" +
    "\002\000\012\003\uff33\044\uff33\051\uff33\052\uff33\001\002" +
    "\000\004\054\237\001\002\000\006\003\222\054\221\001" +
    "\002\000\006\003\227\070\230\001\002\000\004\070\223" +
    "\001\002\000\004\043\224\001\002\000\024\003\127\036" +
    "\124\037\116\043\125\044\uff20\070\112\071\122\072\115" +
    "\073\120\001\002\000\004\044\226\001\002\000\012\003" +
    "\uff31\044\uff31\051\uff31\052\uff31\001\002\000\004\043\234" +
    "\001\002\000\004\043\231\001\002\000\024\003\127\036" +
    "\124\037\116\043\125\044\uff20\070\112\071\122\072\115" +
    "\073\120\001\002\000\004\044\233\001\002\000\012\003" +
    "\uff3c\044\uff3c\051\uff3c\052\uff3c\001\002\000\024\003\127" +
    "\036\124\037\116\043\125\044\uff20\070\112\071\122\072" +
    "\115\073\120\001\002\000\004\044\236\001\002\000\012" +
    "\003\uff30\044\uff30\051\uff30\052\uff30\001\002\000\004\070" +
    "\240\001\002\000\004\043\241\001\002\000\024\003\127" +
    "\036\124\037\116\043\125\044\uff20\070\112\071\122\072" +
    "\115\073\120\001\002\000\004\044\243\001\002\000\012" +
    "\003\uff32\044\uff32\051\uff32\052\uff32\001\002\000\032\003" +
    "\246\036\124\037\116\043\125\060\162\070\112\071\122" +
    "\072\115\073\120\075\057\076\056\077\161\001\002\000" +
    "\006\044\uffa8\052\uffa8\001\002\000\026\003\132\036\124" +
    "\037\116\043\125\047\111\054\167\070\112\071\122\072" +
    "\115\073\120\001\002\000\032\003\251\036\124\037\116" +
    "\043\125\060\162\070\112\071\122\072\115\073\120\075" +
    "\057\076\056\077\161\001\002\000\006\044\uffaa\052\uffaa" +
    "\001\002\000\032\003\132\036\124\037\116\043\125\044" +
    "\uffa6\047\111\052\uffa6\054\167\070\112\071\122\072\115" +
    "\073\120\001\002\000\004\061\253\001\002\000\032\003" +
    "\246\036\124\037\116\043\125\060\162\070\112\071\122" +
    "\072\115\073\120\075\057\076\056\077\161\001\002\000" +
    "\004\052\uff53\001\002\000\024\003\127\015\260\036\124" +
    "\037\116\043\263\070\112\071\122\072\115\073\120\001" +
    "\002\000\014\003\uff46\013\uff46\014\uff46\044\uff46\052\uff46" +
    "\001\002\000\014\003\uff4a\013\270\014\uff4a\044\uff4a\052" +
    "\uff4a\001\002\000\024\003\127\015\260\036\124\037\116" +
    "\043\263\070\112\071\122\072\115\073\120\001\002\000" +
    "\022\030\325\031\324\032\323\033\326\034\322\035\327" +
    "\036\146\037\147\001\002\000\014\003\uff48\013\uff48\014" +
    "\uff48\044\uff48\052\uff48\001\002\000\024\003\127\015\260" +
    "\036\124\037\116\043\263\070\112\071\122\072\115\073" +
    "\120\001\002\000\006\014\266\052\265\001\002\000\006" +
    "\003\273\070\276\001\002\000\024\003\127\015\260\036" +
    "\124\037\116\043\263\070\112\071\122\072\115\073\120" +
    "\001\002\000\014\003\uff4b\013\270\014\uff4b\044\uff4b\052" +
    "\uff4b\001\002\000\024\003\127\015\260\036\124\037\116" +
    "\043\263\070\112\071\122\072\115\073\120\001\002\000" +
    "\014\003\uff49\013\uff49\014\uff49\044\uff49\052\uff49\001\002" +
    "\000\004\044\312\001\002\000\012\047\111\061\304\062" +
    "\303\063\305\001\002\000\004\044\uff52\001\002\000\004" +
    "\044\uff51\001\002\000\014\003\277\047\111\061\110\062" +
    "\300\063\301\001\002\000\006\044\uff4c\061\244\001\002" +
    "\000\004\044\uff50\001\002\000\004\044\uff4f\001\002\000" +
    "\006\047\141\061\310\001\002\000\004\044\uff4e\001\002" +
    "\000\004\061\306\001\002\000\004\044\uff4d\001\002\000" +
    "\032\003\246\036\124\037\116\043\125\060\162\070\112" +
    "\071\122\072\115\073\120\075\057\076\056\077\161\001" +
    "\002\000\006\044\uffa7\052\uffa7\001\002\000\004\003\311" +
    "\001\002\000\006\044\uffa5\052\uffa5\001\002\000\004\045" +
    "\313\001\002\000\046\003\uff59\007\uff59\010\uff59\011\uff59" +
    "\016\uff59\020\uff59\021\uff59\023\uff59\026\uff59\046\uff59\055" +
    "\uff59\056\uff59\057\uff59\060\uff59\070\uff59\075\uff59\076\uff59" +
    "\077\uff59\001\002\000\046\003\065\007\031\010\030\011" +
    "\027\016\063\020\076\021\047\023\054\026\067\046\uffbc" +
    "\055\074\056\062\057\072\060\050\070\061\075\057\076" +
    "\056\077\042\001\002\000\004\046\316\001\002\000\054" +
    "\003\uff58\007\uff58\010\uff58\011\uff58\016\uff58\020\uff58\021" +
    "\uff58\022\uff58\023\uff58\024\uff58\025\uff58\026\uff58\046\uff58" +
    "\055\uff58\056\uff58\057\uff58\060\uff58\070\uff58\075\uff58\076" +
    "\uff58\077\uff58\001\002\000\024\030\325\031\324\032\323" +
    "\033\326\034\322\035\327\036\146\037\147\044\152\001" +
    "\002\000\006\014\266\044\321\001\002\000\014\003\uff45" +
    "\013\uff45\014\uff45\044\uff45\052\uff45\001\002\000\022\003" +
    "\127\036\124\037\116\043\125\070\112\071\122\072\115" +
    "\073\120\001\002\000\022\003\127\036\124\037\116\043" +
    "\125\070\112\071\122\072\115\073\120\001\002\000\022" +
    "\003\127\036\124\037\116\043\125\070\112\071\122\072" +
    "\115\073\120\001\002\000\022\003\127\036\124\037\116" +
    "\043\125\070\112\071\122\072\115\073\120\001\002\000" +
    "\022\003\127\036\124\037\116\043\125\070\112\071\122" +
    "\072\115\073\120\001\002\000\022\003\127\036\124\037" +
    "\116\043\125\070\112\071\122\072\115\073\120\001\002" +
    "\000\020\003\uff44\013\uff44\014\uff44\036\146\037\147\044" +
    "\uff44\052\uff44\001\002\000\020\003\uff40\013\uff40\014\uff40" +
    "\036\146\037\147\044\uff40\052\uff40\001\002\000\020\003" +
    "\uff43\013\uff43\014\uff43\036\146\037\147\044\uff43\052\uff43" +
    "\001\002\000\020\003\uff42\013\uff42\014\uff42\036\146\037" +
    "\147\044\uff42\052\uff42\001\002\000\020\003\uff41\013\uff41" +
    "\014\uff41\036\146\037\147\044\uff41\052\uff41\001\002\000" +
    "\020\003\uff3f\013\uff3f\014\uff3f\036\146\037\147\044\uff3f" +
    "\052\uff3f\001\002\000\014\003\uff47\013\uff47\014\uff47\044" +
    "\uff47\052\uff47\001\002\000\012\044\375\047\111\052\374" +
    "\061\304\001\002\000\004\052\341\001\002\000\024\003" +
    "\342\015\260\036\124\037\116\043\263\070\112\071\122" +
    "\072\115\073\120\001\002\000\026\003\132\036\124\037" +
    "\116\043\125\047\111\052\365\070\112\071\122\072\115" +
    "\073\120\001\002\000\006\014\266\052\344\001\002\000" +
    "\006\003\346\070\276\001\002\000\004\044\354\001\002" +
    "\000\014\044\347\047\111\061\304\062\303\063\305\001" +
    "\002\000\004\045\350\001\002\000\046\003\uff5d\007\uff5d" +
    "\010\uff5d\011\uff5d\016\uff5d\020\uff5d\021\uff5d\023\uff5d\026" +
    "\uff5d\046\uff5d\055\uff5d\056\uff5d\057\uff5d\060\uff5d\070\uff5d" +
    "\075\uff5d\076\uff5d\077\uff5d\001\002\000\046\003\065\007" +
    "\031\010\030\011\027\016\063\020\076\021\047\023\054" +
    "\026\067\046\uffbc\055\074\056\062\057\072\060\050\070" +
    "\061\075\057\076\056\077\042\001\002\000\004\046\353" +
    "\001\002\000\054\003\uff5c\007\uff5c\010\uff5c\011\uff5c\016" +
    "\uff5c\020\uff5c\021\uff5c\022\uff5c\023\uff5c\024\uff5c\025\uff5c" +
    "\026\uff5c\046\uff5c\055\uff5c\056\uff5c\057\uff5c\060\uff5c\070" +
    "\uff5c\075\uff5c\076\uff5c\077\uff5c\001\002\000\006\003\355" +
    "\045\356\001\002\000\046\003\uff57\007\uff57\010\uff57\011" +
    "\uff57\016\uff57\020\uff57\021\uff57\023\uff57\026\uff57\046\uff57" +
    "\055\uff57\056\uff57\057\uff57\060\uff57\070\uff57\075\uff57\076" +
    "\uff57\077\uff57\001\002\000\046\003\uff63\007\uff63\010\uff63" +
    "\011\uff63\016\uff63\020\uff63\021\uff63\023\uff63\026\uff63\046" +
    "\uff63\055\uff63\056\uff63\057\uff63\060\uff63\070\uff63\075\uff63" +
    "\076\uff63\077\uff63\001\002\000\046\003\065\007\031\010" +
    "\030\011\027\016\063\020\076\021\047\023\054\026\067" +
    "\046\uffbc\055\074\056\062\057\072\060\050\070\061\075" +
    "\057\076\056\077\042\001\002\000\004\046\361\001\002" +
    "\000\054\003\uff62\007\uff62\010\uff62\011\uff62\016\uff62\020" +
    "\uff62\021\uff62\022\uff62\023\uff62\024\uff62\025\uff62\026\uff62" +
    "\046\uff62\055\uff62\056\uff62\057\uff62\060\uff62\070\uff62\075" +
    "\uff62\076\uff62\077\uff62\001\002\000\046\003\065\007\031" +
    "\010\030\011\027\016\063\020\076\021\047\023\054\026" +
    "\067\046\uffbc\055\074\056\062\057\072\060\050\070\061" +
    "\075\057\076\056\077\042\001\002\000\004\046\364\001" +
    "\002\000\054\003\uff56\007\uff56\010\uff56\011\uff56\016\uff56" +
    "\020\uff56\021\uff56\022\uff56\023\uff56\024\uff56\025\uff56\026" +
    "\uff56\046\uff56\055\uff56\056\uff56\057\uff56\060\uff56\070\uff56" +
    "\075\uff56\076\uff56\077\uff56\001\002\000\006\003\273\070" +
    "\276\001\002\000\004\044\367\001\002\000\004\045\370" +
    "\001\002\000\046\003\uff5f\007\uff5f\010\uff5f\011\uff5f\016" +
    "\uff5f\020\uff5f\021\uff5f\023\uff5f\026\uff5f\046\uff5f\055\uff5f" +
    "\056\uff5f\057\uff5f\060\uff5f\070\uff5f\075\uff5f\076\uff5f\077" +
    "\uff5f\001\002\000\046\003\065\007\031\010\030\011\027" +
    "\016\063\020\076\021\047\023\054\026\067\046\uffbc\055" +
    "\074\056\062\057\072\060\050\070\061\075\057\076\056" +
    "\077\042\001\002\000\004\046\373\001\002\000\054\003" +
    "\uff5e\007\uff5e\010\uff5e\011\uff5e\016\uff5e\020\uff5e\021\uff5e" +
    "\022\uff5e\023\uff5e\024\uff5e\025\uff5e\026\uff5e\046\uff5e\055" +
    "\uff5e\056\uff5e\057\uff5e\060\uff5e\070\uff5e\075\uff5e\076\uff5e" +
    "\077\uff5e\001\002\000\024\003\127\015\260\036\124\037" +
    "\116\043\263\070\112\071\122\072\115\073\120\001\002" +
    "\000\004\045\376\001\002\000\046\003\uff5b\007\uff5b\010" +
    "\uff5b\011\uff5b\016\uff5b\020\uff5b\021\uff5b\023\uff5b\026\uff5b" +
    "\046\uff5b\055\uff5b\056\uff5b\057\uff5b\060\uff5b\070\uff5b\075" +
    "\uff5b\076\uff5b\077\uff5b\001\002\000\046\003\065\007\031" +
    "\010\030\011\027\016\063\020\076\021\047\023\054\026" +
    "\067\046\uffbc\055\074\056\062\057\072\060\050\070\061" +
    "\075\057\076\056\077\042\001\002\000\004\046\u0101\001" +
    "\002\000\054\003\uff5a\007\uff5a\010\uff5a\011\uff5a\016\uff5a" +
    "\020\uff5a\021\uff5a\022\uff5a\023\uff5a\024\uff5a\025\uff5a\026" +
    "\uff5a\046\uff5a\055\uff5a\056\uff5a\057\uff5a\060\uff5a\070\uff5a" +
    "\075\uff5a\076\uff5a\077\uff5a\001\002\000\006\014\266\052" +
    "\u0103\001\002\000\006\003\273\070\276\001\002\000\004" +
    "\044\u0105\001\002\000\004\045\u0106\001\002\000\046\003" +
    "\uff61\007\uff61\010\uff61\011\uff61\016\uff61\020\uff61\021\uff61" +
    "\023\uff61\026\uff61\046\uff61\055\uff61\056\uff61\057\uff61\060" +
    "\uff61\070\uff61\075\uff61\076\uff61\077\uff61\001\002\000\046" +
    "\003\065\007\031\010\030\011\027\016\063\020\076\021" +
    "\047\023\054\026\067\046\uffbc\055\074\056\062\057\072" +
    "\060\050\070\061\075\057\076\056\077\042\001\002\000" +
    "\004\046\u0109\001\002\000\054\003\uff60\007\uff60\010\uff60" +
    "\011\uff60\016\uff60\020\uff60\021\uff60\022\uff60\023\uff60\024" +
    "\uff60\025\uff60\026\uff60\046\uff60\055\uff60\056\uff60\057\uff60" +
    "\060\uff60\070\uff60\075\uff60\076\uff60\077\uff60\001\002\000" +
    "\006\003\u010b\074\u010c\001\002\000\006\044\uff9e\051\uff9e" +
    "\001\002\000\006\074\uffa0\100\uffa0\001\002\000\006\074" +
    "\u010f\100\u010e\001\002\000\006\074\uffa1\100\uffa1\001\002" +
    "\000\010\003\u0111\044\uff9e\051\uff9e\001\002\000\006\044" +
    "\u0115\051\u0114\001\002\000\004\044\u0112\001\002\000\004" +
    "\052\u0113\001\002\000\054\003\uffa2\007\uffa2\010\uffa2\011" +
    "\uffa2\016\uffa2\020\uffa2\021\uffa2\022\uffa2\023\uffa2\024\uffa2" +
    "\025\uffa2\026\uffa2\046\uffa2\055\uffa2\056\uffa2\057\uffa2\060" +
    "\uffa2\070\uffa2\075\uffa2\076\uffa2\077\uffa2\001\002\000\032" +
    "\003\u0118\036\124\037\116\043\125\060\162\070\112\071" +
    "\122\072\115\073\120\075\057\076\056\077\161\001\002" +
    "\000\004\052\u0116\001\002\000\054\003\uffa4\007\uffa4\010" +
    "\uffa4\011\uffa4\016\uffa4\020\uffa4\021\uffa4\022\uffa4\023\uffa4" +
    "\024\uffa4\025\uffa4\026\uffa4\046\uffa4\055\uffa4\056\uffa4\057" +
    "\uffa4\060\uffa4\070\uffa4\075\uffa4\076\uffa4\077\uffa4\001\002" +
    "\000\006\044\uff9f\051\uff9f\001\002\000\032\003\132\036" +
    "\124\037\116\043\125\044\uff9d\047\111\051\uff9d\054\167" +
    "\070\112\071\122\072\115\073\120\001\002\000\006\044" +
    "\u011a\051\u0114\001\002\000\004\052\u011b\001\002\000\054" +
    "\003\uffa3\007\uffa3\010\uffa3\011\uffa3\016\uffa3\020\uffa3\021" +
    "\uffa3\022\uffa3\023\uffa3\024\uffa3\025\uffa3\026\uffa3\046\uffa3" +
    "\055\uffa3\056\uffa3\057\uffa3\060\uffa3\070\uffa3\075\uffa3\076" +
    "\uffa3\077\uffa3\001\002\000\054\003\uffb3\007\uffb3\010\uffb3" +
    "\011\uffb3\016\uffb3\020\uffb3\021\uffb3\022\uffb3\023\uffb3\024" +
    "\uffb3\025\uffb3\026\uffb3\046\uffb3\055\uffb3\056\uffb3\057\uffb3" +
    "\060\uffb3\070\uffb3\075\uffb3\076\uffb3\077\uffb3\001\002\000" +
    "\004\046\uffbd\001\002\000\046\003\uff65\007\uff65\010\uff65" +
    "\011\uff65\016\uff65\020\uff65\021\uff65\023\uff65\026\uff65\046" +
    "\uff65\055\uff65\056\uff65\057\uff65\060\uff65\070\uff65\075\uff65" +
    "\076\uff65\077\uff65\001\002\000\046\003\065\007\031\010" +
    "\030\011\027\016\063\020\076\021\047\023\054\026\067" +
    "\046\uffbc\055\074\056\062\057\072\060\050\070\061\075" +
    "\057\076\056\077\042\001\002\000\004\046\u0121\001\002" +
    "\000\004\023\u0122\001\002\000\004\043\u0123\001\002\000" +
    "\024\003\127\015\260\036\124\037\116\043\263\070\112" +
    "\071\122\072\115\073\120\001\002\000\006\014\266\044" +
    "\u0125\001\002\000\004\052\u0126\001\002\000\054\003\uff64" +
    "\007\uff64\010\uff64\011\uff64\016\uff64\020\uff64\021\uff64\022" +
    "\uff64\023\uff64\024\uff64\025\uff64\026\uff64\046\uff64\055\uff64" +
    "\056\uff64\057\uff64\060\uff64\070\uff64\075\uff64\076\uff64\077" +
    "\uff64\001\002\000\024\003\127\015\260\036\124\037\116" +
    "\043\263\070\112\071\122\072\115\073\120\001\002\000" +
    "\004\070\u0129\001\002\000\010\043\171\054\172\070\u012b" +
    "\001\002\000\006\051\u0133\052\u0132\001\002\000\012\003" +
    "\uff22\043\u012c\051\uff22\052\uff22\001\002\000\024\003\u012f" +
    "\036\124\037\116\043\125\044\uff20\070\112\071\122\072" +
    "\115\073\120\001\002\000\010\003\uff26\051\uff26\052\uff26" +
    "\001\002\000\004\044\u0131\001\002\000\026\003\132\036" +
    "\124\037\116\043\125\044\u0130\047\111\070\112\071\122" +
    "\072\115\073\120\001\002\000\010\003\uff23\051\uff23\052" +
    "\uff23\001\002\000\010\003\uff24\051\uff24\052\uff24\001\002" +
    "\000\054\003\uff2b\007\uff2b\010\uff2b\011\uff2b\016\uff2b\020" +
    "\uff2b\021\uff2b\022\uff2b\023\uff2b\024\uff2b\025\uff2b\026\uff2b" +
    "\046\uff2b\055\uff2b\056\uff2b\057\uff2b\060\uff2b\070\uff2b\075" +
    "\uff2b\076\uff2b\077\uff2b\001\002\000\006\003\u0134\070\u0135" +
    "\001\002\000\012\003\uff22\043\u012c\051\uff22\052\uff22\001" +
    "\002\000\012\003\uff22\043\u012c\051\uff22\052\uff22\001\002" +
    "\000\010\003\uff27\051\uff27\052\uff27\001\002\000\010\003" +
    "\uff25\051\uff25\052\uff25\001\002\000\006\014\266\044\u0139" +
    "\001\002\000\004\045\u013a\001\002\000\046\003\uff91\007" +
    "\uff91\010\uff91\011\uff91\016\uff91\020\uff91\021\uff91\023\uff91" +
    "\026\uff91\046\uff91\055\uff91\056\uff91\057\uff91\060\uff91\070" +
    "\uff91\075\uff91\076\uff91\077\uff91\001\002\000\046\003\065" +
    "\007\031\010\030\011\027\016\063\020\076\021\047\023" +
    "\054\026\067\046\uffbc\055\074\056\062\057\072\060\050" +
    "\070\061\075\057\076\056\077\042\001\002\000\004\046" +
    "\u013d\001\002\000\056\003\uff7d\007\uff7d\010\uff7d\011\uff7d" +
    "\016\uff7d\017\uff7d\020\uff7d\021\uff7d\022\uff7d\023\uff7d\024" +
    "\uff7d\025\uff7d\026\uff7d\046\uff7d\055\uff7d\056\uff7d\057\uff7d" +
    "\060\uff7d\070\uff7d\075\uff7d\076\uff7d\077\uff7d\001\002\000" +
    "\056\003\uff7a\007\uff7a\010\uff7a\011\uff7a\016\uff7a\017\u0140" +
    "\020\uff7a\021\uff7a\022\uff7a\023\uff7a\024\uff7a\025\uff7a\026" +
    "\uff7a\046\uff7a\055\uff7a\056\uff7a\057\uff7a\060\uff7a\070\uff7a" +
    "\075\uff7a\076\uff7a\077\uff7a\001\002\000\054\003\uff90\007" +
    "\uff90\010\uff90\011\uff90\016\uff90\020\uff90\021\uff90\022\uff90" +
    "\023\uff90\024\uff90\025\uff90\026\uff90\046\uff90\055\uff90\056" +
    "\uff90\057\uff90\060\uff90\070\uff90\075\uff90\076\uff90\077\uff90" +
    "\001\002\000\010\003\u0142\016\u0141\045\u0143\001\002\000" +
    "\006\003\u014f\043\u014e\001\002\000\004\043\u0147\001\002" +
    "\000\046\003\uff7c\007\uff7c\010\uff7c\011\uff7c\016\uff7c\020" +
    "\uff7c\021\uff7c\023\uff7c\026\uff7c\046\uff7c\055\uff7c\056\uff7c" +
    "\057\uff7c\060\uff7c\070\uff7c\075\uff7c\076\uff7c\077\uff7c\001" +
    "\002\000\046\003\065\007\031\010\030\011\027\016\063" +
    "\020\076\021\047\023\054\026\067\046\uffbc\055\074\056" +
    "\062\057\072\060\050\070\061\075\057\076\056\077\042" +
    "\001\002\000\004\046\u0146\001\002\000\054\003\uff7b\007" +
    "\uff7b\010\uff7b\011\uff7b\016\uff7b\020\uff7b\021\uff7b\022\uff7b" +
    "\023\uff7b\024\uff7b\025\uff7b\026\uff7b\046\uff7b\055\uff7b\056" +
    "\uff7b\057\uff7b\060\uff7b\070\uff7b\075\uff7b\076\uff7b\077\uff7b" +
    "\001\002\000\024\003\127\015\260\036\124\037\116\043" +
    "\263\070\112\071\122\072\115\073\120\001\002\000\006" +
    "\014\266\044\u0149\001\002\000\004\045\u014a\001\002\000" +
    "\046\003\uff85\007\uff85\010\uff85\011\uff85\016\uff85\020\uff85" +
    "\021\uff85\023\uff85\026\uff85\046\uff85\055\uff85\056\uff85\057" +
    "\uff85\060\uff85\070\uff85\075\uff85\076\uff85\077\uff85\001\002" +
    "\000\046\003\065\007\031\010\030\011\027\016\063\020" +
    "\076\021\047\023\054\026\067\046\uffbc\055\074\056\062" +
    "\057\072\060\050\070\061\075\057\076\056\077\042\001" +
    "\002\000\004\046\u014d\001\002\000\056\003\uff84\007\uff84" +
    "\010\uff84\011\uff84\016\uff84\017\uff84\020\uff84\021\uff84\022" +
    "\uff84\023\uff84\024\uff84\025\uff84\026\uff84\046\uff84\055\uff84" +
    "\056\uff84\057\uff84\060\uff84\070\uff84\075\uff84\076\uff84\077" +
    "\uff84\001\002\000\024\003\u0156\015\260\036\124\037\116" +
    "\043\263\070\112\071\122\072\115\073\120\001\002\000" +
    "\024\003\127\015\260\036\124\037\116\043\263\070\112" +
    "\071\122\072\115\073\120\001\002\000\006\014\266\044" +
    "\u0151\001\002\000\004\045\u0152\001\002\000\046\003\uff83" +
    "\007\uff83\010\uff83\011\uff83\016\uff83\020\uff83\021\uff83\023" +
    "\uff83\026\uff83\046\uff83\055\uff83\056\uff83\057\uff83\060\uff83" +
    "\070\uff83\075\uff83\076\uff83\077\uff83\001\002\000\046\003" +
    "\065\007\031\010\030\011\027\016\063\020\076\021\047" +
    "\023\054\026\067\046\uffbc\055\074\056\062\057\072\060" +
    "\050\070\061\075\057\076\056\077\042\001\002\000\004" +
    "\046\u0155\001\002\000\056\003\uff82\007\uff82\010\uff82\011" +
    "\uff82\016\uff82\017\uff82\020\uff82\021\uff82\022\uff82\023\uff82" +
    "\024\uff82\025\uff82\026\uff82\046\uff82\055\uff82\056\uff82\057" +
    "\uff82\060\uff82\070\uff82\075\uff82\076\uff82\077\uff82\001\002" +
    "\000\026\003\132\036\124\037\116\043\125\044\u0166\047" +
    "\111\070\112\071\122\072\115\073\120\001\002\000\010" +
    "\003\u0158\014\266\044\u0159\001\002\000\004\045\u0162\001" +
    "\002\000\006\003\u015a\045\u015b\001\002\000\046\003\uff7f" +
    "\007\uff7f\010\uff7f\011\uff7f\016\uff7f\020\uff7f\021\uff7f\023" +
    "\uff7f\026\uff7f\046\uff7f\055\uff7f\056\uff7f\057\uff7f\060\uff7f" +
    "\070\uff7f\075\uff7f\076\uff7f\077\uff7f\001\002\000\046\003" +
    "\uff89\007\uff89\010\uff89\011\uff89\016\uff89\020\uff89\021\uff89" +
    "\023\uff89\026\uff89\046\uff89\055\uff89\056\uff89\057\uff89\060" +
    "\uff89\070\uff89\075\uff89\076\uff89\077\uff89\001\002\000\046" +
    "\003\065\007\031\010\030\011\027\016\063\020\076\021" +
    "\047\023\054\026\067\046\uffbc\055\074\056\062\057\072" +
    "\060\050\070\061\075\057\076\056\077\042\001\002\000" +
    "\004\046\u015e\001\002\000\056\003\uff88\007\uff88\010\uff88" +
    "\011\uff88\016\uff88\017\uff88\020\uff88\021\uff88\022\uff88\023" +
    "\uff88\024\uff88\025\uff88\026\uff88\046\uff88\055\uff88\056\uff88" +
    "\057\uff88\060\uff88\070\uff88\075\uff88\076\uff88\077\uff88\001" +
    "\002\000\046\003\065\007\031\010\030\011\027\016\063" +
    "\020\076\021\047\023\054\026\067\046\uffbc\055\074\056" +
    "\062\057\072\060\050\070\061\075\057\076\056\077\042" +
    "\001\002\000\004\046\u0161\001\002\000\056\003\uff7e\007" +
    "\uff7e\010\uff7e\011\uff7e\016\uff7e\017\uff7e\020\uff7e\021\uff7e" +
    "\022\uff7e\023\uff7e\024\uff7e\025\uff7e\026\uff7e\046\uff7e\055" +
    "\uff7e\056\uff7e\057\uff7e\060\uff7e\070\uff7e\075\uff7e\076\uff7e" +
    "\077\uff7e\001\002\000\046\003\uff81\007\uff81\010\uff81\011" +
    "\uff81\016\uff81\020\uff81\021\uff81\023\uff81\026\uff81\046\uff81" +
    "\055\uff81\056\uff81\057\uff81\060\uff81\070\uff81\075\uff81\076" +
    "\uff81\077\uff81\001\002\000\046\003\065\007\031\010\030" +
    "\011\027\016\063\020\076\021\047\023\054\026\067\046" +
    "\uffbc\055\074\056\062\057\072\060\050\070\061\075\057" +
    "\076\056\077\042\001\002\000\004\046\u0165\001\002\000" +
    "\056\003\uff80\007\uff80\010\uff80\011\uff80\016\uff80\017\uff80" +
    "\020\uff80\021\uff80\022\uff80\023\uff80\024\uff80\025\uff80\026" +
    "\uff80\046\uff80\055\uff80\056\uff80\057\uff80\060\uff80\070\uff80" +
    "\075\uff80\076\uff80\077\uff80\001\002\000\004\045\u0167\001" +
    "\002\000\046\003\uff87\007\uff87\010\uff87\011\uff87\016\uff87" +
    "\020\uff87\021\uff87\023\uff87\026\uff87\046\uff87\055\uff87\056" +
    "\uff87\057\uff87\060\uff87\070\uff87\075\uff87\076\uff87\077\uff87" +
    "\001\002\000\046\003\065\007\031\010\030\011\027\016" +
    "\063\020\076\021\047\023\054\026\067\046\uffbc\055\074" +
    "\056\062\057\072\060\050\070\061\075\057\076\056\077" +
    "\042\001\002\000\004\046\u016a\001\002\000\056\003\uff86" +
    "\007\uff86\010\uff86\011\uff86\016\uff86\017\uff86\020\uff86\021" +
    "\uff86\022\uff86\023\uff86\024\uff86\025\uff86\026\uff86\046\uff86" +
    "\055\uff86\056\uff86\057\uff86\060\uff86\070\uff86\075\uff86\076" +
    "\uff86\077\uff86\001\002\000\054\003\uffae\007\uffae\010\uffae" +
    "\011\uffae\016\uffae\020\uffae\021\uffae\022\uffae\023\uffae\024" +
    "\uffae\025\uffae\026\uffae\046\uffae\055\uffae\056\uffae\057\uffae" +
    "\060\uffae\070\uffae\075\uffae\076\uffae\077\uffae\001\002\000" +
    "\024\003\u0176\015\260\036\124\037\116\043\263\070\112" +
    "\071\122\072\115\073\120\001\002\000\024\003\127\015" +
    "\260\036\124\037\116\043\263\070\112\071\122\072\115" +
    "\073\120\001\002\000\006\014\266\044\u016f\001\002\000" +
    "\004\045\u0170\001\002\000\046\003\uff8f\007\uff8f\010\uff8f" +
    "\011\uff8f\016\uff8f\020\uff8f\021\uff8f\023\uff8f\026\uff8f\046" +
    "\uff8f\055\uff8f\056\uff8f\057\uff8f\060\uff8f\070\uff8f\075\uff8f" +
    "\076\uff8f\077\uff8f\001\002\000\046\003\065\007\031\010" +
    "\030\011\027\016\063\020\076\021\047\023\054\026\067" +
    "\046\uffbc\055\074\056\062\057\072\060\050\070\061\075" +
    "\057\076\056\077\042\001\002\000\004\046\u0173\001\002" +
    "\000\056\003\uff7d\007\uff7d\010\uff7d\011\uff7d\016\uff7d\017" +
    "\uff7d\020\uff7d\021\uff7d\022\uff7d\023\uff7d\024\uff7d\025\uff7d" +
    "\026\uff7d\046\uff7d\055\uff7d\056\uff7d\057\uff7d\060\uff7d\070" +
    "\uff7d\075\uff7d\076\uff7d\077\uff7d\001\002\000\056\003\uff7a" +
    "\007\uff7a\010\uff7a\011\uff7a\016\uff7a\017\u0140\020\uff7a\021" +
    "\uff7a\022\uff7a\023\uff7a\024\uff7a\025\uff7a\026\uff7a\046\uff7a" +
    "\055\uff7a\056\uff7a\057\uff7a\060\uff7a\070\uff7a\075\uff7a\076" +
    "\uff7a\077\uff7a\001\002\000\054\003\uff8e\007\uff8e\010\uff8e" +
    "\011\uff8e\016\uff8e\020\uff8e\021\uff8e\022\uff8e\023\uff8e\024" +
    "\uff8e\025\uff8e\026\uff8e\046\uff8e\055\uff8e\056\uff8e\057\uff8e" +
    "\060\uff8e\070\uff8e\075\uff8e\076\uff8e\077\uff8e\001\002\000" +
    "\026\003\132\036\124\037\116\043\125\044\u018c\047\111" +
    "\070\112\071\122\072\115\073\120\001\002\000\010\003" +
    "\u0178\014\266\044\u0179\001\002\000\004\045\u0186\001\002" +
    "\000\006\003\u017a\045\u017b\001\002\000\046\003\uff8b\007" +
    "\uff8b\010\uff8b\011\uff8b\016\uff8b\020\uff8b\021\uff8b\023\uff8b" +
    "\026\uff8b\046\uff8b\055\uff8b\056\uff8b\057\uff8b\060\uff8b\070" +
    "\uff8b\075\uff8b\076\uff8b\077\uff8b\001\002\000\046\003\uff95" +
    "\007\uff95\010\uff95\011\uff95\016\uff95\020\uff95\021\uff95\023" +
    "\uff95\026\uff95\046\uff95\055\uff95\056\uff95\057\uff95\060\uff95" +
    "\070\uff95\075\uff95\076\uff95\077\uff95\001\002\000\046\003" +
    "\065\007\031\010\030\011\027\016\063\020\076\021\047" +
    "\023\054\026\067\046\uffbc\055\074\056\062\057\072\060" +
    "\050\070\061\075\057\076\056\077\042\001\002\000\004" +
    "\046\u017e\001\002\000\056\003\uff7d\007\uff7d\010\uff7d\011" +
    "\uff7d\016\uff7d\017\uff7d\020\uff7d\021\uff7d\022\uff7d\023\uff7d" +
    "\024\uff7d\025\uff7d\026\uff7d\046\uff7d\055\uff7d\056\uff7d\057" +
    "\uff7d\060\uff7d\070\uff7d\075\uff7d\076\uff7d\077\uff7d\001\002" +
    "\000\056\003\uff7a\007\uff7a\010\uff7a\011\uff7a\016\uff7a\017" +
    "\u0140\020\uff7a\021\uff7a\022\uff7a\023\uff7a\024\uff7a\025\uff7a" +
    "\026\uff7a\046\uff7a\055\uff7a\056\uff7a\057\uff7a\060\uff7a\070" +
    "\uff7a\075\uff7a\076\uff7a\077\uff7a\001\002\000\054\003\uff94" +
    "\007\uff94\010\uff94\011\uff94\016\uff94\020\uff94\021\uff94\022" +
    "\uff94\023\uff94\024\uff94\025\uff94\026\uff94\046\uff94\055\uff94" +
    "\056\uff94\057\uff94\060\uff94\070\uff94\075\uff94\076\uff94\077" +
    "\uff94\001\002\000\046\003\065\007\031\010\030\011\027" +
    "\016\063\020\076\021\047\023\054\026\067\046\uffbc\055" +
    "\074\056\062\057\072\060\050\070\061\075\057\076\056" +
    "\077\042\001\002\000\004\046\u0183\001\002\000\056\003" +
    "\uff7d\007\uff7d\010\uff7d\011\uff7d\016\uff7d\017\uff7d\020\uff7d" +
    "\021\uff7d\022\uff7d\023\uff7d\024\uff7d\025\uff7d\026\uff7d\046" +
    "\uff7d\055\uff7d\056\uff7d\057\uff7d\060\uff7d\070\uff7d\075\uff7d" +
    "\076\uff7d\077\uff7d\001\002\000\056\003\uff7a\007\uff7a\010" +
    "\uff7a\011\uff7a\016\uff7a\017\u0140\020\uff7a\021\uff7a\022\uff7a" +
    "\023\uff7a\024\uff7a\025\uff7a\026\uff7a\046\uff7a\055\uff7a\056" +
    "\uff7a\057\uff7a\060\uff7a\070\uff7a\075\uff7a\076\uff7a\077\uff7a" +
    "\001\002\000\054\003\uff8a\007\uff8a\010\uff8a\011\uff8a\016" +
    "\uff8a\020\uff8a\021\uff8a\022\uff8a\023\uff8a\024\uff8a\025\uff8a" +
    "\026\uff8a\046\uff8a\055\uff8a\056\uff8a\057\uff8a\060\uff8a\070" +
    "\uff8a\075\uff8a\076\uff8a\077\uff8a\001\002\000\046\003\uff8d" +
    "\007\uff8d\010\uff8d\011\uff8d\016\uff8d\020\uff8d\021\uff8d\023" +
    "\uff8d\026\uff8d\046\uff8d\055\uff8d\056\uff8d\057\uff8d\060\uff8d" +
    "\070\uff8d\075\uff8d\076\uff8d\077\uff8d\001\002\000\046\003" +
    "\065\007\031\010\030\011\027\016\063\020\076\021\047" +
    "\023\054\026\067\046\uffbc\055\074\056\062\057\072\060" +
    "\050\070\061\075\057\076\056\077\042\001\002\000\004" +
    "\046\u0189\001\002\000\056\003\uff7d\007\uff7d\010\uff7d\011" +
    "\uff7d\016\uff7d\017\uff7d\020\uff7d\021\uff7d\022\uff7d\023\uff7d" +
    "\024\uff7d\025\uff7d\026\uff7d\046\uff7d\055\uff7d\056\uff7d\057" +
    "\uff7d\060\uff7d\070\uff7d\075\uff7d\076\uff7d\077\uff7d\001\002" +
    "\000\056\003\uff7a\007\uff7a\010\uff7a\011\uff7a\016\uff7a\017" +
    "\u0140\020\uff7a\021\uff7a\022\uff7a\023\uff7a\024\uff7a\025\uff7a" +
    "\026\uff7a\046\uff7a\055\uff7a\056\uff7a\057\uff7a\060\uff7a\070" +
    "\uff7a\075\uff7a\076\uff7a\077\uff7a\001\002\000\054\003\uff8c" +
    "\007\uff8c\010\uff8c\011\uff8c\016\uff8c\020\uff8c\021\uff8c\022" +
    "\uff8c\023\uff8c\024\uff8c\025\uff8c\026\uff8c\046\uff8c\055\uff8c" +
    "\056\uff8c\057\uff8c\060\uff8c\070\uff8c\075\uff8c\076\uff8c\077" +
    "\uff8c\001\002\000\004\045\u018d\001\002\000\046\003\uff93" +
    "\007\uff93\010\uff93\011\uff93\016\uff93\020\uff93\021\uff93\023" +
    "\uff93\026\uff93\046\uff93\055\uff93\056\uff93\057\uff93\060\uff93" +
    "\070\uff93\075\uff93\076\uff93\077\uff93\001\002\000\046\003" +
    "\065\007\031\010\030\011\027\016\063\020\076\021\047" +
    "\023\054\026\067\046\uffbc\055\074\056\062\057\072\060" +
    "\050\070\061\075\057\076\056\077\042\001\002\000\004" +
    "\046\u0190\001\002\000\056\003\uff7d\007\uff7d\010\uff7d\011" +
    "\uff7d\016\uff7d\017\uff7d\020\uff7d\021\uff7d\022\uff7d\023\uff7d" +
    "\024\uff7d\025\uff7d\026\uff7d\046\uff7d\055\uff7d\056\uff7d\057" +
    "\uff7d\060\uff7d\070\uff7d\075\uff7d\076\uff7d\077\uff7d\001\002" +
    "\000\056\003\uff7a\007\uff7a\010\uff7a\011\uff7a\016\uff7a\017" +
    "\u0140\020\uff7a\021\uff7a\022\uff7a\023\uff7a\024\uff7a\025\uff7a" +
    "\026\uff7a\046\uff7a\055\uff7a\056\uff7a\057\uff7a\060\uff7a\070" +
    "\uff7a\075\uff7a\076\uff7a\077\uff7a\001\002\000\054\003\uff92" +
    "\007\uff92\010\uff92\011\uff92\016\uff92\020\uff92\021\uff92\022" +
    "\uff92\023\uff92\024\uff92\025\uff92\026\uff92\046\uff92\055\uff92" +
    "\056\uff92\057\uff92\060\uff92\070\uff92\075\uff92\076\uff92\077" +
    "\uff92\001\002\000\004\074\u0194\001\002\000\010\003\u0196" +
    "\074\uffa0\100\uffa0\001\002\000\006\074\u0199\100\u010e\001" +
    "\002\000\004\044\u0197\001\002\000\004\052\u0198\001\002" +
    "\000\054\003\uff9b\007\uff9b\010\uff9b\011\uff9b\016\uff9b\020" +
    "\uff9b\021\uff9b\022\uff9b\023\uff9b\024\uff9b\025\uff9b\026\uff9b" +
    "\046\uff9b\055\uff9b\056\uff9b\057\uff9b\060\uff9b\070\uff9b\075" +
    "\uff9b\076\uff9b\077\uff9b\001\002\000\010\003\uff99\044\uff99" +
    "\051\uff99\001\002\000\010\003\u019b\044\u019d\051\u019c\001" +
    "\002\000\004\012\u01a4\001\002\000\006\003\u019f\012\u01a0" +
    "\001\002\000\004\052\u019e\001\002\000\054\003\uff9c\007" +
    "\uff9c\010\uff9c\011\uff9c\016\uff9c\020\uff9c\021\uff9c\022\uff9c" +
    "\023\uff9c\024\uff9c\025\uff9c\026\uff9c\046\uff9c\055\uff9c\056" +
    "\uff9c\057\uff9c\060\uff9c\070\uff9c\075\uff9c\076\uff9c\077\uff9c" +
    "\001\002\000\004\070\u01a3\001\002\000\006\003\u01a1\070" +
    "\u01a2\001\002\000\010\003\uff96\044\uff96\051\uff96\001\002" +
    "\000\010\003\uff9a\044\uff9a\051\uff9a\001\002\000\010\003" +
    "\uff97\044\uff97\051\uff97\001\002\000\004\070\u01a5\001\002" +
    "\000\010\003\uff98\044\uff98\051\uff98\001\002\000\006\003" +
    "\u01ac\070\u01ad\001\002\000\004\070\u01a8\001\002\000\004" +
    "\043\u01a9\001\002\000\024\003\127\036\124\037\116\043" +
    "\125\044\uff20\070\112\071\122\072\115\073\120\001\002" +
    "\000\004\044\u01ab\001\002\000\012\003\uff39\044\uff39\051" +
    "\uff39\052\uff39\001\002\000\004\043\u01b4\001\002\000\006" +
    "\003\u01af\043\u01ae\001\002\000\024\003\127\036\124\037" +
    "\116\043\125\044\uff20\070\112\071\122\072\115\073\120" +
    "\001\002\000\024\003\127\036\124\037\116\043\125\044" +
    "\uff20\070\112\071\122\072\115\073\120\001\002\000\004" +
    "\044\u01b1\001\002\000\012\003\uff35\044\uff35\051\uff35\052" +
    "\uff35\001\002\000\004\044\u01b3\001\002\000\012\003\uff3e" +
    "\044\uff3e\051\uff3e\052\uff3e\001\002\000\024\003\127\036" +
    "\124\037\116\043\125\044\uff20\070\112\071\122\072\115" +
    "\073\120\001\002\000\004\044\u01b6\001\002\000\012\003" +
    "\uff37\044\uff37\051\uff37\052\uff37\001\002\000\006\003\u01bd" +
    "\070\u01be\001\002\000\004\070\u01b9\001\002\000\004\043" +
    "\u01ba\001\002\000\024\003\127\036\124\037\116\043\125" +
    "\044\uff20\070\112\071\122\072\115\073\120\001\002\000" +
    "\004\044\u01bc\001\002\000\012\003\uff38\044\uff38\051\uff38" +
    "\052\uff38\001\002\000\004\043\u01c5\001\002\000\006\003" +
    "\u01c0\043\u01bf\001\002\000\024\003\127\036\124\037\116" +
    "\043\125\044\uff20\070\112\071\122\072\115\073\120\001" +
    "\002\000\024\003\127\036\124\037\116\043\125\044\uff20" +
    "\070\112\071\122\072\115\073\120\001\002\000\004\044" +
    "\u01c2\001\002\000\012\003\uff34\044\uff34\051\uff34\052\uff34" +
    "\001\002\000\004\044\u01c4\001\002\000\012\003\uff3d\044" +
    "\uff3d\051\uff3d\052\uff3d\001\002\000\024\003\127\036\124" +
    "\037\116\043\125\044\uff20\070\112\071\122\072\115\073" +
    "\120\001\002\000\004\044\u01c7\001\002\000\012\003\uff36" +
    "\044\uff36\051\uff36\052\uff36\001\002\000\004\002\uffc0\001" +
    "\002\000\024\003\u01ca\015\260\036\124\037\116\043\263" +
    "\070\112\071\122\072\115\073\120\001\002\000\026\003" +
    "\132\036\124\037\116\043\125\044\u01d1\047\111\070\112" +
    "\071\122\072\115\073\120\001\002\000\006\014\266\044" +
    "\u01cc\001\002\000\004\045\u01cd\001\002\000\046\003\uff69" +
    "\007\uff69\010\uff69\011\uff69\016\uff69\020\uff69\021\uff69\023" +
    "\uff69\026\uff69\046\uff69\055\uff69\056\uff69\057\uff69\060\uff69" +
    "\070\uff69\075\uff69\076\uff69\077\uff69\001\002\000\046\003" +
    "\065\007\031\010\030\011\027\016\063\020\076\021\047" +
    "\023\054\026\067\046\uffbc\055\074\056\062\057\072\060" +
    "\050\070\061\075\057\076\056\077\042\001\002\000\004" +
    "\046\u01d0\001\002\000\054\003\uff68\007\uff68\010\uff68\011" +
    "\uff68\016\uff68\020\uff68\021\uff68\022\uff68\023\uff68\024\uff68" +
    "\025\uff68\026\uff68\046\uff68\055\uff68\056\uff68\057\uff68\060" +
    "\uff68\070\uff68\075\uff68\076\uff68\077\uff68\001\002\000\004" +
    "\045\u01d2\001\002\000\046\003\uff67\007\uff67\010\uff67\011" +
    "\uff67\016\uff67\020\uff67\021\uff67\023\uff67\026\uff67\046\uff67" +
    "\055\uff67\056\uff67\057\uff67\060\uff67\070\uff67\075\uff67\076" +
    "\uff67\077\uff67\001\002\000\046\003\065\007\031\010\030" +
    "\011\027\016\063\020\076\021\047\023\054\026\067\046" +
    "\uffbc\055\074\056\062\057\072\060\050\070\061\075\057" +
    "\076\056\077\042\001\002\000\004\046\u01d5\001\002\000" +
    "\054\003\uff66\007\uff66\010\uff66\011\uff66\016\uff66\020\uff66" +
    "\021\uff66\022\uff66\023\uff66\024\uff66\025\uff66\026\uff66\046" +
    "\uff66\055\uff66\056\uff66\057\uff66\060\uff66\070\uff66\075\uff66" +
    "\076\uff66\077\uff66\001\002\000\054\003\uffad\007\uffad\010" +
    "\uffad\011\uffad\016\uffad\020\uffad\021\uffad\022\uffad\023\uffad" +
    "\024\uffad\025\uffad\026\uffad\046\uffad\055\uffad\056\uffad\057" +
    "\uffad\060\uffad\070\uffad\075\uffad\076\uffad\077\uffad\001\002" +
    "\000\032\003\u01f1\036\124\037\116\043\125\060\162\070" +
    "\112\071\122\072\115\073\120\075\057\076\056\077\161" +
    "\001\002\000\032\003\246\036\124\037\116\043\125\060" +
    "\162\070\112\071\122\072\115\073\120\075\057\076\056" +
    "\077\161\001\002\000\004\044\u01da\001\002\000\004\045" +
    "\u01db\001\002\000\010\022\uff70\024\uff70\046\uff70\001\002" +
    "\000\010\022\u01df\024\u01de\046\uff6a\001\002\000\004\046" +
    "\u01ef\001\002\000\004\053\u01ec\001\002\000\022\003\u01e1" +
    "\036\124\037\116\043\125\070\112\071\122\072\115\073" +
    "\120\001\002\000\010\036\146\037\147\053\u01e9\001\002" +
    "\000\026\003\132\036\124\037\116\043\125\047\111\053" +
    "\u01e2\070\112\071\122\072\115\073\120\001\002\000\054" +
    "\003\uff72\007\uff72\010\uff72\011\uff72\016\uff72\020\uff72\021" +
    "\uff72\022\uff72\023\uff72\024\uff72\025\uff72\026\uff72\046\uff72" +
    "\055\uff72\056\uff72\057\uff72\060\uff72\070\uff72\075\uff72\076" +
    "\uff72\077\uff72\001\002\000\054\003\065\007\031\010\030" +
    "\011\027\016\063\020\076\021\047\022\uff6d\023\054\024" +
    "\uff6d\025\u01e5\026\067\046\uff6d\055\074\056\062\057\072" +
    "\060\050\070\061\075\057\076\056\077\042\001\002\000" +
    "\010\022\uff71\024\uff71\046\uff71\001\002\000\004\052\u01e8" +
    "\001\002\000\054\003\065\007\031\010\030\011\027\016" +
    "\063\020\076\021\047\022\uff6d\023\054\024\uff6d\025\u01e5" +
    "\026\067\046\uff6d\055\074\056\062\057\072\060\050\070" +
    "\061\075\057\076\056\077\042\001\002\000\010\022\uff6f" +
    "\024\uff6f\046\uff6f\001\002\000\010\022\uff6e\024\uff6e\046" +
    "\uff6e\001\002\000\054\003\uff74\007\uff74\010\uff74\011\uff74" +
    "\016\uff74\020\uff74\021\uff74\022\uff74\023\uff74\024\uff74\025" +
    "\uff74\026\uff74\046\uff74\055\uff74\056\uff74\057\uff74\060\uff74" +
    "\070\uff74\075\uff74\076\uff74\077\uff74\001\002\000\054\003" +
    "\065\007\031\010\030\011\027\016\063\020\076\021\047" +
    "\022\uff6d\023\054\024\uff6d\025\u01e5\026\067\046\uff6d\055" +
    "\074\056\062\057\072\060\050\070\061\075\057\076\056" +
    "\077\042\001\002\000\010\022\uff73\024\uff73\046\uff73\001" +
    "\002\000\050\003\uff6c\007\uff6c\010\uff6c\011\uff6c\016\uff6c" +
    "\020\uff6c\021\uff6c\023\uff6c\025\uff6c\026\uff6c\046\uff6c\055" +
    "\uff6c\056\uff6c\057\uff6c\060\uff6c\070\uff6c\075\uff6c\076\uff6c" +
    "\077\uff6c\001\002\000\050\003\065\007\031\010\030\011" +
    "\027\016\063\020\076\021\047\023\054\025\u01e5\026\067" +
    "\046\uff6d\055\074\056\062\057\072\060\050\070\061\075" +
    "\057\076\056\077\042\001\002\000\004\046\uff6b\001\002" +
    "\000\054\003\uff77\007\uff77\010\uff77\011\uff77\016\uff77\020" +
    "\uff77\021\uff77\022\uff77\023\uff77\024\uff77\025\uff77\026\uff77" +
    "\046\uff77\055\uff77\056\uff77\057\uff77\060\uff77\070\uff77\075" +
    "\uff77\076\uff77\077\uff77\001\002\000\006\003\u01f7\044\u01f8" +
    "\001\002\000\030\003\132\036\124\037\116\043\125\044" +
    "\u01f2\047\111\054\167\070\112\071\122\072\115\073\120" +
    "\001\002\000\004\045\u01f3\001\002\000\010\022\uff70\024" +
    "\uff70\046\uff70\001\002\000\010\022\u01df\024\u01de\046\uff6a" +
    "\001\002\000\004\046\u01f6\001\002\000\054\003\uff78\007" +
    "\uff78\010\uff78\011\uff78\016\uff78\020\uff78\021\uff78\022\uff78" +
    "\023\uff78\024\uff78\025\uff78\026\uff78\046\uff78\055\uff78\056" +
    "\uff78\057\uff78\060\uff78\070\uff78\075\uff78\076\uff78\077\uff78" +
    "\001\002\000\004\045\u0201\001\002\000\006\003\u01f9\045" +
    "\u01fa\001\002\000\010\022\uff70\024\uff70\046\uff70\001\002" +
    "\000\010\022\uff70\024\uff70\046\uff70\001\002\000\010\022" +
    "\u01df\024\u01de\046\uff6a\001\002\000\004\046\u01fd\001\002" +
    "\000\054\003\uff79\007\uff79\010\uff79\011\uff79\016\uff79\020" +
    "\uff79\021\uff79\022\uff79\023\uff79\024\uff79\025\uff79\026\uff79" +
    "\046\uff79\055\uff79\056\uff79\057\uff79\060\uff79\070\uff79\075" +
    "\uff79\076\uff79\077\uff79\001\002\000\010\022\u01df\024\u01de" +
    "\046\uff6a\001\002\000\004\046\u0200\001\002\000\054\003" +
    "\uff75\007\uff75\010\uff75\011\uff75\016\uff75\020\uff75\021\uff75" +
    "\022\uff75\023\uff75\024\uff75\025\uff75\026\uff75\046\uff75\055" +
    "\uff75\056\uff75\057\uff75\060\uff75\070\uff75\075\uff75\076\uff75" +
    "\077\uff75\001\002\000\010\022\uff70\024\uff70\046\uff70\001" +
    "\002\000\010\022\u01df\024\u01de\046\uff6a\001\002\000\004" +
    "\046\u0204\001\002\000\054\003\uff76\007\uff76\010\uff76\011" +
    "\uff76\016\uff76\020\uff76\021\uff76\022\uff76\023\uff76\024\uff76" +
    "\025\uff76\026\uff76\046\uff76\055\uff76\056\uff76\057\uff76\060" +
    "\uff76\070\uff76\075\uff76\076\uff76\077\uff76\001\002\000\054" +
    "\003\uffb1\007\uffb1\010\uffb1\011\uffb1\016\uffb1\020\uffb1\021" +
    "\uffb1\022\uffb1\023\uffb1\024\uffb1\025\uffb1\026\uffb1\046\uffb1" +
    "\055\uffb1\056\uffb1\057\uffb1\060\uffb1\070\uffb1\075\uffb1\076" +
    "\uffb1\077\uffb1\001\002\000\006\003\u020b\070\u020c\001\002" +
    "\000\004\070\u0208\001\002\000\006\054\212\070\u012b\001" +
    "\002\000\006\051\u0133\052\u020a\001\002\000\054\003\uff2a" +
    "\007\uff2a\010\uff2a\011\uff2a\016\uff2a\020\uff2a\021\uff2a\022" +
    "\uff2a\023\uff2a\024\uff2a\025\uff2a\026\uff2a\046\uff2a\055\uff2a" +
    "\056\uff2a\057\uff2a\060\uff2a\070\uff2a\075\uff2a\076\uff2a\077" +
    "\uff2a\001\002\000\006\054\237\070\u012b\001\002\000\010" +
    "\003\222\054\221\070\u012b\001\002\000\010\003\u020f\051" +
    "\u0133\052\u020e\001\002\000\054\003\uff2c\007\uff2c\010\uff2c" +
    "\011\uff2c\016\uff2c\020\uff2c\021\uff2c\022\uff2c\023\uff2c\024" +
    "\uff2c\025\uff2c\026\uff2c\046\uff2c\055\uff2c\056\uff2c\057\uff2c" +
    "\060\uff2c\070\uff2c\075\uff2c\076\uff2c\077\uff2c\001\002\000" +
    "\054\003\uff28\007\uff28\010\uff28\011\uff28\016\uff28\020\uff28" +
    "\021\uff28\022\uff28\023\uff28\024\uff28\025\uff28\026\uff28\046" +
    "\uff28\055\uff28\056\uff28\057\uff28\060\uff28\070\uff28\075\uff28" +
    "\076\uff28\077\uff28\001\002\000\006\051\u0133\052\u0211\001" +
    "\002\000\054\003\uff29\007\uff29\010\uff29\011\uff29\016\uff29" +
    "\020\uff29\021\uff29\022\uff29\023\uff29\024\uff29\025\uff29\026" +
    "\uff29\046\uff29\055\uff29\056\uff29\057\uff29\060\uff29\070\uff29" +
    "\075\uff29\076\uff29\077\uff29\001\002\000\004\045\u021a\001" +
    "\002\000\006\003\u0214\045\u0215\001\002\000\046\003\065" +
    "\007\031\010\030\011\027\016\063\020\076\021\047\023" +
    "\054\026\067\046\uffbc\055\074\056\062\057\072\060\050" +
    "\070\061\075\057\076\056\077\042\001\002\000\046\003" +
    "\065\007\031\010\030\011\027\016\063\020\076\021\047" +
    "\023\054\026\067\046\uffbc\055\074\056\062\057\072\060" +
    "\050\070\061\075\057\076\056\077\042\001\002\000\004" +
    "\046\u0217\001\002\000\004\002\uffc2\001\002\000\004\046" +
    "\u0219\001\002\000\004\002\uffbe\001\002\000\046\003\065" +
    "\007\031\010\030\011\027\016\063\020\076\021\047\023" +
    "\054\026\067\046\uffbc\055\074\056\062\057\072\060\050" +
    "\070\061\075\057\076\056\077\042\001\002\000\004\046" +
    "\u021c\001\002\000\004\002\uffbf\001\002\000\004\044\u021e" +
    "\001\002\000\004\045\u021f\001\002\000\046\003\065\007" +
    "\031\010\030\011\027\016\063\020\076\021\047\023\054" +
    "\026\067\046\uffbc\055\074\056\062\057\072\060\050\070" +
    "\061\075\057\076\056\077\042\001\002\000\004\046\u0221" +
    "\001\002\000\004\002\uffc1\001\002\000\006\051\u025b\052" +
    "\u025a\001\002\000\014\003\u0256\047\u0228\051\uffd5\052\uffd5" +
    "\061\u0227\001\002\000\014\003\u0225\047\u0228\051\uffd5\052" +
    "\uffd5\061\u0227\001\002\000\022\036\u0234\037\u022c\043\u0235" +
    "\052\u0253\070\u022a\071\u022f\072\u022b\073\u022e\001\002\000" +
    "\010\003\u024a\047\u024b\052\u0249\001\002\000\032\003\u0248" +
    "\036\124\037\116\043\125\060\162\070\112\071\122\072" +
    "\115\073\120\075\057\076\056\077\161\001\002\000\022" +
    "\003\u0232\036\u0234\037\u022c\043\u0235\070\u022a\071\u022f\072" +
    "\u022b\073\u022e\001\002\000\006\051\uffda\052\uffda\001\002" +
    "\000\024\003\uff12\036\uff12\037\uff12\040\uff12\041\uff12\042" +
    "\uff12\044\uff12\050\uff12\052\uff12\001\002\000\024\003\uff10" +
    "\036\uff10\037\uff10\040\uff10\041\uff10\042\uff10\044\uff10\050" +
    "\uff10\052\uff10\001\002\000\020\036\u0234\037\u022c\043\u0235" +
    "\070\u022a\071\u022f\072\u022b\073\u022e\001\002\000\024\003" +
    "\uff1a\036\uff1a\037\uff1a\040\u023b\041\u023d\042\u023c\044\uff1a" +
    "\050\uff1a\052\uff1a\001\002\000\024\003\uff0f\036\uff0f\037" +
    "\uff0f\040\uff0f\041\uff0f\042\uff0f\044\uff0f\050\uff0f\052\uff0f" +
    "\001\002\000\024\003\uff11\036\uff11\037\uff11\040\uff11\041" +
    "\uff11\042\uff11\044\uff11\050\uff11\052\uff11\001\002\000\012" +
    "\003\u0244\036\u0237\037\u0238\050\u0245\001\002\000\024\003" +
    "\uff16\036\uff16\037\uff16\040\uff16\041\uff16\042\uff16\044\uff16" +
    "\050\uff16\052\uff16\001\002\000\004\050\u0243\001\002\000" +
    "\024\003\uff13\036\uff13\037\uff13\040\uff13\041\uff13\042\uff13" +
    "\044\uff13\050\uff13\052\uff13\001\002\000\020\036\u0234\037" +
    "\u022c\043\u0235\070\u022a\071\u022f\072\u022b\073\u022e\001\002" +
    "\000\020\036\u0234\037\u022c\043\u0235\070\u022a\071\u022f\072" +
    "\u022b\073\u022e\001\002\000\010\036\u0237\037\u0238\044\u0239" +
    "\001\002\000\020\036\u0234\037\u022c\043\u0235\070\u022a\071" +
    "\u022f\072\u022b\073\u022e\001\002\000\020\036\u0234\037\u022c" +
    "\043\u0235\070\u022a\071\u022f\072\u022b\073\u022e\001\002\000" +
    "\024\003\uff0e\036\uff0e\037\uff0e\040\uff0e\041\uff0e\042\uff0e" +
    "\044\uff0e\050\uff0e\052\uff0e\001\002\000\024\003\uff1b\036" +
    "\uff1b\037\uff1b\040\u023b\041\u023d\042\u023c\044\uff1b\050\uff1b" +
    "\052\uff1b\001\002\000\020\036\u0234\037\u022c\043\u0235\070" +
    "\u022a\071\u022f\072\u022b\073\u022e\001\002\000\020\036\u0234" +
    "\037\u022c\043\u0235\070\u022a\071\u022f\072\u022b\073\u022e\001" +
    "\002\000\020\036\u0234\037\u022c\043\u0235\070\u022a\071\u022f" +
    "\072\u022b\073\u022e\001\002\000\024\003\uff18\036\uff18\037" +
    "\uff18\040\uff18\041\uff18\042\uff18\044\uff18\050\uff18\052\uff18" +
    "\001\002\000\024\003\uff17\036\uff17\037\uff17\040\uff17\041" +
    "\uff17\042\uff17\044\uff17\050\uff17\052\uff17\001\002\000\024" +
    "\003\uff19\036\uff19\037\uff19\040\uff19\041\uff19\042\uff19\044" +
    "\uff19\050\uff19\052\uff19\001\002\000\024\003\uff1c\036\uff1c" +
    "\037\uff1c\040\u023b\041\u023d\042\u023c\044\uff1c\050\uff1c\052" +
    "\uff1c\001\002\000\024\003\uff14\036\uff14\037\uff14\040\uff14" +
    "\041\uff14\042\uff14\044\uff14\050\uff14\052\uff14\001\002\000" +
    "\010\003\uffe6\047\uffe6\052\uffe6\001\002\000\010\003\uffe5" +
    "\047\uffe5\052\uffe5\001\002\000\010\003\uffe7\047\uffe7\052" +
    "\uffe7\001\002\000\024\003\uff15\036\uff15\037\uff15\040\uff15" +
    "\041\uff15\042\uff15\044\uff15\050\uff15\052\uff15\001\002\000" +
    "\006\051\uffd7\052\uffd7\001\002\000\032\003\132\036\124" +
    "\037\116\043\125\047\111\051\uffd6\052\uffd6\054\167\070" +
    "\112\071\122\072\115\073\120\001\002\000\060\003\uffeb" +
    "\004\uffeb\006\uffeb\007\uffeb\010\uffeb\011\uffeb\016\uffeb\020" +
    "\uffeb\021\uffeb\022\uffeb\023\uffeb\024\uffeb\025\uffeb\026\uffeb" +
    "\046\uffeb\055\uffeb\056\uffeb\057\uffeb\060\uffeb\070\uffeb\075" +
    "\uffeb\076\uffeb\077\uffeb\001\002\000\020\036\u0234\037\u022c" +
    "\043\u0235\070\u022a\071\u022f\072\u022b\073\u022e\001\002\000" +
    "\022\003\u024d\036\u0234\037\u022c\043\u0235\070\u022a\071\u022f" +
    "\072\u022b\073\u022e\001\002\000\012\003\u0250\036\u0237\037" +
    "\u0238\050\u024f\001\002\000\004\050\u024e\001\002\000\010" +
    "\003\uffe3\047\uffe3\052\uffe3\001\002\000\010\003\uffe8\047" +
    "\uffe8\052\uffe8\001\002\000\010\003\uffe2\047\uffe2\052\uffe2" +
    "\001\002\000\010\036\u0237\037\u0238\050\u0252\001\002\000" +
    "\010\003\uffe1\047\uffe1\052\uffe1\001\002\000\060\003\uffea" +
    "\004\uffea\006\uffea\007\uffea\010\uffea\011\uffea\016\uffea\020" +
    "\uffea\021\uffea\022\uffea\023\uffea\024\uffea\025\uffea\026\uffea" +
    "\046\uffea\055\uffea\056\uffea\057\uffea\060\uffea\070\uffea\075" +
    "\uffea\076\uffea\077\uffea\001\002\000\010\036\u0237\037\u0238" +
    "\050\u0255\001\002\000\010\003\uffe4\047\uffe4\052\uffe4\001" +
    "\002\000\020\036\u0234\037\u022c\043\u0235\070\u022a\071\u022f" +
    "\072\u022b\073\u022e\001\002\000\010\003\u024a\047\u024b\052" +
    "\u0259\001\002\000\006\051\uffd8\052\uffd8\001\002\000\060" +
    "\003\uffe9\004\uffe9\006\uffe9\007\uffe9\010\uffe9\011\uffe9\016" +
    "\uffe9\020\uffe9\021\uffe9\022\uffe9\023\uffe9\024\uffe9\025\uffe9" +
    "\026\uffe9\046\uffe9\055\uffe9\056\uffe9\057\uffe9\060\uffe9\070" +
    "\uffe9\075\uffe9\076\uffe9\077\uffe9\001\002\000\060\003\uffec" +
    "\004\uffec\006\uffec\007\uffec\010\uffec\011\uffec\016\uffec\020" +
    "\uffec\021\uffec\022\uffec\023\uffec\024\uffec\025\uffec\026\uffec" +
    "\046\uffec\055\uffec\056\uffec\057\uffec\060\uffec\070\uffec\075" +
    "\uffec\076\uffec\077\uffec\001\002\000\006\003\u025c\070\u025d" +
    "\001\002\000\010\051\uffd5\052\uffd5\061\u0227\001\002\000" +
    "\010\051\uffd5\052\uffd5\061\u0227\001\002\000\006\051\uffdb" +
    "\052\uffdb\001\002\000\006\051\uffd9\052\uffd9\001\002\000" +
    "\004\061\u026c\001\002\000\004\070\u0262\001\002\000\006" +
    "\003\u0263\061\u0264\001\002\000\020\036\u0234\037\u022c\043" +
    "\u0235\070\u022a\071\u022f\072\u022b\073\u022e\001\002\000\022" +
    "\003\u0266\036\u0234\037\u022c\043\u0235\070\u022a\071\u022f\072" +
    "\u022b\073\u022e\001\002\000\012\003\u0269\036\u0237\037\u0238" +
    "\052\u0268\001\002\000\004\052\u0267\001\002\000\014\004" +
    "\ufff3\006\ufff3\007\ufff3\010\ufff3\011\ufff3\001\002\000\014" +
    "\004\ufff6\006\ufff6\007\ufff6\010\ufff6\011\ufff6\001\002\000" +
    "\014\004\ufff0\006\ufff0\007\ufff0\010\ufff0\011\ufff0\001\002" +
    "\000\010\036\u0237\037\u0238\052\u026b\001\002\000\014\004" +
    "\ufff1\006\ufff1\007\ufff1\010\ufff1\011\ufff1\001\002\000\020" +
    "\036\u0234\037\u022c\043\u0235\070\u022a\071\u022f\072\u022b\073" +
    "\u022e\001\002\000\010\036\u0237\037\u0238\052\u026e\001\002" +
    "\000\014\004\ufff2\006\ufff2\007\ufff2\010\ufff2\011\ufff2\001" +
    "\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u026c\000\006\002\003\066\004\001\001\000\006\003" +
    "\013\004\006\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\005\025\006\031\010\024\001\001\000\002\001" +
    "\001\000\004\003\022\001\001\000\004\031\017\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\006" +
    "\u0260\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\007" +
    "\u0221\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\042\006\031\010\067\017\063\036\051\037\045" +
    "\040\043\041\065\042\054\043\070\044\074\045\050\051" +
    "\052\053\044\054\057\055\072\060\042\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\024\105\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\024\301\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\042\006\031\010\067\017\063\036\051" +
    "\037\045\040\043\041\065\042\u011c\043\070\044\074\045" +
    "\050\051\052\053\044\054\057\055\072\060\042\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\006\103\040\101" +
    "\050\337\001\001\000\010\006\103\040\101\050\102\001" +
    "\001\000\004\024\301\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\024\105\001\001\000" +
    "\002\001\001\000\002\001\001\000\016\011\162\013\163" +
    "\014\120\015\113\016\116\017\164\001\001\000\012\013" +
    "\112\014\120\015\113\016\116\001\001\000\004\024\157" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\015\154\016\116\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\014\130\015\113\016\116\024\127\001\001\000\006" +
    "\015\152\016\116\001\001\000\012\013\125\014\120\015" +
    "\113\016\116\001\001\000\002\001\001\000\012\014\130" +
    "\015\113\016\116\024\127\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\024\127\001\001\000\006\015\137" +
    "\016\116\001\001\000\006\015\136\016\116\001\001\000" +
    "\006\015\135\016\116\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\013\141\014\120\015" +
    "\113\016\116\001\001\000\002\001\001\000\012\014\130" +
    "\015\113\016\116\024\127\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\014\150\015\113\016\116\001\001" +
    "\000\010\014\147\015\113\016\116\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\014\130\015\113\016\116\024\127\001\001" +
    "\000\002\001\001\000\002\001\001\000\016\013\174\014" +
    "\120\015\113\016\116\026\204\027\176\001\001\000\002" +
    "\001\001\000\002\001\001\000\016\013\174\014\120\015" +
    "\113\016\116\026\175\027\176\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\013\202\014" +
    "\120\015\113\016\116\001\001\000\012\013\201\014\120" +
    "\015\113\016\116\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\016\013\174\014\120" +
    "\015\113\016\116\026\214\027\176\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\016\013\174\014\120\015\113\016\116\026\224\027\176" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\016\013\174\014\120\015\113" +
    "\016\116\026\231\027\176\001\001\000\002\001\001\000" +
    "\002\001\001\000\016\013\174\014\120\015\113\016\116" +
    "\026\234\027\176\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\016\013\174" +
    "\014\120\015\113\016\116\026\241\027\176\001\001\000" +
    "\002\001\001\000\002\001\001\000\016\011\244\013\163" +
    "\014\120\015\113\016\116\017\164\001\001\000\002\001" +
    "\001\000\012\014\130\015\113\016\116\024\127\001\001" +
    "\000\016\011\247\013\163\014\120\015\113\016\116\017" +
    "\164\001\001\000\002\001\001\000\012\014\130\015\113" +
    "\016\116\024\127\001\001\000\002\001\001\000\016\011" +
    "\253\013\163\014\120\015\113\016\116\017\164\001\001" +
    "\000\002\001\001\000\022\013\260\014\120\015\113\016" +
    "\116\032\255\033\261\034\256\035\263\001\001\000\002" +
    "\001\001\000\002\001\001\000\016\013\260\014\120\015" +
    "\113\016\116\032\255\033\335\001\001\000\002\001\001" +
    "\000\002\001\001\000\022\013\316\014\120\015\113\016" +
    "\116\032\255\033\261\034\256\035\317\001\001\000\002" +
    "\001\001\000\010\040\273\046\274\047\271\001\001\000" +
    "\020\013\260\014\120\015\113\016\116\032\255\033\261" +
    "\034\266\001\001\000\002\001\001\000\016\013\260\014" +
    "\120\015\113\016\116\032\255\033\270\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\024\301\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\024\105\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\016\011\306\013\163\014\120\015\113\016" +
    "\116\017\164\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\120\313\001" +
    "\001\000\042\006\031\010\067\017\063\036\051\037\045" +
    "\040\043\041\065\042\314\043\070\044\074\045\050\051" +
    "\052\053\044\054\057\055\072\060\042\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\013\334\014\120\015\113" +
    "\016\116\001\001\000\012\013\333\014\120\015\113\016" +
    "\116\001\001\000\012\013\332\014\120\015\113\016\116" +
    "\001\001\000\012\013\331\014\120\015\113\016\116\001" +
    "\001\000\012\013\330\014\120\015\113\016\116\001\001" +
    "\000\012\013\327\014\120\015\113\016\116\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\024\301\001\001\000\002\001\001\000\022" +
    "\013\260\014\120\015\113\016\116\032\255\033\261\034" +
    "\256\035\342\001\001\000\012\014\130\015\113\016\116" +
    "\024\127\001\001\000\002\001\001\000\010\040\273\046" +
    "\274\047\344\001\001\000\002\001\001\000\004\024\301" +
    "\001\001\000\002\001\001\000\004\116\350\001\001\000" +
    "\042\006\031\010\067\017\063\036\051\037\045\040\043" +
    "\041\065\042\351\043\070\044\074\045\050\051\052\053" +
    "\044\054\057\055\072\060\042\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\121\361\001" +
    "\001\000\004\113\356\001\001\000\042\006\031\010\067" +
    "\017\063\036\051\037\045\040\043\041\065\042\357\043" +
    "\070\044\074\045\050\051\052\053\044\054\057\055\072" +
    "\060\042\001\001\000\002\001\001\000\002\001\001\000" +
    "\042\006\031\010\067\017\063\036\051\037\045\040\043" +
    "\041\065\042\362\043\070\044\074\045\050\051\052\053" +
    "\044\054\057\055\072\060\042\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\040\273\046\274\047\365\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\115\370" +
    "\001\001\000\042\006\031\010\067\017\063\036\051\037" +
    "\045\040\043\041\065\042\371\043\070\044\074\045\050" +
    "\051\052\053\044\054\057\055\072\060\042\001\001\000" +
    "\002\001\001\000\002\001\001\000\022\013\260\014\120" +
    "\015\113\016\116\032\255\033\261\034\256\035\u0101\001" +
    "\001\000\002\001\001\000\004\117\376\001\001\000\042" +
    "\006\031\010\067\017\063\036\051\037\045\040\043\041" +
    "\065\042\377\043\070\044\074\045\050\051\052\053\044" +
    "\054\057\055\072\060\042\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\040\273\046\274" +
    "\047\u0103\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\114\u0106\001\001\000\042\006\031\010\067\017\063" +
    "\036\051\037\045\040\043\041\065\042\u0107\043\070\044" +
    "\074\045\050\051\052\053\044\054\057\055\072\060\042" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\062\u0118\001\001\000\004\063\u010c\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\062\u010f\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\016\011\u0116\013\163\014\120\015" +
    "\113\016\116\017\164\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\014\130\015\113\016" +
    "\116\024\127\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\112\u011e\001\001\000\042\006\031\010\067\017\063" +
    "\036\051\037\045\040\043\041\065\042\u011f\043\070\044" +
    "\074\045\050\051\052\053\044\054\057\055\072\060\042" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\022\013\260\014\120\015\113\016\116\032\255" +
    "\033\261\034\256\035\u0123\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\022\013\260\014\120" +
    "\015\113\016\116\032\255\033\261\034\256\035\u0137\001" +
    "\001\000\002\001\001\000\004\067\u0129\001\001\000\002" +
    "\001\001\000\004\030\u012c\001\001\000\016\013\174\014" +
    "\120\015\113\016\116\026\u012d\027\176\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\014\130\015\113\016" +
    "\116\024\127\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\030\u0136\001" +
    "\001\000\004\030\u0135\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\072" +
    "\u013a\001\001\000\042\006\031\010\067\017\063\036\051" +
    "\037\045\040\043\041\065\042\u013b\043\070\044\074\045" +
    "\050\051\052\053\044\054\057\055\072\060\042\001\001" +
    "\000\002\001\001\000\004\064\u013d\001\001\000\004\052" +
    "\u013e\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\104\u0143\001\001\000" +
    "\042\006\031\010\067\017\063\036\051\037\045\040\043" +
    "\041\065\042\u0144\043\070\044\074\045\050\051\052\053" +
    "\044\054\057\055\072\060\042\001\001\000\002\001\001" +
    "\000\002\001\001\000\022\013\260\014\120\015\113\016" +
    "\116\032\255\033\261\034\256\035\u0147\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\100\u014a\001\001\000" +
    "\042\006\031\010\067\017\063\036\051\037\045\040\043" +
    "\041\065\042\u014b\043\070\044\074\045\050\051\052\053" +
    "\044\054\057\055\072\060\042\001\001\000\002\001\001" +
    "\000\002\001\001\000\022\013\260\014\120\015\113\016" +
    "\116\032\255\033\261\034\256\035\u0156\001\001\000\022" +
    "\013\260\014\120\015\113\016\116\032\255\033\261\034" +
    "\256\035\u014f\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\101\u0152\001\001\000\042\006\031\010\067\017" +
    "\063\036\051\037\045\040\043\041\065\042\u0153\043\070" +
    "\044\074\045\050\051\052\053\044\054\057\055\072\060" +
    "\042\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\014\130\015\113\016\116\024\127\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\103\u015e" +
    "\001\001\000\004\076\u015b\001\001\000\042\006\031\010" +
    "\067\017\063\036\051\037\045\040\043\041\065\042\u015c" +
    "\043\070\044\074\045\050\051\052\053\044\054\057\055" +
    "\072\060\042\001\001\000\002\001\001\000\002\001\001" +
    "\000\042\006\031\010\067\017\063\036\051\037\045\040" +
    "\043\041\065\042\u015f\043\070\044\074\045\050\051\052" +
    "\053\044\054\057\055\072\060\042\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\102\u0162\001\001\000\042" +
    "\006\031\010\067\017\063\036\051\037\045\040\043\041" +
    "\065\042\u0163\043\070\044\074\045\050\051\052\053\044" +
    "\054\057\055\072\060\042\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\077\u0167\001\001" +
    "\000\042\006\031\010\067\017\063\036\051\037\045\040" +
    "\043\041\065\042\u0168\043\070\044\074\045\050\051\052" +
    "\053\044\054\057\055\072\060\042\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\022\013\260" +
    "\014\120\015\113\016\116\032\255\033\261\034\256\035" +
    "\u0176\001\001\000\022\013\260\014\120\015\113\016\116" +
    "\032\255\033\261\034\256\035\u016d\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\073\u0170\001\001\000\042" +
    "\006\031\010\067\017\063\036\051\037\045\040\043\041" +
    "\065\042\u0171\043\070\044\074\045\050\051\052\053\044" +
    "\054\057\055\072\060\042\001\001\000\002\001\001\000" +
    "\004\064\u0173\001\001\000\004\052\u0174\001\001\000\002" +
    "\001\001\000\012\014\130\015\113\016\116\024\127\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\075\u0180\001\001\000\004\070\u017b\001\001\000" +
    "\042\006\031\010\067\017\063\036\051\037\045\040\043" +
    "\041\065\042\u017c\043\070\044\074\045\050\051\052\053" +
    "\044\054\057\055\072\060\042\001\001\000\002\001\001" +
    "\000\004\064\u017e\001\001\000\004\052\u017f\001\001\000" +
    "\002\001\001\000\042\006\031\010\067\017\063\036\051" +
    "\037\045\040\043\041\065\042\u0181\043\070\044\074\045" +
    "\050\051\052\053\044\054\057\055\072\060\042\001\001" +
    "\000\002\001\001\000\004\064\u0183\001\001\000\004\052" +
    "\u0184\001\001\000\002\001\001\000\004\074\u0186\001\001" +
    "\000\042\006\031\010\067\017\063\036\051\037\045\040" +
    "\043\041\065\042\u0187\043\070\044\074\045\050\051\052" +
    "\053\044\054\057\055\072\060\042\001\001\000\002\001" +
    "\001\000\004\064\u0189\001\001\000\004\052\u018a\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\071\u018d\001" +
    "\001\000\042\006\031\010\067\017\063\036\051\037\045" +
    "\040\043\041\065\042\u018e\043\070\044\074\045\050\051" +
    "\052\053\044\054\057\055\072\060\042\001\001\000\002" +
    "\001\001\000\004\064\u0190\001\001\000\004\052\u0191\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\063\u0194" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\061\u0199\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\016\013\174\014\120\015" +
    "\113\016\116\026\u01a9\027\176\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\016\013\174\014\120\015\113\016\116\026\u01b1\027\176" +
    "\001\001\000\016\013\174\014\120\015\113\016\116\026" +
    "\u01af\027\176\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\016\013\174\014" +
    "\120\015\113\016\116\026\u01b4\027\176\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\016\013\174\014\120\015\113" +
    "\016\116\026\u01ba\027\176\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\016" +
    "\013\174\014\120\015\113\016\116\026\u01c2\027\176\001" +
    "\001\000\016\013\174\014\120\015\113\016\116\026\u01c0" +
    "\027\176\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\016\013\174\014\120" +
    "\015\113\016\116\026\u01c5\027\176\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\022\013\260" +
    "\014\120\015\113\016\116\032\255\033\261\034\256\035" +
    "\u01ca\001\001\000\012\014\130\015\113\016\116\024\127" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\110" +
    "\u01cd\001\001\000\042\006\031\010\067\017\063\036\051" +
    "\037\045\040\043\041\065\042\u01ce\043\070\044\074\045" +
    "\050\051\052\053\044\054\057\055\072\060\042\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\111\u01d2\001\001\000\042\006\031\010\067\017\063" +
    "\036\051\037\045\040\043\041\065\042\u01d3\043\070\044" +
    "\074\045\050\051\052\053\044\054\057\055\072\060\042" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\016\011\u01ef\013\163\014\120\015\113\016\116" +
    "\017\164\001\001\000\016\011\u01d8\013\163\014\120\015" +
    "\113\016\116\017\164\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\065\u01db\001\001\000\004\057\u01dc\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\013\u01df" +
    "\014\120\015\113\016\116\001\001\000\002\001\001\000" +
    "\012\014\130\015\113\016\116\024\127\001\001\000\004" +
    "\106\u01e2\001\001\000\042\006\031\010\067\017\063\036" +
    "\051\037\045\040\043\041\065\043\u01e5\044\074\045\050" +
    "\051\052\053\044\054\057\055\072\056\u01e3\060\042\001" +
    "\001\000\002\001\001\000\002\001\001\000\042\006\031" +
    "\010\067\017\063\036\051\037\045\040\043\041\065\043" +
    "\u01e5\044\074\045\050\051\052\053\044\054\057\055\072" +
    "\056\u01e6\060\042\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\105\u01e9\001\001\000\042\006\031\010\067" +
    "\017\063\036\051\037\045\040\043\041\065\043\u01e5\044" +
    "\074\045\050\051\052\053\044\054\057\055\072\056\u01ea" +
    "\060\042\001\001\000\002\001\001\000\004\107\u01ec\001" +
    "\001\000\042\006\031\010\067\017\063\036\051\037\045" +
    "\040\043\041\065\043\u01e5\044\074\045\050\051\052\053" +
    "\044\054\057\055\072\056\u01ed\060\042\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\014" +
    "\130\015\113\016\116\024\127\001\001\000\002\001\001" +
    "\000\004\065\u01f3\001\001\000\004\057\u01f4\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\065\u01fd\001\001\000\004\065\u01fa\001" +
    "\001\000\004\057\u01fb\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\057\u01fe\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\065\u0201\001\001\000\004\057\u0202" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\067\u0208" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\067" +
    "\u020f\001\001\000\004\067\u020c\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\042" +
    "\006\031\010\067\017\063\036\051\037\045\040\043\041" +
    "\065\042\u0217\043\070\044\074\045\050\051\052\053\044" +
    "\054\057\055\072\060\042\001\001\000\042\006\031\010" +
    "\067\017\063\036\051\037\045\040\043\041\065\042\u0215" +
    "\043\070\044\074\045\050\051\052\053\044\054\057\055" +
    "\072\060\042\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\042\006\031\010" +
    "\067\017\063\036\051\037\045\040\043\041\065\042\u021a" +
    "\043\070\044\074\045\050\051\052\053\044\054\057\055" +
    "\072\060\042\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\042\006\031\010" +
    "\067\017\063\036\051\037\045\040\043\041\065\042\u021f" +
    "\043\070\044\074\045\050\051\052\053\044\054\057\055" +
    "\072\060\042\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\012\u0257\025\u0256\001\001\000" +
    "\006\012\u0228\025\u0225\001\001\000\012\020\u0253\021\u022c" +
    "\022\u0230\023\u0232\001\001\000\002\001\001\000\016\011" +
    "\u0246\013\163\014\120\015\113\016\116\017\164\001\001" +
    "\000\012\020\u022f\021\u022c\022\u0230\023\u0232\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\022\u0245\023\u0232\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\022\u0241\023" +
    "\u0232\001\001\000\012\020\u0235\021\u022c\022\u0230\023\u0232" +
    "\001\001\000\002\001\001\000\010\021\u0240\022\u0230\023" +
    "\u0232\001\001\000\010\021\u0239\022\u0230\023\u0232\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\022\u023f\023" +
    "\u0232\001\001\000\006\022\u023e\023\u0232\001\001\000\006" +
    "\022\u023d\023\u0232\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\014\130\015\113" +
    "\016\116\024\127\001\001\000\002\001\001\000\012\020" +
    "\u0250\021\u022c\022\u0230\023\u0232\001\001\000\012\020\u024b" +
    "\021\u022c\022\u0230\023\u0232\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\020\u0253" +
    "\021\u022c\022\u0230\023\u0232\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\012\u025e\001\001\000\004\012\u025d\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\020\u0269\021" +
    "\u022c\022\u0230\023\u0232\001\001\000\012\020\u0264\021\u022c" +
    "\022\u0230\023\u0232\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\020\u026c\021" +
    "\u022c\022\u0230\023\u0232\001\001\000\002\001\001\000\002" +
    "\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$SintaxisPrograma$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$SintaxisPrograma$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$SintaxisPrograma$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    private Symbol s;
    private ProgramaSemantica sem = new ProgramaSemantica();
    private boolean esCase = false;
    private String java, vb, py;
    private int j, v, p, c;
    private Errores errores = new Errores();
    private int linea;

    public void setLinea(int line){
            this.linea = line;
    }
    
    public void syntax_error(Symbol sym){
            errores.errorSintactico(sym, this.c); 
    }

    public void unrecovered_syntax_error(Symbol sym) throws java.lang.Exception{
            errores.errorSintactico(sym, this.c); 
    }

    public void setLineas(int j, int p, int v, int c){
            this.j = j;
            this.v = v;
            this.p = p;
            this.c = c;
    }

    public void setTipo(String java, String vb, String py){
            this.java = java;
            this.vb = vb;
            this.py = py;
            sem.iniciarJAVA(this.java, j);
    }
    
    public void reportarSem(String texto){
            errores.errorSemantico(getS(), texto, this.c);
    }

    public Symbol getS(){
        return this.cur_token;
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$SintaxisPrograma$actions {
  private final SintaxisPrograma parser;

  /** Constructor */
  CUP$SintaxisPrograma$actions(SintaxisPrograma parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$SintaxisPrograma$do_action_part00000000(
    int                        CUP$SintaxisPrograma$act_num,
    java_cup.runtime.lr_parser CUP$SintaxisPrograma$parser,
    java.util.Stack            CUP$SintaxisPrograma$stack,
    int                        CUP$SintaxisPrograma$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$SintaxisPrograma$result;

      /* select the action based on the action number */
      switch (CUP$SintaxisPrograma$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= PROGRAMA EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-1)).right;
		List<String> start_val = (List<String>)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-1)).value;
		RESULT = start_val;
              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$SintaxisPrograma$parser.done_parsing();
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // PROGRAMA ::= INCLUDE_LENG CONST MAIN 
            {
              List<String> RESULT =null;
		List<String> st = new ArrayList<>(); st.add(sem.mostrarCodigo());
                                        st.add(sem.mostrarCodigoEjecutable()); st.add(sem.crearAssembler()); RESULT = st;
              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("PROGRAMA",52, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INCLUDE_LENG ::= INCLUDE_LENG IN_LENG 
            {
              Object RESULT =null;

              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("INCLUDE_LENG",0, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // INCLUDE_LENG ::= 
            {
              Object RESULT =null;

              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("INCLUDE_LENG",0, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // IN_LENG ::= py 
            {
              Object RESULT =null;
		sem.iniciarPY(py, p);
              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("IN_LENG",1, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // IN_LENG ::= vb 
            {
              Object RESULT =null;
		sem.iniciarVB(vb, v);
              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("IN_LENG",1, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // IN_LENG ::= java IN_CLASS comilla 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-1)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-1)).value;
		if(e1.equals("$$*$$")){sem.importarTodasClases();}else{sem.importarClase(e1);}
              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("IN_LENG",1, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // IN_LENG ::= includee idlib 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-1)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.peek()).value;
		sem.getImports().add(e1 + " " + e2);
              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("IN_LENG",1, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // IN_LENG ::= error IN_LENG 
            {
              Object RESULT =null;
		reportarSem("Error en la importación de librerías o trozos de codigo");
              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("IN_LENG",1, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // IN_CLASS ::= por 
            {
              String RESULT =null;
		RESULT = "$$*$$";
              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("IN_CLASS",23, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // IN_CLASS ::= id 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.peek()).value;
		RESULT = e1;
              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("IN_CLASS",23, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // CONST ::= CONST constt TYPE id igual OPERACION_AC puntocoma 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-4)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-4)).right;
		Integer e1 = (Integer)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-4)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-3)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-3)).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-3)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-1)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-1)).right;
		OperacionPrograma e3 = (OperacionPrograma)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-1)).value;
		 VariablePrograma var = new ConstantePrograma(e2,ProgramaSemantica.AMBITO, e1, e3.getTipo(), null);
        var.setValor(e3.getValor());
        System.out.println("constante con id: " + e2);
        if(!sem.addVar(var)){
                reportarSem("Variable ya creda con el mismo nombre: <" + e1 + ">");
        } else {sem.getVar().addAll(e3.mostrarTripletes());
                SumOperator sum = sem.getVariables().devolverSum(e2);
                sem.getVar().add(sum);
                sem.getVar().add(new AsignarValor(null, sem.getVariables().devolverDireccion(sum.getId()),
                e3.getTriplete()));}
        
              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("CONST",2, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-6)), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // CONST ::= CONST ASIG_VAR 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()).right;
		List<VariablePrograma> e1 = (List<VariablePrograma>)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.peek()).value;
		ListaTripletes tri = new ListaTripletes();
                        for(VariablePrograma var : e1){
                        /*tri.addAll(var.mostrarTripletes());*/
                        tri.addAll(sem.getVariables().obtenerTriplete(var, var.getTipo()));
                        } sem.getVar().addAll(tri);
              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("CONST",2, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // CONST ::= 
            {
              Object RESULT =null;
		
              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("CONST",2, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // CONST ::= CONST constt TYPE id igual error puntocoma 
            {
              Object RESULT =null;
		reportarSem("Error en la asignación de constante, se esperaba una operacion");
              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("CONST",2, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-6)), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // CONST ::= CONST constt error igual OPERACION_AC puntocoma 
            {
              Object RESULT =null;
		reportarSem("Error en la asignacion de constante, se esperaba un id");
              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("CONST",2, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-5)), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // CONST ::= CONST constt TYPE id error OPERACION_AC puntocoma 
            {
              Object RESULT =null;
		reportarSem("Error en la asignacion de constante, se esperaba un igual");
              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("CONST",2, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-6)), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // CONST ::= CONST constt TYPE id igual OPERACION_AC error 
            {
              Object RESULT =null;
		reportarSem("Error en la asignacion de constante, se esperaba un ;");
              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("CONST",2, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-6)), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // TYPE ::= intt 
            {
              Integer RESULT =null;
		RESULT = VariablePrograma.INT;
              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("TYPE",4, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // TYPE ::= floatt 
            {
              Integer RESULT =null;
		RESULT = VariablePrograma.FLOAT;
              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("TYPE",4, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // TYPE ::= charr 
            {
              Integer RESULT =null;
		RESULT = VariablePrograma.CHAR;
              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("TYPE",4, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // ASIG_VAR ::= TYPE LIST_ASIG puntocoma 
            {
              List<VariablePrograma> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-2)).right;
		Integer e1 = (Integer)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-1)).right;
		List<VariablePrograma> e2 = (List<VariablePrograma>)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-1)).value;
		if(!sem.addListVar(e2, e1)){
                reportarSem("Variables con el mismo nombre");
                RESULT = new ArrayList<>();}
                else {for(VariablePrograma var : e2){
                        var.setTipo(e1);
                        if(var.getTriplete() instanceof AsignarValor)
                        ((AsignarValor)var.getTriplete()).setTipo(Triplete.tipos[e1-1]);
                } RESULT = e2;}
              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("ASIG_VAR",6, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // ASIG_VAR ::= TYPE id CORCHETESF puntocoma 
            {
              List<VariablePrograma> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-3)).right;
		Integer e1 = (Integer)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-2)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-2)).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-2)).value;
		int e4left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-1)).left;
		int e4right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-1)).right;
		List<OperacionPrograma> e4 = (List<OperacionPrograma>)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-1)).value;
		 List<VariablePrograma> var = new ArrayList<>();
                ArregloPrograma arr = new ArregloPrograma(e2, ProgramaSemantica.AMBITO, e1, e4, 
                new DefinirArreglo(null, new TerminalOperator(e2), Triplete.tipos[e1-1]));
                if(!sem.addVar(arr)){
                        reportarSem("Variable ya creda con el mismo nombre: <" + e2 + ">");
                }else {var.add(arr);} RESULT = var;
              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("ASIG_VAR",6, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // ASIG_VAR ::= TYPE id error puntocoma 
            {
              List<VariablePrograma> RESULT =null;
		reportarSem("Error en la asignacion de variable, se esperaba arreglo");
              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("ASIG_VAR",6, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // ASIG_VAR ::= TYPE error CORCHETESF puntocoma 
            {
              List<VariablePrograma> RESULT =null;
		int e4left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-1)).left;
		int e4right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-1)).right;
		List<OperacionPrograma> e4 = (List<OperacionPrograma>)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-1)).value;
		reportarSem("Error en la asignacion de variable, se esperaba un id");
              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("ASIG_VAR",6, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // CORCHETESF ::= CORCHETESF cora OPERACION_AC corc 
            {
              List<OperacionPrograma> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-3)).right;
		List<OperacionPrograma> e1 = (List<OperacionPrograma>)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-1)).right;
		OperacionPrograma e2 = (OperacionPrograma)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-1)).value;
		if(e2.getTipo()<=VariablePrograma.INT) e1.add(e2); RESULT = e1;
              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("CORCHETESF",19, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // CORCHETESF ::= cora OPERACION_AC corc 
            {
              List<OperacionPrograma> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-1)).right;
		OperacionPrograma e1 = (OperacionPrograma)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-1)).value;
		List<OperacionPrograma> opr = new ArrayList<>();
                if(e1.getTipo()<=VariablePrograma.INT) opr.add(e1);
                RESULT = opr;
              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("CORCHETESF",19, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // CORCHETESF ::= cora error corc 
            {
              List<OperacionPrograma> RESULT =null;
		reportarSem("Error en los corchetes, se esperaba una operacion"); RESULT = new ArrayList<>();
              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("CORCHETESF",19, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // CORCHETESF ::= cora OPERACION_AC error 
            {
              List<OperacionPrograma> RESULT =null;
		reportarSem("Error en los corchetes, se esperaba un \"]\""); RESULT = new ArrayList<>();
              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("CORCHETESF",19, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // CORCHETESF ::= error OPERACION_AC corc 
            {
              List<OperacionPrograma> RESULT =null;
		reportarSem("Error en los corchetes, se esperaba un \"]\""); RESULT = new ArrayList<>();
              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("CORCHETESF",19, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // CORCHETESF ::= CORCHETESF cora error corc 
            {
              List<OperacionPrograma> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-3)).right;
		List<OperacionPrograma> e1 = (List<OperacionPrograma>)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-3)).value;
		reportarSem("Error en los corchetes, se esperaba una operacion"); RESULT = e1;
              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("CORCHETESF",19, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // CORCHETESF ::= CORCHETESF cora OPERACION_AC error 
            {
              List<OperacionPrograma> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-3)).right;
		List<OperacionPrograma> e1 = (List<OperacionPrograma>)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-3)).value;
		reportarSem("Error en los corchetes, se esperaba un \"]\""); RESULT = e1;
              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("CORCHETESF",19, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // CORCHETESF ::= CORCHETESF error OPERACION_AC corc 
            {
              List<OperacionPrograma> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-3)).right;
		List<OperacionPrograma> e1 = (List<OperacionPrograma>)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-3)).value;
		reportarSem("Error en los corchetes, se esperaba un \"[\""); RESULT = e1;
              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("CORCHETESF",19, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // CORCHETES ::= CORCHETES cora OPERACION_A corc 
            {
              List<OperacionPrograma> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-3)).right;
		List<OperacionPrograma> e1 = (List<OperacionPrograma>)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-1)).right;
		OperacionPrograma e2 = (OperacionPrograma)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-1)).value;
		if(e2.getTipo()<=VariablePrograma.INT) e1.add(e2); RESULT = e1;
              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("CORCHETES",18, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // CORCHETES ::= cora OPERACION_A corc 
            {
              List<OperacionPrograma> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-1)).right;
		OperacionPrograma e1 = (OperacionPrograma)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-1)).value;
		List<OperacionPrograma> opr = new ArrayList<>();
                if(e1.getTipo()<=VariablePrograma.INT) opr.add(e1);
                RESULT = opr;
              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("CORCHETES",18, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // CORCHETES ::= cora error corc 
            {
              List<OperacionPrograma> RESULT =null;
		reportarSem("Error en los corchetes, se esperaba una operacion"); RESULT = new ArrayList<>();
              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("CORCHETES",18, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // CORCHETES ::= cora OPERACION_A error 
            {
              List<OperacionPrograma> RESULT =null;
		reportarSem("Error en los corchetes, se esperaba un \"]\""); RESULT = new ArrayList<>();
              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("CORCHETES",18, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // CORCHETES ::= CORCHETES cora error corc 
            {
              List<OperacionPrograma> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-3)).right;
		List<OperacionPrograma> e1 = (List<OperacionPrograma>)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-3)).value;
		reportarSem("Error en los corchetes, se esperaba una operacion"); RESULT = e1;
              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("CORCHETES",18, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // LIST_ASIG ::= LIST_ASIG coma id ASIG 
            {
              List<VariablePrograma> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-3)).right;
		List<VariablePrograma> e1 = (List<VariablePrograma>)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-1)).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-1)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()).right;
		OperacionPrograma e3 = (OperacionPrograma)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.peek()).value;
		
                if(e3!=null) e1.add(new VariablePrograma(e2, ProgramaSemantica.AMBITO, e3,
                new AsignarValor(null, new TerminalOperator(e2), e3.getTriplete())));
                else e1.add(new VariablePrograma(e2, ProgramaSemantica.AMBITO,
                new AsignarValor("", new TerminalOperator(e2), null))); RESULT = e1;
              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("LIST_ASIG",5, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // LIST_ASIG ::= id ASIG 
            {
              List<VariablePrograma> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-1)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()).right;
		OperacionPrograma e2 = (OperacionPrograma)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.peek()).value;
		List<VariablePrograma> vars = new ArrayList<>();
            if(e2!=null) vars.add(new VariablePrograma(e1, ProgramaSemantica.AMBITO, e2,
                new AsignarValor(null, new TerminalOperator(e1), e2.getTriplete()))); 
            else vars.add(new VariablePrograma(e1, ProgramaSemantica.AMBITO,
                new AsignarValor("", new TerminalOperator(e1), null))); RESULT = vars;
              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("LIST_ASIG",5, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // LIST_ASIG ::= LIST_ASIG coma error ASIG 
            {
              List<VariablePrograma> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-3)).right;
		List<VariablePrograma> e1 = (List<VariablePrograma>)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-3)).value;
		reportarSem("Error en la asignacion de variables, se esperaba un id"); RESULT = new ArrayList<>();
              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("LIST_ASIG",5, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // LIST_ASIG ::= error ASIG 
            {
              List<VariablePrograma> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()).right;
		OperacionPrograma e1 = (OperacionPrograma)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.peek()).value;
		reportarSem("Error en la asignacion de variables, se esperaba un id"); RESULT = new ArrayList<>();
              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("LIST_ASIG",5, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // ASIG ::= igual EXPR 
            {
              OperacionPrograma RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()).right;
		OperacionPrograma e1 = (OperacionPrograma)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.peek()).value;
		RESULT = e1;
              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("ASIG",8, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // ASIG ::= igual error 
            {
              OperacionPrograma RESULT =null;
		reportarSem("Error en la asignacion de variable, se esperaba arreglo o puntocoma");
              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("ASIG",8, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // ASIG ::= 
            {
              OperacionPrograma RESULT =null;

              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("ASIG",8, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // OPERACION_A ::= OPERACION_A mas OPERACION_M 
            {
              OperacionPrograma RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-2)).right;
		OperacionPrograma e1 = (OperacionPrograma)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()).right;
		OperacionPrograma e2 = (OperacionPrograma)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.peek()).value;
		if(e1 != null && e2 != null) RESULT = new OperacionPrograma(e1, e2,
                new SumOperator(null, e1.getTriplete(), e2.getTriplete(), Triplete.devolverTipo(e1, e2)));
              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("OPERACION_A",9, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // OPERACION_A ::= OPERACION_A menos OPERACION_M 
            {
              OperacionPrograma RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-2)).right;
		OperacionPrograma e1 = (OperacionPrograma)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()).right;
		OperacionPrograma e2 = (OperacionPrograma)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.peek()).value;
		if(e1 != null && e2 != null) RESULT = new OperacionPrograma(e1, e2,
                new RestOperator(null, e1.getTriplete(), e2.getTriplete(), Triplete.devolverTipo(e1, e2)));
              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("OPERACION_A",9, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // OPERACION_A ::= OPERACION_M 
            {
              OperacionPrograma RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()).right;
		OperacionPrograma e1 = (OperacionPrograma)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.peek()).value;
		RESULT = e1;
              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("OPERACION_A",9, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // OPERACION_A ::= error OPERACION_M 
            {
              OperacionPrograma RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()).right;
		OperacionPrograma e1 = (OperacionPrograma)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.peek()).value;
		reportarSem("Error en una operación Aritmetica"); RESULT = e1;
              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("OPERACION_A",9, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // OPERACION_M ::= OPERACION_M por OPERACION_U 
            {
              OperacionPrograma RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-2)).right;
		OperacionPrograma e1 = (OperacionPrograma)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()).right;
		OperacionPrograma e2 = (OperacionPrograma)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.peek()).value;
		if(e1 != null && e2 != null) RESULT = new OperacionPrograma(e1, e2,
                new PorOperator(null, e1.getTriplete(), e2.getTriplete(), Triplete.devolverTipo(e1, e2)));
              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("OPERACION_M",10, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // OPERACION_M ::= OPERACION_M div OPERACION_U 
            {
              OperacionPrograma RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-2)).right;
		OperacionPrograma e1 = (OperacionPrograma)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()).right;
		OperacionPrograma e2 = (OperacionPrograma)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.peek()).value;
		if(e1 != null && e2 != null) RESULT = new OperacionPrograma(e1, e2,
                new DivOperator(null, e1.getTriplete(), e2.getTriplete(), Triplete.devolverTipo(e1, e2)));
              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("OPERACION_M",10, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // OPERACION_M ::= OPERACION_M mod OPERACION_U 
            {
              OperacionPrograma RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-2)).right;
		OperacionPrograma e1 = (OperacionPrograma)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()).right;
		OperacionPrograma e2 = (OperacionPrograma)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.peek()).value;
		if(e1 != null && e2 != null) RESULT = new OperacionPrograma(e1, e2,
                new ModOperator(null, e1.getTriplete(), e2.getTriplete(), Triplete.devolverTipo(e1, e2)));
              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("OPERACION_M",10, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // OPERACION_M ::= OPERACION_U 
            {
              OperacionPrograma RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()).right;
		OperacionPrograma e1 = (OperacionPrograma)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.peek()).value;
		RESULT = e1;
              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("OPERACION_M",10, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // OPERACION_U ::= menos OPERACION_U 
            {
              OperacionPrograma RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()).right;
		OperacionPrograma e1 = (OperacionPrograma)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.peek()).value;
		if(e1 != null && e1.getTipo()==1){e1.setTipo(VariablePrograma.INT);}
                OperacionPrograma cero = new OperacionPrograma(VariablePrograma.INT, new TerminalOperator("0"));
                RESULT = new OperacionPrograma(cero,
                e1, new RestOperator(null, cero.getTriplete(), e1.getTriplete(),
                Triplete.devolverTipo(cero, e1)));
              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("OPERACION_U",11, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // OPERACION_U ::= mas OPERACION_U 
            {
              OperacionPrograma RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()).right;
		OperacionPrograma e1 = (OperacionPrograma)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.peek()).value;
		RESULT = e1;
              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("OPERACION_U",11, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // OPERACION_U ::= ATOM 
            {
              OperacionPrograma RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()).right;
		OperacionPrograma e1 = (OperacionPrograma)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.peek()).value;
		RESULT = e1;
              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("OPERACION_U",11, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // ATOM ::= id 
            {
              OperacionPrograma RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.peek()).value;
		VariablePrograma var = sem.existeVar(new VariablePrograma(e1, ProgramaSemantica.AMBITO, null)); 
                if(var == null){
                        reportarSem("Variable no existente con el id: <" + e1 + ">");
                } else{
                        SumOperator sum = sem.getVariables().devolverSum(e1);
                        OperacionPrograma op = new OperacionPrograma(var.getTipo(), sem.getVariables().devolverDireccion(sum.getId()));
                        op.getTripletes().add(sum);
                        RESULT = op;}
              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("ATOM",12, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // ATOM ::= entero 
            {
              OperacionPrograma RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.peek()).value;
		RESULT = new OperacionPrograma(VariablePrograma.INT, new TerminalOperator(e1));
              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("ATOM",12, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // ATOM ::= decimal 
            {
              OperacionPrograma RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.peek()).value;
		RESULT = new OperacionPrograma(VariablePrograma.FLOAT, new TerminalOperator(e1));
              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("ATOM",12, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // ATOM ::= character 
            {
              OperacionPrograma RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.peek()).value;
		RESULT = new OperacionPrograma(VariablePrograma.CHAR, new TerminalOperator(e1));
              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("ATOM",12, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // ATOM ::= id CORCHETES 
            {
              OperacionPrograma RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-1)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()).right;
		List<OperacionPrograma> e2 = (List<OperacionPrograma>)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.peek()).value;
		VariablePrograma var = sem.existeVar(e1, e2.size());
                if(var == null){
                        reportarSem("Variable no existente con el id: <" + e1 + ">");
                } else {OperacionPrograma arr = new ArregloPrograma(var.getId(), ProgramaSemantica.AMBITO,
                var.getTipo(), e2, (ArregloPrograma) var);
                SumOperator sum = sem.getVariables().devolverSum(e1);
                SumOperator sum2 = new SumOperator(null, sum, arr.getTripletes().get(arr.getTripletes().size()-1), "int");
                OperacionPrograma corch = new OperacionPrograma(var.getTipo(), sem.getVariables().devolverDireccion(sum2.getId()));
                corch.getTripletes().addAll(0, arr.getTripletes());
                corch.getTripletes().add(sum);
                corch.getTripletes().add(sum2);
                RESULT = corch;}
                
              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("ATOM",12, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // ATOM ::= para OPERACION_A parc 
            {
              OperacionPrograma RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-1)).right;
		OperacionPrograma e1 = (OperacionPrograma)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-1)).value;
		RESULT = e1;
              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("ATOM",12, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // ATOM ::= error CORCHETES 
            {
              OperacionPrograma RESULT =null;
		reportarSem("Error en la referencia de variables, se esperaba un id que haga referencia a un arreglo");
              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("ATOM",12, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // MAIN ::= voidd mainn para parc llavea STATEMENTS llavec 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-1)).right;
		ListaTripletes e1 = (ListaTripletes)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-1)).value;
		sem.getTripletes().addAll(e1);
              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("MAIN",3, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-6)), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // MAIN ::= voidd error para parc llavea STATEMENTS llavec 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-1)).right;
		ListaTripletes e1 = (ListaTripletes)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-1)).value;
		reportarSem("Error en el main, no tiene el main");
              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("MAIN",3, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-6)), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // MAIN ::= voidd mainn error parc llavea STATEMENTS llavec 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-1)).right;
		ListaTripletes e1 = (ListaTripletes)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-1)).value;
		reportarSem("Error en el main, se espera (");
              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("MAIN",3, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-6)), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // MAIN ::= voidd mainn para error llavea STATEMENTS llavec 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-1)).right;
		ListaTripletes e1 = (ListaTripletes)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-1)).value;
		reportarSem("Error en el main, se espera )");
              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("MAIN",3, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-6)), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // MAIN ::= voidd mainn para parc error STATEMENTS llavec 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-1)).right;
		ListaTripletes e1 = (ListaTripletes)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-1)).value;
		reportarSem("Error en el main, se espera {");
              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("MAIN",3, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-6)), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // STATEMENTS ::= STATEMENT STATEMENTS 
            {
              ListaTripletes RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-1)).right;
		ListaTripletes e1 = (ListaTripletes)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()).right;
		ListaTripletes e2 = (ListaTripletes)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.peek()).value;
		if(!e2.isFin()){
                                        if(e1.isRet()){
                                                reportarSem("ya existe varios returns, algunos no se toman en cuenta");
                                        } else {e1.addAll(e2);}} RESULT = e1;
              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("STATEMENTS",32, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // STATEMENTS ::= 
            {
              ListaTripletes RESULT =null;
		RESULT = new ListaTripletes(true);
              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("STATEMENTS",32, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // STATEMENT ::= COMPOUND 
            {
              ListaTripletes RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()).right;
		ListaTripletes e1 = (ListaTripletes)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.peek()).value;
		RESULT = e1;
              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("STATEMENT",33, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // STATEMENT ::= STATEMENTLINE 
            {
              ListaTripletes RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()).right;
		ListaTripletes e1 = (ListaTripletes)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.peek()).value;
		RESULT = e1;
              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("STATEMENT",33, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // STATEMENT ::= error 
            {
              ListaTripletes RESULT =null;
		reportarSem("Error en una parte del codigo"); RESULT = new ListaTripletes();
              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("STATEMENT",33, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // COMPOUND ::= WHILE 
            {
              ListaTripletes RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()).right;
		ListaTripletes e1 = (ListaTripletes)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.peek()).value;
		RESULT = e1;
              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("COMPOUND",34, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // COMPOUND ::= DO_WHILE 
            {
              ListaTripletes RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()).right;
		ListaTripletes e1 = (ListaTripletes)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.peek()).value;
		RESULT = e1;
              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("COMPOUND",34, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // COMPOUND ::= FOR 
            {
              ListaTripletes RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()).right;
		ListaTripletes e1 = (ListaTripletes)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.peek()).value;
		RESULT = e1;
              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("COMPOUND",34, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // COMPOUND ::= IF_ELSE 
            {
              ListaTripletes RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()).right;
		ListaTripletes e1 = (ListaTripletes)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.peek()).value;
		RESULT = e1;
              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("COMPOUND",34, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // COMPOUND ::= SWITCH 
            {
              ListaTripletes RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()).right;
		ListaTripletes e1 = (ListaTripletes)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.peek()).value;
		RESULT = e1;
              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("COMPOUND",34, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // STATEMENTLINE ::= clrs puntocoma 
            {
              ListaTripletes RESULT =null;
		ListaTripletes tr = new ListaTripletes(); tr.add(new Clrs()); RESULT = tr;
              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("STATEMENTLINE",31, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // STATEMENTLINE ::= ASIG_VAR 
            {
              ListaTripletes RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()).right;
		List<VariablePrograma> e1 = (List<VariablePrograma>)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.peek()).value;
		ListaTripletes tri = new ListaTripletes();
                        for(VariablePrograma var : e1){
                        /*tri.addAll(var.mostrarTripletes());*/
                        tri.addAll(sem.getVariables().obtenerTriplete(var, var.getTipo()));
                        } RESULT = tri;
              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("STATEMENTLINE",31, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // STATEMENTLINE ::= DEF_VAR puntocoma 
            {
              ListaTripletes RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-1)).right;
		ListaTripletes e1 = (ListaTripletes)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-1)).value;
		RESULT = e1;
              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("STATEMENTLINE",31, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // STATEMENTLINE ::= PRINTF 
            {
              ListaTripletes RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()).right;
		ListaTripletes e1 = (ListaTripletes)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.peek()).value;
		RESULT = e1;
              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("STATEMENTLINE",31, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // STATEMENTLINE ::= SCANF 
            {
              ListaTripletes RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()).right;
		ListaTripletes e1 = (ListaTripletes)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.peek()).value;
		RESULT = e1;
              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("STATEMENTLINE",31, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // STATEMENTLINE ::= LLAMADA_METODO puntocoma 
            {
              ListaTripletes RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-1)).right;
		OperacionPrograma e1 = (OperacionPrograma)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-1)).value;
		ListaTripletes tri = new ListaTripletes();
                if(e1 != null) {tri.addAll(e1.getTripletes());
                tri.add(e1.getTriplete());}
                RESULT = tri;
              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("STATEMENTLINE",31, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // STATEMENTLINE ::= getch puntocoma 
            {
              ListaTripletes RESULT =null;
		ListaTripletes tr = new ListaTripletes(); tr.add(new GetchOperator()); RESULT = tr;
              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("STATEMENTLINE",31, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // STATEMENTLINE ::= CLASS 
            {
              ListaTripletes RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()).right;
		ListaTripletes e1 = (ListaTripletes)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.peek()).value;
		RESULT = e1;
              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("STATEMENTLINE",31, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // DEF_VAR ::= id igual EXPR 
            {
              ListaTripletes RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()).right;
		OperacionPrograma e2 = (OperacionPrograma)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.peek()).value;
		ListaTripletes tri = new ListaTripletes();
                VariablePrograma var = sem.existeVar(new VariablePrograma(e1, ProgramaSemantica.AMBITO, null));
                if(var == null || var.isConstant()) {
                        reportarSem("Variable no existente con el id: <" + e1 + ">");
                } else if (e2 == null) {
                        reportarSem("no hay ninguna expresión en la definición de Variable");
                }else { SumOperator sum = sem.getVariables().devolverSum(e1);
                        AsignarValor asig = new AsignarValor(null, sem.getVariables().devolverDireccion(sum.getId()), e2.getTriplete());
                        /*tri.addAll(e2.mostrarTripletes());*/
                        tri.addAll(e2.mostrarTripletes());
                        tri.add(sum);
                        tri.add(asig);} RESULT = tri;
              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("DEF_VAR",30, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // DEF_VAR ::= id CORCHETES igual EXPR 
            {
              ListaTripletes RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-3)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-2)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-2)).right;
		List<OperacionPrograma> e2 = (List<OperacionPrograma>)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-2)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()).right;
		OperacionPrograma e3 = (OperacionPrograma)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.peek()).value;
		VariablePrograma var = sem.existeVar(e1, e2.size());
                if(var == null){
                        reportarSem("Variable no existente con el id: <" + e1 + ">");
                } else {OperacionPrograma arr = new ArregloPrograma(var.getId(), ProgramaSemantica.AMBITO,
                var.getTipo(), e2, (ArregloPrograma) var, e3);
                ListaTripletes tri = new ListaTripletes();
                /*if(e3.mostrarTripletes().size()>1) {
                tri.addAll(e3.mostrarTripletes().subList(1, e3.mostrarTripletes().size() - 1));}*/
                tri.addAll(arr.getTripletes());
                SumOperator sum = sem.getVariables().devolverSum(e1);
                tri.add(sum);
                SumOperator sum2 = new SumOperator(null, sum, arr.getTriplete(), "int");
                tri.add(sum2);
                AsignarValor asig = new AsignarValor(null, sem.getVariables().devolverDireccion(sum2.getId()), e3.getTriplete());
                tri.add(asig);
                RESULT = tri; }
              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("DEF_VAR",30, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // DEF_VAR ::= id igual error 
            {
              ListaTripletes RESULT =null;
		reportarSem("Error en definicion de Variable, se esperaba una asignación"); RESULT = new ListaTripletes();
              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("DEF_VAR",30, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // DEF_VAR ::= id error igual EXPR 
            {
              ListaTripletes RESULT =null;
		reportarSem("Error en definicion de Variable, se esperaba un ="); RESULT = new ListaTripletes();
              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("DEF_VAR",30, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // DEF_VAR ::= error igual igual EXPR 
            {
              ListaTripletes RESULT =null;
		reportarSem("Error en definicion de Variable, se esperaba un id"); RESULT = new ListaTripletes();
              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("DEF_VAR",30, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // DEF_VAR ::= id CORCHETES igual error 
            {
              ListaTripletes RESULT =null;
		reportarSem("Error en definicion de Arreglo, se esperaba una asignación"); RESULT = new ListaTripletes();
              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("DEF_VAR",30, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // DEF_VAR ::= error CORCHETES igual error 
            {
              ListaTripletes RESULT =null;
		reportarSem("Error en definicion de Arreglo, se esperaba un id"); RESULT = new ListaTripletes();
              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("DEF_VAR",30, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // PRINTF ::= printf para comilla STRING comilla VARS parc puntocoma 
            {
              ListaTripletes RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-4)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-4)).right;
		List<String> e1 = (List<String>)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-4)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-2)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-2)).right;
		List<OperacionPrograma> e2 = (List<OperacionPrograma>)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-2)).value;
		if(e1 != null) RESULT = Printf.regresarTripletes(e1, e2);
              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("PRINTF",28, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-7)), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // PRINTF ::= printf para error VARS parc puntocoma 
            {
              ListaTripletes RESULT =null;
		reportarSem("Error en el printf, se esperaba un String"); RESULT = new ListaTripletes();
              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("PRINTF",28, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-5)), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // PRINTF ::= printf para comilla STRING comilla error parc puntocoma 
            {
              ListaTripletes RESULT =null;
		reportarSem("Error en el printf, se esperaba una lista de variables"); RESULT = new ListaTripletes();
              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("PRINTF",28, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-7)), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // STRING ::= STRING string 
            {
              List<String> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-1)).right;
		List<String> e1 = (List<String>)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.peek()).value;
		e1.add(e2); RESULT = e1;
              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("STRING",49, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // STRING ::= 
            {
              List<String> RESULT =null;
		RESULT = new ArrayList<>();
              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("STRING",49, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // VARS ::= VARS coma EXPR 
            {
              List<OperacionPrograma> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-2)).right;
		List<OperacionPrograma> e1 = (List<OperacionPrograma>)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()).right;
		OperacionPrograma e2 = (OperacionPrograma)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.peek()).value;
		if(e1!=null && e2!= null){e1.add(e2); RESULT = e1;}
              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("VARS",48, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // VARS ::= 
            {
              List<OperacionPrograma> RESULT =null;
		List<OperacionPrograma> op = new ArrayList<>(); RESULT = op;
              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("VARS",48, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // VARS ::= VARS coma error 
            {
              List<OperacionPrograma> RESULT =null;
		reportarSem("Error en una variable de un print, se esperaba una operacion"); RESULT = new ArrayList<>();
              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("VARS",48, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // SCANF ::= scanf para comilla STRING comilla VARSS parc puntocoma 
            {
              ListaTripletes RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-4)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-4)).right;
		List<String> e1 = (List<String>)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-4)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-2)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-2)).right;
		List<OperacionPrograma> e2 = (List<OperacionPrograma>)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-2)).value;
		if(e2!=null) RESULT = Scanf.regresarTripletes(e1, e2);
              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("SCANF",29, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-7)), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // SCANF ::= scanf para comilla error parc puntocoma 
            {
              ListaTripletes RESULT =null;
		reportarSem("Error en el scanf en los parametros, se esperaba un parametro"); RESULT = new ListaTripletes();
              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("SCANF",29, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-5)), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // VARSS ::= VARSS coma asig id 
            {
              List<OperacionPrograma> RESULT =null;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-3)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-3)).right;
		List<OperacionPrograma> e2 = (List<OperacionPrograma>)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-3)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.peek()).value;
		VariablePrograma var = new VariablePrograma(e1, ProgramaSemantica.AMBITO, null);
                if(sem.existeVar(var) == null
                                || e2 == null){
                        reportarSem("Variable no existente con el id: <" + e1 + ">");
                } else {
                        SumOperator sum = sem.getVariables().devolverSum(e1);
                        OperacionPrograma op = new OperacionPrograma(var.getTipo(), sem.getVariables().devolverDireccion(sum.getId()));
                        op.getTripletes().add(sum);
                        e2.add(op); RESULT = e2;}
              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("VARSS",47, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // VARSS ::= 
            {
              List<OperacionPrograma> RESULT =null;
		List<OperacionPrograma> arr = new ArrayList<>(); RESULT = arr;
              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("VARSS",47, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // VARSS ::= VARSS error asig id 
            {
              List<OperacionPrograma> RESULT =null;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-3)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-3)).right;
		List<OperacionPrograma> e2 = (List<OperacionPrograma>)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-3)).value;
		reportarSem("Error en la variable del scanf, se esperaba una coma"); RESULT = e2;
              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("VARSS",47, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // VARSS ::= VARSS coma error id 
            {
              List<OperacionPrograma> RESULT =null;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-3)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-3)).right;
		List<OperacionPrograma> e2 = (List<OperacionPrograma>)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-3)).value;
		reportarSem("Error en la variable del scanf, se esperaba un & (espacio en memoria)"); RESULT = e2;
              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("VARSS",47, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // VARSS ::= VARSS coma asig error 
            {
              List<OperacionPrograma> RESULT =null;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-3)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-3)).right;
		List<OperacionPrograma> e2 = (List<OperacionPrograma>)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-3)).value;
		reportarSem("Error en la variable del scanf, se esperaba un id"); RESULT = e2;
              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("VARSS",47, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // NT$0 ::= 
            {
              ListaTripletes RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-2)).right;
		CondicionPrograma e1 = (CondicionPrograma)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-2)).value;
ProgramaSemantica.AMBITO += 1;
              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("NT$0",54, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // IF_ELSE ::= iff para CONDICION parc llavea NT$0 STATEMENTS llavec ELSE_IF ELSE 
            {
              ListaTripletes RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (ListaTripletes) ((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-4)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-7)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-7)).right;
		CondicionPrograma e1 = (CondicionPrograma)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-7)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-3)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-3)).right;
		ListaTripletes e2 = (ListaTripletes)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-3)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-1)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-1)).right;
		Else_Operator e3 = (Else_Operator)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-1)).value;
		int e4left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()).left;
		int e4right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()).right;
		ListaTripletes e4 = (ListaTripletes)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.peek()).value;
		sem.eliminarAmbito(ProgramaSemantica.AMBITO); ProgramaSemantica.AMBITO -= 1;
                e3.agregarIf(e1, e2); RESULT = e3.juntarTripletes(e4);
              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("IF_ELSE",39, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-9)), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // NT$1 ::= 
            {
              ListaTripletes RESULT =null;
reportarSem("Error en un if, se esperaba una condicion"); ProgramaSemantica.AMBITO += 1;
              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("NT$1",55, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // IF_ELSE ::= iff para error parc llavea NT$1 STATEMENTS llavec ELSE_IF ELSE 
            {
              ListaTripletes RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (ListaTripletes) ((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-4)).value;
		sem.eliminarAmbito(ProgramaSemantica.AMBITO); ProgramaSemantica.AMBITO -= 1;
                RESULT = new ListaTripletes();
              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("IF_ELSE",39, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-9)), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // NT$2 ::= 
            {
              ListaTripletes RESULT =null;
reportarSem("Error en una condicion, se esperaba if/while"); ProgramaSemantica.AMBITO += 1;
              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("NT$2",56, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // IF_ELSE ::= error para CONDICION parc llavea NT$2 STATEMENTS llavec ELSE_IF ELSE 
            {
              ListaTripletes RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (ListaTripletes) ((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-4)).value;
		sem.eliminarAmbito(ProgramaSemantica.AMBITO); ProgramaSemantica.AMBITO -= 1;
                RESULT = new ListaTripletes();
              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("IF_ELSE",39, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-9)), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // NT$3 ::= 
            {
              ListaTripletes RESULT =null;
reportarSem("Error en un if, se esperaba ("); ProgramaSemantica.AMBITO += 1;
              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("NT$3",57, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // IF_ELSE ::= iff error CONDICION parc llavea NT$3 STATEMENTS llavec ELSE_IF ELSE 
            {
              ListaTripletes RESULT =null;
              // propagate RESULT from NT$3
                RESULT = (ListaTripletes) ((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-4)).value;
		sem.eliminarAmbito(ProgramaSemantica.AMBITO); ProgramaSemantica.AMBITO -= 1;
                RESULT = new ListaTripletes();
              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("IF_ELSE",39, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-9)), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // NT$4 ::= 
            {
              ListaTripletes RESULT =null;
reportarSem("Error en un if, se esperaba )"); ProgramaSemantica.AMBITO += 1;
              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("NT$4",58, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // IF_ELSE ::= iff para CONDICION error llavea NT$4 STATEMENTS llavec ELSE_IF ELSE 
            {
              ListaTripletes RESULT =null;
              // propagate RESULT from NT$4
                RESULT = (ListaTripletes) ((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-4)).value;
		sem.eliminarAmbito(ProgramaSemantica.AMBITO); ProgramaSemantica.AMBITO -= 1;
                RESULT = new ListaTripletes();
              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("IF_ELSE",39, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-9)), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // NT$5 ::= 
            {
              ListaTripletes RESULT =null;
reportarSem("Error en un if, se esperaba {"); ProgramaSemantica.AMBITO += 1;
              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("NT$5",59, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // IF_ELSE ::= iff para CONDICION parc error NT$5 STATEMENTS llavec ELSE_IF ELSE 
            {
              ListaTripletes RESULT =null;
              // propagate RESULT from NT$5
                RESULT = (ListaTripletes) ((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-4)).value;
		sem.eliminarAmbito(ProgramaSemantica.AMBITO); ProgramaSemantica.AMBITO -= 1;
                RESULT = new ListaTripletes();
              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("IF_ELSE",39, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-9)), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // NT$6 ::= 
            {
              Else_Operator RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-6)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-6)).right;
		Else_Operator e1 = (Else_Operator)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-6)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-2)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-2)).right;
		CondicionPrograma e2 = (CondicionPrograma)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-2)).value;
ProgramaSemantica.AMBITO += 1;
              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("NT$6",60, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // ELSE_IF ::= ELSE_IF elsee iff para CONDICION parc llavea NT$6 STATEMENTS llavec 
            {
              Else_Operator RESULT =null;
              // propagate RESULT from NT$6
                RESULT = (Else_Operator) ((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-2)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-9)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-9)).right;
		Else_Operator e1 = (Else_Operator)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-9)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-5)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-5)).right;
		CondicionPrograma e2 = (CondicionPrograma)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-5)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-1)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-1)).right;
		ListaTripletes e3 = (ListaTripletes)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-1)).value;
		sem.eliminarAmbito(ProgramaSemantica.AMBITO); ProgramaSemantica.AMBITO -= 1;
                RESULT = e1.agregarElseIf(e2, e3);
              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("ELSE_IF",50, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-9)), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // NT$7 ::= 
            {
              Else_Operator RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-6)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-6)).right;
		Else_Operator e1 = (Else_Operator)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-6)).value;
reportarSem("Error en else if, se esperaba una condicional"); ProgramaSemantica.AMBITO += 1;
              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("NT$7",61, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // ELSE_IF ::= ELSE_IF elsee iff para error parc llavea NT$7 STATEMENTS llavec 
            {
              Else_Operator RESULT =null;
              // propagate RESULT from NT$7
                RESULT = (Else_Operator) ((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-2)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-9)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-9)).right;
		Else_Operator e1 = (Else_Operator)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-9)).value;
		sem.eliminarAmbito(ProgramaSemantica.AMBITO); ProgramaSemantica.AMBITO -= 1;
                RESULT = e1;
              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("ELSE_IF",50, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-9)), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // NT$8 ::= 
            {
              Else_Operator RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-6)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-6)).right;
		Else_Operator e1 = (Else_Operator)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-6)).value;
reportarSem("Error en else if, se esperaba if ya que tiene condicion"); ProgramaSemantica.AMBITO += 1;
              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("NT$8",62, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // ELSE_IF ::= ELSE_IF elsee error para CONDICION parc llavea NT$8 STATEMENTS llavec 
            {
              Else_Operator RESULT =null;
              // propagate RESULT from NT$8
                RESULT = (Else_Operator) ((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-2)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-9)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-9)).right;
		Else_Operator e1 = (Else_Operator)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-9)).value;
		sem.eliminarAmbito(ProgramaSemantica.AMBITO); ProgramaSemantica.AMBITO -= 1;
                RESULT = e1;
              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("ELSE_IF",50, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-9)), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // NT$9 ::= 
            {
              Else_Operator RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-6)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-6)).right;
		Else_Operator e1 = (Else_Operator)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-6)).value;
reportarSem("Error en else if, se esperaba ("); ProgramaSemantica.AMBITO += 1;
              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("NT$9",63, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // ELSE_IF ::= ELSE_IF elsee iff error CONDICION parc llavea NT$9 STATEMENTS llavec 
            {
              Else_Operator RESULT =null;
              // propagate RESULT from NT$9
                RESULT = (Else_Operator) ((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-2)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-9)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-9)).right;
		Else_Operator e1 = (Else_Operator)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-9)).value;
		sem.eliminarAmbito(ProgramaSemantica.AMBITO); ProgramaSemantica.AMBITO -= 1;
                RESULT = e1;
              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("ELSE_IF",50, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-9)), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // NT$10 ::= 
            {
              Else_Operator RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-6)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-6)).right;
		Else_Operator e1 = (Else_Operator)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-6)).value;
reportarSem("Error en else if, se esperaba )"); ProgramaSemantica.AMBITO += 1;
              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("NT$10",64, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // ELSE_IF ::= ELSE_IF elsee iff para CONDICION error llavea NT$10 STATEMENTS llavec 
            {
              Else_Operator RESULT =null;
              // propagate RESULT from NT$10
                RESULT = (Else_Operator) ((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-2)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-9)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-9)).right;
		Else_Operator e1 = (Else_Operator)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-9)).value;
		sem.eliminarAmbito(ProgramaSemantica.AMBITO); ProgramaSemantica.AMBITO -= 1;
                RESULT = e1;
              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("ELSE_IF",50, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-9)), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // NT$11 ::= 
            {
              Else_Operator RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-6)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-6)).right;
		Else_Operator e1 = (Else_Operator)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-6)).value;
reportarSem("Error en else if, se esperaba {"); ProgramaSemantica.AMBITO += 1;
              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("NT$11",65, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // ELSE_IF ::= ELSE_IF elsee iff para CONDICION parc error NT$11 STATEMENTS llavec 
            {
              Else_Operator RESULT =null;
              // propagate RESULT from NT$11
                RESULT = (Else_Operator) ((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-2)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-9)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-9)).right;
		Else_Operator e1 = (Else_Operator)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-9)).value;
		sem.eliminarAmbito(ProgramaSemantica.AMBITO); ProgramaSemantica.AMBITO -= 1;
                RESULT = e1;
              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("ELSE_IF",50, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-9)), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // ELSE_IF ::= 
            {
              Else_Operator RESULT =null;
		RESULT = new Else_Operator();
              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("ELSE_IF",50, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // NT$12 ::= 
            {
              ListaTripletes RESULT =null;
ProgramaSemantica.AMBITO += 1;
              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("NT$12",66, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // ELSE ::= elsee llavea NT$12 STATEMENTS llavec 
            {
              ListaTripletes RESULT =null;
              // propagate RESULT from NT$12
                RESULT = (ListaTripletes) ((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-2)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-1)).right;
		ListaTripletes e1 = (ListaTripletes)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-1)).value;
		sem.eliminarAmbito(ProgramaSemantica.AMBITO); ProgramaSemantica.AMBITO -= 1;
                RESULT = e1;
              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("ELSE",40, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-4)), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // ELSE ::= 
            {
              ListaTripletes RESULT =null;
		RESULT = new ListaTripletes();
              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("ELSE",40, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // SWITCH ::= switchh para EXPR parc llavea CASES DEFAULT llavec 
            {
              ListaTripletes RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-5)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-5)).right;
		OperacionPrograma e1 = (OperacionPrograma)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-5)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-2)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-2)).right;
		CasePrograma e2 = (CasePrograma)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-2)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-1)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-1)).right;
		ListaTripletes e3 = (ListaTripletes)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-1)).value;
		RESULT = e2.agregarDefault(e1, e3);
              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("SWITCH",35, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-7)), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // SWITCH ::= switchh para error parc llavea CASES DEFAULT llavec 
            {
              ListaTripletes RESULT =null;
		reportarSem("Error en la expresion del switch, se esperaba una Operacion"); 
                        RESULT = new ListaTripletes();
              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("SWITCH",35, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-7)), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // SWITCH ::= switchh error EXPR parc llavea CASES DEFAULT llavec 
            {
              ListaTripletes RESULT =null;
		reportarSem("Error en la expresion del switch, se esperaba ("); 
                        RESULT = new ListaTripletes();
              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("SWITCH",35, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-7)), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // SWITCH ::= switchh para EXPR error llavea CASES DEFAULT llavec 
            {
              ListaTripletes RESULT =null;
		reportarSem("Error en la expresion del switch, se esperaba )"); 
                        RESULT = new ListaTripletes();
              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("SWITCH",35, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-7)), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // SWITCH ::= switchh para EXPR parc error CASES DEFAULT llavec 
            {
              ListaTripletes RESULT =null;
		reportarSem("Error en la expresion del switch, se esperaba {"); 
                        RESULT = new ListaTripletes();
              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("SWITCH",35, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-7)), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // NT$13 ::= 
            {
              CasePrograma RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-3)).right;
		CasePrograma e1 = (CasePrograma)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-1)).right;
		OperacionPrograma e2 = (OperacionPrograma)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-1)).value;
esCase = true; ProgramaSemantica.AMBITO += 1;
              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("NT$13",67, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // CASES ::= CASES casee OPERACION_A dosp NT$13 STATEMENTSC 
            {
              CasePrograma RESULT =null;
              // propagate RESULT from NT$13
                RESULT = (CasePrograma) ((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-1)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-5)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-5)).right;
		CasePrograma e1 = (CasePrograma)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-5)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-3)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-3)).right;
		OperacionPrograma e2 = (OperacionPrograma)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-3)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()).right;
		ListaTripletes e3 = (ListaTripletes)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.peek()).value;
		esCase = false; sem.eliminarAmbito(ProgramaSemantica.AMBITO); ProgramaSemantica.AMBITO -= 1;
                if(e2!=null){RESULT  = e1.agregarCase(e2, e3);}
              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("CASES",51, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-5)), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // NT$14 ::= 
            {
              CasePrograma RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-3)).right;
		CasePrograma e1 = (CasePrograma)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-3)).value;
esCase = true; ProgramaSemantica.AMBITO += 1;
              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("NT$14",68, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // CASES ::= CASES casee error dosp NT$14 STATEMENTSC 
            {
              CasePrograma RESULT =null;
              // propagate RESULT from NT$14
                RESULT = (CasePrograma) ((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-1)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-5)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-5)).right;
		CasePrograma e1 = (CasePrograma)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-5)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()).right;
		ListaTripletes e3 = (ListaTripletes)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.peek()).value;
		reportarSem("Error en la condicion del case, se espera una operacion aritmetica"); RESULT = new CasePrograma();
              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("CASES",51, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-5)), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // CASES ::= 
            {
              CasePrograma RESULT =null;
		RESULT = new CasePrograma();
              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("CASES",51, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // STATEMENTSC ::= STATEMENT STATEMENTSC 
            {
              ListaTripletes RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-1)).right;
		ListaTripletes e1 = (ListaTripletes)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()).right;
		ListaTripletes e2 = (ListaTripletes)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.peek()).value;
		e1.addAll(e2); RESULT = e1;
              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("STATEMENTSC",44, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // STATEMENTSC ::= breakk puntocoma 
            {
              ListaTripletes RESULT =null;
		ListaTripletes tri = new ListaTripletes(); 
                if(!esCase){
                        reportarSem("Break fuera de un switch");
                }else{tri.add(new Break());} RESULT = tri;
              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("STATEMENTSC",44, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // STATEMENTSC ::= 
            {
              ListaTripletes RESULT =null;
		RESULT = new ListaTripletes();
              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("STATEMENTSC",44, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // NT$15 ::= 
            {
              ListaTripletes RESULT =null;
esCase = true; ProgramaSemantica.AMBITO += 1;
              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("NT$15",69, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // DEFAULT ::= defaultt dosp NT$15 STATEMENTSC 
            {
              ListaTripletes RESULT =null;
              // propagate RESULT from NT$15
                RESULT = (ListaTripletes) ((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-1)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()).right;
		ListaTripletes e1 = (ListaTripletes)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.peek()).value;
		esCase = false; sem.eliminarAmbito(ProgramaSemantica.AMBITO); ProgramaSemantica.AMBITO -= 1;
                RESULT = e1;
              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("DEFAULT",45, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // DEFAULT ::= 
            {
              ListaTripletes RESULT =null;
		RESULT = new ListaTripletes();
              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("DEFAULT",45, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // NT$16 ::= 
            {
              ListaTripletes RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-2)).right;
		CondicionPrograma e1 = (CondicionPrograma)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-2)).value;
ProgramaSemantica.AMBITO += 1;
              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("NT$16",70, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // WHILE ::= whilee para CONDICION parc llavea NT$16 STATEMENTS llavec 
            {
              ListaTripletes RESULT =null;
              // propagate RESULT from NT$16
                RESULT = (ListaTripletes) ((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-2)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-5)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-5)).right;
		CondicionPrograma e1 = (CondicionPrograma)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-5)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-1)).right;
		ListaTripletes e2 = (ListaTripletes)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-1)).value;
		sem.eliminarAmbito(ProgramaSemantica.AMBITO); ProgramaSemantica.AMBITO -= 1;
        RESULT = Else_Operator.WHILE(e1, e2);
              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("WHILE",41, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-7)), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // NT$17 ::= 
            {
              ListaTripletes RESULT =null;
ProgramaSemantica.AMBITO += 1;
              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("NT$17",71, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // WHILE ::= whilee para error parc llavea NT$17 STATEMENTS llavec 
            {
              ListaTripletes RESULT =null;
              // propagate RESULT from NT$17
                RESULT = (ListaTripletes) ((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-2)).value;
		sem.eliminarAmbito(ProgramaSemantica.AMBITO); ProgramaSemantica.AMBITO -= 1;
                reportarSem("Error en la condición de un while, se esperaba una condicional"); RESULT = new ListaTripletes();
              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("WHILE",41, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-7)), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // NT$18 ::= 
            {
              ListaTripletes RESULT =null;
ProgramaSemantica.AMBITO += 1;
              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("NT$18",72, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // DO_WHILE ::= doo llavea NT$18 STATEMENTS llavec whilee para CONDICION parc puntocoma 
            {
              ListaTripletes RESULT =null;
              // propagate RESULT from NT$18
                RESULT = (ListaTripletes) ((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-7)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-6)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-6)).right;
		ListaTripletes e1 = (ListaTripletes)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-6)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-2)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-2)).right;
		CondicionPrograma e2 = (CondicionPrograma)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-2)).value;
		sem.eliminarAmbito(ProgramaSemantica.AMBITO);
        ProgramaSemantica.AMBITO -= 1; RESULT = Else_Operator.DOWHILE(e2, e1);
              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("DO_WHILE",42, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-9)), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // NT$19 ::= 
            {
              ListaTripletes RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-6)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-6)).right;
		ListaTripletes e1 = (ListaTripletes)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-6)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-4)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-4)).right;
		CondicionPrograma e2 = (CondicionPrograma)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-4)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-2)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-2)).right;
		ListaTripletes e3 = (ListaTripletes)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-2)).value;
ProgramaSemantica.AMBITO += 1;
              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("NT$19",73, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // FOR ::= forr para INICIO puntocoma CONDICION puntocoma STEP parc llavea NT$19 STATEMENTS llavec 
            {
              ListaTripletes RESULT =null;
              // propagate RESULT from NT$19
                RESULT = (ListaTripletes) ((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-2)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-9)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-9)).right;
		ListaTripletes e1 = (ListaTripletes)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-9)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-7)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-7)).right;
		CondicionPrograma e2 = (CondicionPrograma)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-7)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-5)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-5)).right;
		ListaTripletes e3 = (ListaTripletes)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-5)).value;
		int e5left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-1)).left;
		int e5right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-1)).right;
		ListaTripletes e5 = (ListaTripletes)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-1)).value;
		sem.eliminarAmbito(ProgramaSemantica.AMBITO); ProgramaSemantica.AMBITO -= 1;
        RESULT = Else_Operator.FOR(e1, e3, e2, e5);
              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("FOR",43, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-11)), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // NT$20 ::= 
            {
              ListaTripletes RESULT =null;
ProgramaSemantica.AMBITO += 1;
                                reportarSem("Error en el inicio del for, se esperaba una inicialización de variable");
              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("NT$20",74, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // FOR ::= forr para error puntocoma CONDICION puntocoma STEP parc llavea NT$20 STATEMENTS llavec 
            {
              ListaTripletes RESULT =null;
              // propagate RESULT from NT$20
                RESULT = (ListaTripletes) ((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-2)).value;
		int e5left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-1)).left;
		int e5right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-1)).right;
		ListaTripletes e5 = (ListaTripletes)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-1)).value;
		sem.eliminarAmbito(ProgramaSemantica.AMBITO); ProgramaSemantica.AMBITO -= 1; RESULT = new ListaTripletes();
              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("FOR",43, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-11)), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // NT$21 ::= 
            {
              ListaTripletes RESULT =null;
ProgramaSemantica.AMBITO += 1;
                                reportarSem("Error en la condicional del for, se esperaba una condicion de variable");
              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("NT$21",75, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // FOR ::= forr para INICIO puntocoma error puntocoma STEP parc llavea NT$21 STATEMENTS llavec 
            {
              ListaTripletes RESULT =null;
              // propagate RESULT from NT$21
                RESULT = (ListaTripletes) ((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-2)).value;
		int e5left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-1)).left;
		int e5right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-1)).right;
		ListaTripletes e5 = (ListaTripletes)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-1)).value;
		sem.eliminarAmbito(ProgramaSemantica.AMBITO); ProgramaSemantica.AMBITO -= 1; RESULT = new ListaTripletes();
              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("FOR",43, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-11)), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // NT$22 ::= 
            {
              ListaTripletes RESULT =null;
ProgramaSemantica.AMBITO += 1;
                                reportarSem("Error en el Step del for, se esperaba el step del for");
              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("NT$22",76, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // FOR ::= forr para INICIO puntocoma CONDICION puntocoma error parc llavea NT$22 STATEMENTS llavec 
            {
              ListaTripletes RESULT =null;
              // propagate RESULT from NT$22
                RESULT = (ListaTripletes) ((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-2)).value;
		int e5left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-1)).left;
		int e5right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-1)).right;
		ListaTripletes e5 = (ListaTripletes)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-1)).value;
		sem.eliminarAmbito(ProgramaSemantica.AMBITO); ProgramaSemantica.AMBITO -= 1; RESULT = new ListaTripletes();
              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("FOR",43, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-11)), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // NT$23 ::= 
            {
              ListaTripletes RESULT =null;

                                reportarSem("Error el espacio del for, se esperaba un punto y coma");
              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("NT$23",77, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // FOR ::= forr para error parc llavea NT$23 STATEMENTS llavec 
            {
              ListaTripletes RESULT =null;
              // propagate RESULT from NT$23
                RESULT = (ListaTripletes) ((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-2)).value;
		int e5left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-1)).left;
		int e5right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-1)).right;
		ListaTripletes e5 = (ListaTripletes)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-1)).value;
		sem.eliminarAmbito(ProgramaSemantica.AMBITO); ProgramaSemantica.AMBITO -= 1; RESULT = new ListaTripletes();
              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("FOR",43, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-7)), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // NT$24 ::= 
            {
              ListaTripletes RESULT =null;

                                reportarSem("Error el espacio del for, se esperaba (");
              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("NT$24",78, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // FOR ::= forr error INICIO puntocoma CONDICION puntocoma STEP parc llavea NT$24 STATEMENTS llavec 
            {
              ListaTripletes RESULT =null;
              // propagate RESULT from NT$24
                RESULT = (ListaTripletes) ((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-2)).value;
		int e5left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-1)).left;
		int e5right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-1)).right;
		ListaTripletes e5 = (ListaTripletes)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-1)).value;
		sem.eliminarAmbito(ProgramaSemantica.AMBITO); ProgramaSemantica.AMBITO -= 1; RESULT = new ListaTripletes();
              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("FOR",43, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-11)), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // NT$25 ::= 
            {
              ListaTripletes RESULT =null;

                                reportarSem("Error el espacio del for, se esperaba {");
              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("NT$25",79, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // FOR ::= forr para INICIO puntocoma CONDICION puntocoma STEP parc error NT$25 STATEMENTS llavec 
            {
              ListaTripletes RESULT =null;
              // propagate RESULT from NT$25
                RESULT = (ListaTripletes) ((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-2)).value;
		int e5left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-1)).left;
		int e5right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-1)).right;
		ListaTripletes e5 = (ListaTripletes)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-1)).value;
		sem.eliminarAmbito(ProgramaSemantica.AMBITO); ProgramaSemantica.AMBITO -= 1; RESULT = new ListaTripletes();
              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("FOR",43, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-11)), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 172: // INICIO ::= DEF_VAR 
            {
              ListaTripletes RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()).right;
		ListaTripletes e1 = (ListaTripletes)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.peek()).value;
		RESULT = e1;
              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("INICIO",38, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 173: // INICIO ::= id 
            {
              ListaTripletes RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.peek()).value;
		if(sem.existeVar(new VariablePrograma(e1, ProgramaSemantica.AMBITO, null))== null){
                        reportarSem("Variable no existente con el id: <" + e1 + ">");
                }RESULT = new ListaTripletes();
              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("INICIO",38, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 174: // INICIO ::= TYPE id igual EXPR 
            {
              ListaTripletes RESULT =null;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-3)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-3)).right;
		Integer e2 = (Integer)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-3)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-2)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()).right;
		OperacionPrograma e3 = (OperacionPrograma)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.peek()).value;
		ListaTripletes tri = new ListaTripletes();
        if(sem.existeVar(new VariablePrograma(e1, ProgramaSemantica.AMBITO, null)) != null){
                reportarSem("Variable ya existente con el id: <" + e1 + ">");
        } else {
                sem.addVar(new VariablePrograma(e1, ProgramaSemantica.AMBITO+1, null));
                tri.addAll(e3.getTripletes()); tri.add(e3.getTriplete());
                tri.add(new AsignarValor(new TerminalOperator(e1), e3.getTriplete(), Triplete.tipos[e2-1]));}
              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("INICIO",38, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 175: // STEP ::= DEF_VAR 
            {
              ListaTripletes RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()).right;
		ListaTripletes e1 = (ListaTripletes)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.peek()).value;
		RESULT = e1;
              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("STEP",37, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 176: // STEP ::= OP_VAR 
            {
              ListaTripletes RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()).right;
		ListaTripletes e1 = (ListaTripletes)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.peek()).value;
		RESULT = e1;
              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("STEP",37, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 177: // OP_VAR ::= id masmas 
            {
              ListaTripletes RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-1)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-1)).value;
		ListaTripletes tri = new ListaTripletes(); VariablePrograma vars = sem.existeVar(new VariablePrograma(e1, ProgramaSemantica.AMBITO, null));
                if(vars == null){
                        reportarSem("Variable no existente con el id: <" + e1 + ">");
                } else {
                        SumOperator ss1 = sem.getVariables().devolverSum(e1);
                        tri.add(ss1);
                        SumOperator sum = new SumOperator(null, sem.getVariables().devolverDireccion(ss1.getId()), new TerminalOperator("1"), OperacionJava.obtenerTipo(vars.getTipo()));
                        tri.add(sum);
                        SumOperator ss2 = sem.getVariables().devolverSum(e1);
                        tri.add(ss2);
                        tri.add(new AsignarValor(sem.getVariables().devolverDireccion(ss2.getId()), sum, null));
                } RESULT = tri;
              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("OP_VAR",36, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 178: // OP_VAR ::= id menosmenos 
            {
              ListaTripletes RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-1)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-1)).value;
		ListaTripletes tri = new ListaTripletes(); VariablePrograma vars = new VariablePrograma(e1, ProgramaSemantica.AMBITO, null);
                if(vars == null){
                        reportarSem("Variable no existente con el id: <" + e1 + ">");
                } else {
                        SumOperator ss1 = sem.getVariables().devolverSum(e1);
                        tri.add(ss1);
                        RestOperator rest = new RestOperator(null,sem.getVariables().devolverDireccion(ss1.getId()), new TerminalOperator("1"), OperacionJava.obtenerTipo(vars.getTipo()));
                        tri.add(rest); 
                        SumOperator ss2 = sem.getVariables().devolverSum(e1);
                        tri.add(ss2);
                        tri.add(new AsignarValor(sem.getVariables().devolverDireccion(ss2.getId()), rest, null));
                } RESULT = tri;
              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("OP_VAR",36, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 179: // OP_VAR ::= error masmas 
            {
              ListaTripletes RESULT =null;
		reportarSem("Error en la operacion incremento, se espera un id antes del ++"); RESULT = new ListaTripletes();
              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("OP_VAR",36, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 180: // OP_VAR ::= error menosmenos 
            {
              ListaTripletes RESULT =null;
		reportarSem("Error en la operacion incremento, se espera un id antes del --"); RESULT = new ListaTripletes();
              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("OP_VAR",36, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 181: // OP_VAR ::= id error 
            {
              ListaTripletes RESULT =null;
		reportarSem("Error en la operacion incremento, se espera un ++ o --"); RESULT = new ListaTripletes();
              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("OP_VAR",36, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 182: // CONDICION ::= CONDICION orr AND 
            {
              CondicionPrograma RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-2)).right;
		CondicionPrograma e1 = (CondicionPrograma)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()).right;
		CondicionPrograma e2 = (CondicionPrograma)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.peek()).value;
		RESULT = IfPrograma.OR(e1, e2);
              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("CONDICION",27, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 183: // CONDICION ::= AND 
            {
              CondicionPrograma RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()).right;
		CondicionPrograma e1 = (CondicionPrograma)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.peek()).value;
		RESULT = e1;
              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("CONDICION",27, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 184: // AND ::= AND andd NOT 
            {
              CondicionPrograma RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-2)).right;
		CondicionPrograma e1 = (CondicionPrograma)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()).right;
		CondicionPrograma e2 = (CondicionPrograma)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.peek()).value;
		RESULT = IfPrograma.AND(e1, e2);
              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("AND",26, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 185: // AND ::= NOT 
            {
              CondicionPrograma RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()).right;
		CondicionPrograma e1 = (CondicionPrograma)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.peek()).value;
		RESULT = e1;
              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("AND",26, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 186: // NOT ::= nott NOT 
            {
              CondicionPrograma RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()).right;
		CondicionPrograma e1 = (CondicionPrograma)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.peek()).value;
		RESULT = IfPrograma.NOT(e1);
              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("NOT",25, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 187: // NOT ::= COMPARACION 
            {
              CondicionPrograma RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()).right;
		Triplete e1 = (Triplete)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.peek()).value;
		RESULT = new IfPrograma(new If_Operator(e1, new Etiqueta()), ((CondicionalOperator)e1).getTripletes());
              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("NOT",25, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 188: // NOT ::= para CONDICION parc 
            {
              CondicionPrograma RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-1)).right;
		CondicionPrograma e1 = (CondicionPrograma)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-1)).value;
		RESULT = e1;
              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("NOT",25, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 189: // COMPARACION ::= OPERACION_A igig OPERACION_A 
            {
              Triplete RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-2)).right;
		OperacionPrograma e1 = (OperacionPrograma)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()).right;
		OperacionPrograma e2 = (OperacionPrograma)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.peek()).value;
		RESULT = new IgualOperator(e1.getTriplete(), e2.getTriplete(),
                e1.getTripletes(), e2.getTripletes());
              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("COMPARACION",24, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 190: // COMPARACION ::= OPERACION_A noigual OPERACION_A 
            {
              Triplete RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-2)).right;
		OperacionPrograma e1 = (OperacionPrograma)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()).right;
		OperacionPrograma e2 = (OperacionPrograma)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.peek()).value;
		RESULT = new NoIgualOperator(e1.getTriplete(), e2.getTriplete(),
                e1.getTripletes(), e2.getTripletes());
              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("COMPARACION",24, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 191: // COMPARACION ::= OPERACION_A menor OPERACION_A 
            {
              Triplete RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-2)).right;
		OperacionPrograma e1 = (OperacionPrograma)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()).right;
		OperacionPrograma e2 = (OperacionPrograma)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.peek()).value;
		RESULT = new MenorOperator(e1.getTriplete(), e2.getTriplete(),
                e1.getTripletes(), e2.getTripletes());
              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("COMPARACION",24, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 192: // COMPARACION ::= OPERACION_A menorig OPERACION_A 
            {
              Triplete RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-2)).right;
		OperacionPrograma e1 = (OperacionPrograma)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()).right;
		OperacionPrograma e2 = (OperacionPrograma)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.peek()).value;
		RESULT = new MenorIgOperator(e1.getTriplete(), e2.getTriplete(),
                e1.getTripletes(), e2.getTripletes());
              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("COMPARACION",24, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 193: // COMPARACION ::= OPERACION_A mayor OPERACION_A 
            {
              Triplete RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-2)).right;
		OperacionPrograma e1 = (OperacionPrograma)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()).right;
		OperacionPrograma e2 = (OperacionPrograma)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.peek()).value;
		RESULT = new MayorOperator(e1.getTriplete(), e2.getTriplete(),
                e1.getTripletes(), e2.getTripletes());
              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("COMPARACION",24, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 194: // COMPARACION ::= OPERACION_A mayorig OPERACION_A 
            {
              Triplete RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-2)).right;
		OperacionPrograma e1 = (OperacionPrograma)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()).right;
		OperacionPrograma e2 = (OperacionPrograma)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.peek()).value;
		RESULT = new MayorIgOperator(e1.getTriplete(), e2.getTriplete(),
                e1.getTripletes(), e2.getTripletes());
              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("COMPARACION",24, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 195: // LLAMADA_METODO ::= pyy punto id para LIST_PARAM parc 
            {
              OperacionPrograma RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-3)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-1)).right;
		List<OperacionPrograma> e2 = (List<OperacionPrograma>)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-1)).value;
		MetodoPython met = sem.existeMetodoPY(e1, e2);
                        if(met == null){
                                reportarSem("Metodo de Python no existente con id: <" + e1 + ">");
                        } else {
                                List<Triplete> tri = new ArrayList<>();
                                tri.addAll(met.verMetodo(e2, sem.getVariables().getTamano()));
                                SumOperator s = new SumOperator(null, new P(), new TerminalOperator(""+sem.getVariables().getTamano()),"int");
                                tri.add(s);
                                OperacionPrograma op = new OperacionPrograma(CallPrograma.regresarTipo(met), new Stack(s));
                                op.getTripletes().addAll(tri);
                                RESULT = op;
                        }
              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("LLAMADA_METODO",13, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-5)), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 196: // LLAMADA_METODO ::= vbb punto id para LIST_PARAM parc 
            {
              OperacionPrograma RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-3)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-1)).right;
		List<OperacionPrograma> e2 = (List<OperacionPrograma>)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-1)).value;
		MetodoVisual met = sem.existeMetodoVB(e1, e2);
                        if(met == null){
                                reportarSem("Metodo de Visua Basic no existente con id: <" + e1 + ">");
                        } else {
                                List<Triplete> tri = new ArrayList<>();
                                tri.addAll(met.verMetodo(e2, sem.getVariables().getTamano()));
                                SumOperator s = new SumOperator(null, new P(), new TerminalOperator(""+sem.getVariables().getTamano()),"int");
                                tri.add(s);
                                OperacionPrograma op = new OperacionPrograma(CallPrograma.regresarTipo(met), new Stack(s));
                                op.getTripletes().addAll(tri);
                                RESULT = op;
                        }
              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("LLAMADA_METODO",13, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-5)), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 197: // LLAMADA_METODO ::= javaa punto id punto id para LIST_PARAM parc 
            {
              OperacionPrograma RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-5)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-5)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-5)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-3)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-3)).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-3)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-1)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-1)).right;
		List<OperacionPrograma> e3 = (List<OperacionPrograma>)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-1)).value;
		
                        VariablePrograma objeto = sem.existeObjeto(e1);
                        if(objeto == null){
                                reportarSem("Variable que almacena un objeto de Java no existente con id: <" + e1 + ">");
                        } else {
                                MetodoJava met = sem.existeMetodoJV(objeto.getTip(), e2, e3);
                                if(met == null) {
                                        reportarSem("Metodo de Java no existente con id: <" + e2 + ">");
                                } else {
                                List<Triplete> tri = new ArrayList<>();
                                tri.addAll(met.verMetodo(sem.getVariables().getTamano(), objeto, e3));
                                SumOperator s = new SumOperator(null, new P(), new TerminalOperator(""+(sem.getVariables().getTamano()+1)),"int");
                                tri.add(s);
                                OperacionPrograma op = new OperacionPrograma(CallPrograma.regresarTipo(met), new Stack(s));
                                op.getTripletes().addAll(tri);
                                RESULT = op;}
                        }
              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("LLAMADA_METODO",13, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-7)), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 198: // LLAMADA_METODO ::= error punto id para LIST_PARAM parc 
            {
              OperacionPrograma RESULT =null;
		reportarSem("Llamada a metodo incorrecta, se esperaba PY|VB");
              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("LLAMADA_METODO",13, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-5)), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 199: // LLAMADA_METODO ::= error punto id punto id para LIST_PARAM parc 
            {
              OperacionPrograma RESULT =null;
		reportarSem("Llamada a metodo incorrecta, se esperaba JV");
              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("LLAMADA_METODO",13, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-7)), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 200: // LLAMADA_METODO ::= pyy error id para LIST_PARAM parc 
            {
              OperacionPrograma RESULT =null;
		reportarSem("Llamada a metodo py incorrecta, se esperaba un punto");
              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("LLAMADA_METODO",13, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-5)), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 201: // LLAMADA_METODO ::= vbb error id para LIST_PARAM parc 
            {
              OperacionPrograma RESULT =null;
		reportarSem("Llamada a metodo vb incorrecta, se esperaba un punto");
              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("LLAMADA_METODO",13, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-5)), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 202: // LLAMADA_METODO ::= pyy punto error para LIST_PARAM parc 
            {
              OperacionPrograma RESULT =null;
		reportarSem("Llamada a metodo py incorrecta, se esperaba un id");
              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("LLAMADA_METODO",13, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-5)), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 203: // LLAMADA_METODO ::= vbb punto error para LIST_PARAM parc 
            {
              OperacionPrograma RESULT =null;
		reportarSem("Llamada a metodo vb incorrecta, se esperaba un id");
              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("LLAMADA_METODO",13, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-5)), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 204: // LLAMADA_METODO ::= pyy punto id error LIST_PARAM parc 
            {
              OperacionPrograma RESULT =null;
		reportarSem("Llamada a metodo py incorrecta, se esperaba un (");
              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("LLAMADA_METODO",13, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-5)), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 205: // LLAMADA_METODO ::= vbb punto id error LIST_PARAM parc 
            {
              OperacionPrograma RESULT =null;
		reportarSem("Llamada a metodo vb incorrecta, se esperaba un (");
              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("LLAMADA_METODO",13, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-5)), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 206: // LLAMADA_METODO ::= javaa error id punto id para LIST_PARAM parc 
            {
              OperacionPrograma RESULT =null;
		reportarSem("Llamada a metodo java incorrecta, se esperaba un punto");
              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("LLAMADA_METODO",13, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-7)), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 207: // LLAMADA_METODO ::= javaa punto error punto id para LIST_PARAM parc 
            {
              OperacionPrograma RESULT =null;
		reportarSem("Llamada a metodo java incorrecta, se esperaba un id");
              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("LLAMADA_METODO",13, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-7)), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 208: // LLAMADA_METODO ::= javaa punto id error id para LIST_PARAM parc 
            {
              OperacionPrograma RESULT =null;
		reportarSem("Llamada a metodo java incorrecta, se esperaba un punto");
              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("LLAMADA_METODO",13, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-7)), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 209: // LLAMADA_METODO ::= javaa punto id punto error para LIST_PARAM parc 
            {
              OperacionPrograma RESULT =null;
		reportarSem("Llamada a metodo java incorrecta, se esperaba un id");
              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("LLAMADA_METODO",13, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-7)), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 210: // EXPR ::= LLAMADA_METODO 
            {
              OperacionPrograma RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()).right;
		OperacionPrograma e1 = (OperacionPrograma)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.peek()).value;
		if(!e1.getTipo().equals(Triplete.tipos[3])){RESULT = new OperacionPrograma(new AsignarTemporal(null, e1.getTriplete(),
                Triplete.devolverTipo(e1)), e1);} else {reportarSem("Error, metodo void no regresa ningun dato");}
              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("EXPR",7, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 211: // EXPR ::= OPERACION_A 
            {
              OperacionPrograma RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()).right;
		OperacionPrograma e1 = (OperacionPrograma)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.peek()).value;
		RESULT = e1;
              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("EXPR",7, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 212: // EXPR ::= getch 
            {
              OperacionPrograma RESULT =null;
		RESULT = new OperacionPrograma(VariablePrograma.INT, new GetchOperator());
              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("EXPR",7, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 213: // CLASS ::= javaa punto id LIST_CLASS puntocoma 
            {
              ListaTripletes RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-1)).right;
		List<ObjetoPrograma> e2 = (List<ObjetoPrograma>)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-1)).value;
		
        RESULT = new ListaTripletes(ObjetoPrograma.triplete(e1, e2, sem, ProgramaSemantica.AMBITO));
              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("CLASS",46, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-4)), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 214: // CLASS ::= error punto id LIST_CLASS puntocoma 
            {
              ListaTripletes RESULT =null;
		reportarSem("Llamada a constructor java incorrecto, se esperaba la llamada jv"); RESULT = new ListaTripletes();
              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("CLASS",46, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-4)), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 215: // CLASS ::= javaa error id LIST_CLASS puntocoma 
            {
              ListaTripletes RESULT =null;
		reportarSem("Llamada a constructor java incorrecto, se esperaba un punto"); RESULT = new ListaTripletes();
              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("CLASS",46, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-4)), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 216: // CLASS ::= javaa punto error LIST_CLASS puntocoma 
            {
              ListaTripletes RESULT =null;
		reportarSem("Llamada a constructor java incorrecto, se esperaba un id"); RESULT = new ListaTripletes();
              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("CLASS",46, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-4)), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 217: // CLASS ::= javaa punto id LIST_CLASS error 
            {
              ListaTripletes RESULT =null;
		reportarSem("Llamada a constructor java incorrecto, se esperaba un ;"); RESULT = new ListaTripletes();
              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("CLASS",46, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-4)), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 218: // LIST_CLASS ::= LIST_CLASS coma id PARAM 
            {
              List<ObjetoPrograma> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-3)).right;
		List<ObjetoPrograma> e1 = (List<ObjetoPrograma>)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-1)).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-1)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()).right;
		List<OperacionPrograma> e3 = (List<OperacionPrograma>)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.peek()).value;
		ObjetoPrograma ob = new ObjetoPrograma(e2, e3);
            e1.add(ob); RESULT = e1;
              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("LIST_CLASS",53, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 219: // LIST_CLASS ::= id PARAM 
            {
              List<ObjetoPrograma> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-1)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()).right;
		List<OperacionPrograma> e2 = (List<OperacionPrograma>)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.peek()).value;
		ObjetoPrograma ob = new ObjetoPrograma(e1, e2);
            List<ObjetoPrograma> pro = new ArrayList<>(); pro.add(ob);
            RESULT = pro;
              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("LIST_CLASS",53, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 220: // LIST_CLASS ::= LIST_CLASS coma error PARAM 
            {
              List<ObjetoPrograma> RESULT =null;
		reportarSem("Error en objetos java, se esperaba un id para el objeto"); RESULT = new ArrayList<>();
              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("LIST_CLASS",53, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 221: // PARAM ::= para LIST_PARAM parc 
            {
              List<OperacionPrograma> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-1)).right;
		List<OperacionPrograma> e1 = (List<OperacionPrograma>)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-1)).value;
		RESULT = e1;
              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("PARAM",22, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 222: // PARAM ::= para error parc 
            {
              List<OperacionPrograma> RESULT =null;
		reportarSem("Error en parametros del constructor, se esperaban parametros"); RESULT = new ArrayList<>();
              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("PARAM",22, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 223: // PARAM ::= 
            {
              List<OperacionPrograma> RESULT =null;
		RESULT = new ArrayList<>();
              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("PARAM",22, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 224: // LIST_PARAM ::= LIST 
            {
              List<OperacionPrograma> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()).right;
		List<OperacionPrograma> e1 = (List<OperacionPrograma>)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.peek()).value;
		RESULT = e1;
              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("LIST_PARAM",20, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 225: // LIST_PARAM ::= 
            {
              List<OperacionPrograma> RESULT =null;
		RESULT = new ArrayList<>();
              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("LIST_PARAM",20, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 226: // LIST ::= LIST coma OPERACION_A 
            {
              List<OperacionPrograma> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-2)).right;
		List<OperacionPrograma> e1 = (List<OperacionPrograma>)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()).right;
		OperacionPrograma e2 = (OperacionPrograma)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.peek()).value;
		e1.add(e2); RESULT = e1;
              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("LIST",21, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 227: // LIST ::= OPERACION_A 
            {
              List<OperacionPrograma> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()).right;
		OperacionPrograma e1 = (OperacionPrograma)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.peek()).value;
		List<OperacionPrograma> params = new ArrayList<>(); params.add(e1); RESULT = params;
              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("LIST",21, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 228: // LIST ::= LIST error OPERACION_A 
            {
              List<OperacionPrograma> RESULT =null;
		reportarSem("Error en parametros de constructor, se esperaba una coma"); RESULT = new ArrayList<>();
              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("LIST",21, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 229: // OPERACION_AC ::= OPERACION_AC mas OPERACION_MC 
            {
              OperacionPrograma RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-2)).right;
		OperacionPrograma e1 = (OperacionPrograma)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()).right;
		OperacionPrograma e2 = (OperacionPrograma)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.peek()).value;
		if(e1 != null && e2 != null){
                OperacionPrograma op = new OperacionPrograma(e1, e2, new SumOperator(null, e1.getTriplete(), e2.getTriplete(), Triplete.devolverTipo(e1, e2)));
                op.setValor(e1.getValor() - e2.getValor()); RESULT = op;}
              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("OPERACION_AC",14, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 230: // OPERACION_AC ::= OPERACION_AC menos OPERACION_MC 
            {
              OperacionPrograma RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-2)).right;
		OperacionPrograma e1 = (OperacionPrograma)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()).right;
		OperacionPrograma e2 = (OperacionPrograma)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.peek()).value;
		if(e1 != null && e2 != null){
                OperacionPrograma op = new OperacionPrograma(e1, e2, new RestOperator(null, e1.getTriplete(), e2.getTriplete(), Triplete.devolverTipo(e1, e2)));
                op.setValor(e1.getValor() - e2.getValor()); RESULT = op;}
              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("OPERACION_AC",14, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 231: // OPERACION_AC ::= OPERACION_MC 
            {
              OperacionPrograma RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()).right;
		OperacionPrograma e1 = (OperacionPrograma)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.peek()).value;
		RESULT = e1;
              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("OPERACION_AC",14, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 232: // OPERACION_MC ::= OPERACION_MC por OPERACION_UC 
            {
              OperacionPrograma RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-2)).right;
		OperacionPrograma e1 = (OperacionPrograma)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()).right;
		OperacionPrograma e2 = (OperacionPrograma)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.peek()).value;
		if(e1 != null && e2 != null){
                OperacionPrograma op = new OperacionPrograma(e1, e2, new PorOperator(null, e1.getTriplete(), e2.getTriplete(), Triplete.devolverTipo(e1, e2)));
                op.setValor(e1.getValor() * e2.getValor()); RESULT = op;}
              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("OPERACION_MC",15, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 233: // OPERACION_MC ::= OPERACION_MC div OPERACION_UC 
            {
              OperacionPrograma RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-2)).right;
		OperacionPrograma e1 = (OperacionPrograma)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()).right;
		OperacionPrograma e2 = (OperacionPrograma)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.peek()).value;
		if(e1 != null && e2 != null){
                OperacionPrograma op = new OperacionPrograma(e1, e2, new DivOperator(null, e1.getTriplete(), e2.getTriplete(), Triplete.devolverTipo(e1, e2)));
                op.setValor(e1.getValor()/e2.getValor()); RESULT = op;}
              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("OPERACION_MC",15, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 234: // OPERACION_MC ::= OPERACION_MC mod OPERACION_UC 
            {
              OperacionPrograma RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-2)).right;
		OperacionPrograma e1 = (OperacionPrograma)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()).right;
		OperacionPrograma e2 = (OperacionPrograma)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.peek()).value;
		if(e1 != null && e2 != null){ 
                OperacionPrograma op = new OperacionPrograma(e1, e2, new ModOperator(null, e1.getTriplete(), e2.getTriplete(), Triplete.devolverTipo(e1, e2)));
                op.setValor(e1.getValor() % e2.getValor()); RESULT = op;}
              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("OPERACION_MC",15, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 235: // OPERACION_MC ::= OPERACION_UC 
            {
              OperacionPrograma RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()).right;
		OperacionPrograma e1 = (OperacionPrograma)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.peek()).value;
		RESULT = e1;
              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("OPERACION_MC",15, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 236: // OPERACION_UC ::= menos OPERACION_UC 
            {
              OperacionPrograma RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()).right;
		OperacionPrograma e1 = (OperacionPrograma)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.peek()).value;
		if(e1 != null && e1.getTipo()==1){e1.setTipo(VariablePrograma.INT);}
                OperacionPrograma cero = new OperacionPrograma(VariablePrograma.INT, new TerminalOperator("0"));
                OperacionPrograma op = new OperacionPrograma(cero, e1, new RestOperator(null, cero.getTriplete(), e1.getTriplete(), Triplete.devolverTipo(cero, e1)));
                op.setValor(e1.getValor()*-1); RESULT = op;
              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("OPERACION_UC",16, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 237: // OPERACION_UC ::= mas OPERACION_UC 
            {
              OperacionPrograma RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()).right;
		OperacionPrograma e1 = (OperacionPrograma)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.peek()).value;
		RESULT = e1;
              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("OPERACION_UC",16, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 238: // OPERACION_UC ::= ATOMC 
            {
              OperacionPrograma RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()).right;
		OperacionPrograma e1 = (OperacionPrograma)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.peek()).value;
		RESULT = e1;
              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("OPERACION_UC",16, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 239: // ATOMC ::= id 
            {
              OperacionPrograma RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.peek()).value;
		VariablePrograma var = sem.existeVar(new VariablePrograma(e1, ProgramaSemantica.AMBITO, null)); 
                if(var == null || !var.isConstant()){
                        reportarSem("Variable no existente con el id: <" + e1 + ">");
                } else{
                        SumOperator sum = sem.getVariables().devolverSum(e1);
                        OperacionPrograma op = new OperacionPrograma(var.getTipo(), sem.getVariables().devolverDireccion(sum.getId()));
                        op.getTripletes().add(sum);
                        op.setValor(var.getValor());
                        RESULT = op;}
              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("ATOMC",17, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 240: // ATOMC ::= entero 
            {
              OperacionPrograma RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.peek()).value;
		OperacionPrograma pro = new OperacionPrograma(VariablePrograma.INT, new TerminalOperator(e1)); pro.setValor(Float.parseFloat(e1));
                        RESULT = pro;
              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("ATOMC",17, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 241: // ATOMC ::= decimal 
            {
              OperacionPrograma RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.peek()).value;
		OperacionPrograma pro = new OperacionPrograma(VariablePrograma.INT, new TerminalOperator(e1)); pro.setValor(Float.parseFloat(e1));
                        RESULT = pro;
              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("ATOMC",17, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 242: // ATOMC ::= character 
            {
              OperacionPrograma RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.peek()).value;
		OperacionPrograma pro = new OperacionPrograma(VariablePrograma.INT, new TerminalOperator(e1)); pro.setValor((float)e1.charAt(1));
                        RESULT = pro;
              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("ATOMC",17, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 243: // ATOMC ::= para OPERACION_AC parc 
            {
              OperacionPrograma RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-1)).right;
		OperacionPrograma e1 = (OperacionPrograma)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-1)).value;
		RESULT = e1;
              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("ATOMC",17, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$SintaxisPrograma$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$SintaxisPrograma$do_action(
    int                        CUP$SintaxisPrograma$act_num,
    java_cup.runtime.lr_parser CUP$SintaxisPrograma$parser,
    java.util.Stack            CUP$SintaxisPrograma$stack,
    int                        CUP$SintaxisPrograma$top)
    throws java.lang.Exception
    {
              return CUP$SintaxisPrograma$do_action_part00000000(
                               CUP$SintaxisPrograma$act_num,
                               CUP$SintaxisPrograma$parser,
                               CUP$SintaxisPrograma$stack,
                               CUP$SintaxisPrograma$top);
    }
}

}
