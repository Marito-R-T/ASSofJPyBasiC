
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package com.mycompany.assofjpybasic.backend.analizador.principal;

import java_cup.runtime.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class SintaxisPrograma extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return SintaxisProgramaSym.class;
}

  /** Default constructor. */
  @Deprecated
  public SintaxisPrograma() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public SintaxisPrograma(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public SintaxisPrograma(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\164\000\002\002\004\000\002\002\006\000\002\003" +
    "\004\000\002\003\002\000\002\004\003\000\002\004\003" +
    "\000\002\004\005\000\002\004\006\000\002\005\003\000" +
    "\002\005\003\000\002\006\011\000\002\006\002\000\002" +
    "\007\003\000\002\007\003\000\002\007\003\000\002\010" +
    "\004\000\002\010\002\000\002\011\005\000\002\011\011" +
    "\000\002\012\006\000\002\012\002\000\002\013\006\000" +
    "\002\013\004\000\002\014\004\000\002\014\002\000\002" +
    "\015\005\000\002\015\005\000\002\015\003\000\002\016" +
    "\005\000\002\016\005\000\002\016\005\000\002\016\003" +
    "\000\002\017\004\000\002\017\004\000\002\017\003\000" +
    "\002\020\003\000\002\020\003\000\002\020\003\000\002" +
    "\020\003\000\002\020\007\000\002\020\005\000\002\021" +
    "\011\000\002\022\004\000\002\022\002\000\002\023\003" +
    "\000\002\023\003\000\002\024\003\000\002\024\003\000" +
    "\002\024\003\000\002\024\003\000\002\024\003\000\002" +
    "\025\004\000\002\025\003\000\002\025\004\000\002\025" +
    "\003\000\002\025\003\000\002\025\004\000\002\025\004" +
    "\000\002\025\003\000\002\026\005\000\002\026\011\000" +
    "\002\027\010\000\002\030\005\000\002\030\002\000\002" +
    "\031\010\000\002\032\006\000\002\032\002\000\002\033" +
    "\013\000\002\034\013\000\002\034\002\000\002\035\006" +
    "\000\002\035\002\000\002\036\012\000\002\037\004\000" +
    "\002\037\002\000\002\040\006\000\002\041\005\000\002" +
    "\041\002\000\002\042\011\000\002\043\012\000\002\044" +
    "\015\000\002\045\003\000\002\045\003\000\002\045\004" +
    "\000\002\046\003\000\002\046\003\000\002\047\004\000" +
    "\002\047\004\000\002\050\005\000\002\050\003\000\002" +
    "\051\005\000\002\051\003\000\002\052\004\000\002\052" +
    "\003\000\002\053\005\000\002\053\005\000\002\053\005" +
    "\000\002\053\005\000\002\053\005\000\002\053\005\000" +
    "\002\053\005\000\002\054\010\000\002\054\010\000\002" +
    "\054\012\000\002\055\003\000\002\055\003\000\002\055" +
    "\003\000\002\056\007\000\002\057\006\000\002\057\004" +
    "\000\002\060\005\000\002\060\002\000\002\061\003\000" +
    "\002\061\002\000\002\062\005\000\002\062\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0109\000\024\004\ufffe\006\ufffe\007\ufffe\010\ufffe\011" +
    "\ufffe\027\ufffe\064\ufffe\065\ufffe\066\ufffe\001\002\000\024" +
    "\004\ufff6\006\ufff6\007\ufff6\010\ufff6\011\ufff6\027\014\064" +
    "\011\065\010\066\013\001\002\000\004\002\006\001\002" +
    "\000\004\002\001\001\002\000\014\004\ufff1\006\025\007" +
    "\ufff1\010\ufff1\011\ufff1\001\002\000\024\004\ufffd\006\ufffd" +
    "\007\ufffd\010\ufffd\011\ufffd\027\ufffd\064\ufffd\065\ufffd\066" +
    "\ufffd\001\002\000\006\040\020\071\022\001\002\000\024" +
    "\004\uffff\006\uffff\007\uffff\010\uffff\011\uffff\027\uffff\064" +
    "\uffff\065\uffff\066\uffff\001\002\000\024\004\ufffc\006\ufffc" +
    "\007\ufffc\010\ufffc\011\ufffc\027\ufffc\064\ufffc\065\ufffc\066" +
    "\ufffc\001\002\000\004\031\015\001\002\000\004\070\016" +
    "\001\002\000\004\033\017\001\002\000\024\004\ufffa\006" +
    "\ufffa\007\ufffa\010\ufffa\011\ufffa\027\ufffa\064\ufffa\065\ufffa" +
    "\066\ufffa\001\002\000\004\075\ufff9\001\002\000\004\075" +
    "\023\001\002\000\004\075\ufff8\001\002\000\024\004\ufffb" +
    "\006\ufffb\007\ufffb\010\ufffb\011\ufffb\027\ufffb\064\ufffb\065" +
    "\ufffb\066\ufffb\001\002\000\012\004\133\007\030\010\027" +
    "\011\026\001\002\000\010\007\030\010\027\011\026\001" +
    "\002\000\004\071\ufff3\001\002\000\004\071\ufff4\001\002" +
    "\000\004\071\ufff5\001\002\000\004\071\032\001\002\000" +
    "\004\061\033\001\002\000\030\036\052\037\042\043\054" +
    "\060\051\071\034\072\046\073\041\074\044\077\053\100" +
    "\040\101\036\001\002\000\050\013\uffde\014\uffde\030\uffde" +
    "\031\uffde\032\uffde\033\uffde\034\uffde\035\uffde\036\uffde\037" +
    "\uffde\040\uffde\041\uffde\042\uffde\044\uffde\047\121\050\uffde" +
    "\051\uffde\052\uffde\053\uffde\001\002\000\014\036\056\044" +
    "\uff98\050\uff98\051\uff98\052\uff98\001\002\000\004\054\112" +
    "\001\002\000\046\013\uffe2\014\uffe2\030\uffe2\031\uffe2\032" +
    "\uffe2\033\uffe2\034\uffe2\035\uffe2\036\uffe2\037\uffe2\040\uffe2" +
    "\041\uffe2\042\uffe2\044\uffe2\050\uffe2\051\uffe2\052\uffe2\053" +
    "\uffe2\001\002\000\004\054\105\001\002\000\046\013\uffdc" +
    "\014\uffdc\030\uffdc\031\uffdc\032\uffdc\033\uffdc\034\uffdc\035" +
    "\uffdc\036\uffdc\037\uffdc\040\uffdc\041\uffdc\042\uffdc\044\uffdc" +
    "\050\uffdc\051\uffdc\052\uffdc\053\uffdc\001\002\000\020\036" +
    "\052\037\042\043\054\071\034\072\046\073\041\074\044" +
    "\001\002\000\046\013\uffdf\014\uffdf\030\uffdf\031\uffdf\032" +
    "\uffdf\033\uffdf\034\uffdf\035\uffdf\036\uffdf\037\uffdf\040\uffdf" +
    "\041\uffdf\042\uffdf\044\uffdf\050\uffdf\051\uffdf\052\uffdf\053" +
    "\uffdf\001\002\000\046\013\uffdb\014\uffdb\030\uffdb\031\uffdb" +
    "\032\uffdb\033\uffdb\034\uffdb\035\uffdb\036\uffdb\037\uffdb\040" +
    "\uffdb\041\uffdb\042\uffdb\044\uffdb\050\uffdb\051\uffdb\052\uffdb" +
    "\053\uffdb\001\002\000\046\013\uffe6\014\uffe6\030\uffe6\031" +
    "\uffe6\032\uffe6\033\uffe6\034\uffe6\035\uffe6\036\uffe6\037\102" +
    "\040\061\041\063\042\062\044\uffe6\050\uffe6\051\uffe6\052" +
    "\uffe6\053\uffe6\001\002\000\046\013\uffdd\014\uffdd\030\uffdd" +
    "\031\uffdd\032\uffdd\033\uffdd\034\uffdd\035\uffdd\036\uffdd\037" +
    "\uffdd\040\uffdd\041\uffdd\042\uffdd\044\uffdd\050\uffdd\051\uffdd" +
    "\052\uffdd\053\uffdd\001\002\000\012\044\uff99\050\uff99\051" +
    "\uff99\052\uff99\001\002\000\004\052\101\001\002\000\012" +
    "\044\uff97\050\uff97\051\uff97\052\uff97\001\002\000\020\036" +
    "\052\037\042\043\054\071\034\072\046\073\041\074\044" +
    "\001\002\000\004\054\067\001\002\000\020\036\052\037" +
    "\042\043\054\071\034\072\046\073\041\074\044\001\002" +
    "\000\006\036\056\044\057\001\002\000\020\036\052\037" +
    "\042\043\054\071\034\072\046\073\041\074\044\001\002" +
    "\000\046\013\uffd9\014\uffd9\030\uffd9\031\uffd9\032\uffd9\033" +
    "\uffd9\034\uffd9\035\uffd9\036\uffd9\037\uffd9\040\uffd9\041\uffd9" +
    "\042\uffd9\044\uffd9\050\uffd9\051\uffd9\052\uffd9\053\uffd9\001" +
    "\002\000\044\013\uffe8\014\uffe8\030\uffe8\031\uffe8\032\uffe8" +
    "\033\uffe8\034\uffe8\035\uffe8\036\uffe8\040\061\041\063\042" +
    "\062\044\uffe8\050\uffe8\051\uffe8\052\uffe8\053\uffe8\001\002" +
    "\000\020\036\052\037\042\043\054\071\034\072\046\073" +
    "\041\074\044\001\002\000\020\036\052\037\042\043\054" +
    "\071\034\072\046\073\041\074\044\001\002\000\020\036" +
    "\052\037\042\043\054\071\034\072\046\073\041\074\044" +
    "\001\002\000\046\013\uffe4\014\uffe4\030\uffe4\031\uffe4\032" +
    "\uffe4\033\uffe4\034\uffe4\035\uffe4\036\uffe4\037\uffe4\040\uffe4" +
    "\041\uffe4\042\uffe4\044\uffe4\050\uffe4\051\uffe4\052\uffe4\053" +
    "\uffe4\001\002\000\046\013\uffe3\014\uffe3\030\uffe3\031\uffe3" +
    "\032\uffe3\033\uffe3\034\uffe3\035\uffe3\036\uffe3\037\uffe3\040" +
    "\uffe3\041\uffe3\042\uffe3\044\uffe3\050\uffe3\051\uffe3\052\uffe3" +
    "\053\uffe3\001\002\000\046\013\uffe5\014\uffe5\030\uffe5\031" +
    "\uffe5\032\uffe5\033\uffe5\034\uffe5\035\uffe5\036\uffe5\037\uffe5" +
    "\040\uffe5\041\uffe5\042\uffe5\044\uffe5\050\uffe5\051\uffe5\052" +
    "\uffe5\053\uffe5\001\002\000\004\071\070\001\002\000\004" +
    "\043\071\001\002\000\024\036\052\037\042\043\054\044" +
    "\uff90\051\uff90\071\034\072\046\073\041\074\044\001\002" +
    "\000\010\036\056\044\uff8e\051\uff8e\001\002\000\006\044" +
    "\076\051\075\001\002\000\006\044\uff91\051\uff91\001\002" +
    "\000\020\036\052\037\042\043\054\071\034\072\046\073" +
    "\041\074\044\001\002\000\012\044\uff9c\050\uff9c\051\uff9c" +
    "\052\uff9c\001\002\000\010\036\056\044\uff8f\051\uff8f\001" +
    "\002\000\046\013\uffe0\014\uffe0\030\uffe0\031\uffe0\032\uffe0" +
    "\033\uffe0\034\uffe0\035\uffe0\036\uffe0\037\uffe0\040\uffe0\041" +
    "\uffe0\042\uffe0\044\uffe0\050\uffe0\051\uffe0\052\uffe0\053\uffe0" +
    "\001\002\000\014\004\ufff7\006\ufff7\007\ufff7\010\ufff7\011" +
    "\ufff7\001\002\000\020\036\052\037\042\043\054\071\034" +
    "\072\046\073\041\074\044\001\002\000\044\013\uffe7\014" +
    "\uffe7\030\uffe7\031\uffe7\032\uffe7\033\uffe7\034\uffe7\035\uffe7" +
    "\036\uffe7\040\061\041\063\042\062\044\uffe7\050\uffe7\051" +
    "\uffe7\052\uffe7\053\uffe7\001\002\000\046\013\uffe1\014\uffe1" +
    "\030\uffe1\031\uffe1\032\uffe1\033\uffe1\034\uffe1\035\uffe1\036" +
    "\uffe1\037\uffe1\040\uffe1\041\uffe1\042\uffe1\044\uffe1\050\uffe1" +
    "\051\uffe1\052\uffe1\053\uffe1\001\002\000\004\071\106\001" +
    "\002\000\004\043\107\001\002\000\024\036\052\037\042" +
    "\043\054\044\uff90\051\uff90\071\034\072\046\073\041\074" +
    "\044\001\002\000\006\044\111\051\075\001\002\000\012" +
    "\044\uff9b\050\uff9b\051\uff9b\052\uff9b\001\002\000\004\071" +
    "\113\001\002\000\004\054\114\001\002\000\004\071\115" +
    "\001\002\000\004\043\116\001\002\000\024\036\052\037" +
    "\042\043\054\044\uff90\051\uff90\071\034\072\046\073\041" +
    "\074\044\001\002\000\006\044\120\051\075\001\002\000" +
    "\012\044\uff9a\050\uff9a\051\uff9a\052\uff9a\001\002\000\020" +
    "\036\052\037\042\043\054\071\034\072\046\073\041\074" +
    "\044\001\002\000\006\036\056\050\123\001\002\000\050" +
    "\013\uffed\014\uffed\030\uffed\031\uffed\032\uffed\033\uffed\034" +
    "\uffed\035\uffed\036\uffed\037\uffed\040\uffed\041\uffed\042\uffed" +
    "\044\uffed\047\uffed\050\uffed\051\uffed\052\uffed\053\uffed\001" +
    "\002\000\050\013\uffda\014\uffda\030\uffda\031\uffda\032\uffda" +
    "\033\uffda\034\uffda\035\uffda\036\uffda\037\uffda\040\uffda\041" +
    "\uffda\042\uffda\044\uffda\047\125\050\uffda\051\uffda\052\uffda" +
    "\053\uffda\001\002\000\030\036\052\037\042\043\054\060" +
    "\051\071\034\072\046\073\041\074\044\077\053\100\040" +
    "\101\036\001\002\000\004\050\127\001\002\000\052\013" +
    "\uffee\014\uffee\030\uffee\031\uffee\032\uffee\033\uffee\034\uffee" +
    "\035\uffee\036\uffee\037\uffee\040\uffee\041\uffee\042\uffee\044" +
    "\uffee\047\uffee\050\uffee\051\uffee\052\uffee\053\uffee\061\uffee" +
    "\001\002\000\012\004\ufff2\007\ufff2\010\ufff2\011\ufff2\001" +
    "\002\000\004\002\000\001\002\000\004\071\377\001\002" +
    "\000\004\005\134\001\002\000\004\043\135\001\002\000" +
    "\004\044\136\001\002\000\004\045\137\001\002\000\044" +
    "\007\uffd6\010\uffd6\011\uffd6\016\uffd6\020\uffd6\021\uffd6\023" +
    "\uffd6\026\uffd6\046\uffd6\055\uffd6\056\uffd6\057\uffd6\060\uffd6" +
    "\071\uffd6\077\uffd6\100\uffd6\101\uffd6\001\002\000\044\007" +
    "\030\010\027\011\026\016\157\020\172\021\145\023\153" +
    "\026\161\046\166\055\171\056\156\057\165\060\147\071" +
    "\155\077\053\100\040\101\141\001\002\000\004\054\362" +
    "\001\002\000\050\007\uffc7\010\uffc7\011\uffc7\016\uffc7\020" +
    "\uffc7\021\uffc7\022\uffc7\023\uffc7\024\uffc7\026\uffc7\046\uffc7" +
    "\055\uffc7\056\uffc7\057\uffc7\060\uffc7\071\uffc7\077\uffc7\100" +
    "\uffc7\101\uffc7\001\002\000\004\052\361\001\002\000\050" +
    "\007\uffd3\010\uffd3\011\uffd3\016\uffd3\020\uffd3\021\uffd3\022" +
    "\uffd3\023\uffd3\024\uffd3\026\uffd3\046\uffd3\055\uffd3\056\uffd3" +
    "\057\uffd3\060\uffd3\071\uffd3\077\uffd3\100\uffd3\101\uffd3\001" +
    "\002\000\004\043\342\001\002\000\050\007\uffca\010\uffca" +
    "\011\uffca\016\uffca\020\uffca\021\uffca\022\uffca\023\uffca\024" +
    "\uffca\026\uffca\046\uffca\055\uffca\056\uffca\057\uffca\060\uffca" +
    "\071\uffca\077\uffca\100\uffca\101\uffca\001\002\000\004\052" +
    "\341\001\002\000\050\007\uffcf\010\uffcf\011\uffcf\016\uffcf" +
    "\020\uffcf\021\uffcf\022\uffcf\023\uffcf\024\uffcf\026\uffcf\046" +
    "\uffcf\055\uffcf\056\uffcf\057\uffcf\060\uffcf\071\uffcf\077\uffcf" +
    "\100\uffcf\101\uffcf\001\002\000\050\007\uffcb\010\uffcb\011" +
    "\uffcb\016\uffcb\020\uffcb\021\uffcb\022\uffcb\023\uffcb\024\uffcb" +
    "\026\uffcb\046\uffcb\055\uffcb\056\uffcb\057\uffcb\060\uffcb\071" +
    "\uffcb\077\uffcb\100\uffcb\101\uffcb\001\002\000\050\007\uffd0" +
    "\010\uffd0\011\uffd0\016\uffd0\020\uffd0\021\uffd0\022\uffd0\023" +
    "\uffd0\024\uffd0\026\uffd0\046\uffd0\055\uffd0\056\uffd0\057\uffd0" +
    "\060\uffd0\071\uffd0\077\uffd0\100\uffd0\101\uffd0\001\002\000" +
    "\004\043\333\001\002\000\050\007\uffd2\010\uffd2\011\uffd2" +
    "\016\uffd2\020\uffd2\021\uffd2\022\uffd2\023\uffd2\024\uffd2\026" +
    "\uffd2\046\uffd2\055\uffd2\056\uffd2\057\uffd2\060\uffd2\071\uffd2" +
    "\077\uffd2\100\uffd2\101\uffd2\001\002\000\006\047\202\061" +
    "\201\001\002\000\004\043\323\001\002\000\004\043\300" +
    "\001\002\000\004\052\277\001\002\000\004\045\270\001" +
    "\002\000\050\007\uffd4\010\uffd4\011\uffd4\016\uffd4\020\uffd4" +
    "\021\uffd4\022\uffd4\023\uffd4\024\uffd4\026\uffd4\046\uffd4\055" +
    "\uffd4\056\uffd4\057\uffd4\060\uffd4\071\uffd4\077\uffd4\100\uffd4" +
    "\101\uffd4\001\002\000\050\007\uffcd\010\uffcd\011\uffcd\016" +
    "\uffcd\020\uffcd\021\uffcd\022\uffcd\023\uffcd\024\uffcd\026\uffcd" +
    "\046\uffcd\055\uffcd\056\uffcd\057\uffcd\060\uffcd\071\uffcd\077" +
    "\uffcd\100\uffcd\101\uffcd\001\002\000\050\007\uffd7\010\uffd7" +
    "\011\uffd7\016\uffd7\020\uffd7\021\uffd7\022\uffd7\023\uffd7\024" +
    "\uffd7\026\uffd7\046\uffd7\055\uffd7\056\uffd7\057\uffd7\060\uffd7" +
    "\071\uffd7\077\uffd7\100\uffd7\101\uffd7\001\002\000\004\052" +
    "\267\001\002\000\004\002\uffd8\001\002\000\050\007\uffd1" +
    "\010\uffd1\011\uffd1\016\uffd1\020\uffd1\021\uffd1\022\uffd1\023" +
    "\uffd1\024\uffd1\026\uffd1\046\uffd1\055\uffd1\056\uffd1\057\uffd1" +
    "\060\uffd1\071\uffd1\077\uffd1\100\uffd1\101\uffd1\001\002\000" +
    "\050\007\uffd5\010\uffd5\011\uffd5\016\uffd5\020\uffd5\021\uffd5" +
    "\022\uffd5\023\uffd5\024\uffd5\026\uffd5\046\uffd5\055\uffd5\056" +
    "\uffd5\057\uffd5\060\uffd5\071\uffd5\077\uffd5\100\uffd5\101\uffd5" +
    "\001\002\000\004\043\260\001\002\000\004\043\173\001" +
    "\002\000\012\007\030\010\027\011\026\071\176\001\002" +
    "\000\004\052\uffb0\001\002\000\004\052\211\001\002\000" +
    "\010\047\202\052\uffaf\061\201\001\002\000\004\071\155" +
    "\001\002\000\004\052\uffae\001\002\000\030\036\052\037" +
    "\042\043\054\060\051\071\034\072\046\073\041\074\044" +
    "\077\053\100\040\101\036\001\002\000\030\036\052\037" +
    "\042\043\054\060\051\071\034\072\046\073\041\074\044" +
    "\077\053\100\040\101\036\001\002\000\004\050\204\001" +
    "\002\000\006\047\uffed\061\uffed\001\002\000\006\047\125" +
    "\061\206\001\002\000\030\036\052\037\042\043\054\060" +
    "\051\071\034\072\046\073\041\074\044\077\053\100\040" +
    "\101\036\001\002\000\006\044\uffc5\052\uffc5\001\002\000" +
    "\006\044\uffc6\052\uffc6\001\002\000\022\015\214\036\052" +
    "\037\042\043\220\071\034\072\046\073\041\074\044\001" +
    "\002\000\012\013\uffa4\014\uffa4\044\uffa4\052\uffa4\001\002" +
    "\000\012\013\226\014\uffa8\044\uffa8\052\uffa8\001\002\000" +
    "\022\015\214\036\052\037\042\043\220\071\034\072\046" +
    "\073\041\074\044\001\002\000\020\030\233\031\232\032" +
    "\235\033\234\034\230\035\231\036\056\001\002\000\012" +
    "\013\uffa6\014\uffa6\044\uffa6\052\uffa6\001\002\000\006\014" +
    "\224\052\244\001\002\000\022\015\214\036\052\037\042" +
    "\043\220\071\034\072\046\073\041\074\044\001\002\000" +
    "\022\030\233\031\232\032\235\033\234\034\230\035\231" +
    "\036\056\044\057\001\002\000\006\014\224\044\223\001" +
    "\002\000\012\013\uff9d\014\uff9d\044\uff9d\052\uff9d\001\002" +
    "\000\022\015\214\036\052\037\042\043\220\071\034\072" +
    "\046\073\041\074\044\001\002\000\012\013\226\014\uffa9" +
    "\044\uffa9\052\uffa9\001\002\000\022\015\214\036\052\037" +
    "\042\043\220\071\034\072\046\073\041\074\044\001\002" +
    "\000\012\013\uffa7\014\uffa7\044\uffa7\052\uffa7\001\002\000" +
    "\020\036\052\037\042\043\054\071\034\072\046\073\041" +
    "\074\044\001\002\000\020\036\052\037\042\043\054\071" +
    "\034\072\046\073\041\074\044\001\002\000\020\036\052" +
    "\037\042\043\054\071\034\072\046\073\041\074\044\001" +
    "\002\000\020\036\052\037\042\043\054\071\034\072\046" +
    "\073\041\074\044\001\002\000\020\036\052\037\042\043" +
    "\054\071\034\072\046\073\041\074\044\001\002\000\020" +
    "\036\052\037\042\043\054\071\034\072\046\073\041\074" +
    "\044\001\002\000\014\013\uffa0\014\uffa0\036\056\044\uffa0" +
    "\052\uffa0\001\002\000\014\013\uff9f\014\uff9f\036\056\044" +
    "\uff9f\052\uff9f\001\002\000\014\013\uffa2\014\uffa2\036\056" +
    "\044\uffa2\052\uffa2\001\002\000\014\013\uffa1\014\uffa1\036" +
    "\056\044\uffa1\052\uffa1\001\002\000\014\013\uffa3\014\uffa3" +
    "\036\056\044\uffa3\052\uffa3\001\002\000\014\013\uff9e\014" +
    "\uff9e\036\056\044\uff9e\052\uff9e\001\002\000\004\071\250" +
    "\001\002\000\004\044\253\001\002\000\004\044\uffad\001" +
    "\002\000\004\044\uffac\001\002\000\012\047\202\061\201" +
    "\062\251\063\252\001\002\000\004\044\uffab\001\002\000" +
    "\004\044\uffaa\001\002\000\004\045\254\001\002\000\044" +
    "\007\uffd6\010\uffd6\011\uffd6\016\uffd6\020\uffd6\021\uffd6\023" +
    "\uffd6\026\uffd6\046\uffd6\055\uffd6\056\uffd6\057\uffd6\060\uffd6" +
    "\071\uffd6\077\uffd6\100\uffd6\101\uffd6\001\002\000\044\007" +
    "\030\010\027\011\026\016\157\020\172\021\145\023\153" +
    "\026\161\046\256\055\171\056\156\057\165\060\147\071" +
    "\155\077\053\100\040\101\141\001\002\000\050\007\uffb1" +
    "\010\uffb1\011\uffb1\016\uffb1\020\uffb1\021\uffb1\022\uffb1\023" +
    "\uffb1\024\uffb1\026\uffb1\046\uffb1\055\uffb1\056\uffb1\057\uffb1" +
    "\060\uffb1\071\uffb1\077\uffb1\100\uffb1\101\uffb1\001\002\000" +
    "\012\013\uffa5\014\uffa5\044\uffa5\052\uffa5\001\002\000\004" +
    "\076\261\001\002\000\006\044\uffc2\051\uffc2\001\002\000" +
    "\006\044\264\051\263\001\002\000\020\036\052\037\042" +
    "\043\054\071\034\072\046\073\041\074\044\001\002\000" +
    "\004\052\265\001\002\000\050\007\uffc4\010\uffc4\011\uffc4" +
    "\016\uffc4\020\uffc4\021\uffc4\022\uffc4\023\uffc4\024\uffc4\026" +
    "\uffc4\046\uffc4\055\uffc4\056\uffc4\057\uffc4\060\uffc4\071\uffc4" +
    "\077\uffc4\100\uffc4\101\uffc4\001\002\000\010\036\056\044" +
    "\uffc3\051\uffc3\001\002\000\050\007\uffce\010\uffce\011\uffce" +
    "\016\uffce\020\uffce\021\uffce\022\uffce\023\uffce\024\uffce\026" +
    "\uffce\046\uffce\055\uffce\056\uffce\057\uffce\060\uffce\071\uffce" +
    "\077\uffce\100\uffce\101\uffce\001\002\000\044\007\uffd6\010" +
    "\uffd6\011\uffd6\016\uffd6\020\uffd6\021\uffd6\023\uffd6\026\uffd6" +
    "\046\uffd6\055\uffd6\056\uffd6\057\uffd6\060\uffd6\071\uffd6\077" +
    "\uffd6\100\uffd6\101\uffd6\001\002\000\044\007\030\010\027" +
    "\011\026\016\157\020\172\021\145\023\153\026\161\046" +
    "\272\055\171\056\156\057\165\060\147\071\155\077\053" +
    "\100\040\101\141\001\002\000\004\023\273\001\002\000" +
    "\004\043\274\001\002\000\022\015\214\036\052\037\042" +
    "\043\220\071\034\072\046\073\041\074\044\001\002\000" +
    "\006\014\224\044\276\001\002\000\050\007\uffb2\010\uffb2" +
    "\011\uffb2\016\uffb2\020\uffb2\021\uffb2\022\uffb2\023\uffb2\024" +
    "\uffb2\026\uffb2\046\uffb2\055\uffb2\056\uffb2\057\uffb2\060\uffb2" +
    "\071\uffb2\077\uffb2\100\uffb2\101\uffb2\001\002\000\050\007" +
    "\uffc9\010\uffc9\011\uffc9\016\uffc9\020\uffc9\021\uffc9\022\uffc9" +
    "\023\uffc9\024\uffc9\026\uffc9\046\uffc9\055\uffc9\056\uffc9\057" +
    "\uffc9\060\uffc9\071\uffc9\077\uffc9\100\uffc9\101\uffc9\001\002" +
    "\000\022\015\214\036\052\037\042\043\220\071\034\072" +
    "\046\073\041\074\044\001\002\000\006\014\224\044\302" +
    "\001\002\000\004\045\303\001\002\000\044\007\uffd6\010" +
    "\uffd6\011\uffd6\016\uffd6\020\uffd6\021\uffd6\023\uffd6\026\uffd6" +
    "\046\uffd6\055\uffd6\056\uffd6\057\uffd6\060\uffd6\071\uffd6\077" +
    "\uffd6\100\uffd6\101\uffd6\001\002\000\044\007\030\010\027" +
    "\011\026\016\157\020\172\021\145\023\153\026\161\046" +
    "\305\055\171\056\156\057\165\060\147\071\155\077\053" +
    "\100\040\101\141\001\002\000\052\007\uffbc\010\uffbc\011" +
    "\uffbc\016\uffbc\017\uffbc\020\uffbc\021\uffbc\022\uffbc\023\uffbc" +
    "\024\uffbc\026\uffbc\046\uffbc\055\uffbc\056\uffbc\057\uffbc\060" +
    "\uffbc\071\uffbc\077\uffbc\100\uffbc\101\uffbc\001\002\000\052" +
    "\007\uffba\010\uffba\011\uffba\016\uffba\017\310\020\uffba\021" +
    "\uffba\022\uffba\023\uffba\024\uffba\026\uffba\046\uffba\055\uffba" +
    "\056\uffba\057\uffba\060\uffba\071\uffba\077\uffba\100\uffba\101" +
    "\uffba\001\002\000\050\007\uffbe\010\uffbe\011\uffbe\016\uffbe" +
    "\020\uffbe\021\uffbe\022\uffbe\023\uffbe\024\uffbe\026\uffbe\046" +
    "\uffbe\055\uffbe\056\uffbe\057\uffbe\060\uffbe\071\uffbe\077\uffbe" +
    "\100\uffbe\101\uffbe\001\002\000\006\016\311\045\312\001" +
    "\002\000\004\043\315\001\002\000\044\007\uffd6\010\uffd6" +
    "\011\uffd6\016\uffd6\020\uffd6\021\uffd6\023\uffd6\026\uffd6\046" +
    "\uffd6\055\uffd6\056\uffd6\057\uffd6\060\uffd6\071\uffd6\077\uffd6" +
    "\100\uffd6\101\uffd6\001\002\000\044\007\030\010\027\011" +
    "\026\016\157\020\172\021\145\023\153\026\161\046\314" +
    "\055\171\056\156\057\165\060\147\071\155\077\053\100" +
    "\040\101\141\001\002\000\050\007\uffbb\010\uffbb\011\uffbb" +
    "\016\uffbb\020\uffbb\021\uffbb\022\uffbb\023\uffbb\024\uffbb\026" +
    "\uffbb\046\uffbb\055\uffbb\056\uffbb\057\uffbb\060\uffbb\071\uffbb" +
    "\077\uffbb\100\uffbb\101\uffbb\001\002\000\022\015\214\036" +
    "\052\037\042\043\220\071\034\072\046\073\041\074\044" +
    "\001\002\000\006\014\224\044\317\001\002\000\004\045" +
    "\320\001\002\000\044\007\uffd6\010\uffd6\011\uffd6\016\uffd6" +
    "\020\uffd6\021\uffd6\023\uffd6\026\uffd6\046\uffd6\055\uffd6\056" +
    "\uffd6\057\uffd6\060\uffd6\071\uffd6\077\uffd6\100\uffd6\101\uffd6" +
    "\001\002\000\044\007\030\010\027\011\026\016\157\020" +
    "\172\021\145\023\153\026\161\046\322\055\171\056\156" +
    "\057\165\060\147\071\155\077\053\100\040\101\141\001" +
    "\002\000\052\007\uffbd\010\uffbd\011\uffbd\016\uffbd\017\uffbd" +
    "\020\uffbd\021\uffbd\022\uffbd\023\uffbd\024\uffbd\026\uffbd\046" +
    "\uffbd\055\uffbd\056\uffbd\057\uffbd\060\uffbd\071\uffbd\077\uffbd" +
    "\100\uffbd\101\uffbd\001\002\000\004\076\324\001\002\000" +
    "\006\044\uffbf\051\uffbf\001\002\000\006\044\327\051\326" +
    "\001\002\000\004\012\331\001\002\000\004\052\330\001" +
    "\002\000\050\007\uffc1\010\uffc1\011\uffc1\016\uffc1\020\uffc1" +
    "\021\uffc1\022\uffc1\023\uffc1\024\uffc1\026\uffc1\046\uffc1\055" +
    "\uffc1\056\uffc1\057\uffc1\060\uffc1\071\uffc1\077\uffc1\100\uffc1" +
    "\101\uffc1\001\002\000\004\071\332\001\002\000\006\044" +
    "\uffc0\051\uffc0\001\002\000\022\015\214\036\052\037\042" +
    "\043\220\071\034\072\046\073\041\074\044\001\002\000" +
    "\006\014\224\044\335\001\002\000\004\045\336\001\002" +
    "\000\044\007\uffd6\010\uffd6\011\uffd6\016\uffd6\020\uffd6\021" +
    "\uffd6\023\uffd6\026\uffd6\046\uffd6\055\uffd6\056\uffd6\057\uffd6" +
    "\060\uffd6\071\uffd6\077\uffd6\100\uffd6\101\uffd6\001\002\000" +
    "\044\007\030\010\027\011\026\016\157\020\172\021\145" +
    "\023\153\026\161\046\340\055\171\056\156\057\165\060" +
    "\147\071\155\077\053\100\040\101\141\001\002\000\050" +
    "\007\uffb3\010\uffb3\011\uffb3\016\uffb3\020\uffb3\021\uffb3\022" +
    "\uffb3\023\uffb3\024\uffb3\026\uffb3\046\uffb3\055\uffb3\056\uffb3" +
    "\057\uffb3\060\uffb3\071\uffb3\077\uffb3\100\uffb3\101\uffb3\001" +
    "\002\000\050\007\uffc8\010\uffc8\011\uffc8\016\uffc8\020\uffc8" +
    "\021\uffc8\022\uffc8\023\uffc8\024\uffc8\026\uffc8\046\uffc8\055" +
    "\uffc8\056\uffc8\057\uffc8\060\uffc8\071\uffc8\077\uffc8\100\uffc8" +
    "\101\uffc8\001\002\000\030\036\052\037\042\043\054\060" +
    "\051\071\034\072\046\073\041\074\044\077\053\100\040" +
    "\101\036\001\002\000\004\044\344\001\002\000\004\045" +
    "\345\001\002\000\010\022\uffb7\024\uffb7\046\uffb7\001\002" +
    "\000\010\022\351\024\350\046\uffb4\001\002\000\004\046" +
    "\360\001\002\000\004\053\356\001\002\000\020\036\052" +
    "\037\042\043\054\071\034\072\046\073\041\074\044\001" +
    "\002\000\010\022\uffb8\024\uffb8\046\uffb8\001\002\000\006" +
    "\036\056\053\354\001\002\000\050\007\uffd6\010\uffd6\011" +
    "\uffd6\016\uffd6\020\uffd6\021\uffd6\022\uffd6\023\uffd6\024\uffd6" +
    "\026\uffd6\046\uffd6\055\uffd6\056\uffd6\057\uffd6\060\uffd6\071" +
    "\uffd6\077\uffd6\100\uffd6\101\uffd6\001\002\000\050\007\030" +
    "\010\027\011\026\016\157\020\172\021\145\022\uffb6\023" +
    "\153\024\uffb6\026\161\046\uffb6\055\171\056\156\057\165" +
    "\060\147\071\155\077\053\100\040\101\141\001\002\000" +
    "\044\007\uffd6\010\uffd6\011\uffd6\016\uffd6\020\uffd6\021\uffd6" +
    "\023\uffd6\026\uffd6\046\uffd6\055\uffd6\056\uffd6\057\uffd6\060" +
    "\uffd6\071\uffd6\077\uffd6\100\uffd6\101\uffd6\001\002\000\044" +
    "\007\030\010\027\011\026\016\157\020\172\021\145\023" +
    "\153\026\161\046\uffb5\055\171\056\156\057\165\060\147" +
    "\071\155\077\053\100\040\101\141\001\002\000\050\007" +
    "\uffb9\010\uffb9\011\uffb9\016\uffb9\020\uffb9\021\uffb9\022\uffb9" +
    "\023\uffb9\024\uffb9\026\uffb9\046\uffb9\055\uffb9\056\uffb9\057" +
    "\uffb9\060\uffb9\071\uffb9\077\uffb9\100\uffb9\101\uffb9\001\002" +
    "\000\050\007\uffcc\010\uffcc\011\uffcc\016\uffcc\020\uffcc\021" +
    "\uffcc\022\uffcc\023\uffcc\024\uffcc\026\uffcc\046\uffcc\055\uffcc" +
    "\056\uffcc\057\uffcc\060\uffcc\071\uffcc\077\uffcc\100\uffcc\101" +
    "\uffcc\001\002\000\004\071\363\001\002\000\006\054\114" +
    "\071\365\001\002\000\006\051\373\052\372\001\002\000" +
    "\010\043\366\051\uff92\052\uff92\001\002\000\024\036\052" +
    "\037\042\043\054\044\uff90\051\uff90\071\034\072\046\073" +
    "\041\074\044\001\002\000\006\051\uff94\052\uff94\001\002" +
    "\000\006\044\371\051\075\001\002\000\006\051\uff93\052" +
    "\uff93\001\002\000\050\007\uff96\010\uff96\011\uff96\016\uff96" +
    "\020\uff96\021\uff96\022\uff96\023\uff96\024\uff96\026\uff96\046" +
    "\uff96\055\uff96\056\uff96\057\uff96\060\uff96\071\uff96\077\uff96" +
    "\100\uff96\101\uff96\001\002\000\004\071\374\001\002\000" +
    "\010\043\366\051\uff92\052\uff92\001\002\000\006\051\uff95" +
    "\052\uff95\001\002\000\006\051\u0109\052\u0108\001\002\000" +
    "\012\047\u0101\051\uffe9\052\uffe9\061\u0100\001\002\000\030" +
    "\036\052\037\042\043\054\060\051\071\034\072\046\073" +
    "\041\074\044\077\053\100\040\101\036\001\002\000\030" +
    "\036\052\037\042\043\054\060\051\071\034\072\046\073" +
    "\041\074\044\077\053\100\040\101\036\001\002\000\006" +
    "\051\uffeb\052\uffeb\001\002\000\004\050\u0104\001\002\000" +
    "\006\047\uffed\052\uffed\001\002\000\006\047\125\052\u0106" +
    "\001\002\000\052\004\uffef\007\uffef\010\uffef\011\uffef\016" +
    "\uffef\020\uffef\021\uffef\022\uffef\023\uffef\024\uffef\026\uffef" +
    "\046\uffef\055\uffef\056\uffef\057\uffef\060\uffef\071\uffef\077" +
    "\uffef\100\uffef\101\uffef\001\002\000\006\051\uffea\052\uffea" +
    "\001\002\000\052\004\ufff0\007\ufff0\010\ufff0\011\ufff0\016" +
    "\ufff0\020\ufff0\021\ufff0\022\ufff0\023\ufff0\024\ufff0\026\ufff0" +
    "\046\ufff0\055\ufff0\056\ufff0\057\ufff0\060\ufff0\071\ufff0\077" +
    "\ufff0\100\ufff0\101\ufff0\001\002\000\004\071\u010a\001\002" +
    "\000\010\051\uffe9\052\uffe9\061\u0100\001\002\000\006\051" +
    "\uffec\052\uffec\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0109\000\006\002\004\003\003\001\001\000\006\004" +
    "\011\006\006\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\010\023\001\001\000\002\001\001\000\004\005" +
    "\020\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\007\131\011\127\021\130\001" +
    "\001\000\004\007\030\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\016\015\034\016\044\017\036\020\042\054\046" +
    "\055\047\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\017\103\020\042\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\017\077\020\042\001\001\000\002\001\001\000\012" +
    "\015\054\016\044\017\036\020\042\001\001\000\002\001" +
    "\001\000\010\016\057\017\036\020\042\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\017\065\020\042\001" +
    "\001\000\006\017\064\020\042\001\001\000\006\017\063" +
    "\020\042\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\016" +
    "\015\071\016\044\017\036\020\042\061\072\062\073\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\015\076\016\044\017\036\020\042\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\016\102\017\036\020\042\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\016\015\071\016\044\017\036\020\042\061" +
    "\107\062\073\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\016\015\071\016\044\017\036\020\042" +
    "\061\116\062\073\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\015\121\016\044\017\036\020\042\001\001" +
    "\000\002\001\001\000\004\012\123\001\001\000\002\001" +
    "\001\000\016\015\034\016\044\017\036\020\042\054\046" +
    "\055\125\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\013\375\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\022\137\001\001\000\040\007\131" +
    "\011\162\023\163\024\167\025\161\026\142\027\150\031" +
    "\145\033\151\036\147\042\143\043\153\044\166\054\157" +
    "\056\141\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\007\176\026\173\045\174\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\026\177\001\001\000\002\001\001\000\016\015" +
    "\034\016\044\017\036\020\042\054\046\055\207\001\001" +
    "\000\016\015\034\016\044\017\036\020\042\054\046\055" +
    "\202\001\001\000\002\001\001\000\004\012\204\001\001" +
    "\000\002\001\001\000\016\015\034\016\044\017\036\020" +
    "\042\054\046\055\206\001\001\000\002\001\001\000\002" +
    "\001\001\000\022\015\214\016\044\017\036\020\042\050" +
    "\216\051\212\052\215\053\211\001\001\000\002\001\001" +
    "\000\002\001\001\000\016\015\214\016\044\017\036\020" +
    "\042\052\256\053\211\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\022\015\220\016\044\017" +
    "\036\020\042\050\221\051\212\052\215\053\211\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\020\015\214\016\044\017\036\020\042\051\224\052\215" +
    "\053\211\001\001\000\002\001\001\000\016\015\214\016" +
    "\044\017\036\020\042\052\226\053\211\001\001\000\002" +
    "\001\001\000\012\015\242\016\044\017\036\020\042\001" +
    "\001\000\012\015\241\016\044\017\036\020\042\001\001" +
    "\000\012\015\240\016\044\017\036\020\042\001\001\000" +
    "\012\015\237\016\044\017\036\020\042\001\001\000\012" +
    "\015\236\016\044\017\036\020\042\001\001\000\012\015" +
    "\235\016\044\017\036\020\042\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\026\245\046\244" +
    "\047\246\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\022\254\001\001\000" +
    "\040\007\131\011\162\023\163\024\167\025\161\026\142" +
    "\027\150\031\145\033\151\036\147\042\143\043\153\044" +
    "\166\054\157\056\141\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\030\261\001\001\000" +
    "\002\001\001\000\012\015\265\016\044\017\036\020\042" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\022\270\001\001\000\040" +
    "\007\131\011\162\023\163\024\167\025\161\026\142\027" +
    "\150\031\145\033\151\036\147\042\143\043\153\044\166" +
    "\054\157\056\141\001\001\000\002\001\001\000\002\001" +
    "\001\000\022\015\214\016\044\017\036\020\042\050\274" +
    "\051\212\052\215\053\211\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\022\015\214\016\044" +
    "\017\036\020\042\050\300\051\212\052\215\053\211\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\022\303" +
    "\001\001\000\040\007\131\011\162\023\163\024\167\025" +
    "\161\026\142\027\150\031\145\033\151\036\147\042\143" +
    "\043\153\044\166\054\157\056\141\001\001\000\004\034" +
    "\305\001\001\000\004\035\306\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\022\312\001" +
    "\001\000\040\007\131\011\162\023\163\024\167\025\161" +
    "\026\142\027\150\031\145\033\151\036\147\042\143\043" +
    "\153\044\166\054\157\056\141\001\001\000\002\001\001" +
    "\000\022\015\214\016\044\017\036\020\042\050\315\051" +
    "\212\052\215\053\211\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\022\320\001\001\000\040\007\131\011" +
    "\162\023\163\024\167\025\161\026\142\027\150\031\145" +
    "\033\151\036\147\042\143\043\153\044\166\054\157\056" +
    "\141\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\032\324\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\022\015\214\016\044\017\036\020\042\050" +
    "\333\051\212\052\215\053\211\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\022\336\001\001\000\040\007" +
    "\131\011\162\023\163\024\167\025\161\026\142\027\150" +
    "\031\145\033\151\036\147\042\143\043\153\044\166\054" +
    "\157\056\141\001\001\000\002\001\001\000\002\001\001" +
    "\000\016\015\034\016\044\017\036\020\042\054\046\055" +
    "\342\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\037\345\001\001\000\006\040\351\041\346\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\015\352\016\044" +
    "\017\036\020\042\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\022\354\001\001\000\040\007\131\011\162" +
    "\023\163\024\167\025\161\026\142\027\150\031\145\033" +
    "\151\036\147\042\143\043\153\044\166\054\157\056\141" +
    "\001\001\000\004\022\356\001\001\000\040\007\131\011" +
    "\162\023\163\024\167\025\161\026\142\027\150\031\145" +
    "\033\151\036\147\042\143\043\153\044\166\054\157\056" +
    "\141\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\057\363\001\001\000\002\001\001\000" +
    "\004\060\366\001\001\000\016\015\071\016\044\017\036" +
    "\020\042\061\367\062\073\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\060\374\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\014\u0101\001\001\000\016\015\034" +
    "\016\044\017\036\020\042\054\046\055\u0106\001\001\000" +
    "\016\015\034\016\044\017\036\020\042\054\046\055\u0102" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\012" +
    "\u0104\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\014" +
    "\u010a\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$SintaxisPrograma$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$SintaxisPrograma$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$SintaxisPrograma$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    private Symbol s;
    
    public void syntax_error(Symbol sym){
        System.out.println("\n" + sym.value + sym.sym);
        System.out.println("Error Sintactico en la letra: " + sym.value + "   <linea>: "  + (sym.right + 1) + "    <columna>: " + (sym.left + 1) + "\n");
    }

    public void unrecovered_syntax_error(Symbol sym) throws java.lang.Exception{
        System.out.println("\n" + sym.value + sym.sym);
        System.out.println("Error Sintactico en la letra: " + sym.value + "   <linea>: "  + (sym.right + 1) + "    <columna>: " + (sym.left + 1) + "\n");
    }

    public Symbol getS(){
        System.out.println(this.s.value);
        System.out.print(this.s.value);
        return this.s;
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$SintaxisPrograma$actions {
  private final SintaxisPrograma parser;

  /** Constructor */
  CUP$SintaxisPrograma$actions(SintaxisPrograma parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$SintaxisPrograma$do_action_part00000000(
    int                        CUP$SintaxisPrograma$act_num,
    java_cup.runtime.lr_parser CUP$SintaxisPrograma$parser,
    java.util.Stack            CUP$SintaxisPrograma$stack,
    int                        CUP$SintaxisPrograma$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$SintaxisPrograma$result;

      /* select the action based on the action number */
      switch (CUP$SintaxisPrograma$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= PROGRAMA EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-1)).value;
		RESULT = start_val;
              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$SintaxisPrograma$parser.done_parsing();
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // PROGRAMA ::= INCLUDE_LENG CONST VARGLOB MAIN 
            {
              Object RESULT =null;

              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("PROGRAMA",0, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INCLUDE_LENG ::= INCLUDE_LENG IN_LENG 
            {
              Object RESULT =null;

              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("INCLUDE_LENG",1, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // INCLUDE_LENG ::= 
            {
              Object RESULT =null;

              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("INCLUDE_LENG",1, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // IN_LENG ::= py 
            {
              Object RESULT =null;

              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("IN_LENG",2, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // IN_LENG ::= vb 
            {
              Object RESULT =null;

              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("IN_LENG",2, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // IN_LENG ::= java IN_CLASS comilla 
            {
              Object RESULT =null;

              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("IN_LENG",2, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // IN_LENG ::= includee menor idlib mayor 
            {
              Object RESULT =null;

              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("IN_LENG",2, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // IN_CLASS ::= por 
            {
              Object RESULT =null;

              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("IN_CLASS",3, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // IN_CLASS ::= id 
            {
              Object RESULT =null;

              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("IN_CLASS",3, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // CONST ::= CONST constt TYPE id igual EXPR puntocoma 
            {
              Object RESULT =null;

              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("CONST",4, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-6)), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // CONST ::= 
            {
              Object RESULT =null;

              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("CONST",4, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // TYPE ::= intt 
            {
              Object RESULT =null;

              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("TYPE",5, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // TYPE ::= floatt 
            {
              Object RESULT =null;

              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("TYPE",5, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // TYPE ::= charr 
            {
              Object RESULT =null;

              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("TYPE",5, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // VARGLOB ::= VARGLOB ASIG_VAR 
            {
              Object RESULT =null;

              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("VARGLOB",6, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // VARGLOB ::= 
            {
              Object RESULT =null;

              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("VARGLOB",6, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // ASIG_VAR ::= TYPE LIST_ASIG puntocoma 
            {
              Object RESULT =null;

              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("ASIG_VAR",7, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // ASIG_VAR ::= TYPE id cora EXPR corc CORCHETES puntocoma 
            {
              Object RESULT =null;

              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("ASIG_VAR",7, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-6)), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // CORCHETES ::= CORCHETES cora EXPR corc 
            {
              Object RESULT =null;

              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("CORCHETES",8, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // CORCHETES ::= 
            {
              Object RESULT =null;

              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("CORCHETES",8, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // LIST_ASIG ::= LIST_ASIG coma id ASIG 
            {
              Object RESULT =null;

              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("LIST_ASIG",9, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // LIST_ASIG ::= id ASIG 
            {
              Object RESULT =null;

              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("LIST_ASIG",9, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // ASIG ::= igual EXPR 
            {
              Object RESULT =null;

              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("ASIG",10, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // ASIG ::= 
            {
              Object RESULT =null;

              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("ASIG",10, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // OPERACION_A ::= OPERACION_A mas OPERACION_M 
            {
              Object RESULT =null;

              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("OPERACION_A",11, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // OPERACION_A ::= OPERACION_M menos OPERACION_M 
            {
              Object RESULT =null;

              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("OPERACION_A",11, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // OPERACION_A ::= OPERACION_M 
            {
              Object RESULT =null;

              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("OPERACION_A",11, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // OPERACION_M ::= OPERACION_M por OPERACION_U 
            {
              Object RESULT =null;

              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("OPERACION_M",12, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // OPERACION_M ::= OPERACION_M div OPERACION_U 
            {
              Object RESULT =null;

              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("OPERACION_M",12, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // OPERACION_M ::= OPERACION_M mod OPERACION_U 
            {
              Object RESULT =null;

              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("OPERACION_M",12, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // OPERACION_M ::= OPERACION_U 
            {
              Object RESULT =null;

              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("OPERACION_M",12, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // OPERACION_U ::= menos OPERACION_U 
            {
              Object RESULT =null;

              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("OPERACION_U",13, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // OPERACION_U ::= mas OPERACION_U 
            {
              Object RESULT =null;

              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("OPERACION_U",13, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // OPERACION_U ::= ATOM 
            {
              Object RESULT =null;

              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("OPERACION_U",13, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // ATOM ::= id 
            {
              Object RESULT =null;

              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("ATOM",14, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // ATOM ::= entero 
            {
              Object RESULT =null;

              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("ATOM",14, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // ATOM ::= decimal 
            {
              Object RESULT =null;

              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("ATOM",14, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // ATOM ::= character 
            {
              Object RESULT =null;

              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("ATOM",14, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // ATOM ::= id cora OPERACION_A corc CORCHETES 
            {
              Object RESULT =null;

              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("ATOM",14, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-4)), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // ATOM ::= para OPERACION_A parc 
            {
              Object RESULT =null;

              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("ATOM",14, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // MAIN ::= voidd mainn para parc llavea STATEMENTS llavec 
            {
              Object RESULT =null;

              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("MAIN",15, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-6)), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // STATEMENTS ::= STATEMENTS STATEMENT 
            {
              Object RESULT =null;

              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("STATEMENTS",16, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // STATEMENTS ::= 
            {
              Object RESULT =null;

              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("STATEMENTS",16, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // STATEMENT ::= COMPOUND 
            {
              Object RESULT =null;

              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("STATEMENT",17, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // STATEMENT ::= STATEMENTLINE 
            {
              Object RESULT =null;

              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("STATEMENT",17, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // COMPOUND ::= WHILE 
            {
              Object RESULT =null;

              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("COMPOUND",18, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // COMPOUND ::= DO_WHILE 
            {
              Object RESULT =null;

              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("COMPOUND",18, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // COMPOUND ::= FOR 
            {
              Object RESULT =null;

              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("COMPOUND",18, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // COMPOUND ::= IF_ELSE 
            {
              Object RESULT =null;

              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("COMPOUND",18, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // COMPOUND ::= SWITCH 
            {
              Object RESULT =null;

              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("COMPOUND",18, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // STATEMENTLINE ::= clrs puntocoma 
            {
              Object RESULT =null;

              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("STATEMENTLINE",19, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // STATEMENTLINE ::= ASIG_VAR 
            {
              Object RESULT =null;

              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("STATEMENTLINE",19, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // STATEMENTLINE ::= DEF_VAR puntocoma 
            {
              Object RESULT =null;

              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("STATEMENTLINE",19, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // STATEMENTLINE ::= PRINTF 
            {
              Object RESULT =null;

              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("STATEMENTLINE",19, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // STATEMENTLINE ::= SCANF 
            {
              Object RESULT =null;

              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("STATEMENTLINE",19, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // STATEMENTLINE ::= LLAMADA_METODO puntocoma 
            {
              Object RESULT =null;

              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("STATEMENTLINE",19, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // STATEMENTLINE ::= getch puntocoma 
            {
              Object RESULT =null;

              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("STATEMENTLINE",19, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // STATEMENTLINE ::= CLASS 
            {
              Object RESULT =null;

              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("STATEMENTLINE",19, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // DEF_VAR ::= id igual EXPR 
            {
              Object RESULT =null;

              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("DEF_VAR",20, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // DEF_VAR ::= id cora EXPR corc CORCHETES igual EXPR 
            {
              Object RESULT =null;

              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("DEF_VAR",20, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-6)), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // PRINTF ::= printf para string VARS parc puntocoma 
            {
              Object RESULT =null;

              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("PRINTF",21, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-5)), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // VARS ::= VARS coma OPERACION_A 
            {
              Object RESULT =null;

              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("VARS",22, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // VARS ::= 
            {
              Object RESULT =null;

              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("VARS",22, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // SCANF ::= scanf para string VARSS parc puntocoma 
            {
              Object RESULT =null;

              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("SCANF",23, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-5)), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // VARSS ::= VARSS coma asig id 
            {
              Object RESULT =null;

              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("VARSS",24, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // VARSS ::= 
            {
              Object RESULT =null;

              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("VARSS",24, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // IF_ELSE ::= iff para CONDICION parc llavea STATEMENTS llavec ELSE_IF ELSE 
            {
              Object RESULT =null;

              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("IF_ELSE",25, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-8)), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // ELSE_IF ::= ELSE_IF elsee iff para CONDICION parc llavea STATEMENTS llavec 
            {
              Object RESULT =null;

              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("ELSE_IF",26, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-8)), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // ELSE_IF ::= 
            {
              Object RESULT =null;

              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("ELSE_IF",26, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // ELSE ::= elsee llavea STATEMENTS llavec 
            {
              Object RESULT =null;

              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("ELSE",27, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // ELSE ::= 
            {
              Object RESULT =null;

              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("ELSE",27, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // SWITCH ::= switchh para EXPR parc llavea CASES DEFAULT llavec 
            {
              Object RESULT =null;

              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("SWITCH",28, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-7)), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // CASES ::= CASES CASE 
            {
              Object RESULT =null;

              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("CASES",29, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // CASES ::= 
            {
              Object RESULT =null;

              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("CASES",29, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // CASE ::= casee OPERACION_A dosp STATEMENTS 
            {
              Object RESULT =null;

              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("CASE",30, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // DEFAULT ::= defaultt dosp STATEMENTS 
            {
              Object RESULT =null;

              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("DEFAULT",31, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // DEFAULT ::= 
            {
              Object RESULT =null;

              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("DEFAULT",31, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // WHILE ::= whilee para CONDICION parc llavea STATEMENTS llavec 
            {
              Object RESULT =null;

              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("WHILE",32, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-6)), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // DO_WHILE ::= doo llavea STATEMENTS llavec whilee para CONDICION parc 
            {
              Object RESULT =null;

              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("DO_WHILE",33, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-7)), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // FOR ::= forr para INICIO puntocoma CONDICION puntocoma STEP parc llavea STATEMENTS llavec 
            {
              Object RESULT =null;

              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("FOR",34, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-10)), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // INICIO ::= DEF_VAR 
            {
              Object RESULT =null;

              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("INICIO",35, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // INICIO ::= id 
            {
              Object RESULT =null;

              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("INICIO",35, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // INICIO ::= TYPE DEF_VAR 
            {
              Object RESULT =null;

              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("INICIO",35, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // STEP ::= DEF_VAR 
            {
              Object RESULT =null;

              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("STEP",36, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // STEP ::= OP_VAR 
            {
              Object RESULT =null;

              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("STEP",36, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // OP_VAR ::= id masmas 
            {
              Object RESULT =null;

              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("OP_VAR",37, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // OP_VAR ::= id menosmenos 
            {
              Object RESULT =null;

              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("OP_VAR",37, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // CONDICION ::= CONDICION orr AND 
            {
              Object RESULT =null;

              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("CONDICION",38, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // CONDICION ::= AND 
            {
              Object RESULT =null;

              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("CONDICION",38, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // AND ::= AND andd NOT 
            {
              Object RESULT =null;

              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("AND",39, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // AND ::= NOT 
            {
              Object RESULT =null;

              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("AND",39, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // NOT ::= nott NOT 
            {
              Object RESULT =null;

              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("NOT",40, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // NOT ::= COMPARACION 
            {
              Object RESULT =null;

              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("NOT",40, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // COMPARACION ::= OPERACION_A igig OPERACION_A 
            {
              Object RESULT =null;

              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("COMPARACION",41, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // COMPARACION ::= OPERACION_A noigual OPERACION_A 
            {
              Object RESULT =null;

              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("COMPARACION",41, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // COMPARACION ::= OPERACION_A menor OPERACION_A 
            {
              Object RESULT =null;

              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("COMPARACION",41, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // COMPARACION ::= OPERACION_A menorig OPERACION_A 
            {
              Object RESULT =null;

              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("COMPARACION",41, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // COMPARACION ::= OPERACION_A mayor OPERACION_A 
            {
              Object RESULT =null;

              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("COMPARACION",41, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // COMPARACION ::= OPERACION_A mayorig OPERACION_A 
            {
              Object RESULT =null;

              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("COMPARACION",41, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // COMPARACION ::= para CONDICION parc 
            {
              Object RESULT =null;

              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("COMPARACION",41, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // LLAMADA_METODO ::= pyy punto id para LIST_PARAM parc 
            {
              Object RESULT =null;

              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("LLAMADA_METODO",42, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-5)), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // LLAMADA_METODO ::= vbb punto id para LIST_PARAM parc 
            {
              Object RESULT =null;

              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("LLAMADA_METODO",42, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-5)), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // LLAMADA_METODO ::= javaa punto id punto id para LIST_PARAM parc 
            {
              Object RESULT =null;

              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("LLAMADA_METODO",42, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-7)), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // EXPR ::= LLAMADA_METODO 
            {
              Object RESULT =null;

              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("EXPR",43, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // EXPR ::= OPERACION_A 
            {
              Object RESULT =null;

              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("EXPR",43, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // EXPR ::= getch 
            {
              Object RESULT =null;

              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("EXPR",43, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // CLASS ::= javaa punto id LIST_CLASS puntocoma 
            {
              Object RESULT =null;

              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("CLASS",44, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-4)), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // LIST_CLASS ::= LIST_CLASS coma id PARAM 
            {
              Object RESULT =null;

              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("LIST_CLASS",45, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // LIST_CLASS ::= id PARAM 
            {
              Object RESULT =null;

              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("LIST_CLASS",45, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // PARAM ::= para LIST_PARAM parc 
            {
              Object RESULT =null;

              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("PARAM",46, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // PARAM ::= 
            {
              Object RESULT =null;

              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("PARAM",46, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // LIST_PARAM ::= LIST 
            {
              Object RESULT =null;

              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("LIST_PARAM",47, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // LIST_PARAM ::= 
            {
              Object RESULT =null;

              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("LIST_PARAM",47, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // LIST ::= LIST_PARAM coma OPERACION_A 
            {
              Object RESULT =null;

              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("LIST",48, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // LIST ::= OPERACION_A 
            {
              Object RESULT =null;

              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("LIST",48, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$SintaxisPrograma$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$SintaxisPrograma$do_action(
    int                        CUP$SintaxisPrograma$act_num,
    java_cup.runtime.lr_parser CUP$SintaxisPrograma$parser,
    java.util.Stack            CUP$SintaxisPrograma$stack,
    int                        CUP$SintaxisPrograma$top)
    throws java.lang.Exception
    {
              return CUP$SintaxisPrograma$do_action_part00000000(
                               CUP$SintaxisPrograma$act_num,
                               CUP$SintaxisPrograma$parser,
                               CUP$SintaxisPrograma$stack,
                               CUP$SintaxisPrograma$top);
    }
}

}
