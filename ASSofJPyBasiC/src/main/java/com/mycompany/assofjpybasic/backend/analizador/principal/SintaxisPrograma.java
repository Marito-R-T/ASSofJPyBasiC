
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package com.mycompany.assofjpybasic.backend.analizador.principal;

import java_cup.runtime.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class SintaxisPrograma extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return SintaxisProgramaSym.class;
}

  /** Default constructor. */
  @Deprecated
  public SintaxisPrograma() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public SintaxisPrograma(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public SintaxisPrograma(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\173\000\002\002\004\000\002\002\006\000\002\003" +
    "\004\000\002\003\002\000\002\004\007\000\002\004\007" +
    "\000\002\004\010\000\002\004\007\000\002\005\004\000" +
    "\002\005\004\000\002\006\011\000\002\006\002\000\002" +
    "\007\003\000\002\007\003\000\002\007\003\000\002\010" +
    "\004\000\002\010\002\000\002\011\005\000\002\011\011" +
    "\000\002\012\006\000\002\012\002\000\002\013\006\000" +
    "\002\013\004\000\002\014\004\000\002\014\002\000\002" +
    "\015\005\000\002\015\005\000\002\015\003\000\002\016" +
    "\005\000\002\016\005\000\002\016\005\000\002\016\003" +
    "\000\002\017\004\000\002\017\004\000\002\017\003\000" +
    "\002\020\003\000\002\020\003\000\002\020\003\000\002" +
    "\020\003\000\002\020\007\000\002\020\005\000\002\021" +
    "\011\000\002\022\004\000\002\022\002\000\002\023\003" +
    "\000\002\023\003\000\002\024\003\000\002\024\003\000" +
    "\002\024\003\000\002\024\003\000\002\024\003\000\002" +
    "\025\004\000\002\025\003\000\002\025\003\000\002\025" +
    "\003\000\002\025\003\000\002\025\004\000\002\025\003" +
    "\000\002\025\003\000\002\026\006\000\002\026\012\000" +
    "\002\027\010\000\002\030\005\000\002\031\004\000\002" +
    "\031\004\000\002\031\003\000\002\031\003\000\002\032" +
    "\003\000\002\032\003\000\002\032\003\000\002\033\005" +
    "\000\002\033\002\000\002\034\010\000\002\035\006\000" +
    "\002\035\002\000\002\036\013\000\002\037\013\000\002" +
    "\037\002\000\002\040\006\000\002\040\002\000\002\041" +
    "\012\000\002\042\004\000\002\042\002\000\002\043\006" +
    "\000\002\044\005\000\002\044\002\000\002\045\011\000" +
    "\002\046\012\000\002\047\015\000\002\050\003\000\002" +
    "\050\004\000\002\051\003\000\002\051\003\000\002\052" +
    "\004\000\002\052\004\000\002\053\005\000\002\053\003" +
    "\000\002\054\005\000\002\054\003\000\002\055\004\000" +
    "\002\055\003\000\002\056\005\000\002\056\005\000\002" +
    "\056\005\000\002\056\005\000\002\056\005\000\002\056" +
    "\005\000\002\056\005\000\002\057\010\000\002\057\010" +
    "\000\002\057\012\000\002\060\003\000\002\060\003\000" +
    "\002\060\003\000\002\061\007\000\002\062\006\000\002" +
    "\062\004\000\002\063\005\000\002\063\002\000\002\064" +
    "\003\000\002\064\002\000\002\065\005\000\002\065\003" +
    "" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u011b\000\016\004\ufffe\006\ufffe\007\ufffe\010\ufffe\011" +
    "\ufffe\032\ufffe\001\002\000\016\004\ufff6\006\ufff6\007\ufff6" +
    "\010\ufff6\011\ufff6\032\011\001\002\000\004\002\006\001" +
    "\002\000\004\002\001\001\002\000\014\004\ufff1\006\035" +
    "\007\ufff1\010\ufff1\011\ufff1\001\002\000\016\004\uffff\006" +
    "\uffff\007\uffff\010\uffff\011\uffff\032\uffff\001\002\000\006" +
    "\034\012\101\013\001\002\000\004\073\031\001\002\000" +
    "\010\067\015\070\014\071\016\001\002\000\004\101\027" +
    "\001\002\000\004\057\021\001\002\000\004\101\017\001" +
    "\002\000\004\055\020\001\002\000\016\004\ufffc\006\ufffc" +
    "\007\ufffc\010\ufffc\011\ufffc\032\ufffc\001\002\000\006\043" +
    "\025\074\026\001\002\000\004\101\023\001\002\000\004" +
    "\055\024\001\002\000\016\004\ufffb\006\ufffb\007\ufffb\010" +
    "\ufffb\011\ufffb\032\ufffb\001\002\000\004\101\ufff9\001\002" +
    "\000\004\101\ufff8\001\002\000\004\055\030\001\002\000" +
    "\016\004\ufffd\006\ufffd\007\ufffd\010\ufffd\011\ufffd\032\ufffd" +
    "\001\002\000\004\036\032\001\002\000\004\055\033\001" +
    "\002\000\016\004\ufffa\006\ufffa\007\ufffa\010\ufffa\011\ufffa" +
    "\032\ufffa\001\002\000\012\004\143\007\040\010\037\011" +
    "\036\001\002\000\010\007\040\010\037\011\036\001\002" +
    "\000\004\074\ufff3\001\002\000\004\074\ufff4\001\002\000" +
    "\004\074\ufff5\001\002\000\004\074\042\001\002\000\004" +
    "\064\043\001\002\000\030\041\063\042\051\046\064\063" +
    "\062\067\046\070\061\071\057\074\044\075\055\076\050" +
    "\077\053\001\002\000\050\016\uffde\017\uffde\033\uffde\034" +
    "\uffde\035\uffde\036\uffde\037\uffde\040\uffde\041\uffde\042\uffde" +
    "\043\uffde\044\uffde\045\uffde\047\uffde\052\131\053\uffde\054" +
    "\uffde\055\uffde\056\uffde\001\002\000\014\041\066\047\uff91" +
    "\053\uff91\054\uff91\055\uff91\001\002\000\004\057\122\001" +
    "\002\000\046\016\uffe2\017\uffe2\033\uffe2\034\uffe2\035\uffe2" +
    "\036\uffe2\037\uffe2\040\uffe2\041\uffe2\042\uffe2\043\uffe2\044" +
    "\uffe2\045\uffe2\047\uffe2\053\uffe2\054\uffe2\055\uffe2\056\uffe2" +
    "\001\002\000\046\016\uffdc\017\uffdc\033\uffdc\034\uffdc\035" +
    "\uffdc\036\uffdc\037\uffdc\040\uffdc\041\uffdc\042\uffdc\043\uffdc" +
    "\044\uffdc\045\uffdc\047\uffdc\053\uffdc\054\uffdc\055\uffdc\056" +
    "\uffdc\001\002\000\020\041\063\042\051\046\064\074\044" +
    "\075\055\076\050\077\053\001\002\000\046\016\uffdf\017" +
    "\uffdf\033\uffdf\034\uffdf\035\uffdf\036\uffdf\037\uffdf\040\uffdf" +
    "\041\uffdf\042\uffdf\043\uffdf\044\uffdf\045\uffdf\047\uffdf\053" +
    "\uffdf\054\uffdf\055\uffdf\056\uffdf\001\002\000\046\016\uffdb" +
    "\017\uffdb\033\uffdb\034\uffdb\035\uffdb\036\uffdb\037\uffdb\040" +
    "\uffdb\041\uffdb\042\uffdb\043\uffdb\044\uffdb\045\uffdb\047\uffdb" +
    "\053\uffdb\054\uffdb\055\uffdb\056\uffdb\001\002\000\046\016" +
    "\uffe6\017\uffe6\033\uffe6\034\uffe6\035\uffe6\036\uffe6\037\uffe6" +
    "\040\uffe6\041\uffe6\042\117\043\071\044\073\045\072\047" +
    "\uffe6\053\uffe6\054\uffe6\055\uffe6\056\uffe6\001\002\000\046" +
    "\016\uffdd\017\uffdd\033\uffdd\034\uffdd\035\uffdd\036\uffdd\037" +
    "\uffdd\040\uffdd\041\uffdd\042\uffdd\043\uffdd\044\uffdd\045\uffdd" +
    "\047\uffdd\053\uffdd\054\uffdd\055\uffdd\056\uffdd\001\002\000" +
    "\012\047\uff92\053\uff92\054\uff92\055\uff92\001\002\000\004" +
    "\057\112\001\002\000\004\055\111\001\002\000\004\057" +
    "\100\001\002\000\012\047\uff90\053\uff90\054\uff90\055\uff90" +
    "\001\002\000\020\041\063\042\051\046\064\074\044\075" +
    "\055\076\050\077\053\001\002\000\020\041\063\042\051" +
    "\046\064\074\044\075\055\076\050\077\053\001\002\000" +
    "\006\041\066\047\067\001\002\000\020\041\063\042\051" +
    "\046\064\074\044\075\055\076\050\077\053\001\002\000" +
    "\046\016\uffd9\017\uffd9\033\uffd9\034\uffd9\035\uffd9\036\uffd9" +
    "\037\uffd9\040\uffd9\041\uffd9\042\uffd9\043\uffd9\044\uffd9\045" +
    "\uffd9\047\uffd9\053\uffd9\054\uffd9\055\uffd9\056\uffd9\001\002" +
    "\000\044\016\uffe8\017\uffe8\033\uffe8\034\uffe8\035\uffe8\036" +
    "\uffe8\037\uffe8\040\uffe8\041\uffe8\043\071\044\073\045\072" +
    "\047\uffe8\053\uffe8\054\uffe8\055\uffe8\056\uffe8\001\002\000" +
    "\020\041\063\042\051\046\064\074\044\075\055\076\050" +
    "\077\053\001\002\000\020\041\063\042\051\046\064\074" +
    "\044\075\055\076\050\077\053\001\002\000\020\041\063" +
    "\042\051\046\064\074\044\075\055\076\050\077\053\001" +
    "\002\000\046\016\uffe4\017\uffe4\033\uffe4\034\uffe4\035\uffe4" +
    "\036\uffe4\037\uffe4\040\uffe4\041\uffe4\042\uffe4\043\uffe4\044" +
    "\uffe4\045\uffe4\047\uffe4\053\uffe4\054\uffe4\055\uffe4\056\uffe4" +
    "\001\002\000\046\016\uffe3\017\uffe3\033\uffe3\034\uffe3\035" +
    "\uffe3\036\uffe3\037\uffe3\040\uffe3\041\uffe3\042\uffe3\043\uffe3" +
    "\044\uffe3\045\uffe3\047\uffe3\053\uffe3\054\uffe3\055\uffe3\056" +
    "\uffe3\001\002\000\046\016\uffe5\017\uffe5\033\uffe5\034\uffe5" +
    "\035\uffe5\036\uffe5\037\uffe5\040\uffe5\041\uffe5\042\uffe5\043" +
    "\uffe5\044\uffe5\045\uffe5\047\uffe5\053\uffe5\054\uffe5\055\uffe5" +
    "\056\uffe5\001\002\000\046\016\uffe0\017\uffe0\033\uffe0\034" +
    "\uffe0\035\uffe0\036\uffe0\037\uffe0\040\uffe0\041\uffe0\042\uffe0" +
    "\043\uffe0\044\uffe0\045\uffe0\047\uffe0\053\uffe0\054\uffe0\055" +
    "\uffe0\056\uffe0\001\002\000\004\074\101\001\002\000\004" +
    "\046\102\001\002\000\024\041\063\042\051\046\064\047" +
    "\uff89\054\uff89\074\044\075\055\076\050\077\053\001\002" +
    "\000\010\041\066\047\uff87\054\uff87\001\002\000\006\047" +
    "\107\054\106\001\002\000\006\047\uff8a\054\uff8a\001\002" +
    "\000\020\041\063\042\051\046\064\074\044\075\055\076" +
    "\050\077\053\001\002\000\012\047\uff95\053\uff95\054\uff95" +
    "\055\uff95\001\002\000\010\041\066\047\uff88\054\uff88\001" +
    "\002\000\014\004\ufff7\006\ufff7\007\ufff7\010\ufff7\011\ufff7" +
    "\001\002\000\004\074\113\001\002\000\004\046\114\001" +
    "\002\000\024\041\063\042\051\046\064\047\uff89\054\uff89" +
    "\074\044\075\055\076\050\077\053\001\002\000\006\047" +
    "\116\054\106\001\002\000\012\047\uff94\053\uff94\054\uff94" +
    "\055\uff94\001\002\000\020\041\063\042\051\046\064\074" +
    "\044\075\055\076\050\077\053\001\002\000\044\016\uffe7" +
    "\017\uffe7\033\uffe7\034\uffe7\035\uffe7\036\uffe7\037\uffe7\040" +
    "\uffe7\041\uffe7\043\071\044\073\045\072\047\uffe7\053\uffe7" +
    "\054\uffe7\055\uffe7\056\uffe7\001\002\000\046\016\uffe1\017" +
    "\uffe1\033\uffe1\034\uffe1\035\uffe1\036\uffe1\037\uffe1\040\uffe1" +
    "\041\uffe1\042\uffe1\043\uffe1\044\uffe1\045\uffe1\047\uffe1\053" +
    "\uffe1\054\uffe1\055\uffe1\056\uffe1\001\002\000\004\074\123" +
    "\001\002\000\004\057\124\001\002\000\004\074\125\001" +
    "\002\000\004\046\126\001\002\000\024\041\063\042\051" +
    "\046\064\047\uff89\054\uff89\074\044\075\055\076\050\077" +
    "\053\001\002\000\006\047\130\054\106\001\002\000\012" +
    "\047\uff93\053\uff93\054\uff93\055\uff93\001\002\000\020\041" +
    "\063\042\051\046\064\074\044\075\055\076\050\077\053" +
    "\001\002\000\006\041\066\053\133\001\002\000\050\016" +
    "\uffed\017\uffed\033\uffed\034\uffed\035\uffed\036\uffed\037\uffed" +
    "\040\uffed\041\uffed\042\uffed\043\uffed\044\uffed\045\uffed\047" +
    "\uffed\052\uffed\053\uffed\054\uffed\055\uffed\056\uffed\001\002" +
    "\000\050\016\uffda\017\uffda\033\uffda\034\uffda\035\uffda\036" +
    "\uffda\037\uffda\040\uffda\041\uffda\042\uffda\043\uffda\044\uffda" +
    "\045\uffda\047\uffda\052\135\053\uffda\054\uffda\055\uffda\056" +
    "\uffda\001\002\000\030\041\063\042\051\046\064\063\062" +
    "\067\046\070\061\071\057\074\044\075\055\076\050\077" +
    "\053\001\002\000\004\053\137\001\002\000\052\016\uffee" +
    "\017\uffee\033\uffee\034\uffee\035\uffee\036\uffee\037\uffee\040" +
    "\uffee\041\uffee\042\uffee\043\uffee\044\uffee\045\uffee\047\uffee" +
    "\052\uffee\053\uffee\054\uffee\055\uffee\056\uffee\064\uffee\001" +
    "\002\000\012\004\ufff2\007\ufff2\010\ufff2\011\ufff2\001\002" +
    "\000\004\002\000\001\002\000\004\074\u0111\001\002\000" +
    "\004\005\144\001\002\000\004\046\145\001\002\000\004" +
    "\047\146\001\002\000\004\050\147\001\002\000\044\007" +
    "\uffd6\010\uffd6\011\uffd6\021\uffd6\023\uffd6\024\uffd6\026\uffd6" +
    "\031\uffd6\051\uffd6\060\uffd6\061\uffd6\062\uffd6\063\uffd6\067" +
    "\uffd6\070\uffd6\071\uffd6\074\uffd6\001\002\000\044\007\040" +
    "\010\037\011\036\021\166\023\202\024\154\026\162\031" +
    "\172\051\176\060\201\061\167\062\175\063\156\067\163" +
    "\070\061\071\057\074\165\001\002\000\050\007\uffc7\010" +
    "\uffc7\011\uffc7\021\uffc7\023\uffc7\024\uffc7\025\uffc7\026\uffc7" +
    "\027\uffc7\031\uffc7\051\uffc7\060\uffc7\061\uffc7\062\uffc7\063" +
    "\uffc7\067\uffc7\070\uffc7\071\uffc7\074\uffc7\001\002\000\050" +
    "\007\uffcc\010\uffcc\011\uffcc\021\uffcc\023\uffcc\024\uffcc\025" +
    "\uffcc\026\uffcc\027\uffcc\031\uffcc\051\uffcc\060\uffcc\061\uffcc" +
    "\062\uffcc\063\uffcc\067\uffcc\070\uffcc\071\uffcc\074\uffcc\001" +
    "\002\000\050\007\uffd3\010\uffd3\011\uffd3\021\uffd3\023\uffd3" +
    "\024\uffd3\025\uffd3\026\uffd3\027\uffd3\031\uffd3\051\uffd3\060" +
    "\uffd3\061\uffd3\062\uffd3\063\uffd3\067\uffd3\070\uffd3\071\uffd3" +
    "\074\uffd3\001\002\000\004\046\u0101\001\002\000\050\007" +
    "\uffca\010\uffca\011\uffca\021\uffca\023\uffca\024\uffca\025\uffca" +
    "\026\uffca\027\uffca\031\uffca\051\uffca\060\uffca\061\uffca\062" +
    "\uffca\063\uffca\067\uffca\070\uffca\071\uffca\074\uffca\001\002" +
    "\000\050\007\uffc8\010\uffc8\011\uffc8\021\uffc8\023\uffc8\024" +
    "\uffc8\025\uffc8\026\uffc8\027\uffc8\031\uffc8\051\uffc8\060\uffc8" +
    "\061\uffc8\062\uffc8\063\uffc8\067\uffc8\070\uffc8\071\uffc8\074" +
    "\uffc8\001\002\000\050\007\uffcf\010\uffcf\011\uffcf\021\uffcf" +
    "\023\uffcf\024\uffcf\025\uffcf\026\uffcf\027\uffcf\031\uffcf\051" +
    "\uffcf\060\uffcf\061\uffcf\062\uffcf\063\uffcf\067\uffcf\070\uffcf" +
    "\071\uffcf\074\uffcf\001\002\000\050\007\uffcb\010\uffcb\011" +
    "\uffcb\021\uffcb\023\uffcb\024\uffcb\025\uffcb\026\uffcb\027\uffcb" +
    "\031\uffcb\051\uffcb\060\uffcb\061\uffcb\062\uffcb\063\uffcb\067" +
    "\uffcb\070\uffcb\071\uffcb\074\uffcb\001\002\000\050\007\uffd0" +
    "\010\uffd0\011\uffd0\021\uffd0\023\uffd0\024\uffd0\025\uffd0\026" +
    "\uffd0\027\uffd0\031\uffd0\051\uffd0\060\uffd0\061\uffd0\062\uffd0" +
    "\063\uffd0\067\uffd0\070\uffd0\071\uffd0\074\uffd0\001\002\000" +
    "\004\046\373\001\002\000\004\057\357\001\002\000\050" +
    "\007\uffd2\010\uffd2\011\uffd2\021\uffd2\023\uffd2\024\uffd2\025" +
    "\uffd2\026\uffd2\027\uffd2\031\uffd2\051\uffd2\060\uffd2\061\uffd2" +
    "\062\uffd2\063\uffd2\067\uffd2\070\uffd2\071\uffd2\074\uffd2\001" +
    "\002\000\006\052\252\064\251\001\002\000\004\046\334" +
    "\001\002\000\004\046\323\001\002\000\004\055\322\001" +
    "\002\000\050\007\uffd4\010\uffd4\011\uffd4\021\uffd4\023\uffd4" +
    "\024\uffd4\025\uffd4\026\uffd4\027\uffd4\031\uffd4\051\uffd4\060" +
    "\uffd4\061\uffd4\062\uffd4\063\uffd4\067\uffd4\070\uffd4\071\uffd4" +
    "\074\uffd4\001\002\000\004\050\313\001\002\000\050\007" +
    "\uffcd\010\uffcd\011\uffcd\021\uffcd\023\uffcd\024\uffcd\025\uffcd" +
    "\026\uffcd\027\uffcd\031\uffcd\051\uffcd\060\uffcd\061\uffcd\062" +
    "\uffcd\063\uffcd\067\uffcd\070\uffcd\071\uffcd\074\uffcd\001\002" +
    "\000\050\007\uffd7\010\uffd7\011\uffd7\021\uffd7\023\uffd7\024" +
    "\uffd7\025\uffd7\026\uffd7\027\uffd7\031\uffd7\051\uffd7\060\uffd7" +
    "\061\uffd7\062\uffd7\063\uffd7\067\uffd7\070\uffd7\071\uffd7\074" +
    "\uffd7\001\002\000\004\055\312\001\002\000\004\002\uffd8" +
    "\001\002\000\050\007\uffd1\010\uffd1\011\uffd1\021\uffd1\023" +
    "\uffd1\024\uffd1\025\uffd1\026\uffd1\027\uffd1\031\uffd1\051\uffd1" +
    "\060\uffd1\061\uffd1\062\uffd1\063\uffd1\067\uffd1\070\uffd1\071" +
    "\uffd1\074\uffd1\001\002\000\050\007\uffd5\010\uffd5\011\uffd5" +
    "\021\uffd5\023\uffd5\024\uffd5\025\uffd5\026\uffd5\027\uffd5\031" +
    "\uffd5\051\uffd5\060\uffd5\061\uffd5\062\uffd5\063\uffd5\067\uffd5" +
    "\070\uffd5\071\uffd5\074\uffd5\001\002\000\004\046\271\001" +
    "\002\000\004\046\203\001\002\000\012\007\040\010\037" +
    "\011\036\074\205\001\002\000\004\055\210\001\002\000" +
    "\004\055\uffa8\001\002\000\004\074\165\001\002\000\004" +
    "\055\uffa7\001\002\000\022\020\213\041\063\042\051\046" +
    "\217\074\044\075\055\076\050\077\053\001\002\000\012" +
    "\016\uff9d\017\uff9d\047\uff9d\055\uff9d\001\002\000\012\016" +
    "\225\017\uffa1\047\uffa1\055\uffa1\001\002\000\022\020\213" +
    "\041\063\042\051\046\217\074\044\075\055\076\050\077" +
    "\053\001\002\000\020\033\231\034\232\035\234\036\233" +
    "\037\227\040\230\041\066\001\002\000\012\016\uff9f\017" +
    "\uff9f\047\uff9f\055\uff9f\001\002\000\006\017\223\055\243" +
    "\001\002\000\022\020\213\041\063\042\051\046\217\074" +
    "\044\075\055\076\050\077\053\001\002\000\022\033\231" +
    "\034\232\035\234\036\233\037\227\040\230\041\066\047" +
    "\067\001\002\000\006\017\223\047\222\001\002\000\012" +
    "\016\uff96\017\uff96\047\uff96\055\uff96\001\002\000\022\020" +
    "\213\041\063\042\051\046\217\074\044\075\055\076\050" +
    "\077\053\001\002\000\012\016\225\017\uffa2\047\uffa2\055" +
    "\uffa2\001\002\000\022\020\213\041\063\042\051\046\217" +
    "\074\044\075\055\076\050\077\053\001\002\000\012\016" +
    "\uffa0\017\uffa0\047\uffa0\055\uffa0\001\002\000\020\041\063" +
    "\042\051\046\064\074\044\075\055\076\050\077\053\001" +
    "\002\000\020\041\063\042\051\046\064\074\044\075\055" +
    "\076\050\077\053\001\002\000\020\041\063\042\051\046" +
    "\064\074\044\075\055\076\050\077\053\001\002\000\020" +
    "\041\063\042\051\046\064\074\044\075\055\076\050\077" +
    "\053\001\002\000\020\041\063\042\051\046\064\074\044" +
    "\075\055\076\050\077\053\001\002\000\020\041\063\042" +
    "\051\046\064\074\044\075\055\076\050\077\053\001\002" +
    "\000\014\016\uff99\017\uff99\041\066\047\uff99\055\uff99\001" +
    "\002\000\014\016\uff98\017\uff98\041\066\047\uff98\055\uff98" +
    "\001\002\000\014\016\uff9a\017\uff9a\041\066\047\uff9a\055" +
    "\uff9a\001\002\000\014\016\uff9b\017\uff9b\041\066\047\uff9b" +
    "\055\uff9b\001\002\000\014\016\uff9c\017\uff9c\041\066\047" +
    "\uff9c\055\uff9c\001\002\000\014\016\uff97\017\uff97\041\066" +
    "\047\uff97\055\uff97\001\002\000\004\074\247\001\002\000" +
    "\004\047\264\001\002\000\004\047\uffa6\001\002\000\004" +
    "\047\uffa5\001\002\000\012\052\252\064\251\065\250\066" +
    "\253\001\002\000\004\047\uffa4\001\002\000\030\041\063" +
    "\042\051\046\064\063\062\067\046\070\061\071\057\074" +
    "\044\075\055\076\050\077\053\001\002\000\030\041\063" +
    "\042\051\046\064\063\062\067\046\070\061\071\057\074" +
    "\044\075\055\076\050\077\053\001\002\000\004\047\uffa3" +
    "\001\002\000\004\053\255\001\002\000\006\052\uffed\064" +
    "\uffed\001\002\000\006\052\135\064\257\001\002\000\030" +
    "\041\063\042\051\046\064\063\062\067\046\070\061\071" +
    "\057\074\044\075\055\076\050\077\053\001\002\000\004" +
    "\055\261\001\002\000\054\007\uffc5\010\uffc5\011\uffc5\021" +
    "\uffc5\023\uffc5\024\uffc5\025\uffc5\026\uffc5\027\uffc5\031\uffc5" +
    "\047\uffc5\051\uffc5\055\uffc5\060\uffc5\061\uffc5\062\uffc5\063" +
    "\uffc5\067\uffc5\070\uffc5\071\uffc5\074\uffc5\001\002\000\004" +
    "\055\263\001\002\000\054\007\uffc6\010\uffc6\011\uffc6\021" +
    "\uffc6\023\uffc6\024\uffc6\025\uffc6\026\uffc6\027\uffc6\031\uffc6" +
    "\047\uffc6\051\uffc6\055\uffc6\060\uffc6\061\uffc6\062\uffc6\063" +
    "\uffc6\067\uffc6\070\uffc6\071\uffc6\074\uffc6\001\002\000\004" +
    "\050\265\001\002\000\044\007\uffd6\010\uffd6\011\uffd6\021" +
    "\uffd6\023\uffd6\024\uffd6\026\uffd6\031\uffd6\051\uffd6\060\uffd6" +
    "\061\uffd6\062\uffd6\063\uffd6\067\uffd6\070\uffd6\071\uffd6\074" +
    "\uffd6\001\002\000\044\007\040\010\037\011\036\021\166" +
    "\023\202\024\154\026\162\031\172\051\267\060\201\061" +
    "\167\062\175\063\156\067\163\070\061\071\057\074\165" +
    "\001\002\000\050\007\uffa9\010\uffa9\011\uffa9\021\uffa9\023" +
    "\uffa9\024\uffa9\025\uffa9\026\uffa9\027\uffa9\031\uffa9\051\uffa9" +
    "\060\uffa9\061\uffa9\062\uffa9\063\uffa9\067\uffa9\070\uffa9\071" +
    "\uffa9\074\uffa9\001\002\000\012\016\uff9e\017\uff9e\047\uff9e" +
    "\055\uff9e\001\002\000\004\101\273\001\002\000\006\047" +
    "\uffba\054\uffba\001\002\000\012\012\275\013\300\014\274" +
    "\100\276\001\002\000\014\012\uffbc\013\uffbc\014\uffbc\100" +
    "\uffbc\101\uffbc\001\002\000\014\012\uffbe\013\uffbe\014\uffbe" +
    "\100\uffbe\101\uffbe\001\002\000\014\012\uffc0\013\uffc0\014" +
    "\uffc0\100\uffc0\101\uffc0\001\002\000\014\012\uffbf\013\uffbf" +
    "\014\uffbf\100\uffbf\101\uffbf\001\002\000\014\012\uffbd\013" +
    "\uffbd\014\uffbd\100\uffbd\101\uffbd\001\002\000\014\012\275" +
    "\013\300\014\274\100\302\101\304\001\002\000\014\012" +
    "\uffc2\013\uffc2\014\uffc2\100\uffc2\101\uffc2\001\002\000\014" +
    "\012\uffc1\013\uffc1\014\uffc1\100\uffc1\101\uffc1\001\002\000" +
    "\006\047\uffc3\054\uffc3\001\002\000\006\047\307\054\306" +
    "\001\002\000\020\041\063\042\051\046\064\074\044\075" +
    "\055\076\050\077\053\001\002\000\004\055\310\001\002" +
    "\000\050\007\uffc4\010\uffc4\011\uffc4\021\uffc4\023\uffc4\024" +
    "\uffc4\025\uffc4\026\uffc4\027\uffc4\031\uffc4\051\uffc4\060\uffc4" +
    "\061\uffc4\062\uffc4\063\uffc4\067\uffc4\070\uffc4\071\uffc4\074" +
    "\uffc4\001\002\000\010\041\066\047\uffbb\054\uffbb\001\002" +
    "\000\050\007\uffce\010\uffce\011\uffce\021\uffce\023\uffce\024" +
    "\uffce\025\uffce\026\uffce\027\uffce\031\uffce\051\uffce\060\uffce" +
    "\061\uffce\062\uffce\063\uffce\067\uffce\070\uffce\071\uffce\074" +
    "\uffce\001\002\000\044\007\uffd6\010\uffd6\011\uffd6\021\uffd6" +
    "\023\uffd6\024\uffd6\026\uffd6\031\uffd6\051\uffd6\060\uffd6\061" +
    "\uffd6\062\uffd6\063\uffd6\067\uffd6\070\uffd6\071\uffd6\074\uffd6" +
    "\001\002\000\044\007\040\010\037\011\036\021\166\023" +
    "\202\024\154\026\162\031\172\051\315\060\201\061\167" +
    "\062\175\063\156\067\163\070\061\071\057\074\165\001" +
    "\002\000\004\026\316\001\002\000\004\046\317\001\002" +
    "\000\022\020\213\041\063\042\051\046\217\074\044\075" +
    "\055\076\050\077\053\001\002\000\006\017\223\047\321" +
    "\001\002\000\050\007\uffaa\010\uffaa\011\uffaa\021\uffaa\023" +
    "\uffaa\024\uffaa\025\uffaa\026\uffaa\027\uffaa\031\uffaa\051\uffaa" +
    "\060\uffaa\061\uffaa\062\uffaa\063\uffaa\067\uffaa\070\uffaa\071" +
    "\uffaa\074\uffaa\001\002\000\050\007\uffc9\010\uffc9\011\uffc9" +
    "\021\uffc9\023\uffc9\024\uffc9\025\uffc9\026\uffc9\027\uffc9\031" +
    "\uffc9\051\uffc9\060\uffc9\061\uffc9\062\uffc9\063\uffc9\067\uffc9" +
    "\070\uffc9\071\uffc9\074\uffc9\001\002\000\004\101\273\001" +
    "\002\000\006\047\uffb7\054\uffba\001\002\000\004\054\331" +
    "\001\002\000\004\047\327\001\002\000\004\055\330\001" +
    "\002\000\050\007\uffb9\010\uffb9\011\uffb9\021\uffb9\023\uffb9" +
    "\024\uffb9\025\uffb9\026\uffb9\027\uffb9\031\uffb9\051\uffb9\060" +
    "\uffb9\061\uffb9\062\uffb9\063\uffb9\067\uffb9\070\uffb9\071\uffb9" +
    "\074\uffb9\001\002\000\022\015\332\041\063\042\051\046" +
    "\064\074\044\075\055\076\050\077\053\001\002\000\004" +
    "\074\333\001\002\000\004\047\uffb8\001\002\000\022\020" +
    "\213\041\063\042\051\046\217\074\044\075\055\076\050" +
    "\077\053\001\002\000\006\017\223\047\336\001\002\000" +
    "\004\050\337\001\002\000\044\007\uffd6\010\uffd6\011\uffd6" +
    "\021\uffd6\023\uffd6\024\uffd6\026\uffd6\031\uffd6\051\uffd6\060" +
    "\uffd6\061\uffd6\062\uffd6\063\uffd6\067\uffd6\070\uffd6\071\uffd6" +
    "\074\uffd6\001\002\000\044\007\040\010\037\011\036\021" +
    "\166\023\202\024\154\026\162\031\172\051\341\060\201" +
    "\061\167\062\175\063\156\067\163\070\061\071\057\074" +
    "\165\001\002\000\052\007\uffb4\010\uffb4\011\uffb4\021\uffb4" +
    "\022\uffb4\023\uffb4\024\uffb4\025\uffb4\026\uffb4\027\uffb4\031" +
    "\uffb4\051\uffb4\060\uffb4\061\uffb4\062\uffb4\063\uffb4\067\uffb4" +
    "\070\uffb4\071\uffb4\074\uffb4\001\002\000\052\007\uffb2\010" +
    "\uffb2\011\uffb2\021\uffb2\022\344\023\uffb2\024\uffb2\025\uffb2" +
    "\026\uffb2\027\uffb2\031\uffb2\051\uffb2\060\uffb2\061\uffb2\062" +
    "\uffb2\063\uffb2\067\uffb2\070\uffb2\071\uffb2\074\uffb2\001\002" +
    "\000\050\007\uffb6\010\uffb6\011\uffb6\021\uffb6\023\uffb6\024" +
    "\uffb6\025\uffb6\026\uffb6\027\uffb6\031\uffb6\051\uffb6\060\uffb6" +
    "\061\uffb6\062\uffb6\063\uffb6\067\uffb6\070\uffb6\071\uffb6\074" +
    "\uffb6\001\002\000\006\021\345\050\346\001\002\000\004" +
    "\046\351\001\002\000\044\007\uffd6\010\uffd6\011\uffd6\021" +
    "\uffd6\023\uffd6\024\uffd6\026\uffd6\031\uffd6\051\uffd6\060\uffd6" +
    "\061\uffd6\062\uffd6\063\uffd6\067\uffd6\070\uffd6\071\uffd6\074" +
    "\uffd6\001\002\000\044\007\040\010\037\011\036\021\166" +
    "\023\202\024\154\026\162\031\172\051\350\060\201\061" +
    "\167\062\175\063\156\067\163\070\061\071\057\074\165" +
    "\001\002\000\050\007\uffb3\010\uffb3\011\uffb3\021\uffb3\023" +
    "\uffb3\024\uffb3\025\uffb3\026\uffb3\027\uffb3\031\uffb3\051\uffb3" +
    "\060\uffb3\061\uffb3\062\uffb3\063\uffb3\067\uffb3\070\uffb3\071" +
    "\uffb3\074\uffb3\001\002\000\022\020\213\041\063\042\051" +
    "\046\217\074\044\075\055\076\050\077\053\001\002\000" +
    "\006\017\223\047\353\001\002\000\004\050\354\001\002" +
    "\000\044\007\uffd6\010\uffd6\011\uffd6\021\uffd6\023\uffd6\024" +
    "\uffd6\026\uffd6\031\uffd6\051\uffd6\060\uffd6\061\uffd6\062\uffd6" +
    "\063\uffd6\067\uffd6\070\uffd6\071\uffd6\074\uffd6\001\002\000" +
    "\044\007\040\010\037\011\036\021\166\023\202\024\154" +
    "\026\162\031\172\051\356\060\201\061\167\062\175\063" +
    "\156\067\163\070\061\071\057\074\165\001\002\000\052" +
    "\007\uffb5\010\uffb5\011\uffb5\021\uffb5\022\uffb5\023\uffb5\024" +
    "\uffb5\025\uffb5\026\uffb5\027\uffb5\031\uffb5\051\uffb5\060\uffb5" +
    "\061\uffb5\062\uffb5\063\uffb5\067\uffb5\070\uffb5\071\uffb5\074" +
    "\uffb5\001\002\000\004\074\360\001\002\000\006\057\124" +
    "\074\361\001\002\000\010\046\366\054\uff8b\055\uff8b\001" +
    "\002\000\006\054\364\055\363\001\002\000\050\007\uff8f" +
    "\010\uff8f\011\uff8f\021\uff8f\023\uff8f\024\uff8f\025\uff8f\026" +
    "\uff8f\027\uff8f\031\uff8f\051\uff8f\060\uff8f\061\uff8f\062\uff8f" +
    "\063\uff8f\067\uff8f\070\uff8f\071\uff8f\074\uff8f\001\002\000" +
    "\004\074\365\001\002\000\010\046\366\054\uff8b\055\uff8b" +
    "\001\002\000\024\041\063\042\051\046\064\047\uff89\054" +
    "\uff89\074\044\075\055\076\050\077\053\001\002\000\006" +
    "\054\uff8e\055\uff8e\001\002\000\006\047\371\054\106\001" +
    "\002\000\006\054\uff8c\055\uff8c\001\002\000\006\054\uff8d" +
    "\055\uff8d\001\002\000\022\020\213\041\063\042\051\046" +
    "\217\074\044\075\055\076\050\077\053\001\002\000\006" +
    "\017\223\047\375\001\002\000\004\050\376\001\002\000" +
    "\044\007\uffd6\010\uffd6\011\uffd6\021\uffd6\023\uffd6\024\uffd6" +
    "\026\uffd6\031\uffd6\051\uffd6\060\uffd6\061\uffd6\062\uffd6\063" +
    "\uffd6\067\uffd6\070\uffd6\071\uffd6\074\uffd6\001\002\000\044" +
    "\007\040\010\037\011\036\021\166\023\202\024\154\026" +
    "\162\031\172\051\u0100\060\201\061\167\062\175\063\156" +
    "\067\163\070\061\071\057\074\165\001\002\000\050\007" +
    "\uffab\010\uffab\011\uffab\021\uffab\023\uffab\024\uffab\025\uffab" +
    "\026\uffab\027\uffab\031\uffab\051\uffab\060\uffab\061\uffab\062" +
    "\uffab\063\uffab\067\uffab\070\uffab\071\uffab\074\uffab\001\002" +
    "\000\030\041\063\042\051\046\064\063\062\067\046\070" +
    "\061\071\057\074\044\075\055\076\050\077\053\001\002" +
    "\000\004\047\u0103\001\002\000\004\050\u0104\001\002\000" +
    "\010\025\uffaf\027\uffaf\051\uffaf\001\002\000\010\025\u0108" +
    "\027\u0107\051\uffac\001\002\000\004\051\u010f\001\002\000" +
    "\004\056\u010d\001\002\000\020\041\063\042\051\046\064" +
    "\074\044\075\055\076\050\077\053\001\002\000\010\025" +
    "\uffb0\027\uffb0\051\uffb0\001\002\000\006\041\066\056\u010b" +
    "\001\002\000\050\007\uffd6\010\uffd6\011\uffd6\021\uffd6\023" +
    "\uffd6\024\uffd6\025\uffd6\026\uffd6\027\uffd6\031\uffd6\051\uffd6" +
    "\060\uffd6\061\uffd6\062\uffd6\063\uffd6\067\uffd6\070\uffd6\071" +
    "\uffd6\074\uffd6\001\002\000\050\007\040\010\037\011\036" +
    "\021\166\023\202\024\154\025\uffae\026\162\027\uffae\031" +
    "\172\051\uffae\060\201\061\167\062\175\063\156\067\163" +
    "\070\061\071\057\074\165\001\002\000\044\007\uffd6\010" +
    "\uffd6\011\uffd6\021\uffd6\023\uffd6\024\uffd6\026\uffd6\031\uffd6" +
    "\051\uffd6\060\uffd6\061\uffd6\062\uffd6\063\uffd6\067\uffd6\070" +
    "\uffd6\071\uffd6\074\uffd6\001\002\000\044\007\040\010\037" +
    "\011\036\021\166\023\202\024\154\026\162\031\172\051" +
    "\uffad\060\201\061\167\062\175\063\156\067\163\070\061" +
    "\071\057\074\165\001\002\000\050\007\uffb1\010\uffb1\011" +
    "\uffb1\021\uffb1\023\uffb1\024\uffb1\025\uffb1\026\uffb1\027\uffb1" +
    "\031\uffb1\051\uffb1\060\uffb1\061\uffb1\062\uffb1\063\uffb1\067" +
    "\uffb1\070\uffb1\071\uffb1\074\uffb1\001\002\000\006\054\u011b" +
    "\055\u011a\001\002\000\012\052\u0113\054\uffe9\055\uffe9\064" +
    "\u0112\001\002\000\030\041\063\042\051\046\064\063\062" +
    "\067\046\070\061\071\057\074\044\075\055\076\050\077" +
    "\053\001\002\000\030\041\063\042\051\046\064\063\062" +
    "\067\046\070\061\071\057\074\044\075\055\076\050\077" +
    "\053\001\002\000\006\054\uffeb\055\uffeb\001\002\000\004" +
    "\053\u0116\001\002\000\006\052\uffed\055\uffed\001\002\000" +
    "\006\052\135\055\u0118\001\002\000\052\004\uffef\007\uffef" +
    "\010\uffef\011\uffef\021\uffef\023\uffef\024\uffef\025\uffef\026" +
    "\uffef\027\uffef\031\uffef\051\uffef\060\uffef\061\uffef\062\uffef" +
    "\063\uffef\067\uffef\070\uffef\071\uffef\074\uffef\001\002\000" +
    "\006\054\uffea\055\uffea\001\002\000\052\004\ufff0\007\ufff0" +
    "\010\ufff0\011\ufff0\021\ufff0\023\ufff0\024\ufff0\025\ufff0\026" +
    "\ufff0\027\ufff0\031\ufff0\051\ufff0\060\ufff0\061\ufff0\062\ufff0" +
    "\063\ufff0\067\ufff0\070\ufff0\071\ufff0\074\ufff0\001\002\000" +
    "\004\074\u011c\001\002\000\010\054\uffe9\055\uffe9\064\u0112" +
    "\001\002\000\006\054\uffec\055\uffec\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u011b\000\006\002\004\003\003\001\001\000\006\004" +
    "\007\006\006\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\010\033\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\005\021\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\007" +
    "\141\011\137\021\140\001\001\000\004\007\040\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\016\015\044\016\053" +
    "\017\046\020\051\057\055\060\057\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\017\120\020\051\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\017\076" +
    "\020\051\001\001\000\012\015\064\016\053\017\046\020" +
    "\051\001\001\000\002\001\001\000\010\016\067\017\046" +
    "\020\051\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\017\075\020\051\001\001\000\006\017\074\020\051" +
    "\001\001\000\006\017\073\020\051\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\016\015\102\016" +
    "\053\017\046\020\051\064\103\065\104\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\015" +
    "\107\016\053\017\046\020\051\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\016\015\102\016\053\017\046\020\051" +
    "\064\114\065\104\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\016\117\017\046\020\051\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\016\015\102" +
    "\016\053\017\046\020\051\064\126\065\104\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\015\131\016\053" +
    "\017\046\020\051\001\001\000\002\001\001\000\004\012" +
    "\133\001\001\000\002\001\001\000\016\015\044\016\053" +
    "\017\046\020\051\057\055\060\135\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\013\u010f\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\022\147" +
    "\001\001\000\040\007\141\011\172\023\173\024\177\025" +
    "\170\026\151\027\157\034\154\036\160\041\156\045\152" +
    "\046\163\047\176\057\167\061\150\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\007" +
    "\205\050\203\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\026\206\001\001\000\002\001\001\000\022\015" +
    "\213\016\053\017\046\020\051\053\215\054\211\055\214" +
    "\056\210\001\001\000\002\001\001\000\002\001\001\000" +
    "\016\015\213\016\053\017\046\020\051\055\267\056\210" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\022\015\217\016\053\017\046\020\051\053\220" +
    "\054\211\055\214\056\210\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\020\015\213\016\053" +
    "\017\046\020\051\054\223\055\214\056\210\001\001\000" +
    "\002\001\001\000\016\015\213\016\053\017\046\020\051" +
    "\055\225\056\210\001\001\000\002\001\001\000\012\015" +
    "\241\016\053\017\046\020\051\001\001\000\012\015\240" +
    "\016\053\017\046\020\051\001\001\000\012\015\237\016" +
    "\053\017\046\020\051\001\001\000\012\015\236\016\053" +
    "\017\046\020\051\001\001\000\012\015\235\016\053\017" +
    "\046\020\051\001\001\000\012\015\234\016\053\017\046" +
    "\020\051\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\026\244\051\243\052\245\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\016\015\044\016\053\017" +
    "\046\020\051\057\055\060\261\001\001\000\016\015\044" +
    "\016\053\017\046\020\051\057\055\060\253\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\012\255\001\001" +
    "\000\002\001\001\000\016\015\044\016\053\017\046\020" +
    "\051\057\055\060\257\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\022\265\001\001\000\040\007\141\011\172" +
    "\023\173\024\177\025\170\026\151\027\157\034\154\036" +
    "\160\041\156\045\152\046\163\047\176\057\167\061\150" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\030" +
    "\271\001\001\000\004\033\304\001\001\000\006\031\300" +
    "\032\276\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\032\302\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\015\310\016\053" +
    "\017\046\020\051\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\022\313" +
    "\001\001\000\040\007\141\011\172\023\173\024\177\025" +
    "\170\026\151\027\157\034\154\036\160\041\156\045\152" +
    "\046\163\047\176\057\167\061\150\001\001\000\002\001" +
    "\001\000\002\001\001\000\022\015\213\016\053\017\046" +
    "\020\051\053\317\054\211\055\214\056\210\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\030\323\001\001\000\006\033\324\035\325\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\015\310\016\053\017\046\020\051\001" +
    "\001\000\002\001\001\000\002\001\001\000\022\015\213" +
    "\016\053\017\046\020\051\053\334\054\211\055\214\056" +
    "\210\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\022\337\001\001\000\040\007\141\011\172\023\173\024" +
    "\177\025\170\026\151\027\157\034\154\036\160\041\156" +
    "\045\152\046\163\047\176\057\167\061\150\001\001\000" +
    "\004\037\341\001\001\000\004\040\342\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\022" +
    "\346\001\001\000\040\007\141\011\172\023\173\024\177" +
    "\025\170\026\151\027\157\034\154\036\160\041\156\045" +
    "\152\046\163\047\176\057\167\061\150\001\001\000\002" +
    "\001\001\000\022\015\213\016\053\017\046\020\051\053" +
    "\351\054\211\055\214\056\210\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\022\354\001\001\000\040\007" +
    "\141\011\172\023\173\024\177\025\170\026\151\027\157" +
    "\034\154\036\160\041\156\045\152\046\163\047\176\057" +
    "\167\061\150\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\062\361\001\001\000\004\063\371\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\063\366\001\001\000\016\015\102\016\053\017\046\020" +
    "\051\064\367\065\104\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\022\015" +
    "\213\016\053\017\046\020\051\053\373\054\211\055\214" +
    "\056\210\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\022\376\001\001\000\040\007\141\011\172\023\173" +
    "\024\177\025\170\026\151\027\157\034\154\036\160\041" +
    "\156\045\152\046\163\047\176\057\167\061\150\001\001" +
    "\000\002\001\001\000\016\015\044\016\053\017\046\020" +
    "\051\057\055\060\u0101\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\042\u0104\001\001\000\006\043\u0108\044" +
    "\u0105\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\015\u0109\016\053\017\046\020\051\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\022\u010b\001\001\000\040" +
    "\007\141\011\172\023\173\024\177\025\170\026\151\027" +
    "\157\034\154\036\160\041\156\045\152\046\163\047\176" +
    "\057\167\061\150\001\001\000\004\022\u010d\001\001\000" +
    "\040\007\141\011\172\023\173\024\177\025\170\026\151" +
    "\027\157\034\154\036\160\041\156\045\152\046\163\047" +
    "\176\057\167\061\150\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\014\u0113\001\001\000\016\015\044\016" +
    "\053\017\046\020\051\057\055\060\u0118\001\001\000\016" +
    "\015\044\016\053\017\046\020\051\057\055\060\u0114\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\012\u0116" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\014\u011c" +
    "\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$SintaxisPrograma$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$SintaxisPrograma$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$SintaxisPrograma$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    private Symbol s;
    
    public void syntax_error(Symbol sym){
        System.out.println("\n" + sym.value + sym.sym);
        System.out.println("Error Sintactico en la letra: " + sym.value + "   <linea>: "  + (sym.right + 1) + "    <columna>: " + (sym.left + 1) + "\n");
    }

    public void unrecovered_syntax_error(Symbol sym) throws java.lang.Exception{
        System.out.println("\n" + sym.value + sym.sym);
        System.out.println("Error Sintactico en la letra: " + sym.value + "   <linea>: "  + (sym.right + 1) + "    <columna>: " + (sym.left + 1) + "\n");
    }

    public Symbol getS(){
        System.out.println(this.s.value);
        System.out.print(this.s.value);
        return this.s;
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$SintaxisPrograma$actions {
  private final SintaxisPrograma parser;

  /** Constructor */
  CUP$SintaxisPrograma$actions(SintaxisPrograma parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$SintaxisPrograma$do_action_part00000000(
    int                        CUP$SintaxisPrograma$act_num,
    java_cup.runtime.lr_parser CUP$SintaxisPrograma$parser,
    java.util.Stack            CUP$SintaxisPrograma$stack,
    int                        CUP$SintaxisPrograma$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$SintaxisPrograma$result;

      /* select the action based on the action number */
      switch (CUP$SintaxisPrograma$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= PROGRAMA EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-1)).value;
		RESULT = start_val;
              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$SintaxisPrograma$parser.done_parsing();
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // PROGRAMA ::= INCLUDE_LENG CONST VARGLOB MAIN 
            {
              Object RESULT =null;

              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("PROGRAMA",0, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INCLUDE_LENG ::= INCLUDE_LENG IN_LENG 
            {
              Object RESULT =null;

              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("INCLUDE_LENG",1, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // INCLUDE_LENG ::= 
            {
              Object RESULT =null;

              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("INCLUDE_LENG",1, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // IN_LENG ::= includee comilla py comilla puntocoma 
            {
              Object RESULT =null;

              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("IN_LENG",2, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-4)), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // IN_LENG ::= includee comilla vb comilla puntocoma 
            {
              Object RESULT =null;

              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("IN_LENG",2, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-4)), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // IN_LENG ::= includee comilla java IN_CLASS comilla puntocoma 
            {
              Object RESULT =null;

              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("IN_LENG",2, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-5)), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // IN_LENG ::= includee menor idlib mayor puntocoma 
            {
              Object RESULT =null;

              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("IN_LENG",2, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-4)), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // IN_CLASS ::= punto por 
            {
              Object RESULT =null;

              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("IN_CLASS",3, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // IN_CLASS ::= punto id 
            {
              Object RESULT =null;

              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("IN_CLASS",3, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // CONST ::= CONST constt TYPE id igual EXPR puntocoma 
            {
              Object RESULT =null;

              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("CONST",4, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-6)), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // CONST ::= 
            {
              Object RESULT =null;

              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("CONST",4, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // TYPE ::= intt 
            {
              Object RESULT =null;

              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("TYPE",5, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // TYPE ::= floatt 
            {
              Object RESULT =null;

              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("TYPE",5, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // TYPE ::= charr 
            {
              Object RESULT =null;

              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("TYPE",5, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // VARGLOB ::= VARGLOB ASIG_VAR 
            {
              Object RESULT =null;

              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("VARGLOB",6, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // VARGLOB ::= 
            {
              Object RESULT =null;

              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("VARGLOB",6, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // ASIG_VAR ::= TYPE LIST_ASIG puntocoma 
            {
              Object RESULT =null;

              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("ASIG_VAR",7, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // ASIG_VAR ::= TYPE id cora EXPR corc CORCHETES puntocoma 
            {
              Object RESULT =null;

              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("ASIG_VAR",7, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-6)), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // CORCHETES ::= CORCHETES cora EXPR corc 
            {
              Object RESULT =null;

              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("CORCHETES",8, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // CORCHETES ::= 
            {
              Object RESULT =null;

              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("CORCHETES",8, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // LIST_ASIG ::= LIST_ASIG coma id ASIG 
            {
              Object RESULT =null;

              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("LIST_ASIG",9, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // LIST_ASIG ::= id ASIG 
            {
              Object RESULT =null;

              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("LIST_ASIG",9, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // ASIG ::= igual EXPR 
            {
              Object RESULT =null;

              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("ASIG",10, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // ASIG ::= 
            {
              Object RESULT =null;

              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("ASIG",10, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // OPERACION_A ::= OPERACION_A mas OPERACION_M 
            {
              Object RESULT =null;

              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("OPERACION_A",11, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // OPERACION_A ::= OPERACION_M menos OPERACION_M 
            {
              Object RESULT =null;

              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("OPERACION_A",11, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // OPERACION_A ::= OPERACION_M 
            {
              Object RESULT =null;

              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("OPERACION_A",11, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // OPERACION_M ::= OPERACION_M por OPERACION_U 
            {
              Object RESULT =null;

              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("OPERACION_M",12, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // OPERACION_M ::= OPERACION_M div OPERACION_U 
            {
              Object RESULT =null;

              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("OPERACION_M",12, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // OPERACION_M ::= OPERACION_M mod OPERACION_U 
            {
              Object RESULT =null;

              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("OPERACION_M",12, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // OPERACION_M ::= OPERACION_U 
            {
              Object RESULT =null;

              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("OPERACION_M",12, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // OPERACION_U ::= menos OPERACION_U 
            {
              Object RESULT =null;

              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("OPERACION_U",13, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // OPERACION_U ::= mas OPERACION_U 
            {
              Object RESULT =null;

              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("OPERACION_U",13, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // OPERACION_U ::= ATOM 
            {
              Object RESULT =null;

              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("OPERACION_U",13, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // ATOM ::= id 
            {
              Object RESULT =null;

              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("ATOM",14, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // ATOM ::= entero 
            {
              Object RESULT =null;

              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("ATOM",14, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // ATOM ::= decimal 
            {
              Object RESULT =null;

              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("ATOM",14, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // ATOM ::= character 
            {
              Object RESULT =null;

              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("ATOM",14, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // ATOM ::= id cora OPERACION_A corc CORCHETES 
            {
              Object RESULT =null;

              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("ATOM",14, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-4)), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // ATOM ::= para OPERACION_A parc 
            {
              Object RESULT =null;

              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("ATOM",14, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // MAIN ::= voidd mainn para parc llavea STATEMENTS llavec 
            {
              Object RESULT =null;

              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("MAIN",15, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-6)), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // STATEMENTS ::= STATEMENTS STATEMENT 
            {
              Object RESULT =null;

              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("STATEMENTS",16, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // STATEMENTS ::= 
            {
              Object RESULT =null;

              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("STATEMENTS",16, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // STATEMENT ::= COMPOUND 
            {
              Object RESULT =null;

              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("STATEMENT",17, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // STATEMENT ::= STATEMENTLINE 
            {
              Object RESULT =null;

              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("STATEMENT",17, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // COMPOUND ::= WHILE 
            {
              Object RESULT =null;

              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("COMPOUND",18, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // COMPOUND ::= DO_WHILE 
            {
              Object RESULT =null;

              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("COMPOUND",18, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // COMPOUND ::= FOR 
            {
              Object RESULT =null;

              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("COMPOUND",18, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // COMPOUND ::= IF_ELSE 
            {
              Object RESULT =null;

              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("COMPOUND",18, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // COMPOUND ::= SWITCH 
            {
              Object RESULT =null;

              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("COMPOUND",18, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // STATEMENTLINE ::= clrs puntocoma 
            {
              Object RESULT =null;

              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("STATEMENTLINE",19, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // STATEMENTLINE ::= ASIG_VAR 
            {
              Object RESULT =null;

              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("STATEMENTLINE",19, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // STATEMENTLINE ::= DEF_VAR 
            {
              Object RESULT =null;

              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("STATEMENTLINE",19, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // STATEMENTLINE ::= PRINTF 
            {
              Object RESULT =null;

              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("STATEMENTLINE",19, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // STATEMENTLINE ::= SCANF 
            {
              Object RESULT =null;

              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("STATEMENTLINE",19, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // STATEMENTLINE ::= LLAMADA_METODO puntocoma 
            {
              Object RESULT =null;

              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("STATEMENTLINE",19, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // STATEMENTLINE ::= getch 
            {
              Object RESULT =null;

              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("STATEMENTLINE",19, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // STATEMENTLINE ::= CLASS 
            {
              Object RESULT =null;

              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("STATEMENTLINE",19, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // DEF_VAR ::= id igual EXPR puntocoma 
            {
              Object RESULT =null;

              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("DEF_VAR",20, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // DEF_VAR ::= id cora EXPR corc CORCHETES igual EXPR puntocoma 
            {
              Object RESULT =null;

              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("DEF_VAR",20, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-7)), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // PRINTF ::= printf para STRING VARS parc puntocoma 
            {
              Object RESULT =null;

              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("PRINTF",21, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-5)), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // STRING ::= comilla STR comilla 
            {
              Object RESULT =null;

              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("STRING",22, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // STR ::= STR txt 
            {
              Object RESULT =null;

              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("STR",23, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // STR ::= STR MASCARA 
            {
              Object RESULT =null;

              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("STR",23, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // STR ::= txt 
            {
              Object RESULT =null;

              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("STR",23, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // STR ::= MASCARA 
            {
              Object RESULT =null;

              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("STR",23, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // MASCARA ::= intpor 
            {
              Object RESULT =null;

              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("MASCARA",24, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // MASCARA ::= floatpor 
            {
              Object RESULT =null;

              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("MASCARA",24, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // MASCARA ::= charpor 
            {
              Object RESULT =null;

              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("MASCARA",24, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // VARS ::= VARS coma OPERACION_A 
            {
              Object RESULT =null;

              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("VARS",25, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // VARS ::= 
            {
              Object RESULT =null;

              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("VARS",25, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // SCANF ::= scanf para STRING VARSS parc puntocoma 
            {
              Object RESULT =null;

              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("SCANF",26, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-5)), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // VARSS ::= VARS coma asig id 
            {
              Object RESULT =null;

              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("VARSS",27, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // VARSS ::= 
            {
              Object RESULT =null;

              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("VARSS",27, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // IF_ELSE ::= iff para CONDICION parc llavea STATEMENTS llavec ELSE_IF ELSE 
            {
              Object RESULT =null;

              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("IF_ELSE",28, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-8)), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // ELSE_IF ::= ELSE_IF elsee iff para CONDICION parc llavea STATEMENTS llavec 
            {
              Object RESULT =null;

              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("ELSE_IF",29, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-8)), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // ELSE_IF ::= 
            {
              Object RESULT =null;

              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("ELSE_IF",29, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // ELSE ::= elsee llavea STATEMENTS llavec 
            {
              Object RESULT =null;

              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("ELSE",30, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // ELSE ::= 
            {
              Object RESULT =null;

              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("ELSE",30, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // SWITCH ::= switchh para EXPR parc llavea CASES DEFAULT llavec 
            {
              Object RESULT =null;

              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("SWITCH",31, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-7)), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // CASES ::= CASES CASE 
            {
              Object RESULT =null;

              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("CASES",32, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // CASES ::= 
            {
              Object RESULT =null;

              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("CASES",32, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // CASE ::= casee OPERACION_A dosp STATEMENTS 
            {
              Object RESULT =null;

              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("CASE",33, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // DEFAULT ::= defaultt dosp STATEMENTS 
            {
              Object RESULT =null;

              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("DEFAULT",34, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // DEFAULT ::= 
            {
              Object RESULT =null;

              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("DEFAULT",34, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // WHILE ::= whilee para CONDICION parc llavea STATEMENTS llavec 
            {
              Object RESULT =null;

              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("WHILE",35, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-6)), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // DO_WHILE ::= doo llavea STATEMENTS llavec whilee para CONDICION parc 
            {
              Object RESULT =null;

              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("DO_WHILE",36, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-7)), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // FOR ::= forr para INICIO puntocoma CONDICION puntocoma STEP parc llavea STATEMENTS llavec 
            {
              Object RESULT =null;

              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("FOR",37, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-10)), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // INICIO ::= id 
            {
              Object RESULT =null;

              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("INICIO",38, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // INICIO ::= TYPE DEF_VAR 
            {
              Object RESULT =null;

              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("INICIO",38, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // STEP ::= DEF_VAR 
            {
              Object RESULT =null;

              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("STEP",39, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // STEP ::= OP_VAR 
            {
              Object RESULT =null;

              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("STEP",39, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // OP_VAR ::= id masmas 
            {
              Object RESULT =null;

              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("OP_VAR",40, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // OP_VAR ::= id menosmenos 
            {
              Object RESULT =null;

              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("OP_VAR",40, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // CONDICION ::= CONDICION orr AND 
            {
              Object RESULT =null;

              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("CONDICION",41, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // CONDICION ::= AND 
            {
              Object RESULT =null;

              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("CONDICION",41, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // AND ::= AND andd NOT 
            {
              Object RESULT =null;

              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("AND",42, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // AND ::= NOT 
            {
              Object RESULT =null;

              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("AND",42, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // NOT ::= nott NOT 
            {
              Object RESULT =null;

              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("NOT",43, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // NOT ::= COMPARACION 
            {
              Object RESULT =null;

              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("NOT",43, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // COMPARACION ::= OPERACION_A igig OPERACION_A 
            {
              Object RESULT =null;

              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("COMPARACION",44, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // COMPARACION ::= OPERACION_A noigual OPERACION_A 
            {
              Object RESULT =null;

              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("COMPARACION",44, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // COMPARACION ::= OPERACION_A menor OPERACION_A 
            {
              Object RESULT =null;

              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("COMPARACION",44, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // COMPARACION ::= OPERACION_A menorig OPERACION_A 
            {
              Object RESULT =null;

              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("COMPARACION",44, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // COMPARACION ::= OPERACION_A mayor OPERACION_A 
            {
              Object RESULT =null;

              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("COMPARACION",44, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // COMPARACION ::= OPERACION_A mayorig OPERACION_A 
            {
              Object RESULT =null;

              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("COMPARACION",44, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // COMPARACION ::= para CONDICION parc 
            {
              Object RESULT =null;

              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("COMPARACION",44, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // LLAMADA_METODO ::= py punto id para LIST_PARAM parc 
            {
              Object RESULT =null;

              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("LLAMADA_METODO",45, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-5)), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // LLAMADA_METODO ::= vb punto id para LIST_PARAM parc 
            {
              Object RESULT =null;

              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("LLAMADA_METODO",45, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-5)), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // LLAMADA_METODO ::= java punto id punto id para LIST_PARAM parc 
            {
              Object RESULT =null;

              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("LLAMADA_METODO",45, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-7)), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // EXPR ::= LLAMADA_METODO 
            {
              Object RESULT =null;

              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("EXPR",46, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // EXPR ::= OPERACION_A 
            {
              Object RESULT =null;

              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("EXPR",46, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // EXPR ::= getch 
            {
              Object RESULT =null;

              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("EXPR",46, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // CLASS ::= java punto id LIST_CLASS puntocoma 
            {
              Object RESULT =null;

              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("CLASS",47, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-4)), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // LIST_CLASS ::= LIST_CLASS coma id PARAM 
            {
              Object RESULT =null;

              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("LIST_CLASS",48, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // LIST_CLASS ::= id PARAM 
            {
              Object RESULT =null;

              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("LIST_CLASS",48, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // PARAM ::= para LIST_PARAM parc 
            {
              Object RESULT =null;

              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("PARAM",49, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // PARAM ::= 
            {
              Object RESULT =null;

              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("PARAM",49, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // LIST_PARAM ::= LIST 
            {
              Object RESULT =null;

              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("LIST_PARAM",50, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // LIST_PARAM ::= 
            {
              Object RESULT =null;

              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("LIST_PARAM",50, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // LIST ::= LIST_PARAM coma OPERACION_A 
            {
              Object RESULT =null;

              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("LIST",51, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // LIST ::= OPERACION_A 
            {
              Object RESULT =null;

              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("LIST",51, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$SintaxisPrograma$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$SintaxisPrograma$do_action(
    int                        CUP$SintaxisPrograma$act_num,
    java_cup.runtime.lr_parser CUP$SintaxisPrograma$parser,
    java.util.Stack            CUP$SintaxisPrograma$stack,
    int                        CUP$SintaxisPrograma$top)
    throws java.lang.Exception
    {
              return CUP$SintaxisPrograma$do_action_part00000000(
                               CUP$SintaxisPrograma$act_num,
                               CUP$SintaxisPrograma$parser,
                               CUP$SintaxisPrograma$stack,
                               CUP$SintaxisPrograma$top);
    }
}

}
