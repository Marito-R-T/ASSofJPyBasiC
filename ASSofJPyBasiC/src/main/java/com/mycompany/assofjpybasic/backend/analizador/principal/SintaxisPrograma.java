
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package com.mycompany.assofjpybasic.backend.analizador.principal;

import java_cup.runtime.*;
import com.mycompany.assofjpybasic.backend.semantica.programa.*;
import java.util.ArrayList;
import java.util.List;
import com.mycompany.assofjpybasic.backend.semantica.programa.cod3.*;
import com.mycompany.assofjpybasic.backend.semantica.python.*;
import com.mycompany.assofjpybasic.backend.semantica.java.*;
import com.mycompany.assofjpybasic.backend.semantica.visual.*;
import com.mycompany.assofjpybasic.backend.error.Errores;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class SintaxisPrograma extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return SintaxisProgramaSym.class;
}

  /** Default constructor. */
  @Deprecated
  public SintaxisPrograma() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public SintaxisPrograma(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public SintaxisPrograma(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\225\000\002\002\004\000\002\066\005\000\002\002" +
    "\004\000\002\002\002\000\002\003\003\000\002\003\003" +
    "\000\002\003\005\000\002\003\004\000\002\003\004\000" +
    "\002\031\003\000\002\031\003\000\002\004\011\000\002" +
    "\004\004\000\002\004\002\000\002\004\003\000\002\006" +
    "\003\000\002\006\003\000\002\006\003\000\002\010\005" +
    "\000\002\010\006\000\002\025\006\000\002\025\005\000" +
    "\002\024\006\000\002\024\005\000\002\007\006\000\002" +
    "\007\004\000\002\012\004\000\002\012\002\000\002\013" +
    "\005\000\002\013\005\000\002\013\003\000\002\013\004" +
    "\000\002\014\005\000\002\014\005\000\002\014\005\000" +
    "\002\014\003\000\002\015\004\000\002\015\004\000\002" +
    "\015\003\000\002\016\003\000\002\016\003\000\002\016" +
    "\003\000\002\016\003\000\002\016\004\000\002\016\005" +
    "\000\002\005\011\000\002\042\004\000\002\042\002\000" +
    "\002\043\003\000\002\043\003\000\002\043\003\000\002" +
    "\044\003\000\002\044\003\000\002\044\003\000\002\044" +
    "\003\000\002\044\003\000\002\041\004\000\002\041\003" +
    "\000\002\041\004\000\002\041\003\000\002\041\003\000" +
    "\002\041\004\000\002\041\004\000\002\041\003\000\002" +
    "\040\005\000\002\040\006\000\002\036\012\000\002\063" +
    "\004\000\002\063\002\000\002\062\005\000\002\062\002" +
    "\000\002\037\012\000\002\061\006\000\002\061\002\000" +
    "\002\070\002\000\002\051\014\000\002\071\002\000\002" +
    "\064\014\000\002\064\002\000\002\072\002\000\002\052" +
    "\007\000\002\052\002\000\002\045\012\000\002\073\002" +
    "\000\002\065\010\000\002\065\002\000\002\056\004\000" +
    "\002\056\004\000\002\056\002\000\002\074\002\000\002" +
    "\057\006\000\002\057\002\000\002\075\002\000\002\053" +
    "\012\000\002\076\002\000\002\054\014\000\002\077\002" +
    "\000\002\055\016\000\002\050\003\000\002\050\003\000" +
    "\002\050\006\000\002\047\003\000\002\047\003\000\002" +
    "\046\004\000\002\046\004\000\002\035\005\000\002\035" +
    "\003\000\002\034\005\000\002\034\003\000\002\033\004" +
    "\000\002\033\003\000\002\033\005\000\002\032\005\000" +
    "\002\032\005\000\002\032\005\000\002\032\005\000\002" +
    "\032\005\000\002\032\005\000\002\017\010\000\002\017" +
    "\010\000\002\017\012\000\002\011\003\000\002\011\003" +
    "\000\002\011\003\000\002\060\007\000\002\067\006\000" +
    "\002\067\004\000\002\030\005\000\002\030\002\000\002" +
    "\026\003\000\002\026\002\000\002\027\005\000\002\027" +
    "\003\000\002\020\005\000\002\020\005\000\002\020\003" +
    "\000\002\020\004\000\002\021\005\000\002\021\005\000" +
    "\002\021\005\000\002\021\003\000\002\022\004\000\002" +
    "\022\004\000\002\022\003\000\002\023\003\000\002\023" +
    "\003\000\002\023\003\000\002\023\003\000\002\023\005" +
    "" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u013a\000\026\003\ufffe\004\ufffe\006\ufffe\007\ufffe\010" +
    "\ufffe\011\ufffe\027\ufffe\064\ufffe\065\ufffe\066\ufffe\001\002" +
    "\000\026\003\011\004\ufff4\006\ufff4\007\ufff4\010\ufff4\011" +
    "\ufff4\027\015\064\012\065\010\066\013\001\002\000\004" +
    "\002\006\001\002\000\004\002\001\001\002\000\014\004" +
    "\034\006\025\007\032\010\031\011\030\001\002\000\026" +
    "\003\ufffd\004\ufffd\006\ufffd\007\ufffd\010\ufffd\011\ufffd\027" +
    "\ufffd\064\ufffd\065\ufffd\066\ufffd\001\002\000\026\003\023" +
    "\004\ufff3\006\ufff3\007\ufff3\010\ufff3\011\ufff3\027\015\064" +
    "\012\065\010\066\013\001\002\000\006\040\017\070\021" +
    "\001\002\000\026\003\ufffc\004\ufffc\006\ufffc\007\ufffc\010" +
    "\ufffc\011\ufffc\027\ufffc\064\ufffc\065\ufffc\066\ufffc\001\002" +
    "\000\026\003\uffff\004\uffff\006\uffff\007\uffff\010\uffff\011" +
    "\uffff\027\uffff\064\uffff\065\uffff\066\uffff\001\002\000\004" +
    "\067\016\001\002\000\026\003\ufffa\004\ufffa\006\ufffa\007" +
    "\ufffa\010\ufffa\011\ufffa\027\ufffa\064\ufffa\065\ufffa\066\ufffa" +
    "\001\002\000\004\074\ufff8\001\002\000\004\074\022\001" +
    "\002\000\004\074\ufff7\001\002\000\026\003\ufffb\004\ufffb" +
    "\006\ufffb\007\ufffb\010\ufffb\011\ufffb\027\ufffb\064\ufffb\065" +
    "\ufffb\066\ufffb\001\002\000\014\003\023\027\015\064\012" +
    "\065\010\066\013\001\002\000\026\003\ufff9\004\ufff9\006" +
    "\ufff9\007\ufff9\010\ufff9\011\ufff9\027\ufff9\064\ufff9\065\ufff9" +
    "\066\ufff9\001\002\000\010\007\032\010\031\011\030\001" +
    "\002\000\014\004\ufff5\006\ufff5\007\ufff5\010\ufff5\011\ufff5" +
    "\001\002\000\004\002\000\001\002\000\004\070\ufff0\001" +
    "\002\000\004\070\ufff1\001\002\000\004\070\ufff2\001\002" +
    "\000\004\070\u010e\001\002\000\004\005\035\001\002\000" +
    "\004\043\036\001\002\000\004\044\037\001\002\000\004" +
    "\045\040\001\002\000\046\003\063\007\032\010\031\011" +
    "\030\016\062\020\075\021\045\023\054\026\065\046\uffd2" +
    "\055\074\056\061\057\071\060\047\070\060\075\056\076" +
    "\055\077\041\001\002\000\004\054\u0101\001\002\000\054" +
    "\003\uffc2\007\uffc2\010\uffc2\011\uffc2\016\uffc2\020\uffc2\021" +
    "\uffc2\022\uffc2\023\uffc2\024\uffc2\025\uffc2\026\uffc2\046\uffc2" +
    "\055\uffc2\056\uffc2\057\uffc2\060\uffc2\070\uffc2\075\uffc2\076" +
    "\uffc2\077\uffc2\001\002\000\004\052\u0100\001\002\000\054" +
    "\003\uffce\007\uffce\010\uffce\011\uffce\016\uffce\020\uffce\021" +
    "\uffce\022\uffce\023\uffce\024\uffce\025\uffce\026\uffce\046\uffce" +
    "\055\uffce\056\uffce\057\uffce\060\uffce\070\uffce\075\uffce\076" +
    "\uffce\077\uffce\001\002\000\004\043\354\001\002\000\054" +
    "\003\uffc5\007\uffc5\010\uffc5\011\uffc5\016\uffc5\020\uffc5\021" +
    "\uffc5\022\uffc5\023\uffc5\024\uffc5\025\uffc5\026\uffc5\046\uffc5" +
    "\055\uffc5\056\uffc5\057\uffc5\060\uffc5\070\uffc5\075\uffc5\076" +
    "\uffc5\077\uffc5\001\002\000\004\052\353\001\002\000\054" +
    "\003\uffca\007\uffca\010\uffca\011\uffca\016\uffca\020\uffca\021" +
    "\uffca\022\uffca\023\uffca\024\uffca\025\uffca\026\uffca\046\uffca" +
    "\055\uffca\056\uffca\057\uffca\060\uffca\070\uffca\075\uffca\076" +
    "\uffca\077\uffca\001\002\000\054\003\uffc6\007\uffc6\010\uffc6" +
    "\011\uffc6\016\uffc6\020\uffc6\021\uffc6\022\uffc6\023\uffc6\024" +
    "\uffc6\025\uffc6\026\uffc6\046\uffc6\055\uffc6\056\uffc6\057\uffc6" +
    "\060\uffc6\070\uffc6\075\uffc6\076\uffc6\077\uffc6\001\002\000" +
    "\054\003\uffcb\007\uffcb\010\uffcb\011\uffcb\016\uffcb\020\uffcb" +
    "\021\uffcb\022\uffcb\023\uffcb\024\uffcb\025\uffcb\026\uffcb\046" +
    "\uffcb\055\uffcb\056\uffcb\057\uffcb\060\uffcb\070\uffcb\075\uffcb" +
    "\076\uffcb\077\uffcb\001\002\000\004\046\352\001\002\000" +
    "\004\043\343\001\002\000\004\054\336\001\002\000\004" +
    "\054\331\001\002\000\054\003\uffcd\007\uffcd\010\uffcd\011" +
    "\uffcd\016\uffcd\020\uffcd\021\uffcd\022\uffcd\023\uffcd\024\uffcd" +
    "\025\uffcd\026\uffcd\046\uffcd\055\uffcd\056\uffcd\057\uffcd\060" +
    "\uffcd\070\uffcd\075\uffcd\076\uffcd\077\uffcd\001\002\000\006" +
    "\047\136\061\167\001\002\000\004\043\317\001\002\000" +
    "\004\043\271\001\002\000\054\003\uffcf\007\uffcf\010\uffcf" +
    "\011\uffcf\016\uffcf\020\uffcf\021\uffcf\022\uffcf\023\uffcf\024" +
    "\uffcf\025\uffcf\026\uffcf\046\uffcf\055\uffcf\056\uffcf\057\uffcf" +
    "\060\uffcf\070\uffcf\075\uffcf\076\uffcf\077\uffcf\001\002\000" +
    "\004\052\270\001\002\000\004\045\257\001\002\000\054" +
    "\003\uffd0\007\uffd0\010\uffd0\011\uffd0\016\uffd0\020\uffd0\021" +
    "\uffd0\022\uffd0\023\uffd0\024\uffd0\025\uffd0\026\uffd0\046\uffd0" +
    "\055\uffd0\056\uffd0\057\uffd0\060\uffd0\070\uffd0\075\uffd0\076" +
    "\uffd0\077\uffd0\001\002\000\054\003\uffc8\007\uffc8\010\uffc8" +
    "\011\uffc8\016\uffc8\020\uffc8\021\uffc8\022\uffc8\023\uffc8\024" +
    "\uffc8\025\uffc8\026\uffc8\046\uffc8\055\uffc8\056\uffc8\057\uffc8" +
    "\060\uffc8\070\uffc8\075\uffc8\076\uffc8\077\uffc8\001\002\000" +
    "\046\003\063\007\032\010\031\011\030\016\062\020\075" +
    "\021\045\023\054\026\065\046\uffd2\055\074\056\061\057" +
    "\071\060\047\070\060\075\056\076\055\077\041\001\002" +
    "\000\004\052\255\001\002\000\054\003\uffcc\007\uffcc\010" +
    "\uffcc\011\uffcc\016\uffcc\020\uffcc\021\uffcc\022\uffcc\023\uffcc" +
    "\024\uffcc\025\uffcc\026\uffcc\046\uffcc\055\uffcc\056\uffcc\057" +
    "\uffcc\060\uffcc\070\uffcc\075\uffcc\076\uffcc\077\uffcc\001\002" +
    "\000\054\003\uffd1\007\uffd1\010\uffd1\011\uffd1\016\uffd1\020" +
    "\uffd1\021\uffd1\022\uffd1\023\uffd1\024\uffd1\025\uffd1\026\uffd1" +
    "\046\uffd1\055\uffd1\056\uffd1\057\uffd1\060\uffd1\070\uffd1\075" +
    "\uffd1\076\uffd1\077\uffd1\001\002\000\004\043\243\001\002" +
    "\000\004\043\076\001\002\000\012\007\032\010\031\011" +
    "\030\070\101\001\002\000\004\052\uff9f\001\002\000\004" +
    "\052\173\001\002\000\010\047\136\052\uff9e\061\167\001" +
    "\002\000\004\070\103\001\002\000\004\061\104\001\002" +
    "\000\032\003\121\036\124\037\116\043\106\060\112\070" +
    "\120\071\123\072\110\073\105\075\056\076\055\077\107" +
    "\001\002\000\046\013\uffd7\014\uffd7\030\uffd7\031\uffd7\032" +
    "\uffd7\033\uffd7\034\uffd7\035\uffd7\036\uffd7\037\uffd7\040\uffd7" +
    "\041\uffd7\042\uffd7\044\uffd7\050\uffd7\051\uffd7\052\uffd7\053" +
    "\uffd7\001\002\000\022\003\121\036\124\037\116\043\106" +
    "\070\120\071\123\072\110\073\105\001\002\000\004\054" +
    "\151\001\002\000\046\013\uffd8\014\uffd8\030\uffd8\031\uffd8" +
    "\032\uffd8\033\uffd8\034\uffd8\035\uffd8\036\uffd8\037\uffd8\040" +
    "\uffd8\041\uffd8\042\uffd8\044\uffd8\050\uffd8\051\uffd8\052\uffd8" +
    "\053\uffd8\001\002\000\046\013\uffde\014\uffde\030\uffde\031" +
    "\uffde\032\uffde\033\uffde\034\uffde\035\uffde\036\uffde\037\uffde" +
    "\040\uffde\041\uffde\042\uffde\044\uffde\050\uffde\051\uffde\052" +
    "\uffde\053\uffde\001\002\000\010\044\uff86\051\uff86\052\uff86" +
    "\001\002\000\046\013\uffe3\014\uffe3\030\uffe3\031\uffe3\032" +
    "\uffe3\033\uffe3\034\uffe3\035\uffe3\036\uffe3\037\uffe3\040\127" +
    "\041\131\042\130\044\uffe3\050\uffe3\051\uffe3\052\uffe3\053" +
    "\uffe3\001\002\000\046\013\uffdb\014\uffdb\030\uffdb\031\uffdb" +
    "\032\uffdb\033\uffdb\034\uffdb\035\uffdb\036\uffdb\037\uffdb\040" +
    "\uffdb\041\uffdb\042\uffdb\044\uffdb\050\uffdb\051\uffdb\052\uffdb" +
    "\053\uffdb\001\002\000\004\052\uff9d\001\002\000\020\036" +
    "\124\037\116\043\106\070\120\071\123\072\110\073\105" +
    "\001\002\000\014\036\141\037\142\044\uff87\051\uff87\052" +
    "\uff87\001\002\000\050\013\uffda\014\uffda\030\uffda\031\uffda" +
    "\032\uffda\033\uffda\034\uffda\035\uffda\036\uffda\037\uffda\040" +
    "\uffda\041\uffda\042\uffda\044\uffda\047\136\050\uffda\051\uffda" +
    "\052\uffda\053\uffda\001\002\000\020\036\124\037\116\043" +
    "\106\070\120\071\123\072\110\073\105\001\002\000\010" +
    "\044\uff88\051\uff88\052\uff88\001\002\000\046\013\uffd9\014" +
    "\uffd9\030\uffd9\031\uffd9\032\uffd9\033\uffd9\034\uffd9\035\uffd9" +
    "\036\uffd9\037\uffd9\040\uffd9\041\uffd9\042\uffd9\044\uffd9\050" +
    "\uffd9\051\uffd9\052\uffd9\053\uffd9\001\002\000\020\036\124" +
    "\037\116\043\106\070\120\071\123\072\110\073\105\001" +
    "\002\000\046\013\uffdc\014\uffdc\030\uffdc\031\uffdc\032\uffdc" +
    "\033\uffdc\034\uffdc\035\uffdc\036\uffdc\037\uffdc\040\uffdc\041" +
    "\uffdc\042\uffdc\044\uffdc\050\uffdc\051\uffdc\052\uffdc\053\uffdc" +
    "\001\002\000\046\013\uffe2\014\uffe2\030\uffe2\031\uffe2\032" +
    "\uffe2\033\uffe2\034\uffe2\035\uffe2\036\uffe2\037\uffe2\040\127" +
    "\041\131\042\130\044\uffe2\050\uffe2\051\uffe2\052\uffe2\053" +
    "\uffe2\001\002\000\020\036\124\037\116\043\106\070\120" +
    "\071\123\072\110\073\105\001\002\000\020\036\124\037" +
    "\116\043\106\070\120\071\123\072\110\073\105\001\002" +
    "\000\020\036\124\037\116\043\106\070\120\071\123\072" +
    "\110\073\105\001\002\000\046\013\uffe0\014\uffe0\030\uffe0" +
    "\031\uffe0\032\uffe0\033\uffe0\034\uffe0\035\uffe0\036\uffe0\037" +
    "\uffe0\040\uffe0\041\uffe0\042\uffe0\044\uffe0\050\uffe0\051\uffe0" +
    "\052\uffe0\053\uffe0\001\002\000\046\013\uffdf\014\uffdf\030" +
    "\uffdf\031\uffdf\032\uffdf\033\uffdf\034\uffdf\035\uffdf\036\uffdf" +
    "\037\uffdf\040\uffdf\041\uffdf\042\uffdf\044\uffdf\050\uffdf\051" +
    "\uffdf\052\uffdf\053\uffdf\001\002\000\046\013\uffe1\014\uffe1" +
    "\030\uffe1\031\uffe1\032\uffe1\033\uffe1\034\uffe1\035\uffe1\036" +
    "\uffe1\037\uffe1\040\uffe1\041\uffe1\042\uffe1\044\uffe1\050\uffe1" +
    "\051\uffe1\052\uffe1\053\uffe1\001\002\000\050\013\uffd6\014" +
    "\uffd6\030\uffd6\031\uffd6\032\uffd6\033\uffd6\034\uffd6\035\uffd6" +
    "\036\uffd6\037\uffd6\040\uffd6\041\uffd6\042\uffd6\044\uffd6\047" +
    "\145\050\uffd6\051\uffd6\052\uffd6\053\uffd6\001\002\000\022" +
    "\003\121\036\124\037\116\043\106\070\120\071\123\072" +
    "\110\073\105\001\002\000\010\036\141\037\142\050\140" +
    "\001\002\000\052\013\uffea\014\uffea\030\uffea\031\uffea\032" +
    "\uffea\033\uffea\034\uffea\035\uffea\036\uffea\037\uffea\040\uffea" +
    "\041\uffea\042\uffea\044\uffea\047\uffea\050\uffea\051\uffea\052" +
    "\uffea\053\uffea\061\uffea\001\002\000\020\036\124\037\116" +
    "\043\106\070\120\071\123\072\110\073\105\001\002\000" +
    "\020\036\124\037\116\043\106\070\120\071\123\072\110" +
    "\073\105\001\002\000\046\013\uffe4\014\uffe4\030\uffe4\031" +
    "\uffe4\032\uffe4\033\uffe4\034\uffe4\035\uffe4\036\uffe4\037\uffe4" +
    "\040\127\041\131\042\130\044\uffe4\050\uffe4\051\uffe4\052" +
    "\uffe4\053\uffe4\001\002\000\046\013\uffe5\014\uffe5\030\uffe5" +
    "\031\uffe5\032\uffe5\033\uffe5\034\uffe5\035\uffe5\036\uffe5\037" +
    "\uffe5\040\127\041\131\042\130\044\uffe5\050\uffe5\051\uffe5" +
    "\052\uffe5\053\uffe5\001\002\000\022\003\121\036\124\037" +
    "\116\043\106\070\120\071\123\072\110\073\105\001\002" +
    "\000\010\036\141\037\142\050\147\001\002\000\052\013" +
    "\uffeb\014\uffeb\030\uffeb\031\uffeb\032\uffeb\033\uffeb\034\uffeb" +
    "\035\uffeb\036\uffeb\037\uffeb\040\uffeb\041\uffeb\042\uffeb\044" +
    "\uffeb\047\uffeb\050\uffeb\051\uffeb\052\uffeb\053\uffeb\061\uffeb" +
    "\001\002\000\046\013\uffdd\014\uffdd\030\uffdd\031\uffdd\032" +
    "\uffdd\033\uffdd\034\uffdd\035\uffdd\036\uffdd\037\uffdd\040\uffdd" +
    "\041\uffdd\042\uffdd\044\uffdd\050\uffdd\051\uffdd\052\uffdd\053" +
    "\uffdd\001\002\000\004\070\152\001\002\000\004\054\153" +
    "\001\002\000\004\070\154\001\002\000\004\043\155\001" +
    "\002\000\024\003\121\036\124\037\116\043\106\044\uff7f" +
    "\070\120\071\123\072\110\073\105\001\002\000\012\036" +
    "\141\037\142\044\uff7d\051\uff7d\001\002\000\004\044\163" +
    "\001\002\000\006\044\uff80\051\161\001\002\000\022\003" +
    "\121\036\124\037\116\043\106\070\120\071\123\072\110" +
    "\073\105\001\002\000\012\036\141\037\142\044\uff7e\051" +
    "\uff7e\001\002\000\010\044\uff89\051\uff89\052\uff89\001\002" +
    "\000\010\036\141\037\142\044\165\001\002\000\046\013" +
    "\uffd5\014\uffd5\030\uffd5\031\uffd5\032\uffd5\033\uffd5\034\uffd5" +
    "\035\uffd5\036\uffd5\037\uffd5\040\uffd5\041\uffd5\042\uffd5\044" +
    "\uffd5\050\uffd5\051\uffd5\052\uffd5\053\uffd5\001\002\000\006" +
    "\047\145\061\171\001\002\000\032\003\121\036\124\037" +
    "\116\043\106\060\112\070\120\071\123\072\110\073\105" +
    "\075\056\076\055\077\107\001\002\000\006\044\uffc1\052" +
    "\uffc1\001\002\000\032\003\121\036\124\037\116\043\106" +
    "\060\112\070\120\071\123\072\110\073\105\075\056\076" +
    "\055\077\107\001\002\000\006\044\uffc0\052\uffc0\001\002" +
    "\000\024\003\121\015\176\036\124\037\116\043\201\070" +
    "\120\071\123\072\110\073\105\001\002\000\012\013\uff93" +
    "\014\uff93\044\uff93\052\uff93\001\002\000\012\013\206\014" +
    "\uff97\044\uff97\052\uff97\001\002\000\024\003\121\015\176" +
    "\036\124\037\116\043\201\070\120\071\123\072\110\073" +
    "\105\001\002\000\022\030\231\031\230\032\227\033\232" +
    "\034\226\035\233\036\141\037\142\001\002\000\012\013" +
    "\uff95\014\uff95\044\uff95\052\uff95\001\002\000\024\003\121" +
    "\015\176\036\124\037\116\043\201\070\120\071\123\072" +
    "\110\073\105\001\002\000\006\014\204\052\203\001\002" +
    "\000\004\070\213\001\002\000\024\003\121\015\176\036" +
    "\124\037\116\043\201\070\120\071\123\072\110\073\105" +
    "\001\002\000\012\013\206\014\uff98\044\uff98\052\uff98\001" +
    "\002\000\024\003\121\015\176\036\124\037\116\043\201" +
    "\070\120\071\123\072\110\073\105\001\002\000\012\013" +
    "\uff96\014\uff96\044\uff96\052\uff96\001\002\000\004\044\216" +
    "\001\002\000\004\044\uff9c\001\002\000\004\044\uff9b\001" +
    "\002\000\012\047\136\061\167\062\214\063\215\001\002" +
    "\000\004\044\uff9a\001\002\000\004\044\uff99\001\002\000" +
    "\004\045\217\001\002\000\046\003\uffa1\007\uffa1\010\uffa1" +
    "\011\uffa1\016\uffa1\020\uffa1\021\uffa1\023\uffa1\026\uffa1\046" +
    "\uffa1\055\uffa1\056\uffa1\057\uffa1\060\uffa1\070\uffa1\075\uffa1" +
    "\076\uffa1\077\uffa1\001\002\000\046\003\063\007\032\010" +
    "\031\011\030\016\062\020\075\021\045\023\054\026\065" +
    "\046\uffd2\055\074\056\061\057\071\060\047\070\060\075" +
    "\056\076\055\077\041\001\002\000\004\046\222\001\002" +
    "\000\054\003\uffa0\007\uffa0\010\uffa0\011\uffa0\016\uffa0\020" +
    "\uffa0\021\uffa0\022\uffa0\023\uffa0\024\uffa0\025\uffa0\026\uffa0" +
    "\046\uffa0\055\uffa0\056\uffa0\057\uffa0\060\uffa0\070\uffa0\075" +
    "\uffa0\076\uffa0\077\uffa0\001\002\000\024\030\231\031\230" +
    "\032\227\033\232\034\226\035\233\036\141\037\142\044" +
    "\165\001\002\000\006\014\204\044\225\001\002\000\012" +
    "\013\uff92\014\uff92\044\uff92\052\uff92\001\002\000\022\003" +
    "\121\036\124\037\116\043\106\070\120\071\123\072\110" +
    "\073\105\001\002\000\022\003\121\036\124\037\116\043" +
    "\106\070\120\071\123\072\110\073\105\001\002\000\022" +
    "\003\121\036\124\037\116\043\106\070\120\071\123\072" +
    "\110\073\105\001\002\000\022\003\121\036\124\037\116" +
    "\043\106\070\120\071\123\072\110\073\105\001\002\000" +
    "\022\003\121\036\124\037\116\043\106\070\120\071\123" +
    "\072\110\073\105\001\002\000\022\003\121\036\124\037" +
    "\116\043\106\070\120\071\123\072\110\073\105\001\002" +
    "\000\016\013\uff91\014\uff91\036\141\037\142\044\uff91\052" +
    "\uff91\001\002\000\016\013\uff8d\014\uff8d\036\141\037\142" +
    "\044\uff8d\052\uff8d\001\002\000\016\013\uff90\014\uff90\036" +
    "\141\037\142\044\uff90\052\uff90\001\002\000\016\013\uff8f" +
    "\014\uff8f\036\141\037\142\044\uff8f\052\uff8f\001\002\000" +
    "\016\013\uff8e\014\uff8e\036\141\037\142\044\uff8e\052\uff8e" +
    "\001\002\000\016\013\uff8c\014\uff8c\036\141\037\142\044" +
    "\uff8c\052\uff8c\001\002\000\012\013\uff94\014\uff94\044\uff94" +
    "\052\uff94\001\002\000\004\074\244\001\002\000\006\074" +
    "\uffbd\100\uffbd\001\002\000\006\074\247\100\246\001\002" +
    "\000\006\074\uffbe\100\uffbe\001\002\000\006\044\uffbb\051" +
    "\uffbb\001\002\000\006\044\252\051\251\001\002\000\022" +
    "\003\121\036\124\037\116\043\106\070\120\071\123\072" +
    "\110\073\105\001\002\000\004\052\253\001\002\000\054" +
    "\003\uffbf\007\uffbf\010\uffbf\011\uffbf\016\uffbf\020\uffbf\021" +
    "\uffbf\022\uffbf\023\uffbf\024\uffbf\025\uffbf\026\uffbf\046\uffbf" +
    "\055\uffbf\056\uffbf\057\uffbf\060\uffbf\070\uffbf\075\uffbf\076" +
    "\uffbf\077\uffbf\001\002\000\012\036\141\037\142\044\uffbc" +
    "\051\uffbc\001\002\000\054\003\uffc9\007\uffc9\010\uffc9\011" +
    "\uffc9\016\uffc9\020\uffc9\021\uffc9\022\uffc9\023\uffc9\024\uffc9" +
    "\025\uffc9\026\uffc9\046\uffc9\055\uffc9\056\uffc9\057\uffc9\060" +
    "\uffc9\070\uffc9\075\uffc9\076\uffc9\077\uffc9\001\002\000\004" +
    "\046\uffd3\001\002\000\046\003\uffa3\007\uffa3\010\uffa3\011" +
    "\uffa3\016\uffa3\020\uffa3\021\uffa3\023\uffa3\026\uffa3\046\uffa3" +
    "\055\uffa3\056\uffa3\057\uffa3\060\uffa3\070\uffa3\075\uffa3\076" +
    "\uffa3\077\uffa3\001\002\000\046\003\063\007\032\010\031" +
    "\011\030\016\062\020\075\021\045\023\054\026\065\046" +
    "\uffd2\055\074\056\061\057\071\060\047\070\060\075\056" +
    "\076\055\077\041\001\002\000\004\046\262\001\002\000" +
    "\004\023\263\001\002\000\004\043\264\001\002\000\024" +
    "\003\121\015\176\036\124\037\116\043\201\070\120\071" +
    "\123\072\110\073\105\001\002\000\006\014\204\044\266" +
    "\001\002\000\004\052\267\001\002\000\054\003\uffa2\007" +
    "\uffa2\010\uffa2\011\uffa2\016\uffa2\020\uffa2\021\uffa2\022\uffa2" +
    "\023\uffa2\024\uffa2\025\uffa2\026\uffa2\046\uffa2\055\uffa2\056" +
    "\uffa2\057\uffa2\060\uffa2\070\uffa2\075\uffa2\076\uffa2\077\uffa2" +
    "\001\002\000\054\003\uffc4\007\uffc4\010\uffc4\011\uffc4\016" +
    "\uffc4\020\uffc4\021\uffc4\022\uffc4\023\uffc4\024\uffc4\025\uffc4" +
    "\026\uffc4\046\uffc4\055\uffc4\056\uffc4\057\uffc4\060\uffc4\070" +
    "\uffc4\075\uffc4\076\uffc4\077\uffc4\001\002\000\024\003\121" +
    "\015\176\036\124\037\116\043\201\070\120\071\123\072" +
    "\110\073\105\001\002\000\006\014\204\044\273\001\002" +
    "\000\004\045\274\001\002\000\046\003\uffb7\007\uffb7\010" +
    "\uffb7\011\uffb7\016\uffb7\020\uffb7\021\uffb7\023\uffb7\026\uffb7" +
    "\046\uffb7\055\uffb7\056\uffb7\057\uffb7\060\uffb7\070\uffb7\075" +
    "\uffb7\076\uffb7\077\uffb7\001\002\000\046\003\063\007\032" +
    "\010\031\011\030\016\062\020\075\021\045\023\054\026" +
    "\065\046\uffd2\055\074\056\061\057\071\060\047\070\060" +
    "\075\056\076\055\077\041\001\002\000\004\046\277\001" +
    "\002\000\056\003\uffb3\007\uffb3\010\uffb3\011\uffb3\016\uffb3" +
    "\017\uffb3\020\uffb3\021\uffb3\022\uffb3\023\uffb3\024\uffb3\025" +
    "\uffb3\026\uffb3\046\uffb3\055\uffb3\056\uffb3\057\uffb3\060\uffb3" +
    "\070\uffb3\075\uffb3\076\uffb3\077\uffb3\001\002\000\056\003" +
    "\uffb0\007\uffb0\010\uffb0\011\uffb0\016\uffb0\017\302\020\uffb0" +
    "\021\uffb0\022\uffb0\023\uffb0\024\uffb0\025\uffb0\026\uffb0\046" +
    "\uffb0\055\uffb0\056\uffb0\057\uffb0\060\uffb0\070\uffb0\075\uffb0" +
    "\076\uffb0\077\uffb0\001\002\000\054\003\uffb6\007\uffb6\010" +
    "\uffb6\011\uffb6\016\uffb6\020\uffb6\021\uffb6\022\uffb6\023\uffb6" +
    "\024\uffb6\025\uffb6\026\uffb6\046\uffb6\055\uffb6\056\uffb6\057" +
    "\uffb6\060\uffb6\070\uffb6\075\uffb6\076\uffb6\077\uffb6\001\002" +
    "\000\006\016\303\045\304\001\002\000\004\043\310\001" +
    "\002\000\046\003\uffb2\007\uffb2\010\uffb2\011\uffb2\016\uffb2" +
    "\020\uffb2\021\uffb2\023\uffb2\026\uffb2\046\uffb2\055\uffb2\056" +
    "\uffb2\057\uffb2\060\uffb2\070\uffb2\075\uffb2\076\uffb2\077\uffb2" +
    "\001\002\000\046\003\063\007\032\010\031\011\030\016" +
    "\062\020\075\021\045\023\054\026\065\046\uffd2\055\074" +
    "\056\061\057\071\060\047\070\060\075\056\076\055\077" +
    "\041\001\002\000\004\046\307\001\002\000\054\003\uffb1" +
    "\007\uffb1\010\uffb1\011\uffb1\016\uffb1\020\uffb1\021\uffb1\022" +
    "\uffb1\023\uffb1\024\uffb1\025\uffb1\026\uffb1\046\uffb1\055\uffb1" +
    "\056\uffb1\057\uffb1\060\uffb1\070\uffb1\075\uffb1\076\uffb1\077" +
    "\uffb1\001\002\000\024\003\121\015\176\036\124\037\116" +
    "\043\201\070\120\071\123\072\110\073\105\001\002\000" +
    "\006\014\204\044\312\001\002\000\004\045\313\001\002" +
    "\000\046\003\uffb5\007\uffb5\010\uffb5\011\uffb5\016\uffb5\020" +
    "\uffb5\021\uffb5\023\uffb5\026\uffb5\046\uffb5\055\uffb5\056\uffb5" +
    "\057\uffb5\060\uffb5\070\uffb5\075\uffb5\076\uffb5\077\uffb5\001" +
    "\002\000\046\003\063\007\032\010\031\011\030\016\062" +
    "\020\075\021\045\023\054\026\065\046\uffd2\055\074\056" +
    "\061\057\071\060\047\070\060\075\056\076\055\077\041" +
    "\001\002\000\004\046\316\001\002\000\056\003\uffb4\007" +
    "\uffb4\010\uffb4\011\uffb4\016\uffb4\017\uffb4\020\uffb4\021\uffb4" +
    "\022\uffb4\023\uffb4\024\uffb4\025\uffb4\026\uffb4\046\uffb4\055" +
    "\uffb4\056\uffb4\057\uffb4\060\uffb4\070\uffb4\075\uffb4\076\uffb4" +
    "\077\uffb4\001\002\000\004\074\320\001\002\000\006\074" +
    "\uffbd\100\uffbd\001\002\000\006\074\322\100\246\001\002" +
    "\000\006\044\uffb8\051\uffb8\001\002\000\006\044\325\051" +
    "\324\001\002\000\004\012\327\001\002\000\004\052\326" +
    "\001\002\000\054\003\uffba\007\uffba\010\uffba\011\uffba\016" +
    "\uffba\020\uffba\021\uffba\022\uffba\023\uffba\024\uffba\025\uffba" +
    "\026\uffba\046\uffba\055\uffba\056\uffba\057\uffba\060\uffba\070" +
    "\uffba\075\uffba\076\uffba\077\uffba\001\002\000\004\070\330" +
    "\001\002\000\006\044\uffb9\051\uffb9\001\002\000\004\070" +
    "\332\001\002\000\004\043\333\001\002\000\024\003\121" +
    "\036\124\037\116\043\106\044\uff7f\070\120\071\123\072" +
    "\110\073\105\001\002\000\004\044\335\001\002\000\010" +
    "\044\uff8b\051\uff8b\052\uff8b\001\002\000\004\070\337\001" +
    "\002\000\004\043\340\001\002\000\024\003\121\036\124" +
    "\037\116\043\106\044\uff7f\070\120\071\123\072\110\073" +
    "\105\001\002\000\004\044\342\001\002\000\010\044\uff8a" +
    "\051\uff8a\052\uff8a\001\002\000\024\003\121\015\176\036" +
    "\124\037\116\043\201\070\120\071\123\072\110\073\105" +
    "\001\002\000\006\014\204\044\345\001\002\000\004\045" +
    "\346\001\002\000\046\003\uffa5\007\uffa5\010\uffa5\011\uffa5" +
    "\016\uffa5\020\uffa5\021\uffa5\023\uffa5\026\uffa5\046\uffa5\055" +
    "\uffa5\056\uffa5\057\uffa5\060\uffa5\070\uffa5\075\uffa5\076\uffa5" +
    "\077\uffa5\001\002\000\046\003\063\007\032\010\031\011" +
    "\030\016\062\020\075\021\045\023\054\026\065\046\uffd2" +
    "\055\074\056\061\057\071\060\047\070\060\075\056\076" +
    "\055\077\041\001\002\000\004\046\351\001\002\000\054" +
    "\003\uffa4\007\uffa4\010\uffa4\011\uffa4\016\uffa4\020\uffa4\021" +
    "\uffa4\022\uffa4\023\uffa4\024\uffa4\025\uffa4\026\uffa4\046\uffa4" +
    "\055\uffa4\056\uffa4\057\uffa4\060\uffa4\070\uffa4\075\uffa4\076" +
    "\uffa4\077\uffa4\001\002\000\004\002\uffd4\001\002\000\054" +
    "\003\uffc3\007\uffc3\010\uffc3\011\uffc3\016\uffc3\020\uffc3\021" +
    "\uffc3\022\uffc3\023\uffc3\024\uffc3\025\uffc3\026\uffc3\046\uffc3" +
    "\055\uffc3\056\uffc3\057\uffc3\060\uffc3\070\uffc3\075\uffc3\076" +
    "\uffc3\077\uffc3\001\002\000\032\003\121\036\124\037\116" +
    "\043\106\060\112\070\120\071\123\072\110\073\105\075" +
    "\056\076\055\077\107\001\002\000\004\044\356\001\002" +
    "\000\004\045\357\001\002\000\010\022\uffac\024\uffac\046" +
    "\uffac\001\002\000\010\022\363\024\362\046\uffa6\001\002" +
    "\000\004\046\377\001\002\000\004\053\374\001\002\000" +
    "\022\003\121\036\124\037\116\043\106\070\120\071\123" +
    "\072\110\073\105\001\002\000\010\036\141\037\142\053" +
    "\365\001\002\000\054\003\uffae\007\uffae\010\uffae\011\uffae" +
    "\016\uffae\020\uffae\021\uffae\022\uffae\023\uffae\024\uffae\025" +
    "\uffae\026\uffae\046\uffae\055\uffae\056\uffae\057\uffae\060\uffae" +
    "\070\uffae\075\uffae\076\uffae\077\uffae\001\002\000\054\003" +
    "\063\007\032\010\031\011\030\016\062\020\075\021\045" +
    "\022\uffa9\023\054\024\uffa9\025\370\026\065\046\uffa9\055" +
    "\074\056\061\057\071\060\047\070\060\075\056\076\055" +
    "\077\041\001\002\000\010\022\uffad\024\uffad\046\uffad\001" +
    "\002\000\004\052\373\001\002\000\054\003\063\007\032" +
    "\010\031\011\030\016\062\020\075\021\045\022\uffa9\023" +
    "\054\024\uffa9\025\370\026\065\046\uffa9\055\074\056\061" +
    "\057\071\060\047\070\060\075\056\076\055\077\041\001" +
    "\002\000\010\022\uffab\024\uffab\046\uffab\001\002\000\010" +
    "\022\uffaa\024\uffaa\046\uffaa\001\002\000\050\003\uffa8\007" +
    "\uffa8\010\uffa8\011\uffa8\016\uffa8\020\uffa8\021\uffa8\023\uffa8" +
    "\025\uffa8\026\uffa8\046\uffa8\055\uffa8\056\uffa8\057\uffa8\060" +
    "\uffa8\070\uffa8\075\uffa8\076\uffa8\077\uffa8\001\002\000\050" +
    "\003\063\007\032\010\031\011\030\016\062\020\075\021" +
    "\045\023\054\025\370\026\065\046\uffa9\055\074\056\061" +
    "\057\071\060\047\070\060\075\056\076\055\077\041\001" +
    "\002\000\004\046\uffa7\001\002\000\054\003\uffaf\007\uffaf" +
    "\010\uffaf\011\uffaf\016\uffaf\020\uffaf\021\uffaf\022\uffaf\023" +
    "\uffaf\024\uffaf\025\uffaf\026\uffaf\046\uffaf\055\uffaf\056\uffaf" +
    "\057\uffaf\060\uffaf\070\uffaf\075\uffaf\076\uffaf\077\uffaf\001" +
    "\002\000\054\003\uffc7\007\uffc7\010\uffc7\011\uffc7\016\uffc7" +
    "\020\uffc7\021\uffc7\022\uffc7\023\uffc7\024\uffc7\025\uffc7\026" +
    "\uffc7\046\uffc7\055\uffc7\056\uffc7\057\uffc7\060\uffc7\070\uffc7" +
    "\075\uffc7\076\uffc7\077\uffc7\001\002\000\004\070\u0102\001" +
    "\002\000\006\054\153\070\u0104\001\002\000\006\051\u010a" +
    "\052\u0109\001\002\000\010\043\u0105\051\uff81\052\uff81\001" +
    "\002\000\024\003\121\036\124\037\116\043\106\044\uff7f" +
    "\070\120\071\123\072\110\073\105\001\002\000\006\051" +
    "\uff83\052\uff83\001\002\000\004\044\u0108\001\002\000\006" +
    "\051\uff82\052\uff82\001\002\000\054\003\uff85\007\uff85\010" +
    "\uff85\011\uff85\016\uff85\020\uff85\021\uff85\022\uff85\023\uff85" +
    "\024\uff85\025\uff85\026\uff85\046\uff85\055\uff85\056\uff85\057" +
    "\uff85\060\uff85\070\uff85\075\uff85\076\uff85\077\uff85\001\002" +
    "\000\004\070\u010b\001\002\000\010\043\u0105\051\uff81\052" +
    "\uff81\001\002\000\006\051\uff84\052\uff84\001\002\000\006" +
    "\051\u0135\052\u0134\001\002\000\012\047\u0111\051\uffe6\052" +
    "\uffe6\061\u0110\001\002\000\006\047\u0131\052\u0130\001\002" +
    "\000\032\003\121\036\124\037\116\043\106\060\112\070" +
    "\120\071\123\072\110\073\105\075\056\076\055\077\107" +
    "\001\002\000\022\003\u011a\036\u011d\037\u0115\043\u011e\070" +
    "\u0113\071\u0118\072\u0114\073\u0117\001\002\000\006\051\uffe8" +
    "\052\uffe8\001\002\000\022\036\uff71\037\uff71\040\uff71\041" +
    "\uff71\042\uff71\044\uff71\050\uff71\052\uff71\001\002\000\022" +
    "\036\uff6f\037\uff6f\040\uff6f\041\uff6f\042\uff6f\044\uff6f\050" +
    "\uff6f\052\uff6f\001\002\000\020\036\u011d\037\u0115\043\u011e" +
    "\070\u0113\071\u0118\072\u0114\073\u0117\001\002\000\022\036" +
    "\uff7a\037\uff7a\040\u0124\041\u0126\042\u0125\044\uff7a\050\uff7a" +
    "\052\uff7a\001\002\000\022\036\uff6e\037\uff6e\040\uff6e\041" +
    "\uff6e\042\uff6e\044\uff6e\050\uff6e\052\uff6e\001\002\000\022" +
    "\036\uff70\037\uff70\040\uff70\041\uff70\042\uff70\044\uff70\050" +
    "\uff70\052\uff70\001\002\000\010\036\u0120\037\u0121\050\u012d" +
    "\001\002\000\020\036\u011d\037\u0115\043\u011e\070\u0113\071" +
    "\u0118\072\u0114\073\u0117\001\002\000\022\036\uff75\037\uff75" +
    "\040\uff75\041\uff75\042\uff75\044\uff75\050\uff75\052\uff75\001" +
    "\002\000\022\036\uff72\037\uff72\040\uff72\041\uff72\042\uff72" +
    "\044\uff72\050\uff72\052\uff72\001\002\000\020\036\u011d\037" +
    "\u0115\043\u011e\070\u0113\071\u0118\072\u0114\073\u0117\001\002" +
    "\000\022\003\u011a\036\u011d\037\u0115\043\u011e\070\u0113\071" +
    "\u0118\072\u0114\073\u0117\001\002\000\010\036\u0120\037\u0121" +
    "\044\u0122\001\002\000\020\036\u011d\037\u0115\043\u011e\070" +
    "\u0113\071\u0118\072\u0114\073\u0117\001\002\000\020\036\u011d" +
    "\037\u0115\043\u011e\070\u0113\071\u0118\072\u0114\073\u0117\001" +
    "\002\000\022\036\uff6d\037\uff6d\040\uff6d\041\uff6d\042\uff6d" +
    "\044\uff6d\050\uff6d\052\uff6d\001\002\000\022\036\uff7b\037" +
    "\uff7b\040\u0124\041\u0126\042\u0125\044\uff7b\050\uff7b\052\uff7b" +
    "\001\002\000\020\036\u011d\037\u0115\043\u011e\070\u0113\071" +
    "\u0118\072\u0114\073\u0117\001\002\000\020\036\u011d\037\u0115" +
    "\043\u011e\070\u0113\071\u0118\072\u0114\073\u0117\001\002\000" +
    "\020\036\u011d\037\u0115\043\u011e\070\u0113\071\u0118\072\u0114" +
    "\073\u0117\001\002\000\022\036\uff77\037\uff77\040\uff77\041" +
    "\uff77\042\uff77\044\uff77\050\uff77\052\uff77\001\002\000\022" +
    "\036\uff76\037\uff76\040\uff76\041\uff76\042\uff76\044\uff76\050" +
    "\uff76\052\uff76\001\002\000\022\036\uff78\037\uff78\040\uff78" +
    "\041\uff78\042\uff78\044\uff78\050\uff78\052\uff78\001\002\000" +
    "\022\036\uff7c\037\uff7c\040\u0124\041\u0126\042\u0125\044\uff7c" +
    "\050\uff7c\052\uff7c\001\002\000\022\036\uff73\037\uff73\040" +
    "\uff73\041\uff73\042\uff73\044\uff73\050\uff73\052\uff73\001\002" +
    "\000\022\036\uff79\037\uff79\040\u0124\041\u0126\042\u0125\044" +
    "\uff79\050\uff79\052\uff79\001\002\000\006\047\uffec\052\uffec" +
    "\001\002\000\022\036\uff74\037\uff74\040\uff74\041\uff74\042" +
    "\uff74\044\uff74\050\uff74\052\uff74\001\002\000\006\051\uffe7" +
    "\052\uffe7\001\002\000\060\003\uffee\004\uffee\006\uffee\007" +
    "\uffee\010\uffee\011\uffee\016\uffee\020\uffee\021\uffee\022\uffee" +
    "\023\uffee\024\uffee\025\uffee\026\uffee\046\uffee\055\uffee\056" +
    "\uffee\057\uffee\060\uffee\070\uffee\075\uffee\076\uffee\077\uffee" +
    "\001\002\000\022\003\u011a\036\u011d\037\u0115\043\u011e\070" +
    "\u0113\071\u0118\072\u0114\073\u0117\001\002\000\010\036\u0120" +
    "\037\u0121\050\u0133\001\002\000\006\047\uffed\052\uffed\001" +
    "\002\000\060\003\uffef\004\uffef\006\uffef\007\uffef\010\uffef" +
    "\011\uffef\016\uffef\020\uffef\021\uffef\022\uffef\023\uffef\024" +
    "\uffef\025\uffef\026\uffef\046\uffef\055\uffef\056\uffef\057\uffef" +
    "\060\uffef\070\uffef\075\uffef\076\uffef\077\uffef\001\002\000" +
    "\004\070\u0136\001\002\000\010\051\uffe6\052\uffe6\061\u0110" +
    "\001\002\000\006\051\uffe9\052\uffe9\001\002\000\004\070" +
    "\u0139\001\002\000\004\061\u013a\001\002\000\022\003\u011a" +
    "\036\u011d\037\u0115\043\u011e\070\u0113\071\u0118\072\u0114\073" +
    "\u0117\001\002\000\010\036\u0120\037\u0121\052\u013c\001\002" +
    "\000\014\004\ufff6\006\ufff6\007\ufff6\010\ufff6\011\ufff6\001" +
    "\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u013a\000\006\002\003\066\004\001\001\000\006\003" +
    "\013\004\006\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\005\026\006\032\010\025\001\001\000\002\001" +
    "\001\000\004\003\023\001\001\000\004\031\017\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\003\023\001\001\000" +
    "\002\001\001\000\004\006\u0137\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\007\u010c\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\042\006\032\010\066\017\063\036\050\037\045\040\042" +
    "\041\065\042\052\043\067\044\072\045\047\051\051\053" +
    "\043\054\056\055\071\060\041\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\024\165\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\042\006\032\010\066\017\063\036\050\037\045\040\042" +
    "\041\065\042\255\043\067\044\072\045\047\051\051\053" +
    "\043\054\056\055\071\060\041\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\006\101\040\076\050\077\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\024\165\001" +
    "\001\000\002\001\001\000\002\001\001\000\016\011\114" +
    "\013\116\014\112\015\110\016\113\017\121\001\001\000" +
    "\002\001\001\000\012\013\163\014\112\015\110\016\113" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\015\147\016\113\001\001\000" +
    "\002\001\001\000\004\024\134\001\001\000\010\014\125" +
    "\015\110\016\113\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\015\124\016\113\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\015\133\016\113\001\001\000" +
    "\006\015\132\016\113\001\001\000\006\015\131\016\113" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\013\136\014\112\015\110" +
    "\016\113\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\014\143\015\110\016\113\001\001\000\010\014\142" +
    "\015\110\016\113\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\013\145\014\112\015\110\016\113\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\016\013\155\014\112\015\110\016\113\026" +
    "\156\027\157\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\013\161\014\112\015\110\016" +
    "\113\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\016\011" +
    "\167\013\116\014\112\015\110\016\113\017\121\001\001" +
    "\000\002\001\001\000\016\011\171\013\116\014\112\015" +
    "\110\016\113\017\121\001\001\000\002\001\001\000\022" +
    "\013\176\014\112\015\110\016\113\032\173\033\177\034" +
    "\174\035\201\001\001\000\002\001\001\000\002\001\001" +
    "\000\016\013\176\014\112\015\110\016\113\032\173\033" +
    "\241\001\001\000\002\001\001\000\002\001\001\000\022" +
    "\013\222\014\112\015\110\016\113\032\173\033\177\034" +
    "\174\035\223\001\001\000\002\001\001\000\010\040\210" +
    "\046\211\047\207\001\001\000\020\013\176\014\112\015" +
    "\110\016\113\032\173\033\177\034\204\001\001\000\002" +
    "\001\001\000\016\013\176\014\112\015\110\016\113\032" +
    "\173\033\206\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\024\165\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\077\217\001\001\000\042\006\032\010\066\017" +
    "\063\036\050\037\045\040\042\041\065\042\220\043\067" +
    "\044\072\045\047\051\051\053\043\054\056\055\071\060" +
    "\041\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\013" +
    "\240\014\112\015\110\016\113\001\001\000\012\013\237" +
    "\014\112\015\110\016\113\001\001\000\012\013\236\014" +
    "\112\015\110\016\113\001\001\000\012\013\235\014\112" +
    "\015\110\016\113\001\001\000\012\013\234\014\112\015" +
    "\110\016\113\001\001\000\012\013\233\014\112\015\110" +
    "\016\113\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\063" +
    "\244\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\062\247\001\001\000\002\001\001\000\012\013\253\014" +
    "\112\015\110\016\113\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\076\257\001\001\000\042\006\032\010\066" +
    "\017\063\036\050\037\045\040\042\041\065\042\260\043" +
    "\067\044\072\045\047\051\051\053\043\054\056\055\071" +
    "\060\041\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\022\013\176\014\112\015\110\016\113" +
    "\032\173\033\177\034\174\035\264\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\022\013\176\014\112\015\110\016\113\032\173\033" +
    "\177\034\174\035\271\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\070\274\001\001\000\042\006\032\010" +
    "\066\017\063\036\050\037\045\040\042\041\065\042\275" +
    "\043\067\044\072\045\047\051\051\053\043\054\056\055" +
    "\071\060\041\001\001\000\002\001\001\000\004\064\277" +
    "\001\001\000\004\052\300\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\072\304\001\001" +
    "\000\042\006\032\010\066\017\063\036\050\037\045\040" +
    "\042\041\065\042\305\043\067\044\072\045\047\051\051" +
    "\053\043\054\056\055\071\060\041\001\001\000\002\001" +
    "\001\000\002\001\001\000\022\013\176\014\112\015\110" +
    "\016\113\032\173\033\177\034\174\035\310\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\071\313\001\001" +
    "\000\042\006\032\010\066\017\063\036\050\037\045\040" +
    "\042\041\065\042\314\043\067\044\072\045\047\051\051" +
    "\053\043\054\056\055\071\060\041\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\063\320" +
    "\001\001\000\002\001\001\000\004\061\322\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\016\013\155\014\112\015\110" +
    "\016\113\026\333\027\157\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\016" +
    "\013\155\014\112\015\110\016\113\026\340\027\157\001" +
    "\001\000\002\001\001\000\002\001\001\000\022\013\176" +
    "\014\112\015\110\016\113\032\173\033\177\034\174\035" +
    "\343\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\075\346\001\001\000\042\006\032\010\066\017\063\036" +
    "\050\037\045\040\042\041\065\042\347\043\067\044\072" +
    "\045\047\051\051\053\043\054\056\055\071\060\041\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\016\011\354\013\116\014\112\015" +
    "\110\016\113\017\121\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\065\357\001\001\000\004\057\360\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\013\363" +
    "\014\112\015\110\016\113\001\001\000\002\001\001\000" +
    "\004\073\365\001\001\000\042\006\032\010\066\017\063" +
    "\036\050\037\045\040\042\041\065\043\370\044\072\045" +
    "\047\051\051\053\043\054\056\055\071\056\366\060\041" +
    "\001\001\000\002\001\001\000\002\001\001\000\042\006" +
    "\032\010\066\017\063\036\050\037\045\040\042\041\065" +
    "\043\370\044\072\045\047\051\051\053\043\054\056\055" +
    "\071\056\371\060\041\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\074\374\001\001\000\042\006\032\010" +
    "\066\017\063\036\050\037\045\040\042\041\065\043\370" +
    "\044\072\045\047\051\051\053\043\054\056\055\071\056" +
    "\375\060\041\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\067\u0102\001" +
    "\001\000\002\001\001\000\004\030\u0105\001\001\000\016" +
    "\013\155\014\112\015\110\016\113\026\u0106\027\157\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\030\u010b\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\012\u0111" +
    "\025\u010e\001\001\000\002\001\001\000\016\011\u012e\013" +
    "\116\014\112\015\110\016\113\017\121\001\001\000\012" +
    "\020\u0118\021\u0115\022\u011a\023\u011b\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\022\u012d" +
    "\023\u011b\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\021\u012b\022\u011a" +
    "\023\u011b\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\022\u012a\023\u011b\001\001\000\012\020\u011e\021\u0115" +
    "\022\u011a\023\u011b\001\001\000\002\001\001\000\010\021" +
    "\u0129\022\u011a\023\u011b\001\001\000\010\021\u0122\022\u011a" +
    "\023\u011b\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\022\u0128\023\u011b\001\001\000\006\022\u0127\023\u011b" +
    "\001\001\000\006\022\u0126\023\u011b\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\020\u0131\021\u0115\022\u011a\023\u011b\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\012\u0136\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\020\u013a\021\u0115\022\u011a" +
    "\023\u011b\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$SintaxisPrograma$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$SintaxisPrograma$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$SintaxisPrograma$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    private Symbol s;
    private ProgramaSemantica sem = new ProgramaSemantica();
    private boolean esCase = false;
    private String java, vb, py;
    private int j, v, p, c;
    private Errores errores = new Errores();
    private int linea;

    public void setLinea(int line){
            this.linea = line;
    }
    
    public void syntax_error(Symbol sym){
            errores.errorSintactico(sym, this.c); 
    }

    public void unrecovered_syntax_error(Symbol sym) throws java.lang.Exception{
            errores.errorSintactico(sym, this.c); 
    }

    public void setLineas(int j, int p, int v, int c){
            this.j = j;
            this.v = v;
            this.p = p;
            this.c = c;
    }

    public void setTipo(String java, String vb, String py){
            this.java = java;
            this.vb = vb;
            this.py = py;
            sem.iniciarJAVA(this.java, j);
    }
    
    public void reportarSem(String texto){
            errores.errorSemantico(getS(), texto, this.c);
    }

    public Symbol getS(){
        return this.cur_token;
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$SintaxisPrograma$actions {
  private final SintaxisPrograma parser;

  /** Constructor */
  CUP$SintaxisPrograma$actions(SintaxisPrograma parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$SintaxisPrograma$do_action_part00000000(
    int                        CUP$SintaxisPrograma$act_num,
    java_cup.runtime.lr_parser CUP$SintaxisPrograma$parser,
    java.util.Stack            CUP$SintaxisPrograma$stack,
    int                        CUP$SintaxisPrograma$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$SintaxisPrograma$result;

      /* select the action based on the action number */
      switch (CUP$SintaxisPrograma$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= PROGRAMA EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-1)).right;
		List<String> start_val = (List<String>)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-1)).value;
		RESULT = start_val;
              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$SintaxisPrograma$parser.done_parsing();
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // PROGRAMA ::= INCLUDE_LENG CONST MAIN 
            {
              List<String> RESULT =null;
		List<String> st = new ArrayList<>(); st.add(sem.mostrarCodigo());
                                        st.add(sem.mostrarCodigoEjecutable()); st.add(sem.crearAssembler()); RESULT = st;
              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("PROGRAMA",52, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INCLUDE_LENG ::= INCLUDE_LENG IN_LENG 
            {
              Object RESULT =null;

              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("INCLUDE_LENG",0, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // INCLUDE_LENG ::= 
            {
              Object RESULT =null;

              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("INCLUDE_LENG",0, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // IN_LENG ::= py 
            {
              Object RESULT =null;
		sem.iniciarPY(py, p);
              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("IN_LENG",1, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // IN_LENG ::= vb 
            {
              Object RESULT =null;
		sem.iniciarVB(vb, v);
              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("IN_LENG",1, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // IN_LENG ::= java IN_CLASS comilla 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-1)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-1)).value;
		if(e1.equals("$$*$$")){sem.importarTodasClases();}else{sem.importarClase(e1);}
              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("IN_LENG",1, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // IN_LENG ::= includee idlib 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-1)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.peek()).value;
		sem.getImports().add(e1 + " " + e2);
              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("IN_LENG",1, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // IN_LENG ::= error IN_LENG 
            {
              Object RESULT =null;

              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("IN_LENG",1, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // IN_CLASS ::= por 
            {
              String RESULT =null;
		RESULT = "$$*$$";
              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("IN_CLASS",23, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // IN_CLASS ::= id 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.peek()).value;
		RESULT = e1;
              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("IN_CLASS",23, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // CONST ::= CONST constt TYPE id igual OPERACION_AC puntocoma 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-4)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-4)).right;
		Integer e1 = (Integer)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-4)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-3)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-3)).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-3)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-1)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-1)).right;
		OperacionPrograma e3 = (OperacionPrograma)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-1)).value;
		 VariablePrograma var = new ConstantePrograma(e2,ProgramaSemantica.AMBITO, e1, e3.getTipo(), null);
        var.setValor(e3.getValor());
        System.out.println("constante con id: " + e2);
        if(!sem.addVar(var)){
                reportarSem("Variable ya creda con el mismo nombre: <" + e1 + ">");
        } else {sem.getVar().addAll(e3.mostrarTripletes());
                SumOperator sum = sem.getVariables().devolverSum(e2);
                sem.getVar().add(sum);
                sem.getVar().add(new AsignarValor(null, sem.getVariables().devolverDireccion(sum.getId()),
                e3.getTriplete()));}
        
              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("CONST",2, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-6)), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // CONST ::= CONST ASIG_VAR 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()).right;
		List<VariablePrograma> e1 = (List<VariablePrograma>)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.peek()).value;
		ListaTripletes tri = new ListaTripletes();
                        for(VariablePrograma var : e1){
                        /*tri.addAll(var.mostrarTripletes());*/
                        tri.addAll(sem.getVariables().obtenerTriplete(var, var.getTipo()));
                        } sem.getVar().addAll(tri);
              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("CONST",2, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // CONST ::= 
            {
              Object RESULT =null;
		
              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("CONST",2, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // CONST ::= error 
            {
              Object RESULT =null;

              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("CONST",2, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // TYPE ::= intt 
            {
              Integer RESULT =null;
		RESULT = VariablePrograma.INT;
              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("TYPE",4, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // TYPE ::= floatt 
            {
              Integer RESULT =null;
		RESULT = VariablePrograma.FLOAT;
              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("TYPE",4, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // TYPE ::= charr 
            {
              Integer RESULT =null;
		RESULT = VariablePrograma.CHAR;
              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("TYPE",4, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // ASIG_VAR ::= TYPE LIST_ASIG puntocoma 
            {
              List<VariablePrograma> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-2)).right;
		Integer e1 = (Integer)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-1)).right;
		List<VariablePrograma> e2 = (List<VariablePrograma>)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-1)).value;
		if(!sem.addListVar(e2, e1)){
                reportarSem("Variables con el mismo nombre");
                RESULT = new ArrayList<>();}
                else {for(VariablePrograma var : e2){
                        var.setTipo(e1);
                        if(var.getTriplete() instanceof AsignarValor)
                        ((AsignarValor)var.getTriplete()).setTipo(Triplete.tipos[e1-1]);
                } RESULT = e2;}
              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("ASIG_VAR",6, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // ASIG_VAR ::= TYPE id CORCHETESF puntocoma 
            {
              List<VariablePrograma> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-3)).right;
		Integer e1 = (Integer)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-2)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-2)).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-2)).value;
		int e4left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-1)).left;
		int e4right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-1)).right;
		List<OperacionPrograma> e4 = (List<OperacionPrograma>)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-1)).value;
		 List<VariablePrograma> var = new ArrayList<>();
                ArregloPrograma arr = new ArregloPrograma(e2, ProgramaSemantica.AMBITO, e1, e4, 
                new DefinirArreglo(null, new TerminalOperator(e2), Triplete.tipos[e1-1]));
                if(!sem.addVar(arr)){
                        reportarSem("Variable ya creda con el mismo nombre: <" + e2 + ">");
                }else {var.add(arr);} RESULT = var;
              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("ASIG_VAR",6, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // CORCHETESF ::= CORCHETESF cora OPERACION_AC corc 
            {
              List<OperacionPrograma> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-3)).right;
		List<OperacionPrograma> e1 = (List<OperacionPrograma>)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-1)).right;
		OperacionPrograma e2 = (OperacionPrograma)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-1)).value;
		if(e2.getTipo()<=VariablePrograma.INT) e1.add(e2); RESULT = e1;
              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("CORCHETESF",19, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // CORCHETESF ::= cora OPERACION_AC corc 
            {
              List<OperacionPrograma> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-1)).right;
		OperacionPrograma e1 = (OperacionPrograma)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-1)).value;
		List<OperacionPrograma> opr = new ArrayList<>();
                if(e1.getTipo()<=VariablePrograma.INT) opr.add(e1);
                RESULT = opr;
              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("CORCHETESF",19, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // CORCHETES ::= CORCHETES cora OPERACION_A corc 
            {
              List<OperacionPrograma> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-3)).right;
		List<OperacionPrograma> e1 = (List<OperacionPrograma>)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-1)).right;
		OperacionPrograma e2 = (OperacionPrograma)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-1)).value;
		if(e2.getTipo()<=VariablePrograma.INT) e1.add(e2); RESULT = e1;
              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("CORCHETES",18, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // CORCHETES ::= cora OPERACION_A corc 
            {
              List<OperacionPrograma> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-1)).right;
		OperacionPrograma e1 = (OperacionPrograma)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-1)).value;
		List<OperacionPrograma> opr = new ArrayList<>();
                if(e1.getTipo()<=VariablePrograma.INT) opr.add(e1);
                RESULT = opr;
              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("CORCHETES",18, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // LIST_ASIG ::= LIST_ASIG coma id ASIG 
            {
              List<VariablePrograma> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-3)).right;
		List<VariablePrograma> e1 = (List<VariablePrograma>)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-1)).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-1)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()).right;
		OperacionPrograma e3 = (OperacionPrograma)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.peek()).value;
		
                if(e3!=null) e1.add(new VariablePrograma(e2, ProgramaSemantica.AMBITO, e3,
                new AsignarValor(null, new TerminalOperator(e2), e3.getTriplete())));
                else e1.add(new VariablePrograma(e2, ProgramaSemantica.AMBITO,
                new AsignarValor("", new TerminalOperator(e2), null))); RESULT = e1;
              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("LIST_ASIG",5, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // LIST_ASIG ::= id ASIG 
            {
              List<VariablePrograma> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-1)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()).right;
		OperacionPrograma e2 = (OperacionPrograma)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.peek()).value;
		List<VariablePrograma> vars = new ArrayList<>();
            if(e2!=null) vars.add(new VariablePrograma(e1, ProgramaSemantica.AMBITO, e2,
                new AsignarValor(null, new TerminalOperator(e1), e2.getTriplete()))); 
            else vars.add(new VariablePrograma(e1, ProgramaSemantica.AMBITO,
                new AsignarValor("", new TerminalOperator(e1), null))); RESULT = vars;
              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("LIST_ASIG",5, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // ASIG ::= igual EXPR 
            {
              OperacionPrograma RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()).right;
		OperacionPrograma e1 = (OperacionPrograma)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.peek()).value;
		RESULT = e1;
              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("ASIG",8, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // ASIG ::= 
            {
              OperacionPrograma RESULT =null;

              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("ASIG",8, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // OPERACION_A ::= OPERACION_A mas OPERACION_M 
            {
              OperacionPrograma RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-2)).right;
		OperacionPrograma e1 = (OperacionPrograma)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()).right;
		OperacionPrograma e2 = (OperacionPrograma)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.peek()).value;
		if(e1 != null && e2 != null) RESULT = new OperacionPrograma(e1, e2,
                new SumOperator(null, e1.getTriplete(), e2.getTriplete(), Triplete.devolverTipo(e1, e2)));
              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("OPERACION_A",9, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // OPERACION_A ::= OPERACION_A menos OPERACION_M 
            {
              OperacionPrograma RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-2)).right;
		OperacionPrograma e1 = (OperacionPrograma)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()).right;
		OperacionPrograma e2 = (OperacionPrograma)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.peek()).value;
		if(e1 != null && e2 != null) RESULT = new OperacionPrograma(e1, e2,
                new RestOperator(null, e1.getTriplete(), e2.getTriplete(), Triplete.devolverTipo(e1, e2)));
              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("OPERACION_A",9, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // OPERACION_A ::= OPERACION_M 
            {
              OperacionPrograma RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()).right;
		OperacionPrograma e1 = (OperacionPrograma)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.peek()).value;
		RESULT = e1;
              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("OPERACION_A",9, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // OPERACION_A ::= error OPERACION_M 
            {
              OperacionPrograma RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()).right;
		OperacionPrograma e1 = (OperacionPrograma)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.peek()).value;
		RESULT = e1;
              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("OPERACION_A",9, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // OPERACION_M ::= OPERACION_M por OPERACION_U 
            {
              OperacionPrograma RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-2)).right;
		OperacionPrograma e1 = (OperacionPrograma)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()).right;
		OperacionPrograma e2 = (OperacionPrograma)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.peek()).value;
		if(e1 != null && e2 != null) RESULT = new OperacionPrograma(e1, e2,
                new PorOperator(null, e1.getTriplete(), e2.getTriplete(), Triplete.devolverTipo(e1, e2)));
              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("OPERACION_M",10, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // OPERACION_M ::= OPERACION_M div OPERACION_U 
            {
              OperacionPrograma RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-2)).right;
		OperacionPrograma e1 = (OperacionPrograma)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()).right;
		OperacionPrograma e2 = (OperacionPrograma)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.peek()).value;
		if(e1 != null && e2 != null) RESULT = new OperacionPrograma(e1, e2,
                new DivOperator(null, e1.getTriplete(), e2.getTriplete(), Triplete.devolverTipo(e1, e2)));
              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("OPERACION_M",10, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // OPERACION_M ::= OPERACION_M mod OPERACION_U 
            {
              OperacionPrograma RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-2)).right;
		OperacionPrograma e1 = (OperacionPrograma)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()).right;
		OperacionPrograma e2 = (OperacionPrograma)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.peek()).value;
		if(e1 != null && e2 != null) RESULT = new OperacionPrograma(e1, e2,
                new ModOperator(null, e1.getTriplete(), e2.getTriplete(), Triplete.devolverTipo(e1, e2)));
              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("OPERACION_M",10, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // OPERACION_M ::= OPERACION_U 
            {
              OperacionPrograma RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()).right;
		OperacionPrograma e1 = (OperacionPrograma)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.peek()).value;
		RESULT = e1;
              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("OPERACION_M",10, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // OPERACION_U ::= menos OPERACION_U 
            {
              OperacionPrograma RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()).right;
		OperacionPrograma e1 = (OperacionPrograma)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.peek()).value;
		if(e1 != null && e1.getTipo()==1){e1.setTipo(VariablePrograma.INT);}
                OperacionPrograma cero = new OperacionPrograma(VariablePrograma.INT, new TerminalOperator("0"));
                RESULT = new OperacionPrograma(cero,
                e1, new RestOperator(null, cero.getTriplete(), e1.getTriplete(),
                Triplete.devolverTipo(cero, e1)));
              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("OPERACION_U",11, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // OPERACION_U ::= mas OPERACION_U 
            {
              OperacionPrograma RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()).right;
		OperacionPrograma e1 = (OperacionPrograma)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.peek()).value;
		RESULT = e1;
              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("OPERACION_U",11, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // OPERACION_U ::= ATOM 
            {
              OperacionPrograma RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()).right;
		OperacionPrograma e1 = (OperacionPrograma)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.peek()).value;
		RESULT = e1;
              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("OPERACION_U",11, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // ATOM ::= id 
            {
              OperacionPrograma RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.peek()).value;
		VariablePrograma var = sem.existeVar(new VariablePrograma(e1, ProgramaSemantica.AMBITO, null)); 
                if(var == null){
                        reportarSem("Variable no existente con el id: <" + e1 + ">");
                } else{
                        SumOperator sum = sem.getVariables().devolverSum(e1);
                        OperacionPrograma op = new OperacionPrograma(var.getTipo(), sem.getVariables().devolverDireccion(sum.getId()));
                        op.getTripletes().add(sum);
                        RESULT = op;}
              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("ATOM",12, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // ATOM ::= entero 
            {
              OperacionPrograma RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.peek()).value;
		RESULT = new OperacionPrograma(VariablePrograma.INT, new TerminalOperator(e1));
              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("ATOM",12, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // ATOM ::= decimal 
            {
              OperacionPrograma RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.peek()).value;
		RESULT = new OperacionPrograma(VariablePrograma.FLOAT, new TerminalOperator(e1));
              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("ATOM",12, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // ATOM ::= character 
            {
              OperacionPrograma RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.peek()).value;
		RESULT = new OperacionPrograma(VariablePrograma.CHAR, new TerminalOperator(e1));
              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("ATOM",12, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // ATOM ::= id CORCHETES 
            {
              OperacionPrograma RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-1)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()).right;
		List<OperacionPrograma> e2 = (List<OperacionPrograma>)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.peek()).value;
		VariablePrograma var = sem.existeVar(e1, e2.size());
                if(var == null){
                        reportarSem("Variable no existente con el id: <" + e1 + ">");
                } else {OperacionPrograma arr = new ArregloPrograma(var.getId(), ProgramaSemantica.AMBITO,
                var.getTipo(), e2, (ArregloPrograma) var);
                SumOperator sum = sem.getVariables().devolverSum(e1);
                SumOperator sum2 = new SumOperator(null, sum, arr.getTripletes().get(arr.getTripletes().size()-1), "int");
                OperacionPrograma corch = new OperacionPrograma(var.getTipo(), sem.getVariables().devolverDireccion(sum2.getId()));
                corch.getTripletes().addAll(0, arr.getTripletes());
                corch.getTripletes().add(sum);
                corch.getTripletes().add(sum2);
                RESULT = corch;}
                
              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("ATOM",12, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // ATOM ::= para OPERACION_A parc 
            {
              OperacionPrograma RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-1)).right;
		OperacionPrograma e1 = (OperacionPrograma)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-1)).value;
		RESULT = e1;
              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("ATOM",12, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // MAIN ::= voidd mainn para parc llavea STATEMENTS llavec 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-1)).right;
		ListaTripletes e1 = (ListaTripletes)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-1)).value;
		sem.getTripletes().addAll(e1);
              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("MAIN",3, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-6)), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // STATEMENTS ::= STATEMENT STATEMENTS 
            {
              ListaTripletes RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-1)).right;
		ListaTripletes e1 = (ListaTripletes)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()).right;
		ListaTripletes e2 = (ListaTripletes)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.peek()).value;
		if(!e2.isFin()){
                                        if(e1.isRet()){
                                                reportarSem("ya existe varios returns, algunos no se toman en cuenta");
                                        } else {e1.addAll(e2);}} RESULT = e1;
              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("STATEMENTS",32, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // STATEMENTS ::= 
            {
              ListaTripletes RESULT =null;
		RESULT = new ListaTripletes(true);
              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("STATEMENTS",32, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // STATEMENT ::= COMPOUND 
            {
              ListaTripletes RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()).right;
		ListaTripletes e1 = (ListaTripletes)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.peek()).value;
		RESULT = e1;
              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("STATEMENT",33, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // STATEMENT ::= STATEMENTLINE 
            {
              ListaTripletes RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()).right;
		ListaTripletes e1 = (ListaTripletes)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.peek()).value;
		RESULT = e1;
              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("STATEMENT",33, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // STATEMENT ::= error 
            {
              ListaTripletes RESULT =null;
		RESULT = new ListaTripletes();
              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("STATEMENT",33, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // COMPOUND ::= WHILE 
            {
              ListaTripletes RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()).right;
		ListaTripletes e1 = (ListaTripletes)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.peek()).value;
		RESULT = e1;
              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("COMPOUND",34, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // COMPOUND ::= DO_WHILE 
            {
              ListaTripletes RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()).right;
		ListaTripletes e1 = (ListaTripletes)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.peek()).value;
		RESULT = e1;
              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("COMPOUND",34, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // COMPOUND ::= FOR 
            {
              ListaTripletes RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()).right;
		ListaTripletes e1 = (ListaTripletes)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.peek()).value;
		RESULT = e1;
              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("COMPOUND",34, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // COMPOUND ::= IF_ELSE 
            {
              ListaTripletes RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()).right;
		ListaTripletes e1 = (ListaTripletes)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.peek()).value;
		RESULT = e1;
              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("COMPOUND",34, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // COMPOUND ::= SWITCH 
            {
              ListaTripletes RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()).right;
		ListaTripletes e1 = (ListaTripletes)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.peek()).value;
		RESULT = e1;
              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("COMPOUND",34, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // STATEMENTLINE ::= clrs puntocoma 
            {
              ListaTripletes RESULT =null;
		ListaTripletes tr = new ListaTripletes(); tr.add(new Clrs()); RESULT = tr;
              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("STATEMENTLINE",31, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // STATEMENTLINE ::= ASIG_VAR 
            {
              ListaTripletes RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()).right;
		List<VariablePrograma> e1 = (List<VariablePrograma>)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.peek()).value;
		ListaTripletes tri = new ListaTripletes();
                        for(VariablePrograma var : e1){
                        /*tri.addAll(var.mostrarTripletes());*/
                        tri.addAll(sem.getVariables().obtenerTriplete(var, var.getTipo()));
                        } RESULT = tri;
              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("STATEMENTLINE",31, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // STATEMENTLINE ::= DEF_VAR puntocoma 
            {
              ListaTripletes RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-1)).right;
		ListaTripletes e1 = (ListaTripletes)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-1)).value;
		RESULT = e1;
              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("STATEMENTLINE",31, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // STATEMENTLINE ::= PRINTF 
            {
              ListaTripletes RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()).right;
		ListaTripletes e1 = (ListaTripletes)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.peek()).value;
		RESULT = e1;
              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("STATEMENTLINE",31, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // STATEMENTLINE ::= SCANF 
            {
              ListaTripletes RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()).right;
		ListaTripletes e1 = (ListaTripletes)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.peek()).value;
		RESULT = e1;
              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("STATEMENTLINE",31, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // STATEMENTLINE ::= LLAMADA_METODO puntocoma 
            {
              ListaTripletes RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-1)).right;
		OperacionPrograma e1 = (OperacionPrograma)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-1)).value;
		ListaTripletes tri = new ListaTripletes();
                if(e1 != null) {tri.addAll(e1.getTripletes());
                tri.add(e1.getTriplete());}
                RESULT = tri;
              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("STATEMENTLINE",31, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // STATEMENTLINE ::= getch puntocoma 
            {
              ListaTripletes RESULT =null;
		ListaTripletes tr = new ListaTripletes(); tr.add(new GetchOperator()); RESULT = tr;
              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("STATEMENTLINE",31, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // STATEMENTLINE ::= CLASS 
            {
              ListaTripletes RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()).right;
		ListaTripletes e1 = (ListaTripletes)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.peek()).value;
		RESULT = e1;
              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("STATEMENTLINE",31, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // DEF_VAR ::= id igual EXPR 
            {
              ListaTripletes RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()).right;
		OperacionPrograma e2 = (OperacionPrograma)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.peek()).value;
		ListaTripletes tri = new ListaTripletes();
                VariablePrograma var = sem.existeVar(new VariablePrograma(e1, ProgramaSemantica.AMBITO, null));
                if(var == null || var.isConstant()) {
                        reportarSem("Variable no existente con el id: <" + e1 + ">");
                } else if (e2 == null) {
                        reportarSem("no hay ninguna expresión en la definición de Variable");
                }else { SumOperator sum = sem.getVariables().devolverSum(e1);
                        AsignarValor asig = new AsignarValor(null, sem.getVariables().devolverDireccion(sum.getId()), e2.getTriplete());
                        /*tri.addAll(e2.mostrarTripletes());*/
                        tri.addAll(e2.mostrarTripletes());
                        tri.add(sum);
                        tri.add(asig);} RESULT = tri;
              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("DEF_VAR",30, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // DEF_VAR ::= id CORCHETES igual EXPR 
            {
              ListaTripletes RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-3)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-2)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-2)).right;
		List<OperacionPrograma> e2 = (List<OperacionPrograma>)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-2)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()).right;
		OperacionPrograma e3 = (OperacionPrograma)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.peek()).value;
		VariablePrograma var = sem.existeVar(e1, e2.size());
                if(var == null){
                        reportarSem("Variable no existente con el id: <" + e1 + ">");
                } else {OperacionPrograma arr = new ArregloPrograma(var.getId(), ProgramaSemantica.AMBITO,
                var.getTipo(), e2, (ArregloPrograma) var, e3);
                ListaTripletes tri = new ListaTripletes();
                /*if(e3.mostrarTripletes().size()>1) {
                tri.addAll(e3.mostrarTripletes().subList(1, e3.mostrarTripletes().size() - 1));}*/
                tri.addAll(arr.getTripletes());
                SumOperator sum = sem.getVariables().devolverSum(e1);
                tri.add(sum);
                SumOperator sum2 = new SumOperator(null, sum, arr.getTriplete(), "int");
                tri.add(sum2);
                AsignarValor asig = new AsignarValor(null, sem.getVariables().devolverDireccion(sum2.getId()), e3.getTriplete());
                tri.add(asig);
                RESULT = tri; }
              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("DEF_VAR",30, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // PRINTF ::= printf para comilla STRING comilla VARS parc puntocoma 
            {
              ListaTripletes RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-4)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-4)).right;
		List<String> e1 = (List<String>)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-4)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-2)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-2)).right;
		List<OperacionPrograma> e2 = (List<OperacionPrograma>)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-2)).value;
		if(e1 != null) RESULT = Printf.regresarTripletes(e1, e2);
              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("PRINTF",28, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-7)), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // STRING ::= STRING string 
            {
              List<String> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-1)).right;
		List<String> e1 = (List<String>)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.peek()).value;
		e1.add(e2); RESULT = e1;
              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("STRING",49, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // STRING ::= 
            {
              List<String> RESULT =null;
		RESULT = new ArrayList<>();
              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("STRING",49, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // VARS ::= VARS coma OPERACION_A 
            {
              List<OperacionPrograma> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-2)).right;
		List<OperacionPrograma> e1 = (List<OperacionPrograma>)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()).right;
		OperacionPrograma e2 = (OperacionPrograma)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.peek()).value;
		if(e1!=null && e2!= null){e1.add(e2); RESULT = e1;}
              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("VARS",48, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // VARS ::= 
            {
              List<OperacionPrograma> RESULT =null;
		List<OperacionPrograma> op = new ArrayList<>(); RESULT = op;
              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("VARS",48, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // SCANF ::= scanf para comilla STRING comilla VARSS parc puntocoma 
            {
              ListaTripletes RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-4)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-4)).right;
		List<String> e1 = (List<String>)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-4)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-2)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-2)).right;
		List<OperacionPrograma> e2 = (List<OperacionPrograma>)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-2)).value;
		if(e2!=null) RESULT = Scanf.regresarTripletes(e1, e2);
              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("SCANF",29, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-7)), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // VARSS ::= VARSS coma asig id 
            {
              List<OperacionPrograma> RESULT =null;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-3)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-3)).right;
		List<OperacionPrograma> e2 = (List<OperacionPrograma>)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-3)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.peek()).value;
		VariablePrograma var = new VariablePrograma(e1, ProgramaSemantica.AMBITO, null);
                if(sem.existeVar(var) == null
                                || e2 == null){
                        reportarSem("Variable no existente con el id: <" + e1 + ">");
                } else {
                        SumOperator sum = sem.getVariables().devolverSum(e1);
                        OperacionPrograma op = new OperacionPrograma(var.getTipo(), sem.getVariables().devolverDireccion(sum.getId()));
                        op.getTripletes().add(sum);
                        e2.add(op); RESULT = e2;}
              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("VARSS",47, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // VARSS ::= 
            {
              List<OperacionPrograma> RESULT =null;
		List<OperacionPrograma> arr = new ArrayList<>(); RESULT = arr;
              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("VARSS",47, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // NT$0 ::= 
            {
              ListaTripletes RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-2)).right;
		CondicionPrograma e1 = (CondicionPrograma)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-2)).value;
ProgramaSemantica.AMBITO += 1;
              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("NT$0",54, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // IF_ELSE ::= iff para CONDICION parc llavea NT$0 STATEMENTS llavec ELSE_IF ELSE 
            {
              ListaTripletes RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (ListaTripletes) ((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-4)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-7)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-7)).right;
		CondicionPrograma e1 = (CondicionPrograma)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-7)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-3)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-3)).right;
		ListaTripletes e2 = (ListaTripletes)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-3)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-1)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-1)).right;
		Else_Operator e3 = (Else_Operator)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-1)).value;
		int e4left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()).left;
		int e4right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()).right;
		ListaTripletes e4 = (ListaTripletes)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.peek()).value;
		sem.eliminarAmbito(ProgramaSemantica.AMBITO); ProgramaSemantica.AMBITO -= 1;
                e3.agregarIf(e1, e2); RESULT = e3.juntarTripletes(e4);
              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("IF_ELSE",39, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-9)), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // NT$1 ::= 
            {
              Else_Operator RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-6)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-6)).right;
		Else_Operator e1 = (Else_Operator)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-6)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-2)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-2)).right;
		CondicionPrograma e2 = (CondicionPrograma)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-2)).value;
ProgramaSemantica.AMBITO += 1;
              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("NT$1",55, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // ELSE_IF ::= ELSE_IF elsee iff para CONDICION parc llavea NT$1 STATEMENTS llavec 
            {
              Else_Operator RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Else_Operator) ((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-2)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-9)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-9)).right;
		Else_Operator e1 = (Else_Operator)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-9)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-5)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-5)).right;
		CondicionPrograma e2 = (CondicionPrograma)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-5)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-1)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-1)).right;
		ListaTripletes e3 = (ListaTripletes)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-1)).value;
		sem.eliminarAmbito(ProgramaSemantica.AMBITO); ProgramaSemantica.AMBITO -= 1;
                RESULT = e1.agregarElseIf(e2, e3);
              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("ELSE_IF",50, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-9)), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // ELSE_IF ::= 
            {
              Else_Operator RESULT =null;
		RESULT = new Else_Operator();
              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("ELSE_IF",50, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // NT$2 ::= 
            {
              ListaTripletes RESULT =null;
ProgramaSemantica.AMBITO += 1;
              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("NT$2",56, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // ELSE ::= elsee llavea NT$2 STATEMENTS llavec 
            {
              ListaTripletes RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (ListaTripletes) ((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-2)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-1)).right;
		ListaTripletes e1 = (ListaTripletes)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-1)).value;
		sem.eliminarAmbito(ProgramaSemantica.AMBITO); ProgramaSemantica.AMBITO -= 1;
                RESULT = e1;
              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("ELSE",40, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-4)), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // ELSE ::= 
            {
              ListaTripletes RESULT =null;
		RESULT = new ListaTripletes();
              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("ELSE",40, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // SWITCH ::= switchh para EXPR parc llavea CASES DEFAULT llavec 
            {
              ListaTripletes RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-5)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-5)).right;
		OperacionPrograma e1 = (OperacionPrograma)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-5)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-2)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-2)).right;
		CasePrograma e2 = (CasePrograma)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-2)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-1)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-1)).right;
		ListaTripletes e3 = (ListaTripletes)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-1)).value;
		RESULT = e2.agregarDefault(e1, e3);
              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("SWITCH",35, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-7)), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // NT$3 ::= 
            {
              CasePrograma RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-3)).right;
		CasePrograma e1 = (CasePrograma)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-1)).right;
		OperacionPrograma e2 = (OperacionPrograma)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-1)).value;
esCase = true; ProgramaSemantica.AMBITO += 1;
              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("NT$3",57, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // CASES ::= CASES casee OPERACION_A dosp NT$3 STATEMENTSC 
            {
              CasePrograma RESULT =null;
              // propagate RESULT from NT$3
                RESULT = (CasePrograma) ((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-1)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-5)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-5)).right;
		CasePrograma e1 = (CasePrograma)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-5)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-3)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-3)).right;
		OperacionPrograma e2 = (OperacionPrograma)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-3)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()).right;
		ListaTripletes e3 = (ListaTripletes)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.peek()).value;
		esCase = false; sem.eliminarAmbito(ProgramaSemantica.AMBITO); ProgramaSemantica.AMBITO -= 1;
                if(e2!=null){RESULT  = e1.agregarCase(e2, e3);}
              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("CASES",51, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-5)), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // CASES ::= 
            {
              CasePrograma RESULT =null;
		RESULT = new CasePrograma();
              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("CASES",51, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // STATEMENTSC ::= STATEMENT STATEMENTSC 
            {
              ListaTripletes RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-1)).right;
		ListaTripletes e1 = (ListaTripletes)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()).right;
		ListaTripletes e2 = (ListaTripletes)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.peek()).value;
		e1.addAll(e2); RESULT = e1;
              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("STATEMENTSC",44, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // STATEMENTSC ::= breakk puntocoma 
            {
              ListaTripletes RESULT =null;
		ListaTripletes tri = new ListaTripletes(); 
                if(!esCase){
                        reportarSem("Break fuera de un switch");
                }else{tri.add(new Break());} RESULT = tri;
              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("STATEMENTSC",44, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // STATEMENTSC ::= 
            {
              ListaTripletes RESULT =null;
		RESULT = new ListaTripletes();
              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("STATEMENTSC",44, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // NT$4 ::= 
            {
              ListaTripletes RESULT =null;
esCase = true; ProgramaSemantica.AMBITO += 1;
              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("NT$4",58, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // DEFAULT ::= defaultt dosp NT$4 STATEMENTSC 
            {
              ListaTripletes RESULT =null;
              // propagate RESULT from NT$4
                RESULT = (ListaTripletes) ((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-1)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()).right;
		ListaTripletes e1 = (ListaTripletes)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.peek()).value;
		esCase = false; sem.eliminarAmbito(ProgramaSemantica.AMBITO); ProgramaSemantica.AMBITO -= 1;
                RESULT = e1;
              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("DEFAULT",45, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // DEFAULT ::= 
            {
              ListaTripletes RESULT =null;
		RESULT = new ListaTripletes();
              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("DEFAULT",45, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // NT$5 ::= 
            {
              ListaTripletes RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-2)).right;
		CondicionPrograma e1 = (CondicionPrograma)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-2)).value;
ProgramaSemantica.AMBITO += 1;
              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("NT$5",59, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // WHILE ::= whilee para CONDICION parc llavea NT$5 STATEMENTS llavec 
            {
              ListaTripletes RESULT =null;
              // propagate RESULT from NT$5
                RESULT = (ListaTripletes) ((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-2)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-5)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-5)).right;
		CondicionPrograma e1 = (CondicionPrograma)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-5)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-1)).right;
		ListaTripletes e2 = (ListaTripletes)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-1)).value;
		sem.eliminarAmbito(ProgramaSemantica.AMBITO); ProgramaSemantica.AMBITO -= 1;
        RESULT = Else_Operator.WHILE(e1, e2);
              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("WHILE",41, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-7)), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // NT$6 ::= 
            {
              ListaTripletes RESULT =null;
ProgramaSemantica.AMBITO += 1;
              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("NT$6",60, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // DO_WHILE ::= doo llavea NT$6 STATEMENTS llavec whilee para CONDICION parc puntocoma 
            {
              ListaTripletes RESULT =null;
              // propagate RESULT from NT$6
                RESULT = (ListaTripletes) ((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-7)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-6)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-6)).right;
		ListaTripletes e1 = (ListaTripletes)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-6)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-2)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-2)).right;
		CondicionPrograma e2 = (CondicionPrograma)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-2)).value;
		sem.eliminarAmbito(ProgramaSemantica.AMBITO);
        ProgramaSemantica.AMBITO -= 1; RESULT = Else_Operator.DOWHILE(e2, e1);
              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("DO_WHILE",42, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-9)), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // NT$7 ::= 
            {
              ListaTripletes RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-6)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-6)).right;
		ListaTripletes e1 = (ListaTripletes)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-6)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-4)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-4)).right;
		CondicionPrograma e2 = (CondicionPrograma)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-4)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-2)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-2)).right;
		ListaTripletes e3 = (ListaTripletes)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-2)).value;
ProgramaSemantica.AMBITO += 1;
              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("NT$7",61, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // FOR ::= forr para INICIO puntocoma CONDICION puntocoma STEP parc llavea NT$7 STATEMENTS llavec 
            {
              ListaTripletes RESULT =null;
              // propagate RESULT from NT$7
                RESULT = (ListaTripletes) ((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-2)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-9)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-9)).right;
		ListaTripletes e1 = (ListaTripletes)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-9)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-7)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-7)).right;
		CondicionPrograma e2 = (CondicionPrograma)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-7)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-5)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-5)).right;
		ListaTripletes e3 = (ListaTripletes)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-5)).value;
		int e5left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-1)).left;
		int e5right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-1)).right;
		ListaTripletes e5 = (ListaTripletes)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-1)).value;
		sem.eliminarAmbito(ProgramaSemantica.AMBITO); ProgramaSemantica.AMBITO -= 1;
        RESULT = Else_Operator.FOR(e1, e3, e2, e5);
              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("FOR",43, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-11)), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // INICIO ::= DEF_VAR 
            {
              ListaTripletes RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()).right;
		ListaTripletes e1 = (ListaTripletes)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.peek()).value;
		RESULT = e1;
              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("INICIO",38, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // INICIO ::= id 
            {
              ListaTripletes RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.peek()).value;
		if(sem.existeVar(new VariablePrograma(e1, ProgramaSemantica.AMBITO, null))== null){
                        reportarSem("Variable no existente con el id: <" + e1 + ">");
                }RESULT = new ListaTripletes();
              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("INICIO",38, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // INICIO ::= TYPE id igual EXPR 
            {
              ListaTripletes RESULT =null;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-3)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-3)).right;
		Integer e2 = (Integer)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-3)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-2)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()).right;
		OperacionPrograma e3 = (OperacionPrograma)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.peek()).value;
		ListaTripletes tri = new ListaTripletes();
        if(sem.existeVar(new VariablePrograma(e1, ProgramaSemantica.AMBITO, null)) != null){
                reportarSem("Variable ya existente con el id: <" + e1 + ">");
        } else {
                sem.addVar(new VariablePrograma(e1, ProgramaSemantica.AMBITO+1, null));
                tri.addAll(e3.getTripletes()); tri.add(e3.getTriplete());
                tri.add(new AsignarValor(new TerminalOperator(e1), e3.getTriplete(), Triplete.tipos[e2-1]));}
              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("INICIO",38, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // STEP ::= DEF_VAR 
            {
              ListaTripletes RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()).right;
		ListaTripletes e1 = (ListaTripletes)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.peek()).value;
		RESULT = e1;
              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("STEP",37, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // STEP ::= OP_VAR 
            {
              ListaTripletes RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()).right;
		ListaTripletes e1 = (ListaTripletes)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.peek()).value;
		RESULT = e1;
              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("STEP",37, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // OP_VAR ::= id masmas 
            {
              ListaTripletes RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-1)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-1)).value;
		ListaTripletes tri = new ListaTripletes(); VariablePrograma vars = sem.existeVar(new VariablePrograma(e1, ProgramaSemantica.AMBITO, null));
                if(vars == null){
                        reportarSem("Variable no existente con el id: <" + e1 + ">");
                } else {
                        SumOperator ss1 = sem.getVariables().devolverSum(e1);
                        tri.add(ss1);
                        SumOperator sum = new SumOperator(null, sem.getVariables().devolverDireccion(ss1.getId()), new TerminalOperator("1"), OperacionJava.obtenerTipo(vars.getTipo()));
                        tri.add(sum);
                        SumOperator ss2 = sem.getVariables().devolverSum(e1);
                        tri.add(ss2);
                        tri.add(new AsignarValor(sem.getVariables().devolverDireccion(ss2.getId()), sum, null));
                } RESULT = tri;
              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("OP_VAR",36, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // OP_VAR ::= id menosmenos 
            {
              ListaTripletes RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-1)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-1)).value;
		ListaTripletes tri = new ListaTripletes(); VariablePrograma vars = new VariablePrograma(e1, ProgramaSemantica.AMBITO, null);
                if(vars == null){
                        reportarSem("Variable no existente con el id: <" + e1 + ">");
                } else {
                        SumOperator ss1 = sem.getVariables().devolverSum(e1);
                        tri.add(ss1);
                        RestOperator rest = new RestOperator(null,sem.getVariables().devolverDireccion(ss1.getId()), new TerminalOperator("1"), OperacionJava.obtenerTipo(vars.getTipo()));
                        tri.add(rest); 
                        SumOperator ss2 = sem.getVariables().devolverSum(e1);
                        tri.add(ss2);
                        tri.add(new AsignarValor(sem.getVariables().devolverDireccion(ss2.getId()), rest, null));
                } RESULT = tri;
              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("OP_VAR",36, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // CONDICION ::= CONDICION orr AND 
            {
              CondicionPrograma RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-2)).right;
		CondicionPrograma e1 = (CondicionPrograma)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()).right;
		CondicionPrograma e2 = (CondicionPrograma)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.peek()).value;
		RESULT = IfPrograma.OR(e1, e2);
              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("CONDICION",27, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // CONDICION ::= AND 
            {
              CondicionPrograma RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()).right;
		CondicionPrograma e1 = (CondicionPrograma)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.peek()).value;
		RESULT = e1;
              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("CONDICION",27, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // AND ::= AND andd NOT 
            {
              CondicionPrograma RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-2)).right;
		CondicionPrograma e1 = (CondicionPrograma)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()).right;
		CondicionPrograma e2 = (CondicionPrograma)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.peek()).value;
		RESULT = IfPrograma.AND(e1, e2);
              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("AND",26, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // AND ::= NOT 
            {
              CondicionPrograma RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()).right;
		CondicionPrograma e1 = (CondicionPrograma)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.peek()).value;
		RESULT = e1;
              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("AND",26, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // NOT ::= nott NOT 
            {
              CondicionPrograma RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()).right;
		CondicionPrograma e1 = (CondicionPrograma)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.peek()).value;
		RESULT = IfPrograma.NOT(e1);
              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("NOT",25, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // NOT ::= COMPARACION 
            {
              CondicionPrograma RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()).right;
		Triplete e1 = (Triplete)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.peek()).value;
		RESULT = new IfPrograma(new If_Operator(e1, new Etiqueta()), ((CondicionalOperator)e1).getTripletes());
              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("NOT",25, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // NOT ::= para CONDICION parc 
            {
              CondicionPrograma RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-1)).right;
		CondicionPrograma e1 = (CondicionPrograma)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-1)).value;
		RESULT = e1;
              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("NOT",25, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // COMPARACION ::= OPERACION_A igig OPERACION_A 
            {
              Triplete RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-2)).right;
		OperacionPrograma e1 = (OperacionPrograma)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()).right;
		OperacionPrograma e2 = (OperacionPrograma)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.peek()).value;
		RESULT = new IgualOperator(e1.getTriplete(), e2.getTriplete(),
                e1.getTripletes(), e2.getTripletes());
              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("COMPARACION",24, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // COMPARACION ::= OPERACION_A noigual OPERACION_A 
            {
              Triplete RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-2)).right;
		OperacionPrograma e1 = (OperacionPrograma)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()).right;
		OperacionPrograma e2 = (OperacionPrograma)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.peek()).value;
		RESULT = new NoIgualOperator(e1.getTriplete(), e2.getTriplete(),
                e1.getTripletes(), e2.getTripletes());
              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("COMPARACION",24, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // COMPARACION ::= OPERACION_A menor OPERACION_A 
            {
              Triplete RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-2)).right;
		OperacionPrograma e1 = (OperacionPrograma)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()).right;
		OperacionPrograma e2 = (OperacionPrograma)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.peek()).value;
		RESULT = new MenorOperator(e1.getTriplete(), e2.getTriplete(),
                e1.getTripletes(), e2.getTripletes());
              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("COMPARACION",24, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // COMPARACION ::= OPERACION_A menorig OPERACION_A 
            {
              Triplete RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-2)).right;
		OperacionPrograma e1 = (OperacionPrograma)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()).right;
		OperacionPrograma e2 = (OperacionPrograma)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.peek()).value;
		RESULT = new MenorIgOperator(e1.getTriplete(), e2.getTriplete(),
                e1.getTripletes(), e2.getTripletes());
              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("COMPARACION",24, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // COMPARACION ::= OPERACION_A mayor OPERACION_A 
            {
              Triplete RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-2)).right;
		OperacionPrograma e1 = (OperacionPrograma)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()).right;
		OperacionPrograma e2 = (OperacionPrograma)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.peek()).value;
		RESULT = new MayorOperator(e1.getTriplete(), e2.getTriplete(),
                e1.getTripletes(), e2.getTripletes());
              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("COMPARACION",24, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // COMPARACION ::= OPERACION_A mayorig OPERACION_A 
            {
              Triplete RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-2)).right;
		OperacionPrograma e1 = (OperacionPrograma)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()).right;
		OperacionPrograma e2 = (OperacionPrograma)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.peek()).value;
		RESULT = new MayorIgOperator(e1.getTriplete(), e2.getTriplete(),
                e1.getTripletes(), e2.getTripletes());
              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("COMPARACION",24, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // LLAMADA_METODO ::= pyy punto id para LIST_PARAM parc 
            {
              OperacionPrograma RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-3)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-1)).right;
		List<OperacionPrograma> e2 = (List<OperacionPrograma>)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-1)).value;
		MetodoPython met = sem.existeMetodoPY(e1, e2);
                        if(met == null){
                                reportarSem("Metodo de Python no existente con id: <" + e1 + ">");
                        } else {
                                List<Triplete> tri = new ArrayList<>();
                                tri.addAll(met.verMetodo(e2, sem.getVariables().getTamano()));
                                SumOperator s = new SumOperator(null, new P(), new TerminalOperator(""+sem.getVariables().getTamano()),"int");
                                tri.add(s);
                                OperacionPrograma op = new OperacionPrograma(CallPrograma.regresarTipo(met), new Stack(s));
                                op.getTripletes().addAll(tri);
                                RESULT = op;
                        }
              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("LLAMADA_METODO",13, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-5)), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // LLAMADA_METODO ::= vbb punto id para LIST_PARAM parc 
            {
              OperacionPrograma RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-3)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-1)).right;
		List<OperacionPrograma> e2 = (List<OperacionPrograma>)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-1)).value;
		MetodoVisual met = sem.existeMetodoVB(e1, e2);
                        if(met == null){
                                reportarSem("Metodo de Visua Basic no existente con id: <" + e1 + ">");
                        } else {
                                List<Triplete> tri = new ArrayList<>();
                                tri.addAll(met.verMetodo(e2, sem.getVariables().getTamano()));
                                SumOperator s = new SumOperator(null, new P(), new TerminalOperator(""+sem.getVariables().getTamano()),"int");
                                tri.add(s);
                                OperacionPrograma op = new OperacionPrograma(CallPrograma.regresarTipo(met), new Stack(s));
                                op.getTripletes().addAll(tri);
                                RESULT = op;
                        }
              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("LLAMADA_METODO",13, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-5)), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // LLAMADA_METODO ::= javaa punto id punto id para LIST_PARAM parc 
            {
              OperacionPrograma RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-5)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-5)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-5)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-3)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-3)).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-3)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-1)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-1)).right;
		List<OperacionPrograma> e3 = (List<OperacionPrograma>)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-1)).value;
		
                        VariablePrograma objeto = sem.existeObjeto(e1);
                        if(objeto == null){
                                reportarSem("Variable que almacena un objeto de Java no existente con id: <" + e1 + ">");
                        } else {
                                MetodoJava met = sem.existeMetodoJV(objeto.getTip(), e2, e3);
                                if(met == null) {
                                        reportarSem("Metodo de Java no existente con id: <" + e2 + ">");
                                } else {
                                List<Triplete> tri = new ArrayList<>();
                                tri.addAll(met.verMetodo(sem.getVariables().getTamano(), objeto, e3));
                                SumOperator s = new SumOperator(null, new P(), new TerminalOperator(""+(sem.getVariables().getTamano()+1)),"int");
                                tri.add(s);
                                OperacionPrograma op = new OperacionPrograma(CallPrograma.regresarTipo(met), new Stack(s));
                                op.getTripletes().addAll(tri);
                                RESULT = op;}
                        }
              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("LLAMADA_METODO",13, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-7)), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // EXPR ::= LLAMADA_METODO 
            {
              OperacionPrograma RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()).right;
		OperacionPrograma e1 = (OperacionPrograma)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.peek()).value;
		if(!e1.getTipo().equals(Triplete.tipos[3])){RESULT = new OperacionPrograma(new AsignarTemporal(null, e1.getTriplete(),
                Triplete.devolverTipo(e1)), e1);} else {reportarSem("Error, metodo void no regresa ningun dato");}
              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("EXPR",7, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // EXPR ::= OPERACION_A 
            {
              OperacionPrograma RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()).right;
		OperacionPrograma e1 = (OperacionPrograma)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.peek()).value;
		RESULT = e1;
              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("EXPR",7, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // EXPR ::= getch 
            {
              OperacionPrograma RESULT =null;
		RESULT = new OperacionPrograma(VariablePrograma.INT, new GetchOperator());
              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("EXPR",7, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // CLASS ::= javaa punto id LIST_CLASS puntocoma 
            {
              ListaTripletes RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-1)).right;
		List<ObjetoPrograma> e2 = (List<ObjetoPrograma>)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-1)).value;
		
        RESULT = new ListaTripletes(ObjetoPrograma.triplete(e1, e2, sem, ProgramaSemantica.AMBITO));
              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("CLASS",46, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-4)), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // LIST_CLASS ::= LIST_CLASS coma id PARAM 
            {
              List<ObjetoPrograma> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-3)).right;
		List<ObjetoPrograma> e1 = (List<ObjetoPrograma>)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-1)).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-1)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()).right;
		List<OperacionPrograma> e3 = (List<OperacionPrograma>)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.peek()).value;
		ObjetoPrograma ob = new ObjetoPrograma(e2, e3);
            e1.add(ob); RESULT = e1;
              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("LIST_CLASS",53, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // LIST_CLASS ::= id PARAM 
            {
              List<ObjetoPrograma> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-1)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()).right;
		List<OperacionPrograma> e2 = (List<OperacionPrograma>)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.peek()).value;
		ObjetoPrograma ob = new ObjetoPrograma(e1, e2);
            List<ObjetoPrograma> pro = new ArrayList<>(); pro.add(ob);
            RESULT = pro;
              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("LIST_CLASS",53, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // PARAM ::= para LIST_PARAM parc 
            {
              List<OperacionPrograma> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-1)).right;
		List<OperacionPrograma> e1 = (List<OperacionPrograma>)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-1)).value;
		RESULT = e1;
              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("PARAM",22, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // PARAM ::= 
            {
              List<OperacionPrograma> RESULT =null;
		RESULT = new ArrayList<>();
              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("PARAM",22, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // LIST_PARAM ::= LIST 
            {
              List<OperacionPrograma> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()).right;
		List<OperacionPrograma> e1 = (List<OperacionPrograma>)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.peek()).value;
		RESULT = e1;
              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("LIST_PARAM",20, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // LIST_PARAM ::= 
            {
              List<OperacionPrograma> RESULT =null;
		RESULT = new ArrayList<>();
              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("LIST_PARAM",20, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // LIST ::= LIST coma OPERACION_A 
            {
              List<OperacionPrograma> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-2)).right;
		List<OperacionPrograma> e1 = (List<OperacionPrograma>)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()).right;
		OperacionPrograma e2 = (OperacionPrograma)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.peek()).value;
		e1.add(e2); RESULT = e1;
              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("LIST",21, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // LIST ::= OPERACION_A 
            {
              List<OperacionPrograma> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()).right;
		OperacionPrograma e1 = (OperacionPrograma)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.peek()).value;
		List<OperacionPrograma> params = new ArrayList<>(); params.add(e1); RESULT = params;
              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("LIST",21, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // OPERACION_AC ::= OPERACION_AC mas OPERACION_MC 
            {
              OperacionPrograma RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-2)).right;
		OperacionPrograma e1 = (OperacionPrograma)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()).right;
		OperacionPrograma e2 = (OperacionPrograma)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.peek()).value;
		if(e1 != null && e2 != null){
                OperacionPrograma op = new OperacionPrograma(e1, e2, new SumOperator(null, e1.getTriplete(), e2.getTriplete(), Triplete.devolverTipo(e1, e2)));
                op.setValor(e1.getValor() - e2.getValor()); RESULT = op;}
              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("OPERACION_AC",14, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // OPERACION_AC ::= OPERACION_AC menos OPERACION_MC 
            {
              OperacionPrograma RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-2)).right;
		OperacionPrograma e1 = (OperacionPrograma)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()).right;
		OperacionPrograma e2 = (OperacionPrograma)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.peek()).value;
		if(e1 != null && e2 != null){
                OperacionPrograma op = new OperacionPrograma(e1, e2, new RestOperator(null, e1.getTriplete(), e2.getTriplete(), Triplete.devolverTipo(e1, e2)));
                op.setValor(e1.getValor() - e2.getValor()); RESULT = op;}
              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("OPERACION_AC",14, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // OPERACION_AC ::= OPERACION_MC 
            {
              OperacionPrograma RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()).right;
		OperacionPrograma e1 = (OperacionPrograma)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.peek()).value;
		RESULT = e1;
              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("OPERACION_AC",14, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // OPERACION_AC ::= error OPERACION_MC 
            {
              OperacionPrograma RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()).right;
		OperacionPrograma e1 = (OperacionPrograma)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.peek()).value;
		RESULT = e1;
              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("OPERACION_AC",14, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // OPERACION_MC ::= OPERACION_MC por OPERACION_UC 
            {
              OperacionPrograma RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-2)).right;
		OperacionPrograma e1 = (OperacionPrograma)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()).right;
		OperacionPrograma e2 = (OperacionPrograma)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.peek()).value;
		if(e1 != null && e2 != null){
                OperacionPrograma op = new OperacionPrograma(e1, e2, new PorOperator(null, e1.getTriplete(), e2.getTriplete(), Triplete.devolverTipo(e1, e2)));
                op.setValor(e1.getValor() * e2.getValor()); RESULT = op;}
              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("OPERACION_MC",15, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // OPERACION_MC ::= OPERACION_MC div OPERACION_UC 
            {
              OperacionPrograma RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-2)).right;
		OperacionPrograma e1 = (OperacionPrograma)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()).right;
		OperacionPrograma e2 = (OperacionPrograma)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.peek()).value;
		if(e1 != null && e2 != null){
                OperacionPrograma op = new OperacionPrograma(e1, e2, new DivOperator(null, e1.getTriplete(), e2.getTriplete(), Triplete.devolverTipo(e1, e2)));
                op.setValor(e1.getValor()/e2.getValor()); RESULT = op;}
              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("OPERACION_MC",15, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // OPERACION_MC ::= OPERACION_MC mod OPERACION_UC 
            {
              OperacionPrograma RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-2)).right;
		OperacionPrograma e1 = (OperacionPrograma)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()).right;
		OperacionPrograma e2 = (OperacionPrograma)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.peek()).value;
		if(e1 != null && e2 != null){ 
                OperacionPrograma op = new OperacionPrograma(e1, e2, new ModOperator(null, e1.getTriplete(), e2.getTriplete(), Triplete.devolverTipo(e1, e2)));
                op.setValor(e1.getValor() % e2.getValor()); RESULT = op;}
              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("OPERACION_MC",15, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // OPERACION_MC ::= OPERACION_UC 
            {
              OperacionPrograma RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()).right;
		OperacionPrograma e1 = (OperacionPrograma)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.peek()).value;
		RESULT = e1;
              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("OPERACION_MC",15, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // OPERACION_UC ::= menos OPERACION_UC 
            {
              OperacionPrograma RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()).right;
		OperacionPrograma e1 = (OperacionPrograma)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.peek()).value;
		if(e1 != null && e1.getTipo()==1){e1.setTipo(VariablePrograma.INT);}
                OperacionPrograma cero = new OperacionPrograma(VariablePrograma.INT, new TerminalOperator("0"));
                OperacionPrograma op = new OperacionPrograma(cero, e1, new RestOperator(null, cero.getTriplete(), e1.getTriplete(), Triplete.devolverTipo(cero, e1)));
                op.setValor(e1.getValor()*-1); RESULT = op;
              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("OPERACION_UC",16, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // OPERACION_UC ::= mas OPERACION_UC 
            {
              OperacionPrograma RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()).right;
		OperacionPrograma e1 = (OperacionPrograma)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.peek()).value;
		RESULT = e1;
              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("OPERACION_UC",16, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // OPERACION_UC ::= ATOMC 
            {
              OperacionPrograma RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()).right;
		OperacionPrograma e1 = (OperacionPrograma)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.peek()).value;
		RESULT = e1;
              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("OPERACION_UC",16, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // ATOMC ::= id 
            {
              OperacionPrograma RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.peek()).value;
		VariablePrograma var = sem.existeVar(new VariablePrograma(e1, ProgramaSemantica.AMBITO, null)); 
                if(var == null || !var.isConstant()){
                        reportarSem("Variable no existente con el id: <" + e1 + ">");
                } else{
                        SumOperator sum = sem.getVariables().devolverSum(e1);
                        OperacionPrograma op = new OperacionPrograma(var.getTipo(), sem.getVariables().devolverDireccion(sum.getId()));
                        op.getTripletes().add(sum);
                        op.setValor(var.getValor());
                        RESULT = op;}
              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("ATOMC",17, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // ATOMC ::= entero 
            {
              OperacionPrograma RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.peek()).value;
		OperacionPrograma pro = new OperacionPrograma(VariablePrograma.INT, new TerminalOperator(e1)); pro.setValor(Float.parseFloat(e1));
                        RESULT = pro;
              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("ATOMC",17, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // ATOMC ::= decimal 
            {
              OperacionPrograma RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.peek()).value;
		OperacionPrograma pro = new OperacionPrograma(VariablePrograma.INT, new TerminalOperator(e1)); pro.setValor(Float.parseFloat(e1));
                        RESULT = pro;
              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("ATOMC",17, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // ATOMC ::= character 
            {
              OperacionPrograma RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.peek()).value;
		OperacionPrograma pro = new OperacionPrograma(VariablePrograma.INT, new TerminalOperator(e1)); pro.setValor((float)e1.charAt(1));
                        RESULT = pro;
              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("ATOMC",17, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // ATOMC ::= para OPERACION_AC parc 
            {
              OperacionPrograma RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-1)).right;
		OperacionPrograma e1 = (OperacionPrograma)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-1)).value;
		RESULT = e1;
              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("ATOMC",17, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$SintaxisPrograma$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$SintaxisPrograma$do_action(
    int                        CUP$SintaxisPrograma$act_num,
    java_cup.runtime.lr_parser CUP$SintaxisPrograma$parser,
    java.util.Stack            CUP$SintaxisPrograma$stack,
    int                        CUP$SintaxisPrograma$top)
    throws java.lang.Exception
    {
              return CUP$SintaxisPrograma$do_action_part00000000(
                               CUP$SintaxisPrograma$act_num,
                               CUP$SintaxisPrograma$parser,
                               CUP$SintaxisPrograma$stack,
                               CUP$SintaxisPrograma$top);
    }
}

}
