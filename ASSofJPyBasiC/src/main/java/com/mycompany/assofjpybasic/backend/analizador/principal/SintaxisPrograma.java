
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package com.mycompany.assofjpybasic.backend.analizador.principal;

import java_cup.runtime.*;
import com.mycompany.assofjpybasic.backend.semantica.programa.*;
import java.util.ArrayList;
import java.util.List;
import com.mycompany.assofjpybasic.backend.semantica.programa.cod3.*;
import com.mycompany.assofjpybasic.backend.semantica.python.*;
import com.mycompany.assofjpybasic.backend.semantica.java.*;
import com.mycompany.assofjpybasic.backend.semantica.visual.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class SintaxisPrograma extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return SintaxisProgramaSym.class;
}

  /** Default constructor. */
  @Deprecated
  public SintaxisPrograma() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public SintaxisPrograma(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public SintaxisPrograma(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\177\000\002\002\004\000\002\063\005\000\002\002" +
    "\004\000\002\002\002\000\002\003\003\000\002\003\003" +
    "\000\002\003\005\000\002\003\004\000\002\025\003\000" +
    "\002\025\003\000\002\004\011\000\002\004\004\000\002" +
    "\004\002\000\002\007\003\000\002\007\003\000\002\007" +
    "\003\000\002\011\005\000\002\011\006\000\002\021\006" +
    "\000\002\021\005\000\002\010\006\000\002\010\004\000" +
    "\002\013\004\000\002\013\002\000\002\014\005\000\002" +
    "\014\005\000\002\014\003\000\002\015\005\000\002\015" +
    "\005\000\002\015\005\000\002\015\003\000\002\016\004" +
    "\000\002\016\004\000\002\016\003\000\002\017\003\000" +
    "\002\017\003\000\002\017\003\000\002\017\003\000\002" +
    "\017\004\000\002\017\005\000\002\006\011\000\002\036" +
    "\004\000\002\036\002\000\002\037\003\000\002\037\003" +
    "\000\002\040\003\000\002\040\003\000\002\040\003\000" +
    "\002\040\003\000\002\040\003\000\002\035\004\000\002" +
    "\035\003\000\002\035\004\000\002\035\003\000\002\035" +
    "\003\000\002\035\004\000\002\035\004\000\002\035\003" +
    "\000\002\034\005\000\002\034\006\000\002\032\012\000" +
    "\002\057\004\000\002\057\002\000\002\056\005\000\002" +
    "\056\002\000\002\033\012\000\002\055\006\000\002\055" +
    "\002\000\002\065\002\000\002\045\014\000\002\066\002" +
    "\000\002\061\014\000\002\061\002\000\002\067\002\000" +
    "\002\046\007\000\002\046\002\000\002\041\012\000\002" +
    "\070\002\000\002\062\010\000\002\062\002\000\002\052" +
    "\004\000\002\052\004\000\002\052\002\000\002\071\002" +
    "\000\002\053\006\000\002\053\002\000\002\072\002\000" +
    "\002\047\012\000\002\073\002\000\002\050\013\000\002" +
    "\074\002\000\002\051\016\000\002\044\003\000\002\044" +
    "\003\000\002\044\006\000\002\043\003\000\002\043\003" +
    "\000\002\042\004\000\002\042\004\000\002\031\005\000" +
    "\002\031\003\000\002\030\005\000\002\030\003\000\002" +
    "\027\004\000\002\027\003\000\002\027\005\000\002\026" +
    "\005\000\002\026\005\000\002\026\005\000\002\026\005" +
    "\000\002\026\005\000\002\026\005\000\002\020\010\000" +
    "\002\020\010\000\002\020\012\000\002\012\003\000\002" +
    "\012\003\000\002\012\003\000\002\054\007\000\002\064" +
    "\006\000\002\064\004\000\002\024\005\000\002\024\002" +
    "\000\002\022\003\000\002\022\002\000\002\023\005\000" +
    "\002\023\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0113\000\024\004\ufffe\006\ufffe\007\ufffe\010\ufffe\011" +
    "\ufffe\027\ufffe\064\ufffe\065\ufffe\066\ufffe\001\002\000\024" +
    "\004\ufff5\006\ufff5\007\ufff5\010\ufff5\011\ufff5\027\014\064" +
    "\011\065\010\066\012\001\002\000\004\002\006\001\002" +
    "\000\004\002\001\001\002\000\014\004\030\006\022\007" +
    "\027\010\026\011\025\001\002\000\024\004\ufffd\006\ufffd" +
    "\007\ufffd\010\ufffd\011\ufffd\027\ufffd\064\ufffd\065\ufffd\066" +
    "\ufffd\001\002\000\006\040\016\071\020\001\002\000\024" +
    "\004\ufffc\006\ufffc\007\ufffc\010\ufffc\011\ufffc\027\ufffc\064" +
    "\ufffc\065\ufffc\066\ufffc\001\002\000\024\004\uffff\006\uffff" +
    "\007\uffff\010\uffff\011\uffff\027\uffff\064\uffff\065\uffff\066" +
    "\uffff\001\002\000\004\070\015\001\002\000\024\004\ufffa" +
    "\006\ufffa\007\ufffa\010\ufffa\011\ufffa\027\ufffa\064\ufffa\065" +
    "\ufffa\066\ufffa\001\002\000\004\075\ufff9\001\002\000\004" +
    "\075\021\001\002\000\004\075\ufff8\001\002\000\024\004" +
    "\ufffb\006\ufffb\007\ufffb\010\ufffb\011\ufffb\027\ufffb\064\ufffb" +
    "\065\ufffb\066\ufffb\001\002\000\010\007\027\010\026\011" +
    "\025\001\002\000\004\002\000\001\002\000\014\004\ufff6" +
    "\006\ufff6\007\ufff6\010\ufff6\011\ufff6\001\002\000\004\071" +
    "\ufff2\001\002\000\004\071\ufff3\001\002\000\004\071\ufff4" +
    "\001\002\000\004\005\137\001\002\000\004\071\033\001" +
    "\002\000\006\051\134\052\133\001\002\000\012\047\036" +
    "\051\uffea\052\uffea\061\035\001\002\000\006\047\126\052" +
    "\132\001\002\000\030\036\055\037\046\043\057\060\056" +
    "\071\041\072\052\073\045\074\050\076\060\077\044\100" +
    "\042\001\002\000\030\036\055\037\046\043\057\060\056" +
    "\071\041\072\052\073\045\074\050\076\060\077\044\100" +
    "\042\001\002\000\006\051\uffec\052\uffec\001\002\000\014" +
    "\036\072\044\uff8d\050\uff8d\051\uff8d\052\uff8d\001\002\000" +
    "\050\013\uffdf\014\uffdf\030\uffdf\031\uffdf\032\uffdf\033\uffdf" +
    "\034\uffdf\035\uffdf\036\uffdf\037\uffdf\040\uffdf\041\uffdf\042" +
    "\uffdf\044\uffdf\047\036\050\uffdf\051\uffdf\052\uffdf\053\uffdf" +
    "\001\002\000\004\054\116\001\002\000\046\013\uffe3\014" +
    "\uffe3\030\uffe3\031\uffe3\032\uffe3\033\uffe3\034\uffe3\035\uffe3" +
    "\036\uffe3\037\uffe3\040\uffe3\041\uffe3\042\uffe3\044\uffe3\050" +
    "\uffe3\051\uffe3\052\uffe3\053\uffe3\001\002\000\004\054\111" +
    "\001\002\000\046\013\uffdd\014\uffdd\030\uffdd\031\uffdd\032" +
    "\uffdd\033\uffdd\034\uffdd\035\uffdd\036\uffdd\037\uffdd\040\uffdd" +
    "\041\uffdd\042\uffdd\044\uffdd\050\uffdd\051\uffdd\052\uffdd\053" +
    "\uffdd\001\002\000\020\036\055\037\046\043\057\071\041" +
    "\072\052\073\045\074\050\001\002\000\046\013\uffe0\014" +
    "\uffe0\030\uffe0\031\uffe0\032\uffe0\033\uffe0\034\uffe0\035\uffe0" +
    "\036\uffe0\037\uffe0\040\uffe0\041\uffe0\042\uffe0\044\uffe0\050" +
    "\uffe0\051\uffe0\052\uffe0\053\uffe0\001\002\000\046\013\uffdc" +
    "\014\uffdc\030\uffdc\031\uffdc\032\uffdc\033\uffdc\034\uffdc\035" +
    "\uffdc\036\uffdc\037\uffdc\040\uffdc\041\uffdc\042\uffdc\044\uffdc" +
    "\050\uffdc\051\uffdc\052\uffdc\053\uffdc\001\002\000\046\013" +
    "\uffe7\014\uffe7\030\uffe7\031\uffe7\032\uffe7\033\uffe7\034\uffe7" +
    "\035\uffe7\036\uffe7\037\106\040\074\041\076\042\075\044" +
    "\uffe7\050\uffe7\051\uffe7\052\uffe7\053\uffe7\001\002\000\046" +
    "\013\uffde\014\uffde\030\uffde\031\uffde\032\uffde\033\uffde\034" +
    "\uffde\035\uffde\036\uffde\037\uffde\040\uffde\041\uffde\042\uffde" +
    "\044\uffde\050\uffde\051\uffde\052\uffde\053\uffde\001\002\000" +
    "\012\044\uff8e\050\uff8e\051\uff8e\052\uff8e\001\002\000\004" +
    "\050\105\001\002\000\020\036\055\037\046\043\057\071" +
    "\041\072\052\073\045\074\050\001\002\000\012\044\uff8c" +
    "\050\uff8c\051\uff8c\052\uff8c\001\002\000\020\036\055\037" +
    "\046\043\057\071\041\072\052\073\045\074\050\001\002" +
    "\000\004\054\061\001\002\000\004\071\062\001\002\000" +
    "\004\043\063\001\002\000\024\036\055\037\046\043\057" +
    "\044\uff85\051\uff85\071\041\072\052\073\045\074\050\001" +
    "\002\000\010\036\072\044\uff83\051\uff83\001\002\000\006" +
    "\044\070\051\067\001\002\000\006\044\uff86\051\uff86\001" +
    "\002\000\020\036\055\037\046\043\057\071\041\072\052" +
    "\073\045\074\050\001\002\000\012\044\uff91\050\uff91\051" +
    "\uff91\052\uff91\001\002\000\010\036\072\044\uff84\051\uff84" +
    "\001\002\000\020\036\055\037\046\043\057\071\041\072" +
    "\052\073\045\074\050\001\002\000\044\013\uffe9\014\uffe9" +
    "\030\uffe9\031\uffe9\032\uffe9\033\uffe9\034\uffe9\035\uffe9\036" +
    "\uffe9\040\074\041\076\042\075\044\uffe9\050\uffe9\051\uffe9" +
    "\052\uffe9\053\uffe9\001\002\000\020\036\055\037\046\043" +
    "\057\071\041\072\052\073\045\074\050\001\002\000\020" +
    "\036\055\037\046\043\057\071\041\072\052\073\045\074" +
    "\050\001\002\000\020\036\055\037\046\043\057\071\041" +
    "\072\052\073\045\074\050\001\002\000\046\013\uffe5\014" +
    "\uffe5\030\uffe5\031\uffe5\032\uffe5\033\uffe5\034\uffe5\035\uffe5" +
    "\036\uffe5\037\uffe5\040\uffe5\041\uffe5\042\uffe5\044\uffe5\050" +
    "\uffe5\051\uffe5\052\uffe5\053\uffe5\001\002\000\046\013\uffe4" +
    "\014\uffe4\030\uffe4\031\uffe4\032\uffe4\033\uffe4\034\uffe4\035" +
    "\uffe4\036\uffe4\037\uffe4\040\uffe4\041\uffe4\042\uffe4\044\uffe4" +
    "\050\uffe4\051\uffe4\052\uffe4\053\uffe4\001\002\000\046\013" +
    "\uffe6\014\uffe6\030\uffe6\031\uffe6\032\uffe6\033\uffe6\034\uffe6" +
    "\035\uffe6\036\uffe6\037\uffe6\040\uffe6\041\uffe6\042\uffe6\044" +
    "\uffe6\050\uffe6\051\uffe6\052\uffe6\053\uffe6\001\002\000\006" +
    "\036\072\044\103\001\002\000\046\013\uffda\014\uffda\030" +
    "\uffda\031\uffda\032\uffda\033\uffda\034\uffda\035\uffda\036\uffda" +
    "\037\uffda\040\uffda\041\uffda\042\uffda\044\uffda\050\uffda\051" +
    "\uffda\052\uffda\053\uffda\001\002\000\046\013\uffe1\014\uffe1" +
    "\030\uffe1\031\uffe1\032\uffe1\033\uffe1\034\uffe1\035\uffe1\036" +
    "\uffe1\037\uffe1\040\uffe1\041\uffe1\042\uffe1\044\uffe1\050\uffe1" +
    "\051\uffe1\052\uffe1\053\uffe1\001\002\000\052\013\uffee\014" +
    "\uffee\030\uffee\031\uffee\032\uffee\033\uffee\034\uffee\035\uffee" +
    "\036\uffee\037\uffee\040\uffee\041\uffee\042\uffee\044\uffee\047" +
    "\uffee\050\uffee\051\uffee\052\uffee\053\uffee\061\uffee\001\002" +
    "\000\020\036\055\037\046\043\057\071\041\072\052\073" +
    "\045\074\050\001\002\000\044\013\uffe8\014\uffe8\030\uffe8" +
    "\031\uffe8\032\uffe8\033\uffe8\034\uffe8\035\uffe8\036\uffe8\040" +
    "\074\041\076\042\075\044\uffe8\050\uffe8\051\uffe8\052\uffe8" +
    "\053\uffe8\001\002\000\046\013\uffe2\014\uffe2\030\uffe2\031" +
    "\uffe2\032\uffe2\033\uffe2\034\uffe2\035\uffe2\036\uffe2\037\uffe2" +
    "\040\uffe2\041\uffe2\042\uffe2\044\uffe2\050\uffe2\051\uffe2\052" +
    "\uffe2\053\uffe2\001\002\000\004\071\112\001\002\000\004" +
    "\043\113\001\002\000\024\036\055\037\046\043\057\044" +
    "\uff85\051\uff85\071\041\072\052\073\045\074\050\001\002" +
    "\000\006\044\115\051\067\001\002\000\012\044\uff90\050" +
    "\uff90\051\uff90\052\uff90\001\002\000\004\071\117\001\002" +
    "\000\004\054\120\001\002\000\004\071\121\001\002\000" +
    "\004\043\122\001\002\000\024\036\055\037\046\043\057" +
    "\044\uff85\051\uff85\071\041\072\052\073\045\074\050\001" +
    "\002\000\006\044\124\051\067\001\002\000\012\044\uff8f" +
    "\050\uff8f\051\uff8f\052\uff8f\001\002\000\050\013\uffdb\014" +
    "\uffdb\030\uffdb\031\uffdb\032\uffdb\033\uffdb\034\uffdb\035\uffdb" +
    "\036\uffdb\037\uffdb\040\uffdb\041\uffdb\042\uffdb\044\uffdb\047" +
    "\126\050\uffdb\051\uffdb\052\uffdb\053\uffdb\001\002\000\030" +
    "\036\055\037\046\043\057\060\056\071\041\072\052\073" +
    "\045\074\050\076\060\077\044\100\042\001\002\000\004" +
    "\050\130\001\002\000\052\013\uffef\014\uffef\030\uffef\031" +
    "\uffef\032\uffef\033\uffef\034\uffef\035\uffef\036\uffef\037\uffef" +
    "\040\uffef\041\uffef\042\uffef\044\uffef\047\uffef\050\uffef\051" +
    "\uffef\052\uffef\053\uffef\061\uffef\001\002\000\006\051\uffeb" +
    "\052\uffeb\001\002\000\056\004\ufff0\006\ufff0\007\ufff0\010" +
    "\ufff0\011\ufff0\016\ufff0\020\ufff0\021\ufff0\022\ufff0\023\ufff0" +
    "\024\ufff0\025\ufff0\026\ufff0\046\ufff0\055\ufff0\056\ufff0\057" +
    "\ufff0\060\ufff0\071\ufff0\076\ufff0\077\ufff0\100\ufff0\001\002" +
    "\000\056\004\ufff1\006\ufff1\007\ufff1\010\ufff1\011\ufff1\016" +
    "\ufff1\020\ufff1\021\ufff1\022\ufff1\023\ufff1\024\ufff1\025\ufff1" +
    "\026\ufff1\046\ufff1\055\ufff1\056\ufff1\057\ufff1\060\ufff1\071" +
    "\ufff1\076\ufff1\077\ufff1\100\ufff1\001\002\000\004\071\135" +
    "\001\002\000\010\051\uffea\052\uffea\061\035\001\002\000" +
    "\006\051\uffed\052\uffed\001\002\000\004\043\140\001\002" +
    "\000\004\044\141\001\002\000\004\045\142\001\002\000" +
    "\044\007\027\010\026\011\025\016\161\020\174\021\150" +
    "\023\156\026\165\046\uffd7\055\173\056\162\057\170\060" +
    "\151\071\160\076\060\077\044\100\143\001\002\000\004" +
    "\054\u0105\001\002\000\052\007\uffc8\010\uffc8\011\uffc8\016" +
    "\uffc8\020\uffc8\021\uffc8\022\uffc8\023\uffc8\024\uffc8\025\uffc8" +
    "\026\uffc8\046\uffc8\055\uffc8\056\uffc8\057\uffc8\060\uffc8\071" +
    "\uffc8\076\uffc8\077\uffc8\100\uffc8\001\002\000\004\052\u0104" +
    "\001\002\000\052\007\uffd4\010\uffd4\011\uffd4\016\uffd4\020" +
    "\uffd4\021\uffd4\022\uffd4\023\uffd4\024\uffd4\025\uffd4\026\uffd4" +
    "\046\uffd4\055\uffd4\056\uffd4\057\uffd4\060\uffd4\071\uffd4\076" +
    "\uffd4\077\uffd4\100\uffd4\001\002\000\052\007\uffcb\010\uffcb" +
    "\011\uffcb\016\uffcb\020\uffcb\021\uffcb\022\uffcb\023\uffcb\024" +
    "\uffcb\025\uffcb\026\uffcb\046\uffcb\055\uffcb\056\uffcb\057\uffcb" +
    "\060\uffcb\071\uffcb\076\uffcb\077\uffcb\100\uffcb\001\002\000" +
    "\004\043\360\001\002\000\004\052\357\001\002\000\052" +
    "\007\uffd0\010\uffd0\011\uffd0\016\uffd0\020\uffd0\021\uffd0\022" +
    "\uffd0\023\uffd0\024\uffd0\025\uffd0\026\uffd0\046\uffd0\055\uffd0" +
    "\056\uffd0\057\uffd0\060\uffd0\071\uffd0\076\uffd0\077\uffd0\100" +
    "\uffd0\001\002\000\052\007\uffcc\010\uffcc\011\uffcc\016\uffcc" +
    "\020\uffcc\021\uffcc\022\uffcc\023\uffcc\024\uffcc\025\uffcc\026" +
    "\uffcc\046\uffcc\055\uffcc\056\uffcc\057\uffcc\060\uffcc\071\uffcc" +
    "\076\uffcc\077\uffcc\100\uffcc\001\002\000\052\007\uffd1\010" +
    "\uffd1\011\uffd1\016\uffd1\020\uffd1\021\uffd1\022\uffd1\023\uffd1" +
    "\024\uffd1\025\uffd1\026\uffd1\046\uffd1\055\uffd1\056\uffd1\057" +
    "\uffd1\060\uffd1\071\uffd1\076\uffd1\077\uffd1\100\uffd1\001\002" +
    "\000\004\046\356\001\002\000\004\043\347\001\002\000" +
    "\052\007\uffd3\010\uffd3\011\uffd3\016\uffd3\020\uffd3\021\uffd3" +
    "\022\uffd3\023\uffd3\024\uffd3\025\uffd3\026\uffd3\046\uffd3\055" +
    "\uffd3\056\uffd3\057\uffd3\060\uffd3\071\uffd3\076\uffd3\077\uffd3" +
    "\100\uffd3\001\002\000\006\047\036\061\206\001\002\000" +
    "\004\043\321\001\002\000\004\043\307\001\002\000\004" +
    "\052\306\001\002\000\052\007\uffd5\010\uffd5\011\uffd5\016" +
    "\uffd5\020\uffd5\021\uffd5\022\uffd5\023\uffd5\024\uffd5\025\uffd5" +
    "\026\uffd5\046\uffd5\055\uffd5\056\uffd5\057\uffd5\060\uffd5\071" +
    "\uffd5\076\uffd5\077\uffd5\100\uffd5\001\002\000\004\045\276" +
    "\001\002\000\052\007\uffce\010\uffce\011\uffce\016\uffce\020" +
    "\uffce\021\uffce\022\uffce\023\uffce\024\uffce\025\uffce\026\uffce" +
    "\046\uffce\055\uffce\056\uffce\057\uffce\060\uffce\071\uffce\076" +
    "\uffce\077\uffce\100\uffce\001\002\000\044\007\027\010\026" +
    "\011\025\016\161\020\174\021\150\023\156\026\165\046" +
    "\uffd7\055\173\056\162\057\170\060\151\071\160\076\060" +
    "\077\044\100\143\001\002\000\004\052\274\001\002\000" +
    "\052\007\uffd2\010\uffd2\011\uffd2\016\uffd2\020\uffd2\021\uffd2" +
    "\022\uffd2\023\uffd2\024\uffd2\025\uffd2\026\uffd2\046\uffd2\055" +
    "\uffd2\056\uffd2\057\uffd2\060\uffd2\071\uffd2\076\uffd2\077\uffd2" +
    "\100\uffd2\001\002\000\052\007\uffd6\010\uffd6\011\uffd6\016" +
    "\uffd6\020\uffd6\021\uffd6\022\uffd6\023\uffd6\024\uffd6\025\uffd6" +
    "\026\uffd6\046\uffd6\055\uffd6\056\uffd6\057\uffd6\060\uffd6\071" +
    "\uffd6\076\uffd6\077\uffd6\100\uffd6\001\002\000\004\043\262" +
    "\001\002\000\004\043\175\001\002\000\012\007\027\010" +
    "\026\011\025\071\200\001\002\000\004\052\uffa5\001\002" +
    "\000\004\052\212\001\002\000\010\047\036\052\uffa4\061" +
    "\206\001\002\000\004\071\202\001\002\000\004\061\203" +
    "\001\002\000\030\036\055\037\046\043\057\060\056\071" +
    "\041\072\052\073\045\074\050\076\060\077\044\100\042" +
    "\001\002\000\004\052\uffa3\001\002\000\006\047\126\061" +
    "\210\001\002\000\030\036\055\037\046\043\057\060\056" +
    "\071\041\072\052\073\045\074\050\076\060\077\044\100" +
    "\042\001\002\000\006\044\uffc7\052\uffc7\001\002\000\030" +
    "\036\055\037\046\043\057\060\056\071\041\072\052\073" +
    "\045\074\050\076\060\077\044\100\042\001\002\000\006" +
    "\044\uffc6\052\uffc6\001\002\000\022\015\213\036\055\037" +
    "\046\043\220\071\041\072\052\073\045\074\050\001\002" +
    "\000\022\015\213\036\055\037\046\043\220\071\041\072" +
    "\052\073\045\074\050\001\002\000\012\013\225\014\uff9d" +
    "\044\uff9d\052\uff9d\001\002\000\012\013\uff99\014\uff99\044" +
    "\uff99\052\uff99\001\002\000\020\030\247\031\250\032\252" +
    "\033\251\034\245\035\246\036\072\001\002\000\012\013" +
    "\uff9b\014\uff9b\044\uff9b\052\uff9b\001\002\000\022\015\213" +
    "\036\055\037\046\043\220\071\041\072\052\073\045\074" +
    "\050\001\002\000\006\014\223\052\222\001\002\000\004" +
    "\071\232\001\002\000\022\015\213\036\055\037\046\043" +
    "\220\071\041\072\052\073\045\074\050\001\002\000\012" +
    "\013\225\014\uff9e\044\uff9e\052\uff9e\001\002\000\022\015" +
    "\213\036\055\037\046\043\220\071\041\072\052\073\045" +
    "\074\050\001\002\000\012\013\uff9c\014\uff9c\044\uff9c\052" +
    "\uff9c\001\002\000\004\044\235\001\002\000\004\044\uffa2" +
    "\001\002\000\004\044\uffa1\001\002\000\012\047\036\061" +
    "\206\062\233\063\234\001\002\000\004\044\uffa0\001\002" +
    "\000\004\044\uff9f\001\002\000\004\045\236\001\002\000" +
    "\044\007\uffa7\010\uffa7\011\uffa7\016\uffa7\020\uffa7\021\uffa7" +
    "\023\uffa7\026\uffa7\046\uffa7\055\uffa7\056\uffa7\057\uffa7\060" +
    "\uffa7\071\uffa7\076\uffa7\077\uffa7\100\uffa7\001\002\000\044" +
    "\007\027\010\026\011\025\016\161\020\174\021\150\023" +
    "\156\026\165\046\uffd7\055\173\056\162\057\170\060\151" +
    "\071\160\076\060\077\044\100\143\001\002\000\004\046" +
    "\241\001\002\000\052\007\uffa6\010\uffa6\011\uffa6\016\uffa6" +
    "\020\uffa6\021\uffa6\022\uffa6\023\uffa6\024\uffa6\025\uffa6\026" +
    "\uffa6\046\uffa6\055\uffa6\056\uffa6\057\uffa6\060\uffa6\071\uffa6" +
    "\076\uffa6\077\uffa6\100\uffa6\001\002\000\022\030\247\031" +
    "\250\032\252\033\251\034\245\035\246\036\072\044\103" +
    "\001\002\000\006\014\223\044\244\001\002\000\012\013" +
    "\uff98\014\uff98\044\uff98\052\uff98\001\002\000\020\036\055" +
    "\037\046\043\057\071\041\072\052\073\045\074\050\001" +
    "\002\000\020\036\055\037\046\043\057\071\041\072\052" +
    "\073\045\074\050\001\002\000\020\036\055\037\046\043" +
    "\057\071\041\072\052\073\045\074\050\001\002\000\020" +
    "\036\055\037\046\043\057\071\041\072\052\073\045\074" +
    "\050\001\002\000\020\036\055\037\046\043\057\071\041" +
    "\072\052\073\045\074\050\001\002\000\020\036\055\037" +
    "\046\043\057\071\041\072\052\073\045\074\050\001\002" +
    "\000\014\013\uff94\014\uff94\036\072\044\uff94\052\uff94\001" +
    "\002\000\014\013\uff93\014\uff93\036\072\044\uff93\052\uff93" +
    "\001\002\000\014\013\uff95\014\uff95\036\072\044\uff95\052" +
    "\uff95\001\002\000\014\013\uff96\014\uff96\036\072\044\uff96" +
    "\052\uff96\001\002\000\014\013\uff97\014\uff97\036\072\044" +
    "\uff97\052\uff97\001\002\000\014\013\uff92\014\uff92\036\072" +
    "\044\uff92\052\uff92\001\002\000\012\013\uff9a\014\uff9a\044" +
    "\uff9a\052\uff9a\001\002\000\004\075\263\001\002\000\006" +
    "\075\uffc3\101\uffc3\001\002\000\006\075\266\101\265\001" +
    "\002\000\006\075\uffc4\101\uffc4\001\002\000\006\044\uffc1" +
    "\051\uffc1\001\002\000\006\044\271\051\270\001\002\000" +
    "\020\036\055\037\046\043\057\071\041\072\052\073\045" +
    "\074\050\001\002\000\004\052\272\001\002\000\052\007" +
    "\uffc5\010\uffc5\011\uffc5\016\uffc5\020\uffc5\021\uffc5\022\uffc5" +
    "\023\uffc5\024\uffc5\025\uffc5\026\uffc5\046\uffc5\055\uffc5\056" +
    "\uffc5\057\uffc5\060\uffc5\071\uffc5\076\uffc5\077\uffc5\100\uffc5" +
    "\001\002\000\010\036\072\044\uffc2\051\uffc2\001\002\000" +
    "\052\007\uffcf\010\uffcf\011\uffcf\016\uffcf\020\uffcf\021\uffcf" +
    "\022\uffcf\023\uffcf\024\uffcf\025\uffcf\026\uffcf\046\uffcf\055" +
    "\uffcf\056\uffcf\057\uffcf\060\uffcf\071\uffcf\076\uffcf\077\uffcf" +
    "\100\uffcf\001\002\000\004\046\uffd8\001\002\000\044\007" +
    "\uffa9\010\uffa9\011\uffa9\016\uffa9\020\uffa9\021\uffa9\023\uffa9" +
    "\026\uffa9\046\uffa9\055\uffa9\056\uffa9\057\uffa9\060\uffa9\071" +
    "\uffa9\076\uffa9\077\uffa9\100\uffa9\001\002\000\044\007\027" +
    "\010\026\011\025\016\161\020\174\021\150\023\156\026" +
    "\165\046\uffd7\055\173\056\162\057\170\060\151\071\160" +
    "\076\060\077\044\100\143\001\002\000\004\046\301\001" +
    "\002\000\004\023\302\001\002\000\004\043\303\001\002" +
    "\000\022\015\213\036\055\037\046\043\220\071\041\072" +
    "\052\073\045\074\050\001\002\000\006\014\223\044\305" +
    "\001\002\000\052\007\uffa8\010\uffa8\011\uffa8\016\uffa8\020" +
    "\uffa8\021\uffa8\022\uffa8\023\uffa8\024\uffa8\025\uffa8\026\uffa8" +
    "\046\uffa8\055\uffa8\056\uffa8\057\uffa8\060\uffa8\071\uffa8\076" +
    "\uffa8\077\uffa8\100\uffa8\001\002\000\052\007\uffca\010\uffca" +
    "\011\uffca\016\uffca\020\uffca\021\uffca\022\uffca\023\uffca\024" +
    "\uffca\025\uffca\026\uffca\046\uffca\055\uffca\056\uffca\057\uffca" +
    "\060\uffca\071\uffca\076\uffca\077\uffca\100\uffca\001\002\000" +
    "\004\075\310\001\002\000\006\075\uffc3\101\uffc3\001\002" +
    "\000\006\075\312\101\265\001\002\000\006\044\uffbe\051" +
    "\uffbe\001\002\000\006\044\315\051\314\001\002\000\004" +
    "\012\317\001\002\000\004\052\316\001\002\000\052\007" +
    "\uffc0\010\uffc0\011\uffc0\016\uffc0\020\uffc0\021\uffc0\022\uffc0" +
    "\023\uffc0\024\uffc0\025\uffc0\026\uffc0\046\uffc0\055\uffc0\056" +
    "\uffc0\057\uffc0\060\uffc0\071\uffc0\076\uffc0\077\uffc0\100\uffc0" +
    "\001\002\000\004\071\320\001\002\000\006\044\uffbf\051" +
    "\uffbf\001\002\000\022\015\213\036\055\037\046\043\220" +
    "\071\041\072\052\073\045\074\050\001\002\000\006\014" +
    "\223\044\323\001\002\000\004\045\324\001\002\000\044" +
    "\007\uffbd\010\uffbd\011\uffbd\016\uffbd\020\uffbd\021\uffbd\023" +
    "\uffbd\026\uffbd\046\uffbd\055\uffbd\056\uffbd\057\uffbd\060\uffbd" +
    "\071\uffbd\076\uffbd\077\uffbd\100\uffbd\001\002\000\044\007" +
    "\027\010\026\011\025\016\161\020\174\021\150\023\156" +
    "\026\165\046\uffd7\055\173\056\162\057\170\060\151\071" +
    "\160\076\060\077\044\100\143\001\002\000\004\046\327" +
    "\001\002\000\054\007\uffb9\010\uffb9\011\uffb9\016\uffb9\017" +
    "\uffb9\020\uffb9\021\uffb9\022\uffb9\023\uffb9\024\uffb9\025\uffb9" +
    "\026\uffb9\046\uffb9\055\uffb9\056\uffb9\057\uffb9\060\uffb9\071" +
    "\uffb9\076\uffb9\077\uffb9\100\uffb9\001\002\000\054\007\uffb6" +
    "\010\uffb6\011\uffb6\016\uffb6\017\332\020\uffb6\021\uffb6\022" +
    "\uffb6\023\uffb6\024\uffb6\025\uffb6\026\uffb6\046\uffb6\055\uffb6" +
    "\056\uffb6\057\uffb6\060\uffb6\071\uffb6\076\uffb6\077\uffb6\100" +
    "\uffb6\001\002\000\052\007\uffbc\010\uffbc\011\uffbc\016\uffbc" +
    "\020\uffbc\021\uffbc\022\uffbc\023\uffbc\024\uffbc\025\uffbc\026" +
    "\uffbc\046\uffbc\055\uffbc\056\uffbc\057\uffbc\060\uffbc\071\uffbc" +
    "\076\uffbc\077\uffbc\100\uffbc\001\002\000\006\016\333\045" +
    "\334\001\002\000\004\043\340\001\002\000\044\007\uffb8" +
    "\010\uffb8\011\uffb8\016\uffb8\020\uffb8\021\uffb8\023\uffb8\026" +
    "\uffb8\046\uffb8\055\uffb8\056\uffb8\057\uffb8\060\uffb8\071\uffb8" +
    "\076\uffb8\077\uffb8\100\uffb8\001\002\000\044\007\027\010" +
    "\026\011\025\016\161\020\174\021\150\023\156\026\165" +
    "\046\uffd7\055\173\056\162\057\170\060\151\071\160\076" +
    "\060\077\044\100\143\001\002\000\004\046\337\001\002" +
    "\000\052\007\uffb7\010\uffb7\011\uffb7\016\uffb7\020\uffb7\021" +
    "\uffb7\022\uffb7\023\uffb7\024\uffb7\025\uffb7\026\uffb7\046\uffb7" +
    "\055\uffb7\056\uffb7\057\uffb7\060\uffb7\071\uffb7\076\uffb7\077" +
    "\uffb7\100\uffb7\001\002\000\022\015\213\036\055\037\046" +
    "\043\220\071\041\072\052\073\045\074\050\001\002\000" +
    "\006\014\223\044\342\001\002\000\004\045\343\001\002" +
    "\000\044\007\uffbb\010\uffbb\011\uffbb\016\uffbb\020\uffbb\021" +
    "\uffbb\023\uffbb\026\uffbb\046\uffbb\055\uffbb\056\uffbb\057\uffbb" +
    "\060\uffbb\071\uffbb\076\uffbb\077\uffbb\100\uffbb\001\002\000" +
    "\044\007\027\010\026\011\025\016\161\020\174\021\150" +
    "\023\156\026\165\046\uffd7\055\173\056\162\057\170\060" +
    "\151\071\160\076\060\077\044\100\143\001\002\000\004" +
    "\046\346\001\002\000\054\007\uffba\010\uffba\011\uffba\016" +
    "\uffba\017\uffba\020\uffba\021\uffba\022\uffba\023\uffba\024\uffba" +
    "\025\uffba\026\uffba\046\uffba\055\uffba\056\uffba\057\uffba\060" +
    "\uffba\071\uffba\076\uffba\077\uffba\100\uffba\001\002\000\022" +
    "\015\213\036\055\037\046\043\220\071\041\072\052\073" +
    "\045\074\050\001\002\000\006\014\223\044\351\001\002" +
    "\000\004\045\352\001\002\000\044\007\uffab\010\uffab\011" +
    "\uffab\016\uffab\020\uffab\021\uffab\023\uffab\026\uffab\046\uffab" +
    "\055\uffab\056\uffab\057\uffab\060\uffab\071\uffab\076\uffab\077" +
    "\uffab\100\uffab\001\002\000\044\007\027\010\026\011\025" +
    "\016\161\020\174\021\150\023\156\026\165\046\uffd7\055" +
    "\173\056\162\057\170\060\151\071\160\076\060\077\044" +
    "\100\143\001\002\000\004\046\355\001\002\000\052\007" +
    "\uffaa\010\uffaa\011\uffaa\016\uffaa\020\uffaa\021\uffaa\022\uffaa" +
    "\023\uffaa\024\uffaa\025\uffaa\026\uffaa\046\uffaa\055\uffaa\056" +
    "\uffaa\057\uffaa\060\uffaa\071\uffaa\076\uffaa\077\uffaa\100\uffaa" +
    "\001\002\000\004\002\uffd9\001\002\000\052\007\uffc9\010" +
    "\uffc9\011\uffc9\016\uffc9\020\uffc9\021\uffc9\022\uffc9\023\uffc9" +
    "\024\uffc9\025\uffc9\026\uffc9\046\uffc9\055\uffc9\056\uffc9\057" +
    "\uffc9\060\uffc9\071\uffc9\076\uffc9\077\uffc9\100\uffc9\001\002" +
    "\000\030\036\055\037\046\043\057\060\056\071\041\072" +
    "\052\073\045\074\050\076\060\077\044\100\042\001\002" +
    "\000\004\044\362\001\002\000\004\045\363\001\002\000" +
    "\010\022\uffb2\024\uffb2\046\uffb2\001\002\000\010\022\367" +
    "\024\366\046\uffac\001\002\000\004\046\u0103\001\002\000" +
    "\004\053\u0100\001\002\000\020\036\055\037\046\043\057" +
    "\071\041\072\052\073\045\074\050\001\002\000\006\036" +
    "\072\053\371\001\002\000\052\007\uffb4\010\uffb4\011\uffb4" +
    "\016\uffb4\020\uffb4\021\uffb4\022\uffb4\023\uffb4\024\uffb4\025" +
    "\uffb4\026\uffb4\046\uffb4\055\uffb4\056\uffb4\057\uffb4\060\uffb4" +
    "\071\uffb4\076\uffb4\077\uffb4\100\uffb4\001\002\000\052\007" +
    "\027\010\026\011\025\016\161\020\174\021\150\022\uffaf" +
    "\023\156\024\uffaf\025\374\026\165\046\uffaf\055\173\056" +
    "\162\057\170\060\151\071\160\076\060\077\044\100\143" +
    "\001\002\000\010\022\uffb3\024\uffb3\046\uffb3\001\002\000" +
    "\004\052\377\001\002\000\052\007\027\010\026\011\025" +
    "\016\161\020\174\021\150\022\uffaf\023\156\024\uffaf\025" +
    "\374\026\165\046\uffaf\055\173\056\162\057\170\060\151" +
    "\071\160\076\060\077\044\100\143\001\002\000\010\022" +
    "\uffb1\024\uffb1\046\uffb1\001\002\000\010\022\uffb0\024\uffb0" +
    "\046\uffb0\001\002\000\046\007\uffae\010\uffae\011\uffae\016" +
    "\uffae\020\uffae\021\uffae\023\uffae\025\uffae\026\uffae\046\uffae" +
    "\055\uffae\056\uffae\057\uffae\060\uffae\071\uffae\076\uffae\077" +
    "\uffae\100\uffae\001\002\000\046\007\027\010\026\011\025" +
    "\016\161\020\174\021\150\023\156\025\374\026\165\046" +
    "\uffaf\055\173\056\162\057\170\060\151\071\160\076\060" +
    "\077\044\100\143\001\002\000\004\046\uffad\001\002\000" +
    "\052\007\uffb5\010\uffb5\011\uffb5\016\uffb5\020\uffb5\021\uffb5" +
    "\022\uffb5\023\uffb5\024\uffb5\025\uffb5\026\uffb5\046\uffb5\055" +
    "\uffb5\056\uffb5\057\uffb5\060\uffb5\071\uffb5\076\uffb5\077\uffb5" +
    "\100\uffb5\001\002\000\052\007\uffcd\010\uffcd\011\uffcd\016" +
    "\uffcd\020\uffcd\021\uffcd\022\uffcd\023\uffcd\024\uffcd\025\uffcd" +
    "\026\uffcd\046\uffcd\055\uffcd\056\uffcd\057\uffcd\060\uffcd\071" +
    "\uffcd\076\uffcd\077\uffcd\100\uffcd\001\002\000\004\071\u0106" +
    "\001\002\000\006\054\120\071\u0108\001\002\000\006\051" +
    "\u010e\052\u010d\001\002\000\010\043\u0109\051\uff87\052\uff87" +
    "\001\002\000\024\036\055\037\046\043\057\044\uff85\051" +
    "\uff85\071\041\072\052\073\045\074\050\001\002\000\006" +
    "\051\uff89\052\uff89\001\002\000\006\044\u010c\051\067\001" +
    "\002\000\006\051\uff88\052\uff88\001\002\000\052\007\uff8b" +
    "\010\uff8b\011\uff8b\016\uff8b\020\uff8b\021\uff8b\022\uff8b\023" +
    "\uff8b\024\uff8b\025\uff8b\026\uff8b\046\uff8b\055\uff8b\056\uff8b" +
    "\057\uff8b\060\uff8b\071\uff8b\076\uff8b\077\uff8b\100\uff8b\001" +
    "\002\000\004\071\u010f\001\002\000\010\043\u0109\051\uff87" +
    "\052\uff87\001\002\000\006\051\uff8a\052\uff8a\001\002\000" +
    "\004\071\u0112\001\002\000\004\061\u0113\001\002\000\030" +
    "\036\055\037\046\043\057\060\056\071\041\072\052\073" +
    "\045\074\050\076\060\077\044\100\042\001\002\000\004" +
    "\052\u0115\001\002\000\014\004\ufff7\006\ufff7\007\ufff7\010" +
    "\ufff7\011\ufff7\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0113\000\006\002\003\063\004\001\001\000\006\003" +
    "\012\004\006\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\006\022\007\030\011\023\001\001\000\002\001" +
    "\001\000\004\025\016\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\007\u0110\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\010\031\001\001\000\002\001" +
    "\001\000\006\013\036\021\033\001\001\000\002\001\001" +
    "\000\016\012\130\014\037\015\050\016\042\017\046\020" +
    "\052\001\001\000\016\012\053\014\037\015\050\016\042" +
    "\017\046\020\052\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\021\124\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\016" +
    "\107\017\046\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\016\103\017\046\001\001\000\002" +
    "\001\001\000\012\014\101\015\050\016\042\017\046\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\016\014\063\015\050\016\042\017\046\022\064\023" +
    "\065\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\014\070\015\050\016\042\017\046\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\015\072" +
    "\016\042\017\046\001\001\000\002\001\001\000\006\016" +
    "\100\017\046\001\001\000\006\016\077\017\046\001\001" +
    "\000\006\016\076\017\046\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\015" +
    "\106\016\042\017\046\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\016\014" +
    "\063\015\050\016\042\017\046\022\113\023\065\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\016" +
    "\014\063\015\050\016\042\017\046\022\122\023\065\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\016\012\126\014\037\015\050\016\042\017\046\020" +
    "\052\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\013\135\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\042\007" +
    "\030\011\165\020\162\032\152\033\146\034\144\035\163" +
    "\036\154\037\166\040\171\041\151\045\153\047\145\050" +
    "\156\051\170\054\143\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\021\204\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\042" +
    "\007\030\011\165\020\162\032\152\033\146\034\144\035" +
    "\163\036\274\037\166\040\171\041\151\045\153\047\145" +
    "\050\156\051\170\054\143\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\007\200\034\175\044\176\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\021\204\001\001" +
    "\000\002\001\001\000\002\001\001\000\016\012\203\014" +
    "\037\015\050\016\042\017\046\020\052\001\001\000\002" +
    "\001\001\000\002\001\001\000\016\012\206\014\037\015" +
    "\050\016\042\017\046\020\052\001\001\000\002\001\001" +
    "\000\016\012\210\014\037\015\050\016\042\017\046\020" +
    "\052\001\001\000\002\001\001\000\022\014\215\015\050" +
    "\016\042\017\046\026\214\027\216\030\213\031\220\001" +
    "\001\000\016\014\215\015\050\016\042\017\046\026\214" +
    "\027\260\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\022\014\241\015\050" +
    "\016\042\017\046\026\214\027\216\030\213\031\242\001" +
    "\001\000\002\001\001\000\010\034\227\042\230\043\226" +
    "\001\001\000\020\014\215\015\050\016\042\017\046\026" +
    "\214\027\216\030\223\001\001\000\002\001\001\000\016" +
    "\014\215\015\050\016\042\017\046\026\214\027\225\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\021\204\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\074\236" +
    "\001\001\000\042\007\030\011\165\020\162\032\152\033" +
    "\146\034\144\035\163\036\237\037\166\040\171\041\151" +
    "\045\153\047\145\050\156\051\170\054\143\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\014\257\015\050\016" +
    "\042\017\046\001\001\000\012\014\256\015\050\016\042" +
    "\017\046\001\001\000\012\014\255\015\050\016\042\017" +
    "\046\001\001\000\012\014\254\015\050\016\042\017\046" +
    "\001\001\000\012\014\253\015\050\016\042\017\046\001" +
    "\001\000\012\014\252\015\050\016\042\017\046\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\057\263\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\056\266\001\001" +
    "\000\002\001\001\000\012\014\272\015\050\016\042\017" +
    "\046\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\073" +
    "\276\001\001\000\042\007\030\011\165\020\162\032\152" +
    "\033\146\034\144\035\163\036\277\037\166\040\171\041" +
    "\151\045\153\047\145\050\156\051\170\054\143\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\022\014\215\015\050\016\042\017\046\026\214\027\216" +
    "\030\213\031\303\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\057\310" +
    "\001\001\000\002\001\001\000\004\055\312\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\022\014" +
    "\215\015\050\016\042\017\046\026\214\027\216\030\213" +
    "\031\321\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\065\324\001\001\000\042\007\030\011\165\020\162" +
    "\032\152\033\146\034\144\035\163\036\325\037\166\040" +
    "\171\041\151\045\153\047\145\050\156\051\170\054\143" +
    "\001\001\000\002\001\001\000\004\061\327\001\001\000" +
    "\004\046\330\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\067\334\001\001\000\042\007" +
    "\030\011\165\020\162\032\152\033\146\034\144\035\163" +
    "\036\335\037\166\040\171\041\151\045\153\047\145\050" +
    "\156\051\170\054\143\001\001\000\002\001\001\000\002" +
    "\001\001\000\022\014\215\015\050\016\042\017\046\026" +
    "\214\027\216\030\213\031\340\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\066\343\001\001\000\042\007" +
    "\030\011\165\020\162\032\152\033\146\034\144\035\163" +
    "\036\344\037\166\040\171\041\151\045\153\047\145\050" +
    "\156\051\170\054\143\001\001\000\002\001\001\000\002" +
    "\001\001\000\022\014\215\015\050\016\042\017\046\026" +
    "\214\027\216\030\213\031\347\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\072\352\001\001\000\042\007" +
    "\030\011\165\020\162\032\152\033\146\034\144\035\163" +
    "\036\353\037\166\040\171\041\151\045\153\047\145\050" +
    "\156\051\170\054\143\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\016\012" +
    "\360\014\037\015\050\016\042\017\046\020\052\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\062\363\001" +
    "\001\000\004\053\364\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\014\367\015\050\016\042\017\046\001" +
    "\001\000\002\001\001\000\004\070\371\001\001\000\042" +
    "\007\030\011\165\020\162\032\152\033\146\034\144\035" +
    "\163\037\374\040\171\041\151\045\153\047\145\050\156" +
    "\051\170\052\372\054\143\001\001\000\002\001\001\000" +
    "\002\001\001\000\042\007\030\011\165\020\162\032\152" +
    "\033\146\034\144\035\163\037\374\040\171\041\151\045" +
    "\153\047\145\050\156\051\170\052\375\054\143\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\071\u0100\001" +
    "\001\000\042\007\030\011\165\020\162\032\152\033\146" +
    "\034\144\035\163\037\374\040\171\041\151\045\153\047" +
    "\145\050\156\051\170\052\u0101\054\143\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\064\u0106\001\001\000\002\001\001\000\004" +
    "\024\u0109\001\001\000\016\014\063\015\050\016\042\017" +
    "\046\022\u010a\023\065\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\024\u010f\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\016\012\u0113\014\037\015" +
    "\050\016\042\017\046\020\052\001\001\000\002\001\001" +
    "\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$SintaxisPrograma$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$SintaxisPrograma$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$SintaxisPrograma$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    private Symbol s;
    private ProgramaSemantica sem = new ProgramaSemantica();
    private boolean esCase = false;
    private String java, vb, py;
    
    public void syntax_error(Symbol sym){
        System.out.println("\n" + sym.value + sym.sym);
        System.out.println("Error Sintactico en la letra: " + sym.value + "   <linea>: "  + (sym.right + 1) + "    <columna>: " + (sym.left + 1) + "\n");
    }

    public void unrecovered_syntax_error(Symbol sym) throws java.lang.Exception{
        System.out.println("\n" + sym.value + sym.sym);
        System.out.println("Error Sintactico en la letra: " + sym.value + "   <linea>: "  + (sym.right + 1) + "    <columna>: " + (sym.left + 1) + "\n");
    }

    public void setTipo(String java, String vb, String py){
            this.java = java;
            this.vb = vb;
            this.py = py;
            sem.iniciarJAVA(this.java);
    }

    public Symbol getS(){
        return this.cur_token;
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$SintaxisPrograma$actions {
  private final SintaxisPrograma parser;

  /** Constructor */
  CUP$SintaxisPrograma$actions(SintaxisPrograma parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$SintaxisPrograma$do_action_part00000000(
    int                        CUP$SintaxisPrograma$act_num,
    java_cup.runtime.lr_parser CUP$SintaxisPrograma$parser,
    java.util.Stack            CUP$SintaxisPrograma$stack,
    int                        CUP$SintaxisPrograma$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$SintaxisPrograma$result;

      /* select the action based on the action number */
      switch (CUP$SintaxisPrograma$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= PROGRAMA EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-1)).right;
		String start_val = (String)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-1)).value;
		RESULT = start_val;
              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$SintaxisPrograma$parser.done_parsing();
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // PROGRAMA ::= INCLUDE_LENG CONST MAIN 
            {
              String RESULT =null;
		RESULT = sem.mostrarCodigo();
              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("PROGRAMA",49, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INCLUDE_LENG ::= INCLUDE_LENG IN_LENG 
            {
              Object RESULT =null;

              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("INCLUDE_LENG",0, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // INCLUDE_LENG ::= 
            {
              Object RESULT =null;

              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("INCLUDE_LENG",0, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // IN_LENG ::= py 
            {
              Object RESULT =null;
		sem.iniciarPY(py);
              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("IN_LENG",1, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // IN_LENG ::= vb 
            {
              Object RESULT =null;
		sem.iniciarVB(vb);
              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("IN_LENG",1, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // IN_LENG ::= java IN_CLASS comilla 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-1)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-1)).value;
		if(e1.equals("$$*$$")){sem.importarTodasClases();}else{sem.importarClase(e1);}
              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("IN_LENG",1, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // IN_LENG ::= includee idlib 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-1)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.peek()).value;
		sem.getImports().add(e1 + " " + e2);
              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("IN_LENG",1, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // IN_CLASS ::= por 
            {
              String RESULT =null;
		RESULT = "$$*$$";
              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("IN_CLASS",19, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // IN_CLASS ::= id 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.peek()).value;
		RESULT = e1;
              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("IN_CLASS",19, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // CONST ::= CONST constt TYPE id igual EXPR puntocoma 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-4)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-4)).right;
		Integer e1 = (Integer)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-4)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-3)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-3)).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-3)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-1)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-1)).right;
		OperacionPrograma e3 = (OperacionPrograma)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-1)).value;
		if(!sem.addVar(new ConstantePrograma(e2,ProgramaSemantica.AMBITO, e1, e3.getTipo(), null))){
              syntax_error(getS());
        } else {sem.getVar().addAll(e3.mostrarTripletes());
                sem.getVar().add(new AsignarConstante(new TerminalOperator(e2), e3.getTriplete(), Triplete.tipos[e1-1]));}
              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("CONST",2, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-6)), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // CONST ::= CONST ASIG_VAR 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()).right;
		List<VariablePrograma> e1 = (List<VariablePrograma>)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.peek()).value;
		List<Triplete> tri = new ArrayList<>();
                        for(VariablePrograma var : e1){
                        tri.addAll(var.mostrarTripletes());
                        } sem.getVar().addAll(tri);
              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("CONST",2, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // CONST ::= 
            {
              Object RESULT =null;
		
              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("CONST",2, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // TYPE ::= intt 
            {
              Integer RESULT =null;
		RESULT = VariablePrograma.INT;
              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("TYPE",5, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // TYPE ::= floatt 
            {
              Integer RESULT =null;
		RESULT = VariablePrograma.FLOAT;
              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("TYPE",5, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // TYPE ::= charr 
            {
              Integer RESULT =null;
		RESULT = VariablePrograma.CHAR;
              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("TYPE",5, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // ASIG_VAR ::= TYPE LIST_ASIG puntocoma 
            {
              List<VariablePrograma> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-2)).right;
		Integer e1 = (Integer)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-1)).right;
		List<VariablePrograma> e2 = (List<VariablePrograma>)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-1)).value;
		if(!sem.addListVar(e2, e1)){syntax_error(getS());
                RESULT = new ArrayList<>();}
                else {for(VariablePrograma var : e2){
                        var.setTipo(e1);
                        if(var.getTriplete() instanceof AsignarValor)
                        ((AsignarValor)var.getTriplete()).setTipo(Triplete.tipos[e1-1]);
                } RESULT = e2;}
              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("ASIG_VAR",7, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // ASIG_VAR ::= TYPE id CORCHETES puntocoma 
            {
              List<VariablePrograma> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-3)).right;
		Integer e1 = (Integer)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-2)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-2)).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-2)).value;
		int e4left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-1)).left;
		int e4right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-1)).right;
		List<OperacionPrograma> e4 = (List<OperacionPrograma>)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-1)).value;
		 List<VariablePrograma> var = new ArrayList<>();
                ArregloPrograma arr = new ArregloPrograma(e2, ProgramaSemantica.AMBITO, e1, e4, 
                new DefinirArreglo(null, new TerminalOperator(e2), Triplete.tipos[e1-1]));
                if(!sem.addVar(arr)){
                        syntax_error(getS());
                }else {var.add(arr);} RESULT = var;
              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("ASIG_VAR",7, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // CORCHETES ::= CORCHETES cora EXPR corc 
            {
              List<OperacionPrograma> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-3)).right;
		List<OperacionPrograma> e1 = (List<OperacionPrograma>)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-1)).right;
		OperacionPrograma e2 = (OperacionPrograma)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-1)).value;
		if(e2.getTipo()<=VariablePrograma.INT) e1.add(e2); RESULT = e1;
              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("CORCHETES",15, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // CORCHETES ::= cora EXPR corc 
            {
              List<OperacionPrograma> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-1)).right;
		OperacionPrograma e1 = (OperacionPrograma)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-1)).value;
		List<OperacionPrograma> opr = new ArrayList<>(); 
                if(e1.getTipo()<=VariablePrograma.INT) opr.add(e1);
                RESULT = opr;
              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("CORCHETES",15, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // LIST_ASIG ::= LIST_ASIG coma id ASIG 
            {
              List<VariablePrograma> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-3)).right;
		List<VariablePrograma> e1 = (List<VariablePrograma>)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-1)).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-1)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()).right;
		OperacionPrograma e3 = (OperacionPrograma)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.peek()).value;
		
                if(e3!=null) e1.add(new VariablePrograma(e2, ProgramaSemantica.AMBITO, e3,
                new AsignarValor(null, new TerminalOperator(e2), e3.getTriplete())));
                else e1.add(new VariablePrograma(e2, ProgramaSemantica.AMBITO,
                new AsignarValor("", new TerminalOperator(e2), null))); RESULT = e1;
              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("LIST_ASIG",6, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // LIST_ASIG ::= id ASIG 
            {
              List<VariablePrograma> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-1)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()).right;
		OperacionPrograma e2 = (OperacionPrograma)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.peek()).value;
		List<VariablePrograma> vars = new ArrayList<>();
            if(e2!=null) vars.add(new VariablePrograma(e1, ProgramaSemantica.AMBITO, e2,
                new AsignarValor(null, new TerminalOperator(e1), e2.getTriplete()))); 
            else vars.add(new VariablePrograma(e1, ProgramaSemantica.AMBITO,
                new AsignarValor("", new TerminalOperator(e1), null))); RESULT = vars;
              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("LIST_ASIG",6, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // ASIG ::= igual EXPR 
            {
              OperacionPrograma RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()).right;
		OperacionPrograma e1 = (OperacionPrograma)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.peek()).value;
		RESULT = e1;
              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("ASIG",9, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // ASIG ::= 
            {
              OperacionPrograma RESULT =null;

              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("ASIG",9, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // OPERACION_A ::= OPERACION_A mas OPERACION_M 
            {
              OperacionPrograma RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-2)).right;
		OperacionPrograma e1 = (OperacionPrograma)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()).right;
		OperacionPrograma e2 = (OperacionPrograma)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.peek()).value;
		if(e1 != null && e2 != null) RESULT = new OperacionPrograma(e1, e2,
                new SumOperator(null, e1.getTriplete(), e2.getTriplete(), Triplete.devolverTipo(e1, e2)));
              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("OPERACION_A",10, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // OPERACION_A ::= OPERACION_M menos OPERACION_M 
            {
              OperacionPrograma RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-2)).right;
		OperacionPrograma e1 = (OperacionPrograma)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()).right;
		OperacionPrograma e2 = (OperacionPrograma)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.peek()).value;
		if(e1 != null && e2 != null) RESULT = new OperacionPrograma(e1, e2,
                new RestOperator(null, e1.getTriplete(), e2.getTriplete(), Triplete.devolverTipo(e1, e2)));
              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("OPERACION_A",10, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // OPERACION_A ::= OPERACION_M 
            {
              OperacionPrograma RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()).right;
		OperacionPrograma e1 = (OperacionPrograma)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.peek()).value;
		RESULT = e1;
              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("OPERACION_A",10, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // OPERACION_M ::= OPERACION_M por OPERACION_U 
            {
              OperacionPrograma RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-2)).right;
		OperacionPrograma e1 = (OperacionPrograma)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()).right;
		OperacionPrograma e2 = (OperacionPrograma)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.peek()).value;
		if(e1 != null && e2 != null) RESULT = new OperacionPrograma(e1, e2,
                new PorOperator(null, e1.getTriplete(), e2.getTriplete(), Triplete.devolverTipo(e1, e2)));
              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("OPERACION_M",11, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // OPERACION_M ::= OPERACION_M div OPERACION_U 
            {
              OperacionPrograma RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-2)).right;
		OperacionPrograma e1 = (OperacionPrograma)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()).right;
		OperacionPrograma e2 = (OperacionPrograma)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.peek()).value;
		if(e1 != null && e2 != null) RESULT = new OperacionPrograma(e1, e2,
                new DivOperator(null, e1.getTriplete(), e2.getTriplete(), Triplete.devolverTipo(e1, e2)));
              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("OPERACION_M",11, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // OPERACION_M ::= OPERACION_M mod OPERACION_U 
            {
              OperacionPrograma RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-2)).right;
		OperacionPrograma e1 = (OperacionPrograma)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()).right;
		OperacionPrograma e2 = (OperacionPrograma)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.peek()).value;
		if(e1 != null && e2 != null) RESULT = new OperacionPrograma(e1, e2,
                new ModOperator(null, e1.getTriplete(), e2.getTriplete(), Triplete.devolverTipo(e1, e2)));
              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("OPERACION_M",11, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // OPERACION_M ::= OPERACION_U 
            {
              OperacionPrograma RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()).right;
		OperacionPrograma e1 = (OperacionPrograma)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.peek()).value;
		RESULT = e1;
              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("OPERACION_M",11, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // OPERACION_U ::= menos OPERACION_U 
            {
              OperacionPrograma RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()).right;
		OperacionPrograma e1 = (OperacionPrograma)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.peek()).value;
		if(e1 != null && e1.getTipo()==1){e1.setTipo(VariablePrograma.INT);}
                OperacionPrograma cero = new OperacionPrograma(VariablePrograma.INT, new TerminalOperator("0"));
                RESULT = new OperacionPrograma(cero,
                e1, new RestOperator(null, cero.getTriplete(), e1.getTriplete(),
                Triplete.devolverTipo(cero, e1)));
              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("OPERACION_U",12, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // OPERACION_U ::= mas OPERACION_U 
            {
              OperacionPrograma RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()).right;
		OperacionPrograma e1 = (OperacionPrograma)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.peek()).value;
		RESULT = e1;
              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("OPERACION_U",12, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // OPERACION_U ::= ATOM 
            {
              OperacionPrograma RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()).right;
		OperacionPrograma e1 = (OperacionPrograma)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.peek()).value;
		RESULT = e1;
              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("OPERACION_U",12, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // ATOM ::= id 
            {
              OperacionPrograma RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.peek()).value;
		VariablePrograma var = sem.existeVar(new VariablePrograma(e1, ProgramaSemantica.AMBITO, null)); 
                if(var == null){
                        syntax_error(getS());
                } else{RESULT = new OperacionPrograma(var.getTipo(), new TerminalOperator(e1));}
              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("ATOM",13, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // ATOM ::= entero 
            {
              OperacionPrograma RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.peek()).value;
		RESULT = new OperacionPrograma(VariablePrograma.INT, new TerminalOperator(e1));
              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("ATOM",13, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // ATOM ::= decimal 
            {
              OperacionPrograma RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.peek()).value;
		RESULT = new OperacionPrograma(VariablePrograma.FLOAT, new TerminalOperator(e1));
              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("ATOM",13, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // ATOM ::= character 
            {
              OperacionPrograma RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.peek()).value;
		RESULT = new OperacionPrograma(VariablePrograma.CHAR, new TerminalOperator(e1));
              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("ATOM",13, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // ATOM ::= id CORCHETES 
            {
              OperacionPrograma RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-1)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()).right;
		List<OperacionPrograma> e2 = (List<OperacionPrograma>)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.peek()).value;
		VariablePrograma var = sem.existeVar(e1, e2.size());
                if(var == null){syntax_error(getS());}else {OperacionPrograma arr = new ArregloPrograma(var.getId(), ProgramaSemantica.AMBITO,
                var.getTipo(), e2, (ArregloPrograma) var); arr.mostrarTripletes();
                OperacionPrograma corch = new OperacionPrograma(var.getTipo(), new TemporalArreglo(null, e1, 
                arr.getTriplete(),Triplete.tipos[var.getTipo()-1])); corch.getTripletes().addAll(0, arr.getTripletes()); 
                RESULT = corch;}
                
              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("ATOM",13, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // ATOM ::= para OPERACION_A parc 
            {
              OperacionPrograma RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-1)).right;
		OperacionPrograma e1 = (OperacionPrograma)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-1)).value;
		RESULT = e1;
              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("ATOM",13, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // MAIN ::= voidd mainn para parc llavea STATEMENTS llavec 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-1)).right;
		List<Triplete> e1 = (List<Triplete>)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-1)).value;
		sem.getTripletes().addAll(e1);
              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("MAIN",4, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-6)), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // STATEMENTS ::= STATEMENT STATEMENTS 
            {
              List<Triplete> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-1)).right;
		List<Triplete> e1 = (List<Triplete>)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()).right;
		List<Triplete> e2 = (List<Triplete>)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.peek()).value;
		e1.addAll(e2); RESULT = e1;
              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("STATEMENTS",28, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // STATEMENTS ::= 
            {
              List<Triplete> RESULT =null;
		RESULT = new ArrayList<>();
              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("STATEMENTS",28, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // STATEMENT ::= COMPOUND 
            {
              List<Triplete> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()).right;
		List<Triplete> e1 = (List<Triplete>)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.peek()).value;
		RESULT = e1;
              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("STATEMENT",29, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // STATEMENT ::= STATEMENTLINE 
            {
              List<Triplete> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()).right;
		List<Triplete> e1 = (List<Triplete>)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.peek()).value;
		RESULT = e1;
              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("STATEMENT",29, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // COMPOUND ::= WHILE 
            {
              List<Triplete> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()).right;
		List<Triplete> e1 = (List<Triplete>)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.peek()).value;
		RESULT = e1;
              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("COMPOUND",30, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // COMPOUND ::= DO_WHILE 
            {
              List<Triplete> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()).right;
		List<Triplete> e1 = (List<Triplete>)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.peek()).value;
		RESULT = e1;
              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("COMPOUND",30, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // COMPOUND ::= FOR 
            {
              List<Triplete> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()).right;
		List<Triplete> e1 = (List<Triplete>)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.peek()).value;
		RESULT = e1;
              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("COMPOUND",30, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // COMPOUND ::= IF_ELSE 
            {
              List<Triplete> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()).right;
		List<Triplete> e1 = (List<Triplete>)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.peek()).value;
		RESULT = e1;
              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("COMPOUND",30, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // COMPOUND ::= SWITCH 
            {
              List<Triplete> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()).right;
		List<Triplete> e1 = (List<Triplete>)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.peek()).value;
		RESULT = e1;
              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("COMPOUND",30, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // STATEMENTLINE ::= clrs puntocoma 
            {
              List<Triplete> RESULT =null;
		List<Triplete> tr = new ArrayList<>(); tr.add(new Clrs()); RESULT = tr;
              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("STATEMENTLINE",27, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // STATEMENTLINE ::= ASIG_VAR 
            {
              List<Triplete> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()).right;
		List<VariablePrograma> e1 = (List<VariablePrograma>)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.peek()).value;
		List<Triplete> tri = new ArrayList<>();
                        for(VariablePrograma var : e1){
                        tri.addAll(var.mostrarTripletes());
                        } RESULT = tri;
              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("STATEMENTLINE",27, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // STATEMENTLINE ::= DEF_VAR puntocoma 
            {
              List<Triplete> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-1)).right;
		List<Triplete> e1 = (List<Triplete>)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-1)).value;
		RESULT = e1;
              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("STATEMENTLINE",27, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // STATEMENTLINE ::= PRINTF 
            {
              List<Triplete> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()).right;
		List<Triplete> e1 = (List<Triplete>)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.peek()).value;
		RESULT = e1;
              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("STATEMENTLINE",27, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // STATEMENTLINE ::= SCANF 
            {
              List<Triplete> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()).right;
		List<Triplete> e1 = (List<Triplete>)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.peek()).value;
		RESULT = e1;
              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("STATEMENTLINE",27, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // STATEMENTLINE ::= LLAMADA_METODO puntocoma 
            {
              List<Triplete> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-1)).right;
		OperacionPrograma e1 = (OperacionPrograma)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-1)).value;
		List<Triplete> tri = new ArrayList<>();
                if(e1 != null) {tri.addAll(e1.mostrarTripletes());
                tri.add(e1.getTriplete());}
                RESULT = tri;
              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("STATEMENTLINE",27, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // STATEMENTLINE ::= getch puntocoma 
            {
              List<Triplete> RESULT =null;
		List<Triplete> tr = new ArrayList<>(); tr.add(new GetchOperator()); RESULT = tr;
              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("STATEMENTLINE",27, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // STATEMENTLINE ::= CLASS 
            {
              List<Triplete> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()).right;
		List<Triplete> e1 = (List<Triplete>)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.peek()).value;
		RESULT = e1;
              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("STATEMENTLINE",27, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // DEF_VAR ::= id igual EXPR 
            {
              List<Triplete> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()).right;
		OperacionPrograma e2 = (OperacionPrograma)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.peek()).value;
		List<Triplete> tri = new ArrayList<>(); 
                if(sem.existeVar(new VariablePrograma(e1, ProgramaSemantica.AMBITO, null)) == null || e2 == null) {
                        syntax_error(getS());
                } else {AsignarValor asig = new AsignarValor(null, new TerminalOperator(e1), e2.getTriplete());
                        tri.addAll(e2.mostrarTripletes());
                        tri.add(asig);} RESULT = tri;
              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("DEF_VAR",26, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // DEF_VAR ::= id CORCHETES igual EXPR 
            {
              List<Triplete> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-3)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-2)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-2)).right;
		List<OperacionPrograma> e2 = (List<OperacionPrograma>)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-2)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()).right;
		OperacionPrograma e3 = (OperacionPrograma)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.peek()).value;
		VariablePrograma var = sem.existeVar(e1, e2.size());
                if(var == null){syntax_error(getS());}else {OperacionPrograma arr = new ArregloPrograma(var.getId(), ProgramaSemantica.AMBITO,
                var.getTipo(), e2, (ArregloPrograma) var, e3); RESULT = arr.mostrarTripletes(); }
              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("DEF_VAR",26, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // PRINTF ::= printf para comilla STRING comilla VARS parc puntocoma 
            {
              List<Triplete> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-4)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-4)).right;
		List<String> e1 = (List<String>)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-4)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-2)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-2)).right;
		List<OperacionPrograma> e2 = (List<OperacionPrograma>)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-2)).value;
		if(e1 != null) RESULT = Printf.regresarTripletes(e1, e2);
              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("PRINTF",24, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-7)), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // STRING ::= STRING string 
            {
              List<String> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-1)).right;
		List<String> e1 = (List<String>)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.peek()).value;
		e1.add(e2); RESULT = e1;
              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("STRING",45, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // STRING ::= 
            {
              List<String> RESULT =null;
		RESULT = new ArrayList<>();
              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("STRING",45, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // VARS ::= VARS coma OPERACION_A 
            {
              List<OperacionPrograma> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-2)).right;
		List<OperacionPrograma> e1 = (List<OperacionPrograma>)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()).right;
		OperacionPrograma e2 = (OperacionPrograma)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.peek()).value;
		if(e1!=null && e2!= null){e1.add(e2); RESULT = e1;}
              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("VARS",44, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // VARS ::= 
            {
              List<OperacionPrograma> RESULT =null;
		List<OperacionPrograma> op = new ArrayList<>(); RESULT = op;
              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("VARS",44, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // SCANF ::= scanf para comilla STRING comilla VARSS parc puntocoma 
            {
              List<Triplete> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-4)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-4)).right;
		List<String> e1 = (List<String>)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-4)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-2)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-2)).right;
		List<TerminalOperator> e2 = (List<TerminalOperator>)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-2)).value;
		if(e2!=null) RESULT = Scanf.regresarTripletes(e1, e2);
              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("SCANF",25, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-7)), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // VARSS ::= VARSS coma asig id 
            {
              List<TerminalOperator> RESULT =null;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-3)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-3)).right;
		List<TerminalOperator> e2 = (List<TerminalOperator>)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-3)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.peek()).value;
		if(sem.existeVar(new VariablePrograma(e1, ProgramaSemantica.AMBITO, null)) == null
                                || e2 == null){
                        syntax_error(getS());
                } else {e2.add(new TerminalOperator(e1)); RESULT = e2;}
              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("VARSS",43, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // VARSS ::= 
            {
              List<TerminalOperator> RESULT =null;
		List<TerminalOperator> arr = new ArrayList<>(); RESULT = arr;
              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("VARSS",43, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // NT$0 ::= 
            {
              List<Triplete> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-2)).right;
		CondicionPrograma e1 = (CondicionPrograma)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-2)).value;
ProgramaSemantica.AMBITO += 1;
              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("NT$0",51, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // IF_ELSE ::= iff para CONDICION parc llavea NT$0 STATEMENTS llavec ELSE_IF ELSE 
            {
              List<Triplete> RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (List<Triplete>) ((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-4)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-7)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-7)).right;
		CondicionPrograma e1 = (CondicionPrograma)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-7)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-3)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-3)).right;
		List<Triplete> e2 = (List<Triplete>)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-3)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-1)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-1)).right;
		Else_Operator e3 = (Else_Operator)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-1)).value;
		int e4left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()).left;
		int e4right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()).right;
		List<Triplete> e4 = (List<Triplete>)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.peek()).value;
		sem.eliminarAmbito(ProgramaSemantica.AMBITO); ProgramaSemantica.AMBITO -= 1;
                e3.agregarIf(e1, e2); RESULT = e3.juntarTripletes(e4);
              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("IF_ELSE",35, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-9)), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // NT$1 ::= 
            {
              Else_Operator RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-6)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-6)).right;
		Else_Operator e1 = (Else_Operator)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-6)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-2)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-2)).right;
		CondicionPrograma e2 = (CondicionPrograma)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-2)).value;
ProgramaSemantica.AMBITO += 1;
              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("NT$1",52, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // ELSE_IF ::= ELSE_IF elsee iff para CONDICION parc llavea NT$1 STATEMENTS llavec 
            {
              Else_Operator RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Else_Operator) ((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-2)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-9)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-9)).right;
		Else_Operator e1 = (Else_Operator)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-9)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-5)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-5)).right;
		CondicionPrograma e2 = (CondicionPrograma)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-5)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-1)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-1)).right;
		List<Triplete> e3 = (List<Triplete>)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-1)).value;
		sem.eliminarAmbito(ProgramaSemantica.AMBITO); ProgramaSemantica.AMBITO -= 1;
                RESULT = e1.agregarElseIf(e2, e3);
              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("ELSE_IF",47, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-9)), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // ELSE_IF ::= 
            {
              Else_Operator RESULT =null;
		RESULT = new Else_Operator();
              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("ELSE_IF",47, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // NT$2 ::= 
            {
              List<Triplete> RESULT =null;
ProgramaSemantica.AMBITO += 1;
              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("NT$2",53, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // ELSE ::= elsee llavea NT$2 STATEMENTS llavec 
            {
              List<Triplete> RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (List<Triplete>) ((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-2)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-1)).right;
		List<Triplete> e1 = (List<Triplete>)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-1)).value;
		sem.eliminarAmbito(ProgramaSemantica.AMBITO); ProgramaSemantica.AMBITO -= 1;
                RESULT = e1;
              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("ELSE",36, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-4)), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // ELSE ::= 
            {
              List<Triplete> RESULT =null;
		RESULT = new ArrayList<>();
              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("ELSE",36, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // SWITCH ::= switchh para EXPR parc llavea CASES DEFAULT llavec 
            {
              List<Triplete> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-5)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-5)).right;
		OperacionPrograma e1 = (OperacionPrograma)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-5)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-2)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-2)).right;
		CasePrograma e2 = (CasePrograma)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-2)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-1)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-1)).right;
		List<Triplete> e3 = (List<Triplete>)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-1)).value;
		RESULT = e2.agregarDefault(e1, e3);
              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("SWITCH",31, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-7)), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // NT$3 ::= 
            {
              CasePrograma RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-3)).right;
		CasePrograma e1 = (CasePrograma)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-1)).right;
		OperacionPrograma e2 = (OperacionPrograma)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-1)).value;
esCase = true; ProgramaSemantica.AMBITO += 1;
              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("NT$3",54, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // CASES ::= CASES casee OPERACION_A dosp NT$3 STATEMENTSC 
            {
              CasePrograma RESULT =null;
              // propagate RESULT from NT$3
                RESULT = (CasePrograma) ((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-1)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-5)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-5)).right;
		CasePrograma e1 = (CasePrograma)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-5)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-3)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-3)).right;
		OperacionPrograma e2 = (OperacionPrograma)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-3)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()).right;
		List<Triplete> e3 = (List<Triplete>)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.peek()).value;
		esCase = false; sem.eliminarAmbito(ProgramaSemantica.AMBITO); ProgramaSemantica.AMBITO -= 1;
                if(e2!=null){RESULT  = e1.agregarCase(e2, e3);}
              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("CASES",48, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-5)), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // CASES ::= 
            {
              CasePrograma RESULT =null;
		RESULT = new CasePrograma();
              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("CASES",48, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // STATEMENTSC ::= STATEMENT STATEMENTSC 
            {
              List<Triplete> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-1)).right;
		List<Triplete> e1 = (List<Triplete>)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()).right;
		List<Triplete> e2 = (List<Triplete>)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.peek()).value;
		e1.addAll(e2); RESULT = e1;
              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("STATEMENTSC",40, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // STATEMENTSC ::= breakk puntocoma 
            {
              List<Triplete> RESULT =null;
		List<Triplete> tri = new ArrayList<>(); 
                if(!esCase){syntax_error(getS());}else{tri.add(new Break());} RESULT = tri;
              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("STATEMENTSC",40, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // STATEMENTSC ::= 
            {
              List<Triplete> RESULT =null;
		RESULT = new ArrayList<>();
              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("STATEMENTSC",40, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // NT$4 ::= 
            {
              List<Triplete> RESULT =null;
esCase = true; ProgramaSemantica.AMBITO += 1;
              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("NT$4",55, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // DEFAULT ::= defaultt dosp NT$4 STATEMENTSC 
            {
              List<Triplete> RESULT =null;
              // propagate RESULT from NT$4
                RESULT = (List<Triplete>) ((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-1)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()).right;
		List<Triplete> e1 = (List<Triplete>)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.peek()).value;
		esCase = false; sem.eliminarAmbito(ProgramaSemantica.AMBITO); ProgramaSemantica.AMBITO -= 1;
                RESULT = e1;
              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("DEFAULT",41, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // DEFAULT ::= 
            {
              List<Triplete> RESULT =null;
		RESULT = new ArrayList<>();
              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("DEFAULT",41, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // NT$5 ::= 
            {
              List<Triplete> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-2)).right;
		CondicionPrograma e1 = (CondicionPrograma)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-2)).value;
ProgramaSemantica.AMBITO += 1;
              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("NT$5",56, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // WHILE ::= whilee para CONDICION parc llavea NT$5 STATEMENTS llavec 
            {
              List<Triplete> RESULT =null;
              // propagate RESULT from NT$5
                RESULT = (List<Triplete>) ((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-2)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-5)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-5)).right;
		CondicionPrograma e1 = (CondicionPrograma)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-5)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-1)).right;
		List<Triplete> e2 = (List<Triplete>)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-1)).value;
		sem.eliminarAmbito(ProgramaSemantica.AMBITO); ProgramaSemantica.AMBITO -= 1;
        RESULT = Else_Operator.WHILE(e1, e2);
              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("WHILE",37, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-7)), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // NT$6 ::= 
            {
              List<Triplete> RESULT =null;
ProgramaSemantica.AMBITO += 1;
              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("NT$6",57, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // DO_WHILE ::= doo llavea NT$6 STATEMENTS llavec whilee para CONDICION parc 
            {
              List<Triplete> RESULT =null;
              // propagate RESULT from NT$6
                RESULT = (List<Triplete>) ((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-6)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-5)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-5)).right;
		List<Triplete> e1 = (List<Triplete>)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-5)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-1)).right;
		CondicionPrograma e2 = (CondicionPrograma)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-1)).value;
		sem.eliminarAmbito(ProgramaSemantica.AMBITO);
        ProgramaSemantica.AMBITO -= 1; RESULT = Else_Operator.DOWHILE(e2, e1);
              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("DO_WHILE",38, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-8)), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // NT$7 ::= 
            {
              List<Triplete> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-6)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-6)).right;
		List<Triplete> e1 = (List<Triplete>)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-6)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-4)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-4)).right;
		CondicionPrograma e2 = (CondicionPrograma)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-4)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-2)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-2)).right;
		List<Triplete> e3 = (List<Triplete>)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-2)).value;
ProgramaSemantica.AMBITO += 1;
              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("NT$7",58, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // FOR ::= forr para INICIO puntocoma CONDICION puntocoma STEP parc llavea NT$7 STATEMENTS llavec 
            {
              List<Triplete> RESULT =null;
              // propagate RESULT from NT$7
                RESULT = (List<Triplete>) ((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-2)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-9)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-9)).right;
		List<Triplete> e1 = (List<Triplete>)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-9)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-7)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-7)).right;
		CondicionPrograma e2 = (CondicionPrograma)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-7)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-5)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-5)).right;
		List<Triplete> e3 = (List<Triplete>)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-5)).value;
		int e5left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-1)).left;
		int e5right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-1)).right;
		List<Triplete> e5 = (List<Triplete>)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-1)).value;
		sem.eliminarAmbito(ProgramaSemantica.AMBITO); ProgramaSemantica.AMBITO -= 1;
        RESULT = Else_Operator.FOR(e1, e3, e2, e5);
              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("FOR",39, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-11)), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // INICIO ::= DEF_VAR 
            {
              List<Triplete> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()).right;
		List<Triplete> e1 = (List<Triplete>)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.peek()).value;
		RESULT = e1;
              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("INICIO",34, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // INICIO ::= id 
            {
              List<Triplete> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.peek()).value;
		if(sem.existeVar(new VariablePrograma(e1, ProgramaSemantica.AMBITO, null))== null){
                syntax_error(getS());
                }RESULT = new ArrayList<>();
              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("INICIO",34, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // INICIO ::= TYPE id igual EXPR 
            {
              List<Triplete> RESULT =null;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-3)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-3)).right;
		Integer e2 = (Integer)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-3)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-2)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()).right;
		OperacionPrograma e3 = (OperacionPrograma)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.peek()).value;
		List<Triplete> tri = new ArrayList<>();
        if(sem.existeVar(new VariablePrograma(e1, ProgramaSemantica.AMBITO, null)) != null){
                syntax_error(getS());
        } else {tri.addAll(e3.getTripletes()); tri.add(e3.getTriplete());
                tri.add(new AsignarValor(new TerminalOperator(e1), e3.getTriplete(), Triplete.tipos[e2-1]));}
              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("INICIO",34, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // STEP ::= DEF_VAR 
            {
              List<Triplete> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()).right;
		List<Triplete> e1 = (List<Triplete>)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.peek()).value;
		RESULT = e1;
              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("STEP",33, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // STEP ::= OP_VAR 
            {
              List<Triplete> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()).right;
		List<Triplete> e1 = (List<Triplete>)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.peek()).value;
		RESULT = e1;
              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("STEP",33, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // OP_VAR ::= id masmas 
            {
              List<Triplete> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-1)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-1)).value;
		List<Triplete> tri = new ArrayList<>(); VariablePrograma vars = new VariablePrograma(e1, ProgramaSemantica.AMBITO, null);
                if(vars == null){
                        syntax_error(getS());
                } else {tri.add(new SumOperator(null, new TerminalOperator(e1), new TerminalOperator("1"), Triplete.tipos[vars.getTipo()-1]));
                        tri.add(new AsignarValor(null, new TerminalOperator(e1), tri.get(0)));
                } RESULT = tri;
              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("OP_VAR",32, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // OP_VAR ::= id menosmenos 
            {
              List<Triplete> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-1)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-1)).value;
		List<Triplete> tri = new ArrayList<>(); VariablePrograma vars = new VariablePrograma(e1, ProgramaSemantica.AMBITO, null);
                if(vars == null){
                        syntax_error(getS());
                } else {tri.add(new SumOperator(null, new TerminalOperator(e1), new TerminalOperator("1"), Triplete.tipos[vars.getTipo()-1]));
                        tri.add(new AsignarValor(null, new TerminalOperator(e1), tri.get(0)));
                } RESULT = tri;
              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("OP_VAR",32, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // CONDICION ::= CONDICION orr AND 
            {
              CondicionPrograma RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-2)).right;
		CondicionPrograma e1 = (CondicionPrograma)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()).right;
		CondicionPrograma e2 = (CondicionPrograma)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.peek()).value;
		RESULT = IfPrograma.OR(e1, e2);
              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("CONDICION",23, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // CONDICION ::= AND 
            {
              CondicionPrograma RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()).right;
		CondicionPrograma e1 = (CondicionPrograma)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.peek()).value;
		RESULT = e1;
              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("CONDICION",23, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // AND ::= AND andd NOT 
            {
              CondicionPrograma RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-2)).right;
		CondicionPrograma e1 = (CondicionPrograma)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()).right;
		CondicionPrograma e2 = (CondicionPrograma)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.peek()).value;
		RESULT = IfPrograma.AND(e1, e2);
              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("AND",22, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // AND ::= NOT 
            {
              CondicionPrograma RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()).right;
		CondicionPrograma e1 = (CondicionPrograma)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.peek()).value;
		RESULT = e1;
              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("AND",22, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // NOT ::= nott NOT 
            {
              CondicionPrograma RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()).right;
		CondicionPrograma e1 = (CondicionPrograma)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.peek()).value;
		RESULT = IfPrograma.NOT(e1);
              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("NOT",21, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // NOT ::= COMPARACION 
            {
              CondicionPrograma RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()).right;
		Triplete e1 = (Triplete)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.peek()).value;
		RESULT = new IfPrograma(new If_Operator(e1, new Etiqueta()), ((CondicionalOperator)e1).getTripletes());
              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("NOT",21, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // NOT ::= para CONDICION parc 
            {
              CondicionPrograma RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-1)).right;
		CondicionPrograma e1 = (CondicionPrograma)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-1)).value;
		RESULT = e1;
              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("NOT",21, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // COMPARACION ::= OPERACION_A igig OPERACION_A 
            {
              Triplete RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-2)).right;
		OperacionPrograma e1 = (OperacionPrograma)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()).right;
		OperacionPrograma e2 = (OperacionPrograma)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.peek()).value;
		RESULT = new IgualOperator(e1.getTriplete(), e2.getTriplete(),
                e1.getTripletes(), e2.getTripletes());
              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("COMPARACION",20, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // COMPARACION ::= OPERACION_A noigual OPERACION_A 
            {
              Triplete RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-2)).right;
		OperacionPrograma e1 = (OperacionPrograma)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()).right;
		OperacionPrograma e2 = (OperacionPrograma)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.peek()).value;
		RESULT = new NoIgualOperator(e1.getTriplete(), e2.getTriplete(),
                e1.getTripletes(), e2.getTripletes());
              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("COMPARACION",20, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // COMPARACION ::= OPERACION_A menor OPERACION_A 
            {
              Triplete RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-2)).right;
		OperacionPrograma e1 = (OperacionPrograma)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()).right;
		OperacionPrograma e2 = (OperacionPrograma)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.peek()).value;
		RESULT = new MenorOperator(e1.getTriplete(), e2.getTriplete(),
                e1.getTripletes(), e2.getTripletes());
              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("COMPARACION",20, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // COMPARACION ::= OPERACION_A menorig OPERACION_A 
            {
              Triplete RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-2)).right;
		OperacionPrograma e1 = (OperacionPrograma)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()).right;
		OperacionPrograma e2 = (OperacionPrograma)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.peek()).value;
		RESULT = new MenorIgOperator(e1.getTriplete(), e2.getTriplete(),
                e1.getTripletes(), e2.getTripletes());
              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("COMPARACION",20, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // COMPARACION ::= OPERACION_A mayor OPERACION_A 
            {
              Triplete RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-2)).right;
		OperacionPrograma e1 = (OperacionPrograma)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()).right;
		OperacionPrograma e2 = (OperacionPrograma)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.peek()).value;
		RESULT = new MayorOperator(e1.getTriplete(), e2.getTriplete(),
                e1.getTripletes(), e2.getTripletes());
              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("COMPARACION",20, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // COMPARACION ::= OPERACION_A mayorig OPERACION_A 
            {
              Triplete RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-2)).right;
		OperacionPrograma e1 = (OperacionPrograma)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()).right;
		OperacionPrograma e2 = (OperacionPrograma)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.peek()).value;
		RESULT = new MayorIgOperator(e1.getTriplete(), e2.getTriplete(),
                e1.getTripletes(), e2.getTripletes());
              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("COMPARACION",20, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // LLAMADA_METODO ::= pyy punto id para LIST_PARAM parc 
            {
              OperacionPrograma RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-3)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-1)).right;
		List<OperacionPrograma> e2 = (List<OperacionPrograma>)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-1)).value;
		MetodoPython met = sem.existeMetodoPY(e1, e2);
                        if(met == null){
                                syntax_error(getS());
                        } else {
                                RESULT = new CallPrograma(e2,
                                new CallMetodo(CallPrograma.regresarPy(met)),
                                CallPrograma.regresarTipo(met));
                        }
              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("LLAMADA_METODO",14, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-5)), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // LLAMADA_METODO ::= vbb punto id para LIST_PARAM parc 
            {
              OperacionPrograma RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-3)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-1)).right;
		List<OperacionPrograma> e2 = (List<OperacionPrograma>)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-1)).value;
		MetodoVisual met = sem.existeMetodoVB(e1, e2);
                        if(met == null){
                                syntax_error(getS());
                        } else {
                                RESULT = new CallPrograma(e2,
                                new CallMetodo(CallPrograma.regresarVB(met)),
                                CallPrograma.regresarTipo(met));
                        }
              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("LLAMADA_METODO",14, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-5)), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // LLAMADA_METODO ::= javaa punto id punto id para LIST_PARAM parc 
            {
              OperacionPrograma RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-5)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-5)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-5)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-3)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-3)).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-3)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-1)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-1)).right;
		List<OperacionPrograma> e3 = (List<OperacionPrograma>)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-1)).value;
		
                        String objeto = sem.existeObjeto(e1);
                        MetodoJava met = sem.existeMetodoJV(objeto, e2, e3);
                        if(met == null){
                                syntax_error(getS());
                        } else {
                                RESULT = new CallPrograma(e3,
                                new CallMetodo(CallPrograma.regresarJava(met, e1)),
                                CallPrograma.regresarTipo(met));
                        }
              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("LLAMADA_METODO",14, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-7)), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // EXPR ::= LLAMADA_METODO 
            {
              OperacionPrograma RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()).right;
		OperacionPrograma e1 = (OperacionPrograma)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.peek()).value;
		RESULT = new OperacionPrograma(new AsignarTemporal(null, e1.getTriplete(),
                Triplete.devolverTipo(e1)), e1);
              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("EXPR",8, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // EXPR ::= OPERACION_A 
            {
              OperacionPrograma RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()).right;
		OperacionPrograma e1 = (OperacionPrograma)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.peek()).value;
		RESULT = e1;
              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("EXPR",8, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // EXPR ::= getch 
            {
              OperacionPrograma RESULT =null;
		RESULT = new OperacionPrograma(VariablePrograma.INT, new GetchOperator());
              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("EXPR",8, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // CLASS ::= javaa punto id LIST_CLASS puntocoma 
            {
              List<Triplete> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-1)).right;
		List<ObjetoPrograma> e2 = (List<ObjetoPrograma>)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-1)).value;
		RESULT = ObjetoPrograma.triplete(e1, e2, sem, ProgramaSemantica.AMBITO);
              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("CLASS",42, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-4)), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // LIST_CLASS ::= LIST_CLASS coma id PARAM 
            {
              List<ObjetoPrograma> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-3)).right;
		List<ObjetoPrograma> e1 = (List<ObjetoPrograma>)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-1)).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-1)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()).right;
		List<OperacionPrograma> e3 = (List<OperacionPrograma>)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.peek()).value;
		ObjetoPrograma ob = new ObjetoPrograma(e2, e3);
            e1.add(ob); RESULT = e1;
              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("LIST_CLASS",50, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // LIST_CLASS ::= id PARAM 
            {
              List<ObjetoPrograma> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-1)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()).right;
		List<OperacionPrograma> e2 = (List<OperacionPrograma>)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.peek()).value;
		ObjetoPrograma ob = new ObjetoPrograma(e1, e2);
            List<ObjetoPrograma> pro = new ArrayList<>(); pro.add(ob);
            RESULT = pro;
              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("LIST_CLASS",50, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // PARAM ::= para LIST_PARAM parc 
            {
              List<OperacionPrograma> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-1)).right;
		List<OperacionPrograma> e1 = (List<OperacionPrograma>)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-1)).value;
		RESULT = e1;
              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("PARAM",18, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // PARAM ::= 
            {
              List<OperacionPrograma> RESULT =null;
		RESULT = new ArrayList<>();
              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("PARAM",18, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // LIST_PARAM ::= LIST 
            {
              List<OperacionPrograma> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()).right;
		List<OperacionPrograma> e1 = (List<OperacionPrograma>)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.peek()).value;
		RESULT = e1;
              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("LIST_PARAM",16, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // LIST_PARAM ::= 
            {
              List<OperacionPrograma> RESULT =null;
		RESULT = new ArrayList<>();
              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("LIST_PARAM",16, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // LIST ::= LIST_PARAM coma OPERACION_A 
            {
              List<OperacionPrograma> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-2)).right;
		List<OperacionPrograma> e1 = (List<OperacionPrograma>)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()).right;
		OperacionPrograma e2 = (OperacionPrograma)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.peek()).value;
		e1.add(e2); RESULT = e1;
              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("LIST",17, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // LIST ::= OPERACION_A 
            {
              List<OperacionPrograma> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()).right;
		OperacionPrograma e1 = (OperacionPrograma)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.peek()).value;
		List<OperacionPrograma> params = new ArrayList<>(); params.add(e1); RESULT = params;
              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("LIST",17, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$SintaxisPrograma$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$SintaxisPrograma$do_action(
    int                        CUP$SintaxisPrograma$act_num,
    java_cup.runtime.lr_parser CUP$SintaxisPrograma$parser,
    java.util.Stack            CUP$SintaxisPrograma$stack,
    int                        CUP$SintaxisPrograma$top)
    throws java.lang.Exception
    {
              return CUP$SintaxisPrograma$do_action_part00000000(
                               CUP$SintaxisPrograma$act_num,
                               CUP$SintaxisPrograma$parser,
                               CUP$SintaxisPrograma$stack,
                               CUP$SintaxisPrograma$top);
    }
}

}
