
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package com.mycompany.assofjpybasic.backend.analizador.principal;

import java_cup.runtime.*;
import com.mycompany.assofjpybasic.backend.semantica.programa.*;
import java.util.ArrayList;
import java.util.List;
import com.mycompany.assofjpybasic.backend.semantica.programa.cod3.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class SintaxisPrograma extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return SintaxisProgramaSym.class;
}

  /** Default constructor. */
  @Deprecated
  public SintaxisPrograma() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public SintaxisPrograma(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public SintaxisPrograma(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\175\000\002\002\004\000\002\002\006\000\002\003" +
    "\004\000\002\003\002\000\002\004\003\000\002\004\003" +
    "\000\002\004\005\000\002\004\006\000\002\062\003\000" +
    "\002\062\003\000\002\005\011\000\002\005\002\000\002" +
    "\046\003\000\002\046\003\000\002\046\003\000\002\006" +
    "\004\000\002\006\002\000\002\050\005\000\002\050\006" +
    "\000\002\057\006\000\002\057\005\000\002\047\006\000" +
    "\002\047\004\000\002\052\004\000\002\052\002\000\002" +
    "\053\005\000\002\053\005\000\002\053\003\000\002\054" +
    "\005\000\002\054\005\000\002\054\005\000\002\054\003" +
    "\000\002\055\004\000\002\055\004\000\002\055\003\000" +
    "\002\056\003\000\002\056\003\000\002\056\003\000\002" +
    "\056\003\000\002\056\004\000\002\056\005\000\002\007" +
    "\011\000\002\010\004\000\002\010\004\000\002\010\002" +
    "\000\002\011\003\000\002\011\003\000\002\012\003\000" +
    "\002\012\003\000\002\012\003\000\002\012\003\000\002" +
    "\012\003\000\002\013\004\000\002\013\003\000\002\013" +
    "\004\000\002\013\003\000\002\013\003\000\002\013\004" +
    "\000\002\013\004\000\002\013\003\000\002\014\005\000" +
    "\002\014\006\000\002\015\010\000\002\016\005\000\002" +
    "\016\002\000\002\017\010\000\002\020\006\000\002\020" +
    "\002\000\002\063\002\000\002\021\014\000\002\064\002" +
    "\000\002\022\014\000\002\022\002\000\002\065\002\000" +
    "\002\023\007\000\002\023\002\000\002\024\012\000\002" +
    "\025\004\000\002\025\002\000\002\066\002\000\002\026" +
    "\007\000\002\067\002\000\002\027\006\000\002\027\002" +
    "\000\002\070\002\000\002\030\012\000\002\071\002\000" +
    "\002\031\013\000\002\072\002\000\002\032\016\000\002" +
    "\033\003\000\002\033\003\000\002\033\004\000\002\034" +
    "\003\000\002\034\003\000\002\035\004\000\002\035\004" +
    "\000\002\036\005\000\002\036\003\000\002\037\005\000" +
    "\002\037\003\000\002\040\004\000\002\040\003\000\002" +
    "\041\005\000\002\041\005\000\002\041\005\000\002\041" +
    "\005\000\002\041\005\000\002\041\005\000\002\041\005" +
    "\000\002\042\010\000\002\042\010\000\002\042\012\000" +
    "\002\051\003\000\002\051\003\000\002\051\003\000\002" +
    "\043\007\000\002\044\006\000\002\044\004\000\002\045" +
    "\005\000\002\045\002\000\002\060\003\000\002\060\002" +
    "\000\002\061\005\000\002\061\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u010e\000\024\004\ufffe\006\ufffe\007\ufffe\010\ufffe\011" +
    "\ufffe\027\ufffe\064\ufffe\065\ufffe\066\ufffe\001\002\000\024" +
    "\004\ufff6\006\ufff6\007\ufff6\010\ufff6\011\ufff6\027\014\064" +
    "\011\065\010\066\013\001\002\000\004\002\006\001\002" +
    "\000\004\002\001\001\002\000\014\004\ufff1\006\025\007" +
    "\ufff1\010\ufff1\011\ufff1\001\002\000\024\004\ufffd\006\ufffd" +
    "\007\ufffd\010\ufffd\011\ufffd\027\ufffd\064\ufffd\065\ufffd\066" +
    "\ufffd\001\002\000\006\040\020\071\022\001\002\000\024" +
    "\004\uffff\006\uffff\007\uffff\010\uffff\011\uffff\027\uffff\064" +
    "\uffff\065\uffff\066\uffff\001\002\000\024\004\ufffc\006\ufffc" +
    "\007\ufffc\010\ufffc\011\ufffc\027\ufffc\064\ufffc\065\ufffc\066" +
    "\ufffc\001\002\000\004\031\015\001\002\000\004\070\016" +
    "\001\002\000\004\033\017\001\002\000\024\004\ufffa\006" +
    "\ufffa\007\ufffa\010\ufffa\011\ufffa\027\ufffa\064\ufffa\065\ufffa" +
    "\066\ufffa\001\002\000\004\075\ufff9\001\002\000\004\075" +
    "\023\001\002\000\004\075\ufff8\001\002\000\024\004\ufffb" +
    "\006\ufffb\007\ufffb\010\ufffb\011\ufffb\027\ufffb\064\ufffb\065" +
    "\ufffb\066\ufffb\001\002\000\012\004\133\007\030\010\027" +
    "\011\026\001\002\000\010\007\030\010\027\011\026\001" +
    "\002\000\004\071\ufff3\001\002\000\004\071\ufff4\001\002" +
    "\000\004\071\ufff5\001\002\000\004\071\032\001\002\000" +
    "\004\061\033\001\002\000\030\036\052\037\042\043\054" +
    "\060\051\071\034\072\046\073\041\074\044\077\053\100" +
    "\040\101\036\001\002\000\050\013\uffde\014\uffde\030\uffde" +
    "\031\uffde\032\uffde\033\uffde\034\uffde\035\uffde\036\uffde\037" +
    "\uffde\040\uffde\041\uffde\042\uffde\044\uffde\047\122\050\uffde" +
    "\051\uffde\052\uffde\053\uffde\001\002\000\014\036\056\044" +
    "\uff8f\050\uff8f\051\uff8f\052\uff8f\001\002\000\004\054\112" +
    "\001\002\000\046\013\uffe2\014\uffe2\030\uffe2\031\uffe2\032" +
    "\uffe2\033\uffe2\034\uffe2\035\uffe2\036\uffe2\037\uffe2\040\uffe2" +
    "\041\uffe2\042\uffe2\044\uffe2\050\uffe2\051\uffe2\052\uffe2\053" +
    "\uffe2\001\002\000\004\054\105\001\002\000\046\013\uffdc" +
    "\014\uffdc\030\uffdc\031\uffdc\032\uffdc\033\uffdc\034\uffdc\035" +
    "\uffdc\036\uffdc\037\uffdc\040\uffdc\041\uffdc\042\uffdc\044\uffdc" +
    "\050\uffdc\051\uffdc\052\uffdc\053\uffdc\001\002\000\020\036" +
    "\052\037\042\043\054\071\034\072\046\073\041\074\044" +
    "\001\002\000\046\013\uffdf\014\uffdf\030\uffdf\031\uffdf\032" +
    "\uffdf\033\uffdf\034\uffdf\035\uffdf\036\uffdf\037\uffdf\040\uffdf" +
    "\041\uffdf\042\uffdf\044\uffdf\050\uffdf\051\uffdf\052\uffdf\053" +
    "\uffdf\001\002\000\046\013\uffdb\014\uffdb\030\uffdb\031\uffdb" +
    "\032\uffdb\033\uffdb\034\uffdb\035\uffdb\036\uffdb\037\uffdb\040" +
    "\uffdb\041\uffdb\042\uffdb\044\uffdb\050\uffdb\051\uffdb\052\uffdb" +
    "\053\uffdb\001\002\000\046\013\uffe6\014\uffe6\030\uffe6\031" +
    "\uffe6\032\uffe6\033\uffe6\034\uffe6\035\uffe6\036\uffe6\037\102" +
    "\040\061\041\063\042\062\044\uffe6\050\uffe6\051\uffe6\052" +
    "\uffe6\053\uffe6\001\002\000\046\013\uffdd\014\uffdd\030\uffdd" +
    "\031\uffdd\032\uffdd\033\uffdd\034\uffdd\035\uffdd\036\uffdd\037" +
    "\uffdd\040\uffdd\041\uffdd\042\uffdd\044\uffdd\050\uffdd\051\uffdd" +
    "\052\uffdd\053\uffdd\001\002\000\012\044\uff90\050\uff90\051" +
    "\uff90\052\uff90\001\002\000\004\052\101\001\002\000\012" +
    "\044\uff8e\050\uff8e\051\uff8e\052\uff8e\001\002\000\020\036" +
    "\052\037\042\043\054\071\034\072\046\073\041\074\044" +
    "\001\002\000\004\054\067\001\002\000\020\036\052\037" +
    "\042\043\054\071\034\072\046\073\041\074\044\001\002" +
    "\000\006\036\056\044\057\001\002\000\020\036\052\037" +
    "\042\043\054\071\034\072\046\073\041\074\044\001\002" +
    "\000\046\013\uffd9\014\uffd9\030\uffd9\031\uffd9\032\uffd9\033" +
    "\uffd9\034\uffd9\035\uffd9\036\uffd9\037\uffd9\040\uffd9\041\uffd9" +
    "\042\uffd9\044\uffd9\050\uffd9\051\uffd9\052\uffd9\053\uffd9\001" +
    "\002\000\044\013\uffe8\014\uffe8\030\uffe8\031\uffe8\032\uffe8" +
    "\033\uffe8\034\uffe8\035\uffe8\036\uffe8\040\061\041\063\042" +
    "\062\044\uffe8\050\uffe8\051\uffe8\052\uffe8\053\uffe8\001\002" +
    "\000\020\036\052\037\042\043\054\071\034\072\046\073" +
    "\041\074\044\001\002\000\020\036\052\037\042\043\054" +
    "\071\034\072\046\073\041\074\044\001\002\000\020\036" +
    "\052\037\042\043\054\071\034\072\046\073\041\074\044" +
    "\001\002\000\046\013\uffe4\014\uffe4\030\uffe4\031\uffe4\032" +
    "\uffe4\033\uffe4\034\uffe4\035\uffe4\036\uffe4\037\uffe4\040\uffe4" +
    "\041\uffe4\042\uffe4\044\uffe4\050\uffe4\051\uffe4\052\uffe4\053" +
    "\uffe4\001\002\000\046\013\uffe3\014\uffe3\030\uffe3\031\uffe3" +
    "\032\uffe3\033\uffe3\034\uffe3\035\uffe3\036\uffe3\037\uffe3\040" +
    "\uffe3\041\uffe3\042\uffe3\044\uffe3\050\uffe3\051\uffe3\052\uffe3" +
    "\053\uffe3\001\002\000\046\013\uffe5\014\uffe5\030\uffe5\031" +
    "\uffe5\032\uffe5\033\uffe5\034\uffe5\035\uffe5\036\uffe5\037\uffe5" +
    "\040\uffe5\041\uffe5\042\uffe5\044\uffe5\050\uffe5\051\uffe5\052" +
    "\uffe5\053\uffe5\001\002\000\004\071\070\001\002\000\004" +
    "\043\071\001\002\000\024\036\052\037\042\043\054\044" +
    "\uff87\051\uff87\071\034\072\046\073\041\074\044\001\002" +
    "\000\010\036\056\044\uff85\051\uff85\001\002\000\006\044" +
    "\076\051\075\001\002\000\006\044\uff88\051\uff88\001\002" +
    "\000\020\036\052\037\042\043\054\071\034\072\046\073" +
    "\041\074\044\001\002\000\012\044\uff93\050\uff93\051\uff93" +
    "\052\uff93\001\002\000\010\036\056\044\uff86\051\uff86\001" +
    "\002\000\046\013\uffe0\014\uffe0\030\uffe0\031\uffe0\032\uffe0" +
    "\033\uffe0\034\uffe0\035\uffe0\036\uffe0\037\uffe0\040\uffe0\041" +
    "\uffe0\042\uffe0\044\uffe0\050\uffe0\051\uffe0\052\uffe0\053\uffe0" +
    "\001\002\000\014\004\ufff7\006\ufff7\007\ufff7\010\ufff7\011" +
    "\ufff7\001\002\000\020\036\052\037\042\043\054\071\034" +
    "\072\046\073\041\074\044\001\002\000\044\013\uffe7\014" +
    "\uffe7\030\uffe7\031\uffe7\032\uffe7\033\uffe7\034\uffe7\035\uffe7" +
    "\036\uffe7\040\061\041\063\042\062\044\uffe7\050\uffe7\051" +
    "\uffe7\052\uffe7\053\uffe7\001\002\000\046\013\uffe1\014\uffe1" +
    "\030\uffe1\031\uffe1\032\uffe1\033\uffe1\034\uffe1\035\uffe1\036" +
    "\uffe1\037\uffe1\040\uffe1\041\uffe1\042\uffe1\044\uffe1\050\uffe1" +
    "\051\uffe1\052\uffe1\053\uffe1\001\002\000\004\071\106\001" +
    "\002\000\004\043\107\001\002\000\024\036\052\037\042" +
    "\043\054\044\uff87\051\uff87\071\034\072\046\073\041\074" +
    "\044\001\002\000\006\044\111\051\075\001\002\000\012" +
    "\044\uff92\050\uff92\051\uff92\052\uff92\001\002\000\004\071" +
    "\113\001\002\000\004\054\114\001\002\000\004\071\115" +
    "\001\002\000\004\043\116\001\002\000\024\036\052\037" +
    "\042\043\054\044\uff87\051\uff87\071\034\072\046\073\041" +
    "\074\044\001\002\000\006\044\120\051\075\001\002\000" +
    "\012\044\uff91\050\uff91\051\uff91\052\uff91\001\002\000\050" +
    "\013\uffda\014\uffda\030\uffda\031\uffda\032\uffda\033\uffda\034" +
    "\uffda\035\uffda\036\uffda\037\uffda\040\uffda\041\uffda\042\uffda" +
    "\044\uffda\047\125\050\uffda\051\uffda\052\uffda\053\uffda\001" +
    "\002\000\030\036\052\037\042\043\054\060\051\071\034" +
    "\072\046\073\041\074\044\077\053\100\040\101\036\001" +
    "\002\000\004\050\124\001\002\000\052\013\uffed\014\uffed" +
    "\030\uffed\031\uffed\032\uffed\033\uffed\034\uffed\035\uffed\036" +
    "\uffed\037\uffed\040\uffed\041\uffed\042\uffed\044\uffed\047\uffed" +
    "\050\uffed\051\uffed\052\uffed\053\uffed\061\uffed\001\002\000" +
    "\030\036\052\037\042\043\054\060\051\071\034\072\046" +
    "\073\041\074\044\077\053\100\040\101\036\001\002\000" +
    "\004\050\127\001\002\000\052\013\uffee\014\uffee\030\uffee" +
    "\031\uffee\032\uffee\033\uffee\034\uffee\035\uffee\036\uffee\037" +
    "\uffee\040\uffee\041\uffee\042\uffee\044\uffee\047\uffee\050\uffee" +
    "\051\uffee\052\uffee\053\uffee\061\uffee\001\002\000\012\004" +
    "\ufff2\007\ufff2\010\ufff2\011\ufff2\001\002\000\004\002\000" +
    "\001\002\000\004\071\u0107\001\002\000\004\005\134\001" +
    "\002\000\004\043\135\001\002\000\004\044\136\001\002" +
    "\000\004\045\137\001\002\000\046\007\030\010\027\011" +
    "\026\016\157\020\172\021\145\023\153\025\142\026\163" +
    "\046\uffd5\055\171\056\160\057\166\060\147\071\156\077" +
    "\053\100\040\101\140\001\002\000\004\054\372\001\002" +
    "\000\052\007\uffc6\010\uffc6\011\uffc6\016\uffc6\020\uffc6\021" +
    "\uffc6\022\uffc6\023\uffc6\024\uffc6\025\uffc6\026\uffc6\046\uffc6" +
    "\055\uffc6\056\uffc6\057\uffc6\060\uffc6\071\uffc6\077\uffc6\100" +
    "\uffc6\101\uffc6\001\002\000\004\052\371\001\002\000\004" +
    "\052\370\001\002\000\052\007\uffd2\010\uffd2\011\uffd2\016" +
    "\uffd2\020\uffd2\021\uffd2\022\uffd2\023\uffd2\024\uffd2\025\uffd2" +
    "\026\uffd2\046\uffd2\055\uffd2\056\uffd2\057\uffd2\060\uffd2\071" +
    "\uffd2\077\uffd2\100\uffd2\101\uffd2\001\002\000\004\043\347" +
    "\001\002\000\052\007\uffc9\010\uffc9\011\uffc9\016\uffc9\020" +
    "\uffc9\021\uffc9\022\uffc9\023\uffc9\024\uffc9\025\uffc9\026\uffc9" +
    "\046\uffc9\055\uffc9\056\uffc9\057\uffc9\060\uffc9\071\uffc9\077" +
    "\uffc9\100\uffc9\101\uffc9\001\002\000\004\052\346\001\002" +
    "\000\052\007\uffce\010\uffce\011\uffce\016\uffce\020\uffce\021" +
    "\uffce\022\uffce\023\uffce\024\uffce\025\uffce\026\uffce\046\uffce" +
    "\055\uffce\056\uffce\057\uffce\060\uffce\071\uffce\077\uffce\100" +
    "\uffce\101\uffce\001\002\000\052\007\uffca\010\uffca\011\uffca" +
    "\016\uffca\020\uffca\021\uffca\022\uffca\023\uffca\024\uffca\025" +
    "\uffca\026\uffca\046\uffca\055\uffca\056\uffca\057\uffca\060\uffca" +
    "\071\uffca\077\uffca\100\uffca\101\uffca\001\002\000\052\007" +
    "\uffcf\010\uffcf\011\uffcf\016\uffcf\020\uffcf\021\uffcf\022\uffcf" +
    "\023\uffcf\024\uffcf\025\uffcf\026\uffcf\046\uffcf\055\uffcf\056" +
    "\uffcf\057\uffcf\060\uffcf\071\uffcf\077\uffcf\100\uffcf\101\uffcf" +
    "\001\002\000\004\043\337\001\002\000\004\046\336\001" +
    "\002\000\052\007\uffd1\010\uffd1\011\uffd1\016\uffd1\020\uffd1" +
    "\021\uffd1\022\uffd1\023\uffd1\024\uffd1\025\uffd1\026\uffd1\046" +
    "\uffd1\055\uffd1\056\uffd1\057\uffd1\060\uffd1\071\uffd1\077\uffd1" +
    "\100\uffd1\101\uffd1\001\002\000\006\047\122\061\201\001" +
    "\002\000\004\043\310\001\002\000\004\043\300\001\002" +
    "\000\004\052\277\001\002\000\052\007\uffd3\010\uffd3\011" +
    "\uffd3\016\uffd3\020\uffd3\021\uffd3\022\uffd3\023\uffd3\024\uffd3" +
    "\025\uffd3\026\uffd3\046\uffd3\055\uffd3\056\uffd3\057\uffd3\060" +
    "\uffd3\071\uffd3\077\uffd3\100\uffd3\101\uffd3\001\002\000\004" +
    "\045\267\001\002\000\052\007\uffcc\010\uffcc\011\uffcc\016" +
    "\uffcc\020\uffcc\021\uffcc\022\uffcc\023\uffcc\024\uffcc\025\uffcc" +
    "\026\uffcc\046\uffcc\055\uffcc\056\uffcc\057\uffcc\060\uffcc\071" +
    "\uffcc\077\uffcc\100\uffcc\101\uffcc\001\002\000\052\007\030" +
    "\010\027\011\026\016\157\020\172\021\145\022\uffd5\023" +
    "\153\024\uffd5\025\142\026\163\046\uffd5\055\171\056\160" +
    "\057\166\060\147\071\156\077\053\100\040\101\140\001" +
    "\002\000\004\052\265\001\002\000\052\007\uffd0\010\uffd0" +
    "\011\uffd0\016\uffd0\020\uffd0\021\uffd0\022\uffd0\023\uffd0\024" +
    "\uffd0\025\uffd0\026\uffd0\046\uffd0\055\uffd0\056\uffd0\057\uffd0" +
    "\060\uffd0\071\uffd0\077\uffd0\100\uffd0\101\uffd0\001\002\000" +
    "\052\007\uffd4\010\uffd4\011\uffd4\016\uffd4\020\uffd4\021\uffd4" +
    "\022\uffd4\023\uffd4\024\uffd4\025\uffd4\026\uffd4\046\uffd4\055" +
    "\uffd4\056\uffd4\057\uffd4\060\uffd4\071\uffd4\077\uffd4\100\uffd4" +
    "\101\uffd4\001\002\000\004\043\256\001\002\000\004\043" +
    "\173\001\002\000\012\007\030\010\027\011\026\071\177" +
    "\001\002\000\004\052\uffa7\001\002\000\004\052\206\001" +
    "\002\000\004\071\156\001\002\000\010\047\122\052\uffa6" +
    "\061\201\001\002\000\006\047\125\061\203\001\002\000" +
    "\030\036\052\037\042\043\054\060\051\071\034\072\046" +
    "\073\041\074\044\077\053\100\040\101\036\001\002\000" +
    "\006\044\uffc5\052\uffc5\001\002\000\030\036\052\037\042" +
    "\043\054\060\051\071\034\072\046\073\041\074\044\077" +
    "\053\100\040\101\036\001\002\000\006\044\uffc4\052\uffc4" +
    "\001\002\000\004\052\uffa5\001\002\000\022\015\207\036" +
    "\052\037\042\043\215\071\034\072\046\073\041\074\044" +
    "\001\002\000\022\015\207\036\052\037\042\043\215\071" +
    "\034\072\046\073\041\074\044\001\002\000\012\013\uff9b" +
    "\014\uff9b\044\uff9b\052\uff9b\001\002\000\012\013\223\014" +
    "\uff9f\044\uff9f\052\uff9f\001\002\000\020\030\230\031\227" +
    "\032\232\033\231\034\225\035\226\036\056\001\002\000" +
    "\012\013\uff9d\014\uff9d\044\uff9d\052\uff9d\001\002\000\006" +
    "\014\221\052\241\001\002\000\022\015\207\036\052\037" +
    "\042\043\215\071\034\072\046\073\041\074\044\001\002" +
    "\000\022\030\230\031\227\032\232\033\231\034\225\035" +
    "\226\036\056\044\057\001\002\000\006\014\221\044\220" +
    "\001\002\000\012\013\uff94\014\uff94\044\uff94\052\uff94\001" +
    "\002\000\022\015\207\036\052\037\042\043\215\071\034" +
    "\072\046\073\041\074\044\001\002\000\012\013\223\014" +
    "\uffa0\044\uffa0\052\uffa0\001\002\000\022\015\207\036\052" +
    "\037\042\043\215\071\034\072\046\073\041\074\044\001" +
    "\002\000\012\013\uff9e\014\uff9e\044\uff9e\052\uff9e\001\002" +
    "\000\020\036\052\037\042\043\054\071\034\072\046\073" +
    "\041\074\044\001\002\000\020\036\052\037\042\043\054" +
    "\071\034\072\046\073\041\074\044\001\002\000\020\036" +
    "\052\037\042\043\054\071\034\072\046\073\041\074\044" +
    "\001\002\000\020\036\052\037\042\043\054\071\034\072" +
    "\046\073\041\074\044\001\002\000\020\036\052\037\042" +
    "\043\054\071\034\072\046\073\041\074\044\001\002\000" +
    "\020\036\052\037\042\043\054\071\034\072\046\073\041" +
    "\074\044\001\002\000\014\013\uff97\014\uff97\036\056\044" +
    "\uff97\052\uff97\001\002\000\014\013\uff96\014\uff96\036\056" +
    "\044\uff96\052\uff96\001\002\000\014\013\uff99\014\uff99\036" +
    "\056\044\uff99\052\uff99\001\002\000\014\013\uff98\014\uff98" +
    "\036\056\044\uff98\052\uff98\001\002\000\014\013\uff9a\014" +
    "\uff9a\036\056\044\uff9a\052\uff9a\001\002\000\014\013\uff95" +
    "\014\uff95\036\056\044\uff95\052\uff95\001\002\000\004\071" +
    "\245\001\002\000\004\044\250\001\002\000\004\044\uffa4" +
    "\001\002\000\004\044\uffa3\001\002\000\012\047\122\061" +
    "\201\062\246\063\247\001\002\000\004\044\uffa2\001\002" +
    "\000\004\044\uffa1\001\002\000\004\045\251\001\002\000" +
    "\046\007\uffa9\010\uffa9\011\uffa9\016\uffa9\020\uffa9\021\uffa9" +
    "\023\uffa9\025\uffa9\026\uffa9\046\uffa9\055\uffa9\056\uffa9\057" +
    "\uffa9\060\uffa9\071\uffa9\077\uffa9\100\uffa9\101\uffa9\001\002" +
    "\000\046\007\030\010\027\011\026\016\157\020\172\021" +
    "\145\023\153\025\142\026\163\046\uffd5\055\171\056\160" +
    "\057\166\060\147\071\156\077\053\100\040\101\140\001" +
    "\002\000\004\046\254\001\002\000\052\007\uffa8\010\uffa8" +
    "\011\uffa8\016\uffa8\020\uffa8\021\uffa8\022\uffa8\023\uffa8\024" +
    "\uffa8\025\uffa8\026\uffa8\046\uffa8\055\uffa8\056\uffa8\057\uffa8" +
    "\060\uffa8\071\uffa8\077\uffa8\100\uffa8\101\uffa8\001\002\000" +
    "\012\013\uff9c\014\uff9c\044\uff9c\052\uff9c\001\002\000\004" +
    "\076\257\001\002\000\006\044\uffc1\051\uffc1\001\002\000" +
    "\006\044\262\051\261\001\002\000\020\036\052\037\042" +
    "\043\054\071\034\072\046\073\041\074\044\001\002\000" +
    "\004\052\263\001\002\000\052\007\uffc3\010\uffc3\011\uffc3" +
    "\016\uffc3\020\uffc3\021\uffc3\022\uffc3\023\uffc3\024\uffc3\025" +
    "\uffc3\026\uffc3\046\uffc3\055\uffc3\056\uffc3\057\uffc3\060\uffc3" +
    "\071\uffc3\077\uffc3\100\uffc3\101\uffc3\001\002\000\010\036" +
    "\056\044\uffc2\051\uffc2\001\002\000\052\007\uffcd\010\uffcd" +
    "\011\uffcd\016\uffcd\020\uffcd\021\uffcd\022\uffcd\023\uffcd\024" +
    "\uffcd\025\uffcd\026\uffcd\046\uffcd\055\uffcd\056\uffcd\057\uffcd" +
    "\060\uffcd\071\uffcd\077\uffcd\100\uffcd\101\uffcd\001\002\000" +
    "\010\022\uffd7\024\uffd7\046\uffd7\001\002\000\046\007\uffab" +
    "\010\uffab\011\uffab\016\uffab\020\uffab\021\uffab\023\uffab\025" +
    "\uffab\026\uffab\046\uffab\055\uffab\056\uffab\057\uffab\060\uffab" +
    "\071\uffab\077\uffab\100\uffab\101\uffab\001\002\000\046\007" +
    "\030\010\027\011\026\016\157\020\172\021\145\023\153" +
    "\025\142\026\163\046\uffd5\055\171\056\160\057\166\060" +
    "\147\071\156\077\053\100\040\101\140\001\002\000\004" +
    "\046\272\001\002\000\004\023\273\001\002\000\004\043" +
    "\274\001\002\000\022\015\207\036\052\037\042\043\215" +
    "\071\034\072\046\073\041\074\044\001\002\000\006\014" +
    "\221\044\276\001\002\000\052\007\uffaa\010\uffaa\011\uffaa" +
    "\016\uffaa\020\uffaa\021\uffaa\022\uffaa\023\uffaa\024\uffaa\025" +
    "\uffaa\026\uffaa\046\uffaa\055\uffaa\056\uffaa\057\uffaa\060\uffaa" +
    "\071\uffaa\077\uffaa\100\uffaa\101\uffaa\001\002\000\052\007" +
    "\uffc8\010\uffc8\011\uffc8\016\uffc8\020\uffc8\021\uffc8\022\uffc8" +
    "\023\uffc8\024\uffc8\025\uffc8\026\uffc8\046\uffc8\055\uffc8\056" +
    "\uffc8\057\uffc8\060\uffc8\071\uffc8\077\uffc8\100\uffc8\101\uffc8" +
    "\001\002\000\004\076\301\001\002\000\006\044\uffbe\051" +
    "\uffbe\001\002\000\006\044\304\051\303\001\002\000\004" +
    "\012\306\001\002\000\004\052\305\001\002\000\052\007" +
    "\uffc0\010\uffc0\011\uffc0\016\uffc0\020\uffc0\021\uffc0\022\uffc0" +
    "\023\uffc0\024\uffc0\025\uffc0\026\uffc0\046\uffc0\055\uffc0\056" +
    "\uffc0\057\uffc0\060\uffc0\071\uffc0\077\uffc0\100\uffc0\101\uffc0" +
    "\001\002\000\004\071\307\001\002\000\006\044\uffbf\051" +
    "\uffbf\001\002\000\022\015\207\036\052\037\042\043\215" +
    "\071\034\072\046\073\041\074\044\001\002\000\006\014" +
    "\221\044\312\001\002\000\004\045\313\001\002\000\046" +
    "\007\uffbd\010\uffbd\011\uffbd\016\uffbd\020\uffbd\021\uffbd\023" +
    "\uffbd\025\uffbd\026\uffbd\046\uffbd\055\uffbd\056\uffbd\057\uffbd" +
    "\060\uffbd\071\uffbd\077\uffbd\100\uffbd\101\uffbd\001\002\000" +
    "\046\007\030\010\027\011\026\016\157\020\172\021\145" +
    "\023\153\025\142\026\163\046\uffd5\055\171\056\160\057" +
    "\166\060\147\071\156\077\053\100\040\101\140\001\002" +
    "\000\004\046\316\001\002\000\054\007\uffb9\010\uffb9\011" +
    "\uffb9\016\uffb9\017\uffb9\020\uffb9\021\uffb9\022\uffb9\023\uffb9" +
    "\024\uffb9\025\uffb9\026\uffb9\046\uffb9\055\uffb9\056\uffb9\057" +
    "\uffb9\060\uffb9\071\uffb9\077\uffb9\100\uffb9\101\uffb9\001\002" +
    "\000\054\007\uffb6\010\uffb6\011\uffb6\016\uffb6\017\321\020" +
    "\uffb6\021\uffb6\022\uffb6\023\uffb6\024\uffb6\025\uffb6\026\uffb6" +
    "\046\uffb6\055\uffb6\056\uffb6\057\uffb6\060\uffb6\071\uffb6\077" +
    "\uffb6\100\uffb6\101\uffb6\001\002\000\052\007\uffbc\010\uffbc" +
    "\011\uffbc\016\uffbc\020\uffbc\021\uffbc\022\uffbc\023\uffbc\024" +
    "\uffbc\025\uffbc\026\uffbc\046\uffbc\055\uffbc\056\uffbc\057\uffbc" +
    "\060\uffbc\071\uffbc\077\uffbc\100\uffbc\101\uffbc\001\002\000" +
    "\006\016\322\045\323\001\002\000\004\043\327\001\002" +
    "\000\046\007\uffb8\010\uffb8\011\uffb8\016\uffb8\020\uffb8\021" +
    "\uffb8\023\uffb8\025\uffb8\026\uffb8\046\uffb8\055\uffb8\056\uffb8" +
    "\057\uffb8\060\uffb8\071\uffb8\077\uffb8\100\uffb8\101\uffb8\001" +
    "\002\000\046\007\030\010\027\011\026\016\157\020\172" +
    "\021\145\023\153\025\142\026\163\046\uffd5\055\171\056" +
    "\160\057\166\060\147\071\156\077\053\100\040\101\140" +
    "\001\002\000\004\046\326\001\002\000\052\007\uffb7\010" +
    "\uffb7\011\uffb7\016\uffb7\020\uffb7\021\uffb7\022\uffb7\023\uffb7" +
    "\024\uffb7\025\uffb7\026\uffb7\046\uffb7\055\uffb7\056\uffb7\057" +
    "\uffb7\060\uffb7\071\uffb7\077\uffb7\100\uffb7\101\uffb7\001\002" +
    "\000\022\015\207\036\052\037\042\043\215\071\034\072" +
    "\046\073\041\074\044\001\002\000\006\014\221\044\331" +
    "\001\002\000\004\045\332\001\002\000\046\007\uffbb\010" +
    "\uffbb\011\uffbb\016\uffbb\020\uffbb\021\uffbb\023\uffbb\025\uffbb" +
    "\026\uffbb\046\uffbb\055\uffbb\056\uffbb\057\uffbb\060\uffbb\071" +
    "\uffbb\077\uffbb\100\uffbb\101\uffbb\001\002\000\046\007\030" +
    "\010\027\011\026\016\157\020\172\021\145\023\153\025" +
    "\142\026\163\046\uffd5\055\171\056\160\057\166\060\147" +
    "\071\156\077\053\100\040\101\140\001\002\000\004\046" +
    "\335\001\002\000\054\007\uffba\010\uffba\011\uffba\016\uffba" +
    "\017\uffba\020\uffba\021\uffba\022\uffba\023\uffba\024\uffba\025" +
    "\uffba\026\uffba\046\uffba\055\uffba\056\uffba\057\uffba\060\uffba" +
    "\071\uffba\077\uffba\100\uffba\101\uffba\001\002\000\004\002" +
    "\uffd8\001\002\000\022\015\207\036\052\037\042\043\215" +
    "\071\034\072\046\073\041\074\044\001\002\000\006\014" +
    "\221\044\341\001\002\000\004\045\342\001\002\000\046" +
    "\007\uffad\010\uffad\011\uffad\016\uffad\020\uffad\021\uffad\023" +
    "\uffad\025\uffad\026\uffad\046\uffad\055\uffad\056\uffad\057\uffad" +
    "\060\uffad\071\uffad\077\uffad\100\uffad\101\uffad\001\002\000" +
    "\046\007\030\010\027\011\026\016\157\020\172\021\145" +
    "\023\153\025\142\026\163\046\uffd5\055\171\056\160\057" +
    "\166\060\147\071\156\077\053\100\040\101\140\001\002" +
    "\000\004\046\345\001\002\000\052\007\uffac\010\uffac\011" +
    "\uffac\016\uffac\020\uffac\021\uffac\022\uffac\023\uffac\024\uffac" +
    "\025\uffac\026\uffac\046\uffac\055\uffac\056\uffac\057\uffac\060" +
    "\uffac\071\uffac\077\uffac\100\uffac\101\uffac\001\002\000\052" +
    "\007\uffc7\010\uffc7\011\uffc7\016\uffc7\020\uffc7\021\uffc7\022" +
    "\uffc7\023\uffc7\024\uffc7\025\uffc7\026\uffc7\046\uffc7\055\uffc7" +
    "\056\uffc7\057\uffc7\060\uffc7\071\uffc7\077\uffc7\100\uffc7\101" +
    "\uffc7\001\002\000\030\036\052\037\042\043\054\060\051" +
    "\071\034\072\046\073\041\074\044\077\053\100\040\101" +
    "\036\001\002\000\004\044\351\001\002\000\004\045\352" +
    "\001\002\000\010\022\uffb3\024\uffb3\046\uffb3\001\002\000" +
    "\010\022\357\024\355\046\uffae\001\002\000\004\046\367" +
    "\001\002\000\004\053\364\001\002\000\010\022\uffb4\024" +
    "\uffb4\046\uffb4\001\002\000\020\036\052\037\042\043\054" +
    "\071\034\072\046\073\041\074\044\001\002\000\006\036" +
    "\056\053\361\001\002\000\052\007\uffb2\010\uffb2\011\uffb2" +
    "\016\uffb2\020\uffb2\021\uffb2\022\uffb2\023\uffb2\024\uffb2\025" +
    "\uffb2\026\uffb2\046\uffb2\055\uffb2\056\uffb2\057\uffb2\060\uffb2" +
    "\071\uffb2\077\uffb2\100\uffb2\101\uffb2\001\002\000\052\007" +
    "\030\010\027\011\026\016\157\020\172\021\145\022\uffd5" +
    "\023\153\024\uffd5\025\142\026\163\046\uffd5\055\171\056" +
    "\160\057\166\060\147\071\156\077\053\100\040\101\140" +
    "\001\002\000\010\022\uffb1\024\uffb1\046\uffb1\001\002\000" +
    "\046\007\uffb0\010\uffb0\011\uffb0\016\uffb0\020\uffb0\021\uffb0" +
    "\023\uffb0\025\uffb0\026\uffb0\046\uffb0\055\uffb0\056\uffb0\057" +
    "\uffb0\060\uffb0\071\uffb0\077\uffb0\100\uffb0\101\uffb0\001\002" +
    "\000\046\007\030\010\027\011\026\016\157\020\172\021" +
    "\145\023\153\025\142\026\163\046\uffd5\055\171\056\160" +
    "\057\166\060\147\071\156\077\053\100\040\101\140\001" +
    "\002\000\004\046\uffaf\001\002\000\052\007\uffb5\010\uffb5" +
    "\011\uffb5\016\uffb5\020\uffb5\021\uffb5\022\uffb5\023\uffb5\024" +
    "\uffb5\025\uffb5\026\uffb5\046\uffb5\055\uffb5\056\uffb5\057\uffb5" +
    "\060\uffb5\071\uffb5\077\uffb5\100\uffb5\101\uffb5\001\002\000" +
    "\052\007\uffcb\010\uffcb\011\uffcb\016\uffcb\020\uffcb\021\uffcb" +
    "\022\uffcb\023\uffcb\024\uffcb\025\uffcb\026\uffcb\046\uffcb\055" +
    "\uffcb\056\uffcb\057\uffcb\060\uffcb\071\uffcb\077\uffcb\100\uffcb" +
    "\101\uffcb\001\002\000\010\022\uffd6\024\uffd6\046\uffd6\001" +
    "\002\000\004\071\373\001\002\000\006\054\114\071\375" +
    "\001\002\000\006\051\u0103\052\u0102\001\002\000\010\043" +
    "\376\051\uff89\052\uff89\001\002\000\024\036\052\037\042" +
    "\043\054\044\uff87\051\uff87\071\034\072\046\073\041\074" +
    "\044\001\002\000\006\051\uff8b\052\uff8b\001\002\000\006" +
    "\044\u0101\051\075\001\002\000\006\051\uff8a\052\uff8a\001" +
    "\002\000\052\007\uff8d\010\uff8d\011\uff8d\016\uff8d\020\uff8d" +
    "\021\uff8d\022\uff8d\023\uff8d\024\uff8d\025\uff8d\026\uff8d\046" +
    "\uff8d\055\uff8d\056\uff8d\057\uff8d\060\uff8d\071\uff8d\077\uff8d" +
    "\100\uff8d\101\uff8d\001\002\000\004\071\u0104\001\002\000" +
    "\010\043\376\051\uff89\052\uff89\001\002\000\006\051\uff8c" +
    "\052\uff8c\001\002\000\006\051\u010e\052\u010d\001\002\000" +
    "\012\047\122\051\uffe9\052\uffe9\061\u0109\001\002\000\006" +
    "\047\125\052\u010c\001\002\000\030\036\052\037\042\043" +
    "\054\060\051\071\034\072\046\073\041\074\044\077\053" +
    "\100\040\101\036\001\002\000\006\051\uffeb\052\uffeb\001" +
    "\002\000\006\051\uffea\052\uffea\001\002\000\054\004\uffef" +
    "\007\uffef\010\uffef\011\uffef\016\uffef\020\uffef\021\uffef\022" +
    "\uffef\023\uffef\024\uffef\025\uffef\026\uffef\046\uffef\055\uffef" +
    "\056\uffef\057\uffef\060\uffef\071\uffef\077\uffef\100\uffef\101" +
    "\uffef\001\002\000\054\004\ufff0\007\ufff0\010\ufff0\011\ufff0" +
    "\016\ufff0\020\ufff0\021\ufff0\022\ufff0\023\ufff0\024\ufff0\025" +
    "\ufff0\026\ufff0\046\ufff0\055\ufff0\056\ufff0\057\ufff0\060\ufff0" +
    "\071\ufff0\077\ufff0\100\ufff0\101\ufff0\001\002\000\004\071" +
    "\u010f\001\002\000\010\051\uffe9\052\uffe9\061\u0109\001\002" +
    "\000\006\051\uffec\052\uffec\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u010e\000\006\002\004\003\003\001\001\000\006\004" +
    "\011\005\006\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\006\023\001\001\000\002\001\001\000\004\062" +
    "\020\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\007\130\046\131\050\127\001" +
    "\001\000\004\046\030\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\016\042\046\051\047\053\034\054\044\055\036" +
    "\056\042\001\001\000\004\057\120\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\055\103\056\042\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\055\077\056\042\001\001\000\002\001\001" +
    "\000\012\053\054\054\044\055\036\056\042\001\001\000" +
    "\002\001\001\000\010\054\057\055\036\056\042\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\055\065\056" +
    "\042\001\001\000\006\055\064\056\042\001\001\000\006" +
    "\055\063\056\042\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\016\053\071\054\044\055\036\056\042\060\072\061" +
    "\073\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\053\076\054\044\055\036\056\042\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\054\102\055\036\056\042\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\016\053\071\054\044\055\036\056" +
    "\042\060\107\061\073\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\016\053\071\054\044\055\036" +
    "\056\042\060\116\061\073\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\016\042\046\051\122" +
    "\053\034\054\044\055\036\056\042\001\001\000\002\001" +
    "\001\000\002\001\001\000\016\042\046\051\125\053\034" +
    "\054\044\055\036\056\042\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\047\u0105\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\042\010\153\011\164" +
    "\012\167\013\161\014\142\015\150\017\145\021\151\024" +
    "\147\030\143\031\154\032\166\042\160\043\140\046\131" +
    "\050\163\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\057\177\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\042\010\265\011\164\012\167\013\161\014\142\015\150" +
    "\017\145\021\151\024\147\030\143\031\154\032\166\042" +
    "\160\043\140\046\131\050\163\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\014\173\033\174\046\175\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\014\204\001" +
    "\001\000\004\057\177\001\001\000\002\001\001\000\016" +
    "\042\046\051\201\053\034\054\044\055\036\056\042\001" +
    "\001\000\002\001\001\000\016\042\046\051\203\053\034" +
    "\054\044\055\036\056\042\001\001\000\002\001\001\000" +
    "\002\001\001\000\022\036\213\037\210\040\212\041\207" +
    "\053\211\054\044\055\036\056\042\001\001\000\016\040" +
    "\254\041\207\053\211\054\044\055\036\056\042\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\022\036\216\037\210" +
    "\040\212\041\207\053\215\054\044\055\036\056\042\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\020\037\221\040\212\041\207\053\211\054\044\055" +
    "\036\056\042\001\001\000\002\001\001\000\016\040\223" +
    "\041\207\053\211\054\044\055\036\056\042\001\001\000" +
    "\002\001\001\000\012\053\237\054\044\055\036\056\042" +
    "\001\001\000\012\053\236\054\044\055\036\056\042\001" +
    "\001\000\012\053\235\054\044\055\036\056\042\001\001" +
    "\000\012\053\234\054\044\055\036\056\042\001\001\000" +
    "\012\053\233\054\044\055\036\056\042\001\001\000\012" +
    "\053\232\054\044\055\036\056\042\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\014\242\034" +
    "\241\035\243\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\057\177\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\072\251" +
    "\001\001\000\042\010\252\011\164\012\167\013\161\014" +
    "\142\015\150\017\145\021\151\024\147\030\143\031\154" +
    "\032\166\042\160\043\140\046\131\050\163\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\016\257\001\001\000\002\001\001\000" +
    "\012\053\263\054\044\055\036\056\042\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\071\267\001\001\000\042" +
    "\010\270\011\164\012\167\013\161\014\142\015\150\017" +
    "\145\021\151\024\147\030\143\031\154\032\166\042\160" +
    "\043\140\046\131\050\163\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\022\036\274\037\210" +
    "\040\212\041\207\053\211\054\044\055\036\056\042\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\020\301\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\022\036\310\037" +
    "\210\040\212\041\207\053\211\054\044\055\036\056\042" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\063" +
    "\313\001\001\000\042\010\314\011\164\012\167\013\161" +
    "\014\142\015\150\017\145\021\151\024\147\030\143\031" +
    "\154\032\166\042\160\043\140\046\131\050\163\001\001" +
    "\000\002\001\001\000\004\022\316\001\001\000\004\023" +
    "\317\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\065\323\001\001\000\042\010\324\011" +
    "\164\012\167\013\161\014\142\015\150\017\145\021\151" +
    "\024\147\030\143\031\154\032\166\042\160\043\140\046" +
    "\131\050\163\001\001\000\002\001\001\000\002\001\001" +
    "\000\022\036\327\037\210\040\212\041\207\053\211\054" +
    "\044\055\036\056\042\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\064\332\001\001\000\042\010\333\011" +
    "\164\012\167\013\161\014\142\015\150\017\145\021\151" +
    "\024\147\030\143\031\154\032\166\042\160\043\140\046" +
    "\131\050\163\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\022\036\337\037\210\040\212\041" +
    "\207\053\211\054\044\055\036\056\042\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\070\342\001\001\000" +
    "\042\010\343\011\164\012\167\013\161\014\142\015\150" +
    "\017\145\021\151\024\147\030\143\031\154\032\166\042" +
    "\160\043\140\046\131\050\163\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\016\042\046\051" +
    "\347\053\034\054\044\055\036\056\042\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\025\352\001\001\000" +
    "\006\026\355\027\353\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\053\357\054\044\055" +
    "\036\056\042\001\001\000\002\001\001\000\004\066\361" +
    "\001\001\000\042\010\362\011\164\012\167\013\161\014" +
    "\142\015\150\017\145\021\151\024\147\030\143\031\154" +
    "\032\166\042\160\043\140\046\131\050\163\001\001\000" +
    "\002\001\001\000\004\067\364\001\001\000\042\010\365" +
    "\011\164\012\167\013\161\014\142\015\150\017\145\021" +
    "\151\024\147\030\143\031\154\032\166\042\160\043\140" +
    "\046\131\050\163\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\044\373\001\001\000\002\001\001\000\004\045" +
    "\376\001\001\000\016\053\071\054\044\055\036\056\042" +
    "\060\377\061\073\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\045\u0104\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\052\u0109\057\u0107\001\001\000\002\001\001" +
    "\000\016\042\046\051\u010a\053\034\054\044\055\036\056" +
    "\042\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\052" +
    "\u010f\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$SintaxisPrograma$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$SintaxisPrograma$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$SintaxisPrograma$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    private Symbol s;
    private ProgramaSemantica sem = new ProgramaSemantica();
    private boolean esCase = false;
    private String java, vb, py;
    private List<Triplete> trip = new ArrayList<>();
    
    public void syntax_error(Symbol sym){
        System.out.println("\n" + sym.value + sym.sym);
        System.out.println("Error Sintactico en la letra: " + sym.value + "   <linea>: "  + (sym.right + 1) + "    <columna>: " + (sym.left + 1) + "\n");
    }

    public void unrecovered_syntax_error(Symbol sym) throws java.lang.Exception{
        System.out.println("\n" + sym.value + sym.sym);
        System.out.println("Error Sintactico en la letra: " + sym.value + "   <linea>: "  + (sym.right + 1) + "    <columna>: " + (sym.left + 1) + "\n");
    }

    public void setTipo(String java, String vb, String py){
            this.java = java;
            this.vb = vb;
            this.py = py;
            sem.iniciarJAVA(this.java);
    }

    public Symbol getS(){
        return this.cur_token;
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$SintaxisPrograma$actions {
  private final SintaxisPrograma parser;

  /** Constructor */
  CUP$SintaxisPrograma$actions(SintaxisPrograma parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$SintaxisPrograma$do_action_part00000000(
    int                        CUP$SintaxisPrograma$act_num,
    java_cup.runtime.lr_parser CUP$SintaxisPrograma$parser,
    java.util.Stack            CUP$SintaxisPrograma$stack,
    int                        CUP$SintaxisPrograma$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$SintaxisPrograma$result;

      /* select the action based on the action number */
      switch (CUP$SintaxisPrograma$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= PROGRAMA EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-1)).value;
		RESULT = start_val;
              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$SintaxisPrograma$parser.done_parsing();
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // PROGRAMA ::= INCLUDE_LENG CONST VARGLOB MAIN 
            {
              Object RESULT =null;

              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("PROGRAMA",0, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INCLUDE_LENG ::= INCLUDE_LENG IN_LENG 
            {
              Object RESULT =null;

              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("INCLUDE_LENG",1, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // INCLUDE_LENG ::= 
            {
              Object RESULT =null;

              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("INCLUDE_LENG",1, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // IN_LENG ::= py 
            {
              Object RESULT =null;
		sem.iniciarPY(py);
              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("IN_LENG",2, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // IN_LENG ::= vb 
            {
              Object RESULT =null;
		sem.iniciarVB(vb);
              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("IN_LENG",2, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // IN_LENG ::= java IN_CLASS comilla 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-1)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-1)).value;
		if(e1.equals("$$*$$")){sem.importarTodasClases();}else{sem.importarClase(e1);}
              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("IN_LENG",2, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // IN_LENG ::= includee menor idlib mayor 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-3)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-1)).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-1)).value;

              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("IN_LENG",2, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // IN_CLASS ::= por 
            {
              String RESULT =null;
		RESULT = "$$*$$";
              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("IN_CLASS",48, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // IN_CLASS ::= id 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.peek()).value;
		RESULT = e1;
              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("IN_CLASS",48, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // CONST ::= CONST constt TYPE id igual EXPR puntocoma 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-4)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-4)).right;
		Integer e1 = (Integer)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-4)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-3)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-3)).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-3)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-1)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-1)).right;
		OperacionPrograma e3 = (OperacionPrograma)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-1)).value;
		if(!sem.addVar(new ConstantePrograma(e2,ProgramaSemantica.AMBITO, e1, e3.getTipo(), null))){
              syntax_error(getS());
        }
              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("CONST",3, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-6)), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // CONST ::= 
            {
              Object RESULT =null;
		
              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("CONST",3, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // TYPE ::= intt 
            {
              Integer RESULT =null;
		RESULT = VariablePrograma.INT;
              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("TYPE",36, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // TYPE ::= floatt 
            {
              Integer RESULT =null;
		RESULT = VariablePrograma.FLOAT;
              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("TYPE",36, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // TYPE ::= charr 
            {
              Integer RESULT =null;
		RESULT = VariablePrograma.CHAR;
              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("TYPE",36, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // VARGLOB ::= VARGLOB ASIG_VAR 
            {
              Object RESULT =null;

              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("VARGLOB",4, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // VARGLOB ::= 
            {
              Object RESULT =null;

              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("VARGLOB",4, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // ASIG_VAR ::= TYPE LIST_ASIG puntocoma 
            {
              List<VariablePrograma> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-2)).right;
		Integer e1 = (Integer)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-1)).right;
		List<VariablePrograma> e2 = (List<VariablePrograma>)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-1)).value;
		if(!sem.addListVar(e2, e1)){syntax_error(getS());}
                else {for(VariablePrograma var : e2){
                        var.setTipo(e1);
                        if(var.getTriplete() instanceof AsignarValor)
                        ((AsignarValor)var.getTriplete()).setTipo(Triplete.tipos[e1-1]);
                } RESULT = e2;}
              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("ASIG_VAR",38, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // ASIG_VAR ::= TYPE id CORCHETES puntocoma 
            {
              List<VariablePrograma> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-3)).right;
		Integer e1 = (Integer)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-2)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-2)).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-2)).value;
		int e4left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-1)).left;
		int e4right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-1)).right;
		List<OperacionPrograma> e4 = (List<OperacionPrograma>)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-1)).value;
		
                if(!sem.addVar(new ArregloPrograma(e2, ProgramaSemantica.AMBITO, e1, e4, 
                new DefinirArreglo(null, new TerminalOperator(e2), Triplete.tipos[e1-1])))){
                        syntax_error(getS());
                }
              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("ASIG_VAR",38, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // CORCHETES ::= CORCHETES cora EXPR corc 
            {
              List<OperacionPrograma> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-3)).right;
		List<OperacionPrograma> e1 = (List<OperacionPrograma>)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-1)).right;
		OperacionPrograma e2 = (OperacionPrograma)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-1)).value;
		if(e2.getTipo()<=VariablePrograma.INT) e1.add(e2); RESULT = e1;
              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("CORCHETES",45, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // CORCHETES ::= cora EXPR corc 
            {
              List<OperacionPrograma> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-1)).right;
		OperacionPrograma e1 = (OperacionPrograma)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-1)).value;
		List<OperacionPrograma> opr = new ArrayList<>(); 
                if(e1.getTipo()<=VariablePrograma.INT) opr.add(e1);
                RESULT = opr;
              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("CORCHETES",45, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // LIST_ASIG ::= LIST_ASIG coma id ASIG 
            {
              List<VariablePrograma> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-3)).right;
		List<VariablePrograma> e1 = (List<VariablePrograma>)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-1)).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-1)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()).right;
		OperacionPrograma e3 = (OperacionPrograma)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.peek()).value;
		
                if(e3!=null) e1.add(new VariablePrograma(e2, ProgramaSemantica.AMBITO, e3,
                new AsignarValor(null, new TerminalOperator(e2), e3.getTriplete())));
                else e1.add(new VariablePrograma(e2, ProgramaSemantica.AMBITO,
                new AsignarValor(null, new TerminalOperator(e2), null))); RESULT = e1;
              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("LIST_ASIG",37, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // LIST_ASIG ::= id ASIG 
            {
              List<VariablePrograma> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-1)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()).right;
		OperacionPrograma e2 = (OperacionPrograma)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.peek()).value;
		List<VariablePrograma> vars = new ArrayList<>();
            if(e2!=null) vars.add(new VariablePrograma(e1, ProgramaSemantica.AMBITO, e2,
                new AsignarValor(null, new TerminalOperator(e1), e2.getTriplete()))); 
            else vars.add(new VariablePrograma(e1, ProgramaSemantica.AMBITO,
                new AsignarValor(null, new TerminalOperator(e1), null))); RESULT = vars;
              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("LIST_ASIG",37, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // ASIG ::= igual EXPR 
            {
              OperacionPrograma RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()).right;
		OperacionPrograma e1 = (OperacionPrograma)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.peek()).value;
		RESULT = e1;
              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("ASIG",40, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // ASIG ::= 
            {
              OperacionPrograma RESULT =null;

              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("ASIG",40, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // OPERACION_A ::= OPERACION_A mas OPERACION_M 
            {
              OperacionPrograma RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-2)).right;
		OperacionPrograma e1 = (OperacionPrograma)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()).right;
		OperacionPrograma e2 = (OperacionPrograma)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.peek()).value;
		if(e1 != null && e2 != null) RESULT = new OperacionPrograma(e1, e2,
                new SumOperator(null, e1.getTriplete(), e2.getTriplete(), Triplete.devolverTipo(e1, e2)));
              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("OPERACION_A",41, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // OPERACION_A ::= OPERACION_M menos OPERACION_M 
            {
              OperacionPrograma RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-2)).right;
		OperacionPrograma e1 = (OperacionPrograma)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()).right;
		OperacionPrograma e2 = (OperacionPrograma)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.peek()).value;
		if(e1 != null && e2 != null) RESULT = new OperacionPrograma(e1, e2,
                new RestOperator(null, e1.getTriplete(), e2.getTriplete(), Triplete.devolverTipo(e1, e2)));
              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("OPERACION_A",41, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // OPERACION_A ::= OPERACION_M 
            {
              OperacionPrograma RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()).right;
		OperacionPrograma e1 = (OperacionPrograma)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.peek()).value;
		RESULT = e1;
              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("OPERACION_A",41, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // OPERACION_M ::= OPERACION_M por OPERACION_U 
            {
              OperacionPrograma RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-2)).right;
		OperacionPrograma e1 = (OperacionPrograma)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()).right;
		OperacionPrograma e2 = (OperacionPrograma)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.peek()).value;
		if(e1 != null && e2 != null) RESULT = new OperacionPrograma(e1, e2,
                new PorOperator(null, e1.getTriplete(), e2.getTriplete(), Triplete.devolverTipo(e1, e2)));
              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("OPERACION_M",42, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // OPERACION_M ::= OPERACION_M div OPERACION_U 
            {
              OperacionPrograma RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-2)).right;
		OperacionPrograma e1 = (OperacionPrograma)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()).right;
		OperacionPrograma e2 = (OperacionPrograma)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.peek()).value;
		if(e1 != null && e2 != null) RESULT = new OperacionPrograma(e1, e2,
                new DivOperator(null, e1.getTriplete(), e2.getTriplete(), Triplete.devolverTipo(e1, e2)));
              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("OPERACION_M",42, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // OPERACION_M ::= OPERACION_M mod OPERACION_U 
            {
              OperacionPrograma RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-2)).right;
		OperacionPrograma e1 = (OperacionPrograma)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()).right;
		OperacionPrograma e2 = (OperacionPrograma)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.peek()).value;
		if(e1 != null && e2 != null) RESULT = new OperacionPrograma(e1, e2,
                new ModOperator(null, e1.getTriplete(), e2.getTriplete(), Triplete.devolverTipo(e1, e2)));
              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("OPERACION_M",42, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // OPERACION_M ::= OPERACION_U 
            {
              OperacionPrograma RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()).right;
		OperacionPrograma e1 = (OperacionPrograma)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.peek()).value;
		RESULT = e1;
              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("OPERACION_M",42, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // OPERACION_U ::= menos OPERACION_U 
            {
              OperacionPrograma RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()).right;
		OperacionPrograma e1 = (OperacionPrograma)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.peek()).value;
		if(e1 != null && e1.getTipo()==1){e1.setTipo(VariablePrograma.INT);}
                OperacionPrograma cero = new OperacionPrograma(VariablePrograma.INT, new TerminalOperator("0"));
                RESULT = new OperacionPrograma(cero,
                e1, new RestOperator(null, cero.getTriplete(), e1.getTriplete(),
                Triplete.devolverTipo(cero, e1)));
              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("OPERACION_U",43, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // OPERACION_U ::= mas OPERACION_U 
            {
              OperacionPrograma RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()).right;
		OperacionPrograma e1 = (OperacionPrograma)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.peek()).value;
		RESULT = e1;
              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("OPERACION_U",43, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // OPERACION_U ::= ATOM 
            {
              OperacionPrograma RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()).right;
		OperacionPrograma e1 = (OperacionPrograma)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.peek()).value;
		RESULT = e1;
              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("OPERACION_U",43, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // ATOM ::= id 
            {
              OperacionPrograma RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.peek()).value;
		VariablePrograma var = sem.existeVar(new VariablePrograma(e1, ProgramaSemantica.AMBITO, null)); 
                if(var == null){
                        syntax_error(getS());
                } else{RESULT = new OperacionPrograma(var.getTipo(), new TerminalOperator(e1));}
              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("ATOM",44, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // ATOM ::= entero 
            {
              OperacionPrograma RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.peek()).value;
		RESULT = new OperacionPrograma(VariablePrograma.INT, new TerminalOperator(e1));
              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("ATOM",44, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // ATOM ::= decimal 
            {
              OperacionPrograma RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.peek()).value;
		RESULT = new OperacionPrograma(VariablePrograma.FLOAT, new TerminalOperator(e1));
              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("ATOM",44, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // ATOM ::= character 
            {
              OperacionPrograma RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.peek()).value;
		RESULT = new OperacionPrograma(VariablePrograma.CHAR, new TerminalOperator(e1));
              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("ATOM",44, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // ATOM ::= id CORCHETES 
            {
              OperacionPrograma RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-1)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()).right;
		List<OperacionPrograma> e2 = (List<OperacionPrograma>)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.peek()).value;
		VariablePrograma var = sem.existeVar(e1, e2.size());
                if(var == null){syntax_error(getS());}else{RESULT = new OperacionPrograma(var.getTipo(), new TerminalOperator(e1));}
              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("ATOM",44, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // ATOM ::= para OPERACION_A parc 
            {
              OperacionPrograma RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-1)).right;
		OperacionPrograma e1 = (OperacionPrograma)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-1)).value;
		RESULT = e1;
              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("ATOM",44, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // MAIN ::= voidd mainn para parc llavea STATEMENTS llavec 
            {
              Object RESULT =null;

              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("MAIN",5, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-6)), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // STATEMENTS ::= STATEMENT STATEMENTS 
            {
              Object RESULT =null;

              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("STATEMENTS",6, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // STATEMENTS ::= breakk puntocoma 
            {
              Object RESULT =null;
		if(!esCase){syntax_error(getS());}
              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("STATEMENTS",6, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // STATEMENTS ::= 
            {
              Object RESULT =null;

              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("STATEMENTS",6, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // STATEMENT ::= COMPOUND 
            {
              Object RESULT =null;

              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("STATEMENT",7, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // STATEMENT ::= STATEMENTLINE 
            {
              Object RESULT =null;

              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("STATEMENT",7, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // COMPOUND ::= WHILE 
            {
              Object RESULT =null;

              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("COMPOUND",8, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // COMPOUND ::= DO_WHILE 
            {
              Object RESULT =null;

              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("COMPOUND",8, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // COMPOUND ::= FOR 
            {
              Object RESULT =null;

              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("COMPOUND",8, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // COMPOUND ::= IF_ELSE 
            {
              Object RESULT =null;

              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("COMPOUND",8, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // COMPOUND ::= SWITCH 
            {
              Object RESULT =null;

              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("COMPOUND",8, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // STATEMENTLINE ::= clrs puntocoma 
            {
              Object RESULT =null;

              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("STATEMENTLINE",9, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // STATEMENTLINE ::= ASIG_VAR 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()).right;
		List<VariablePrograma> e1 = (List<VariablePrograma>)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.peek()).value;
		for(VariablePrograma var : e1){
                        var.mostrarTripletes();
                }
              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("STATEMENTLINE",9, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // STATEMENTLINE ::= DEF_VAR puntocoma 
            {
              Object RESULT =null;

              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("STATEMENTLINE",9, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // STATEMENTLINE ::= PRINTF 
            {
              Object RESULT =null;

              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("STATEMENTLINE",9, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // STATEMENTLINE ::= SCANF 
            {
              Object RESULT =null;

              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("STATEMENTLINE",9, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // STATEMENTLINE ::= LLAMADA_METODO puntocoma 
            {
              Object RESULT =null;

              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("STATEMENTLINE",9, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // STATEMENTLINE ::= getch puntocoma 
            {
              Object RESULT =null;

              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("STATEMENTLINE",9, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // STATEMENTLINE ::= CLASS 
            {
              Object RESULT =null;

              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("STATEMENTLINE",9, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // DEF_VAR ::= id igual EXPR 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()).right;
		OperacionPrograma e2 = (OperacionPrograma)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.peek()).value;
		if(sem.existeVar(new VariablePrograma(e1, ProgramaSemantica.AMBITO, null)) == null
                || e2 == null) {
                        syntax_error(getS());
                } else {AsignarValor asig = new AsignarValor(null, new TerminalOperator(e1), e2.getTriplete());
                        e2.mostrarTripletes(); System.out.println(asig.devolverString());}
              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("DEF_VAR",10, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // DEF_VAR ::= id CORCHETES igual EXPR 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-3)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-2)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-2)).right;
		List<OperacionPrograma> e2 = (List<OperacionPrograma>)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-2)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()).right;
		OperacionPrograma e3 = (OperacionPrograma)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.peek()).value;
		VariablePrograma var = sem.existeVar(e1, e2.size());
                if(var == null){syntax_error(getS());}else {OperacionPrograma arr = new ArregloPrograma(var.getId(), ProgramaSemantica.AMBITO,
                var.getTipo(), e2, (ArregloPrograma) var, e3); arr.mostrarTripletes(); }
              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("DEF_VAR",10, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // PRINTF ::= printf para string VARS parc puntocoma 
            {
              Object RESULT =null;

              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("PRINTF",11, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-5)), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // VARS ::= VARS coma OPERACION_A 
            {
              Object RESULT =null;

              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("VARS",12, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // VARS ::= 
            {
              Object RESULT =null;

              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("VARS",12, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // SCANF ::= scanf para string VARSS parc puntocoma 
            {
              Object RESULT =null;

              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("SCANF",13, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-5)), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // VARSS ::= VARSS coma asig id 
            {
              Object RESULT =null;

              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("VARSS",14, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // VARSS ::= 
            {
              Object RESULT =null;

              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("VARSS",14, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // NT$0 ::= 
            {
              Object RESULT =null;
ProgramaSemantica.AMBITO += 1;
              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("NT$0",49, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // IF_ELSE ::= iff para CONDICION parc llavea NT$0 STATEMENTS llavec ELSE_IF ELSE 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-4)).value;
		sem.eliminarAmbito(ProgramaSemantica.AMBITO); ProgramaSemantica.AMBITO -= 1;
              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("IF_ELSE",15, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-9)), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // NT$1 ::= 
            {
              Object RESULT =null;
ProgramaSemantica.AMBITO += 1;
              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("NT$1",50, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // ELSE_IF ::= ELSE_IF elsee iff para CONDICION parc llavea NT$1 STATEMENTS llavec 
            {
              Object RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-2)).value;
		sem.eliminarAmbito(ProgramaSemantica.AMBITO); ProgramaSemantica.AMBITO -= 1;
              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("ELSE_IF",16, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-9)), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // ELSE_IF ::= 
            {
              Object RESULT =null;

              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("ELSE_IF",16, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // NT$2 ::= 
            {
              Object RESULT =null;
ProgramaSemantica.AMBITO += 1;
              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("NT$2",51, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // ELSE ::= elsee llavea NT$2 STATEMENTS llavec 
            {
              Object RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-2)).value;
		sem.eliminarAmbito(ProgramaSemantica.AMBITO); ProgramaSemantica.AMBITO -= 1;
              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("ELSE",17, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-4)), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // ELSE ::= 
            {
              Object RESULT =null;

              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("ELSE",17, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // SWITCH ::= switchh para EXPR parc llavea CASES DEFAULT llavec 
            {
              Object RESULT =null;

              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("SWITCH",18, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-7)), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // CASES ::= CASES CASE 
            {
              Object RESULT =null;

              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("CASES",19, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // CASES ::= 
            {
              Object RESULT =null;

              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("CASES",19, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // NT$3 ::= 
            {
              Object RESULT =null;
esCase = true; ProgramaSemantica.AMBITO += 1;
              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("NT$3",52, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // CASE ::= casee OPERACION_A dosp NT$3 STATEMENTS 
            {
              Object RESULT =null;
              // propagate RESULT from NT$3
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-1)).value;
		esCase = false; sem.eliminarAmbito(ProgramaSemantica.AMBITO); ProgramaSemantica.AMBITO -= 1;
              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("CASE",20, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-4)), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // NT$4 ::= 
            {
              Object RESULT =null;
esCase = true; ProgramaSemantica.AMBITO += 1;
              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("NT$4",53, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // DEFAULT ::= defaultt dosp NT$4 STATEMENTS 
            {
              Object RESULT =null;
              // propagate RESULT from NT$4
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-1)).value;
		esCase = false; sem.eliminarAmbito(ProgramaSemantica.AMBITO); ProgramaSemantica.AMBITO -= 1;
              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("DEFAULT",21, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // DEFAULT ::= 
            {
              Object RESULT =null;

              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("DEFAULT",21, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // NT$5 ::= 
            {
              Object RESULT =null;
ProgramaSemantica.AMBITO += 1;
              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("NT$5",54, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // WHILE ::= whilee para CONDICION parc llavea NT$5 STATEMENTS llavec 
            {
              Object RESULT =null;
              // propagate RESULT from NT$5
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-2)).value;
		sem.eliminarAmbito(ProgramaSemantica.AMBITO); ProgramaSemantica.AMBITO -= 1;
              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("WHILE",22, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-7)), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // NT$6 ::= 
            {
              Object RESULT =null;
ProgramaSemantica.AMBITO += 1;
              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("NT$6",55, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // DO_WHILE ::= doo llavea NT$6 STATEMENTS llavec whilee para CONDICION parc 
            {
              Object RESULT =null;
              // propagate RESULT from NT$6
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-6)).value;
		sem.eliminarAmbito(ProgramaSemantica.AMBITO); ProgramaSemantica.AMBITO -= 1;
              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("DO_WHILE",23, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-8)), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // NT$7 ::= 
            {
              Object RESULT =null;
ProgramaSemantica.AMBITO += 1;
              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("NT$7",56, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // FOR ::= forr para INICIO puntocoma CONDICION puntocoma STEP parc llavea NT$7 STATEMENTS llavec 
            {
              Object RESULT =null;
              // propagate RESULT from NT$7
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-2)).value;
		sem.eliminarAmbito(ProgramaSemantica.AMBITO); ProgramaSemantica.AMBITO -= 1;
              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("FOR",24, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-11)), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // INICIO ::= DEF_VAR 
            {
              Object RESULT =null;

              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("INICIO",25, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // INICIO ::= id 
            {
              Object RESULT =null;

              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("INICIO",25, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // INICIO ::= TYPE DEF_VAR 
            {
              Object RESULT =null;

              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("INICIO",25, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // STEP ::= DEF_VAR 
            {
              Object RESULT =null;

              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("STEP",26, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // STEP ::= OP_VAR 
            {
              Object RESULT =null;

              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("STEP",26, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // OP_VAR ::= id masmas 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-1)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-1)).value;
		if(sem.existeVar(new VariablePrograma(e1, ProgramaSemantica.AMBITO, null)) == null){
                        syntax_error(getS());
                }
              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("OP_VAR",27, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // OP_VAR ::= id menosmenos 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-1)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-1)).value;
		if(sem.existeVar(new VariablePrograma(e1, ProgramaSemantica.AMBITO, null)) == null){
                        syntax_error(getS());
                }
              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("OP_VAR",27, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // CONDICION ::= CONDICION orr AND 
            {
              Object RESULT =null;

              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("CONDICION",28, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // CONDICION ::= AND 
            {
              Object RESULT =null;

              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("CONDICION",28, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // AND ::= AND andd NOT 
            {
              Object RESULT =null;

              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("AND",29, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // AND ::= NOT 
            {
              Object RESULT =null;

              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("AND",29, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // NOT ::= nott NOT 
            {
              Object RESULT =null;

              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("NOT",30, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // NOT ::= COMPARACION 
            {
              Object RESULT =null;

              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("NOT",30, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // COMPARACION ::= OPERACION_A igig OPERACION_A 
            {
              Object RESULT =null;

              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("COMPARACION",31, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // COMPARACION ::= OPERACION_A noigual OPERACION_A 
            {
              Object RESULT =null;

              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("COMPARACION",31, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // COMPARACION ::= OPERACION_A menor OPERACION_A 
            {
              Object RESULT =null;

              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("COMPARACION",31, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // COMPARACION ::= OPERACION_A menorig OPERACION_A 
            {
              Object RESULT =null;

              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("COMPARACION",31, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // COMPARACION ::= OPERACION_A mayor OPERACION_A 
            {
              Object RESULT =null;

              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("COMPARACION",31, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // COMPARACION ::= OPERACION_A mayorig OPERACION_A 
            {
              Object RESULT =null;

              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("COMPARACION",31, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // COMPARACION ::= para CONDICION parc 
            {
              Object RESULT =null;

              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("COMPARACION",31, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // LLAMADA_METODO ::= pyy punto id para LIST_PARAM parc 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-3)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-1)).right;
		List<OperacionPrograma> e2 = (List<OperacionPrograma>)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-1)).value;
		if(!sem.existeMetodoPY(e1, e2)){
                                syntax_error(getS());
                        }
              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("LLAMADA_METODO",32, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-5)), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // LLAMADA_METODO ::= vbb punto id para LIST_PARAM parc 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-3)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-1)).right;
		List<OperacionPrograma> e2 = (List<OperacionPrograma>)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-1)).value;
		if(!sem.existeMetodoVB(e1.toLowerCase(), e2)){
                                syntax_error(getS());
                        }
              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("LLAMADA_METODO",32, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-5)), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // LLAMADA_METODO ::= javaa punto id punto id para LIST_PARAM parc 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-5)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-5)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-5)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-3)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-3)).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-3)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-1)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-1)).right;
		List<OperacionPrograma> e3 = (List<OperacionPrograma>)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-1)).value;
		if(!sem.existeMetodoJV(e1, e2, e3)){
                                syntax_error(getS());
                        }
              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("LLAMADA_METODO",32, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-7)), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // EXPR ::= LLAMADA_METODO 
            {
              OperacionPrograma RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.peek()).value;
		
              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("EXPR",39, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // EXPR ::= OPERACION_A 
            {
              OperacionPrograma RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()).right;
		OperacionPrograma e1 = (OperacionPrograma)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.peek()).value;
		RESULT = e1;
              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("EXPR",39, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // EXPR ::= getch 
            {
              OperacionPrograma RESULT =null;
		RESULT = new OperacionPrograma(VariablePrograma.INT, null);
              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("EXPR",39, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // CLASS ::= javaa punto id LIST_CLASS puntocoma 
            {
              Object RESULT =null;

              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("CLASS",33, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-4)), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // LIST_CLASS ::= LIST_CLASS coma id PARAM 
            {
              Object RESULT =null;

              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("LIST_CLASS",34, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // LIST_CLASS ::= id PARAM 
            {
              Object RESULT =null;

              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("LIST_CLASS",34, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // PARAM ::= para LIST_PARAM parc 
            {
              Object RESULT =null;

              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("PARAM",35, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // PARAM ::= 
            {
              Object RESULT =null;

              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("PARAM",35, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // LIST_PARAM ::= LIST 
            {
              List<OperacionPrograma> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()).right;
		List<OperacionPrograma> e1 = (List<OperacionPrograma>)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.peek()).value;
		RESULT = e1;
              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("LIST_PARAM",46, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // LIST_PARAM ::= 
            {
              List<OperacionPrograma> RESULT =null;
		RESULT = new ArrayList<>();
              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("LIST_PARAM",46, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // LIST ::= LIST_PARAM coma OPERACION_A 
            {
              List<OperacionPrograma> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-2)).right;
		List<OperacionPrograma> e1 = (List<OperacionPrograma>)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()).right;
		OperacionPrograma e2 = (OperacionPrograma)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.peek()).value;
		e1.add(e2); RESULT = e1;
              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("LIST",47, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.elementAt(CUP$SintaxisPrograma$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // LIST ::= OPERACION_A 
            {
              List<OperacionPrograma> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()).right;
		OperacionPrograma e1 = (OperacionPrograma)((java_cup.runtime.Symbol) CUP$SintaxisPrograma$stack.peek()).value;
		List<OperacionPrograma> params = new ArrayList<>(); params.add(e1); RESULT = params;
              CUP$SintaxisPrograma$result = parser.getSymbolFactory().newSymbol("LIST",47, ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisPrograma$stack.peek()), RESULT);
            }
          return CUP$SintaxisPrograma$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$SintaxisPrograma$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$SintaxisPrograma$do_action(
    int                        CUP$SintaxisPrograma$act_num,
    java_cup.runtime.lr_parser CUP$SintaxisPrograma$parser,
    java.util.Stack            CUP$SintaxisPrograma$stack,
    int                        CUP$SintaxisPrograma$top)
    throws java.lang.Exception
    {
              return CUP$SintaxisPrograma$do_action_part00000000(
                               CUP$SintaxisPrograma$act_num,
                               CUP$SintaxisPrograma$parser,
                               CUP$SintaxisPrograma$stack,
                               CUP$SintaxisPrograma$top);
    }
}

}
