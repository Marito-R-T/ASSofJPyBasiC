/* The following code was generated by JFlex 1.4.3 on 3/11/20 00:19 */

package com.mycompany.assofjpybasic.backend.analizador.visual;
import java_cup.runtime.*;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 3/11/20 00:19 from the specification file
 * <tt>LexicoVisual.flex</tt>
 */
public class LexicoVisual implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int STRING = 2;
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1, 1
  };

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = {
     0,  0,  0,  0,  0,  0,  0,  0,  0,  2,  6,  0,  2,  2,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     2,  0, 41,  0,  0,  0, 39,  0, 36, 37, 34, 32, 38, 33, 40, 35, 
     4,  3,  3,  3,  3,  3,  3,  3,  3,  3,  0,  0, 29, 31, 30,  0, 
     0, 23,  9, 12, 17, 16, 10, 25, 26, 14,  1,  1, 19, 24, 11, 15, 
    18,  1, 20,  7, 13,  8, 22, 28, 27, 21,  1,  0,  0,  0,  0,  5, 
     0, 23,  9, 12, 17, 16, 10, 25, 26, 14,  1,  1, 19, 24, 11, 15, 
    18,  1, 20,  7, 13,  8, 22, 28, 27, 21,  1,  0,  2,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0
  };

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\2\0\1\1\1\2\1\3\2\4\1\1\1\5\20\2"+
    "\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15"+
    "\1\16\1\17\1\20\1\21\1\22\1\23\1\0\1\24"+
    "\1\0\14\2\1\25\1\2\1\26\1\2\1\27\3\2"+
    "\1\30\4\2\1\31\3\2\1\32\1\33\1\34\3\0"+
    "\1\35\1\36\4\2\1\37\1\2\1\40\6\2\1\41"+
    "\1\2\1\42\4\2\1\43\1\44\1\2\1\0\1\45"+
    "\1\0\1\46\4\2\1\47\1\2\1\50\1\51\1\52"+
    "\2\2\1\53\2\2\1\54\2\2\1\55\1\56\1\2"+
    "\1\57\12\2\1\60\1\61\6\2\1\62\1\2\1\63"+
    "\1\64\5\2\1\65\1\66\1\67\1\2\1\0\1\2"+
    "\1\70\1\2\1\0\1\71\1\72\3\0\1\73\3\0"+
    "\1\74";

  private static int [] zzUnpackAction() {
    int [] result = new int[173];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\52\0\124\0\176\0\250\0\322\0\374\0\u0126"+
    "\0\u0150\0\u017a\0\u01a4\0\u01ce\0\u01f8\0\u0222\0\u024c\0\u0276"+
    "\0\u02a0\0\u02ca\0\u02f4\0\u031e\0\u0348\0\u0372\0\u039c\0\u03c6"+
    "\0\u03f0\0\u041a\0\u0444\0\124\0\124\0\124\0\124\0\u046e"+
    "\0\124\0\124\0\124\0\124\0\u0498\0\124\0\124\0\u04c2"+
    "\0\124\0\u0150\0\u04ec\0\u0516\0\u0540\0\u056a\0\u0594\0\u05be"+
    "\0\u05e8\0\u0612\0\u063c\0\u0666\0\u0690\0\u06ba\0\176\0\u06e4"+
    "\0\176\0\u070e\0\176\0\u0738\0\u0762\0\u078c\0\176\0\u07b6"+
    "\0\u07e0\0\u080a\0\u0834\0\176\0\u085e\0\u0888\0\u08b2\0\124"+
    "\0\124\0\124\0\u08dc\0\u0906\0\u0930\0\u04c2\0\176\0\u095a"+
    "\0\u0984\0\u09ae\0\u09d8\0\176\0\u0a02\0\176\0\u0a2c\0\u0a56"+
    "\0\u0a80\0\u0aaa\0\u0ad4\0\u0afe\0\176\0\u0b28\0\176\0\u0b52"+
    "\0\u0b7c\0\u0ba6\0\u0bd0\0\176\0\176\0\u0bfa\0\u0c24\0\124"+
    "\0\u0c4e\0\176\0\u0c78\0\u0ca2\0\u0ccc\0\u0cf6\0\176\0\u0d20"+
    "\0\176\0\u0d4a\0\176\0\u0d74\0\u0d9e\0\u0dc8\0\u0df2\0\u0e1c"+
    "\0\176\0\u0e46\0\u0e70\0\u08dc\0\124\0\u0e9a\0\176\0\u0ec4"+
    "\0\u0eee\0\u0f18\0\u0f42\0\u0f6c\0\u0f96\0\u0fc0\0\u0fea\0\u1014"+
    "\0\u103e\0\176\0\176\0\u1068\0\u1092\0\u10bc\0\u10e6\0\u1110"+
    "\0\u113a\0\176\0\u1164\0\176\0\176\0\u118e\0\u11b8\0\u11e2"+
    "\0\u120c\0\u1236\0\176\0\176\0\176\0\u1260\0\u128a\0\u12b4"+
    "\0\176\0\u12de\0\u1308\0\176\0\176\0\u1332\0\u135c\0\u1386"+
    "\0\u13b0\0\u13da\0\u1404\0\u142e\0\124";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[173];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12"+
    "\1\4\1\13\1\14\1\15\1\16\1\17\1\20\1\21"+
    "\1\22\1\23\1\24\1\25\1\26\2\4\1\27\1\30"+
    "\3\4\1\31\1\32\1\33\1\34\1\35\1\36\1\37"+
    "\1\40\1\41\1\42\1\43\1\44\1\3\1\45\51\46"+
    "\1\47\53\0\1\4\1\0\3\4\1\0\26\4\17\0"+
    "\1\5\3\0\1\11\46\0\2\6\43\0\1\50\51\0"+
    "\1\50\7\0\1\51\45\0\1\52\3\0\1\11\44\0"+
    "\1\4\1\0\3\4\1\0\1\4\1\53\4\4\1\54"+
    "\2\4\1\55\14\4\16\0\1\4\1\0\3\4\1\0"+
    "\16\4\1\56\7\4\16\0\1\4\1\0\3\4\1\0"+
    "\1\4\1\57\6\4\1\60\3\4\1\61\11\4\16\0"+
    "\1\4\1\0\3\4\1\0\10\4\1\62\1\63\14\4"+
    "\16\0\1\4\1\0\3\4\1\0\10\4\1\64\7\4"+
    "\1\65\2\4\1\66\2\4\16\0\1\4\1\0\3\4"+
    "\1\0\10\4\1\67\12\4\1\70\2\4\16\0\1\4"+
    "\1\0\3\4\1\0\3\4\1\71\1\72\21\4\16\0"+
    "\1\4\1\0\3\4\1\0\15\4\1\73\10\4\16\0"+
    "\1\4\1\0\3\4\1\0\4\4\1\74\7\4\1\75"+
    "\11\4\16\0\1\4\1\0\3\4\1\0\7\4\1\76"+
    "\1\77\1\100\14\4\16\0\1\4\1\0\3\4\1\0"+
    "\1\4\1\101\24\4\16\0\1\4\1\0\3\4\1\0"+
    "\10\4\1\102\15\4\16\0\1\4\1\0\3\4\1\0"+
    "\11\4\1\103\14\4\16\0\1\4\1\0\3\4\1\0"+
    "\1\104\3\4\1\105\21\4\16\0\1\4\1\0\3\4"+
    "\1\0\10\4\1\106\15\4\16\0\1\4\1\0\3\4"+
    "\1\0\23\4\1\107\2\4\53\0\1\110\1\111\51\0"+
    "\1\112\54\0\1\113\1\114\6\0\6\115\1\0\43\115"+
    "\3\0\1\116\1\50\46\0\1\4\1\0\3\4\1\0"+
    "\2\4\1\117\23\4\16\0\1\4\1\0\3\4\1\0"+
    "\11\4\1\120\14\4\16\0\1\4\1\0\3\4\1\0"+
    "\14\4\1\121\11\4\16\0\1\4\1\0\3\4\1\0"+
    "\17\4\1\122\6\4\16\0\1\4\1\0\3\4\1\0"+
    "\4\4\1\123\21\4\16\0\1\4\1\0\3\4\1\0"+
    "\15\4\1\124\10\4\16\0\1\4\1\0\3\4\1\0"+
    "\10\4\1\125\15\4\16\0\1\4\1\0\3\4\1\0"+
    "\6\4\1\126\17\4\16\0\1\4\1\0\3\4\1\0"+
    "\24\4\1\127\1\4\16\0\1\4\1\0\3\4\1\0"+
    "\4\4\1\130\21\4\16\0\1\4\1\0\3\4\1\0"+
    "\1\131\25\4\16\0\1\4\1\0\3\4\1\0\20\4"+
    "\1\132\5\4\16\0\1\4\1\0\3\4\1\0\11\4"+
    "\1\133\14\4\16\0\1\4\1\0\3\4\1\0\6\4"+
    "\1\134\17\4\16\0\1\4\1\0\3\4\1\0\12\4"+
    "\1\135\13\4\16\0\1\4\1\0\3\4\1\0\1\136"+
    "\25\4\16\0\1\4\1\0\3\4\1\0\21\4\1\137"+
    "\4\4\16\0\1\4\1\0\3\4\1\0\5\4\1\140"+
    "\20\4\16\0\1\4\1\0\3\4\1\0\2\4\1\141"+
    "\23\4\16\0\1\4\1\0\3\4\1\0\10\4\1\142"+
    "\15\4\16\0\1\4\1\0\3\4\1\0\6\4\1\143"+
    "\17\4\16\0\1\4\1\0\3\4\1\0\12\4\1\144"+
    "\13\4\16\0\1\4\1\0\3\4\1\0\12\4\1\145"+
    "\13\4\16\0\1\4\1\0\3\4\1\0\7\4\1\146"+
    "\16\4\15\0\6\113\1\0\33\113\1\147\7\113\6\114"+
    "\1\150\43\114\51\0\1\151\1\0\1\4\1\0\3\4"+
    "\1\0\13\4\1\152\12\4\16\0\1\4\1\0\3\4"+
    "\1\0\11\4\1\153\14\4\16\0\1\4\1\0\3\4"+
    "\1\0\20\4\1\154\5\4\16\0\1\4\1\0\3\4"+
    "\1\0\5\4\1\155\20\4\16\0\1\4\1\0\3\4"+
    "\1\0\20\4\1\156\5\4\16\0\1\4\1\0\3\4"+
    "\1\0\6\4\1\157\17\4\16\0\1\4\1\0\3\4"+
    "\1\0\1\160\25\4\16\0\1\4\1\0\3\4\1\0"+
    "\11\4\1\161\14\4\16\0\1\4\1\0\3\4\1\0"+
    "\15\4\1\162\10\4\16\0\1\4\1\0\3\4\1\0"+
    "\4\4\1\163\21\4\16\0\1\4\1\0\3\4\1\0"+
    "\7\4\1\164\1\4\1\165\14\4\16\0\1\4\1\0"+
    "\3\4\1\0\11\4\1\166\14\4\16\0\1\4\1\0"+
    "\3\4\1\0\7\4\1\167\16\4\16\0\1\4\1\0"+
    "\3\4\1\0\14\4\1\170\11\4\16\0\1\4\1\0"+
    "\3\4\1\0\13\4\1\171\12\4\16\0\1\4\1\0"+
    "\3\4\1\0\1\4\1\172\24\4\16\0\1\4\1\0"+
    "\3\4\1\0\14\4\1\173\11\4\15\0\6\113\1\0"+
    "\33\113\1\147\1\174\6\113\14\0\1\175\36\0\1\4"+
    "\1\0\3\4\1\0\5\4\1\176\20\4\16\0\1\4"+
    "\1\0\3\4\1\0\14\4\1\177\11\4\16\0\1\4"+
    "\1\0\3\4\1\0\6\4\1\200\17\4\16\0\1\4"+
    "\1\0\3\4\1\0\6\4\1\201\17\4\16\0\1\4"+
    "\1\0\3\4\1\0\10\4\1\202\15\4\16\0\1\4"+
    "\1\0\3\4\1\0\7\4\1\203\16\4\16\0\1\4"+
    "\1\0\3\4\1\0\4\4\1\204\21\4\16\0\1\4"+
    "\1\0\3\4\1\0\22\4\1\205\3\4\16\0\1\4"+
    "\1\0\3\4\1\0\7\4\1\206\16\4\16\0\1\4"+
    "\1\0\3\4\1\0\21\4\1\207\4\4\16\0\1\4"+
    "\1\0\3\4\1\0\7\4\1\210\16\4\16\0\1\4"+
    "\1\0\3\4\1\0\15\4\1\211\10\4\16\0\1\4"+
    "\1\0\3\4\1\0\11\4\1\212\14\4\16\0\1\4"+
    "\1\0\3\4\1\0\6\4\1\213\17\4\16\0\1\4"+
    "\1\0\3\4\1\0\7\4\1\214\16\4\16\0\1\4"+
    "\1\0\3\4\1\0\7\4\1\215\16\4\16\0\1\4"+
    "\1\0\3\4\1\0\14\4\1\216\11\4\16\0\1\4"+
    "\1\0\3\4\1\0\4\4\1\217\21\4\16\0\1\4"+
    "\1\0\3\4\1\0\13\4\1\220\12\4\16\0\1\4"+
    "\1\0\3\4\1\0\11\4\1\221\14\4\16\0\1\4"+
    "\1\0\3\4\1\0\3\4\1\222\22\4\16\0\1\4"+
    "\1\0\3\4\1\0\20\4\1\223\5\4\16\0\1\4"+
    "\1\0\3\4\1\0\5\4\1\224\20\4\16\0\1\4"+
    "\1\0\3\4\1\0\4\4\1\225\21\4\16\0\1\4"+
    "\1\0\3\4\1\0\10\4\1\226\15\4\16\0\1\4"+
    "\1\0\3\4\1\0\4\4\1\227\21\4\16\0\1\4"+
    "\1\0\3\4\1\0\11\4\1\230\14\4\16\0\1\4"+
    "\1\0\3\4\1\0\13\4\1\231\12\4\16\0\1\4"+
    "\1\0\3\4\1\0\1\4\1\232\24\4\16\0\1\4"+
    "\1\0\3\4\1\0\15\4\1\233\10\4\16\0\1\4"+
    "\1\0\3\4\1\0\14\4\1\234\11\4\16\0\1\4"+
    "\1\0\3\4\1\0\4\4\1\235\21\4\16\0\1\4"+
    "\1\0\3\4\1\0\13\4\1\236\12\4\16\0\1\4"+
    "\1\0\3\4\1\0\26\4\13\0\1\237\2\0\1\4"+
    "\1\0\3\4\1\0\1\4\1\240\24\4\16\0\1\4"+
    "\1\0\3\4\1\0\6\4\1\241\17\4\16\0\1\4"+
    "\1\0\3\4\1\0\1\4\1\242\24\4\51\0\1\243"+
    "\16\0\1\4\1\0\3\4\1\0\6\4\1\244\17\4"+
    "\16\0\1\4\1\0\3\4\1\0\6\4\1\245\17\4"+
    "\41\0\1\246\43\0\1\247\50\0\1\250\54\0\1\251"+
    "\54\0\1\252\44\0\1\253\46\0\1\254\56\0\1\255"+
    "\31\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[5208];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\2\0\1\11\30\1\4\11\1\1\4\11\1\1\2\11"+
    "\1\0\1\11\1\0\35\1\3\11\3\0\31\1\1\0"+
    "\1\11\1\0\23\1\1\11\41\1\1\0\3\1\1\0"+
    "\2\1\3\0\1\1\3\0\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[173];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
    StringBuffer string = new StringBuffer();

    private Symbol symbol(int type, Object value){
        System.out.println(value);
        return new Symbol(type, yyline, yycolumn, value);
    }
    private Symbol symbol(int type){
        System.out.println(type);
        return new Symbol(type, yyline, yycolumn);
    }


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public LexicoVisual(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public LexicoVisual(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn++;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 56: 
          { System.out.print(yytext()); return new Symbol(SintaxisVisualSym.intinput, yycolumn, yyline, yytext());
          }
        case 61: break;
        case 31: 
          { System.out.print(yytext()); return new Symbol(SintaxisVisualSym.forr, yycolumn, yyline, yytext());
          }
        case 62: break;
        case 2: 
          { System.out.print(yytext()); return new Symbol(SintaxisVisualSym.id, yycolumn, yyline, yytext());
          }
        case 63: break;
        case 59: 
          { System.out.print(yytext()); return new Symbol(SintaxisVisualSym.write, yycolumn, yyline, yytext());
          }
        case 64: break;
        case 57: 
          { System.out.print(yytext()); return new Symbol(SintaxisVisualSym.charinput, yycolumn, yyline, yytext());
          }
        case 65: break;
        case 9: 
          { System.out.print(yytext()); return new Symbol(SintaxisVisualSym.mas, yycolumn, yyline, yytext());
          }
        case 66: break;
        case 51: 
          { System.out.print(yytext()); return new Symbol(SintaxisVisualSym.publicc, yycolumn, yyline, yytext());
          }
        case 67: break;
        case 43: 
          { System.out.print(yytext()); return new Symbol(SintaxisVisualSym.elsee, yycolumn, yyline, yytext());
          }
        case 68: break;
        case 13: 
          { System.out.print(yytext()); return new Symbol(SintaxisVisualSym.para, yycolumn, yyline, yytext());
          }
        case 69: break;
        case 42: 
          { System.out.print(yytext()); return new Symbol(SintaxisVisualSym.thenn, yycolumn, yyline, yytext());
          }
        case 70: break;
        case 53: 
          { System.out.print(yytext()); return new Symbol(SintaxisVisualSym.integerr, yycolumn, yyline, yytext());
          }
        case 71: break;
        case 35: 
          { System.out.print(yytext()); return new Symbol(SintaxisVisualSym.andd, yycolumn, yyline, yytext());
          }
        case 72: break;
        case 48: 
          { System.out.print(yytext()); return new Symbol(SintaxisVisualSym.whilee, yycolumn, yyline, yytext());
          }
        case 73: break;
        case 22: 
          { System.out.print(yytext()); return new Symbol(SintaxisVisualSym.iff, yycolumn, yyline, yytext());
          }
        case 74: break;
        case 3: 
          { System.out.print(yytext()); /*IGNORAR*/
          }
        case 75: break;
        case 14: 
          { System.out.print(yytext()); return new Symbol(SintaxisVisualSym.parc, yycolumn, yyline, yytext());
          }
        case 76: break;
        case 52: 
          { System.out.print(yytext()); return new Symbol(SintaxisVisualSym.returnn, yycolumn, yyline, yytext());
          }
        case 77: break;
        case 19: 
          { yybegin(YYINITIAL); String s = string.toString(); string.setLength(0);
                                        return new Symbol(SintaxisVisualSym.string, yycolumn, yyline, s);
          }
        case 78: break;
        case 8: 
          { System.out.print(yytext()); return new Symbol(SintaxisVisualSym.igual, yycolumn, yyline, yytext());
          }
        case 79: break;
        case 40: 
          { System.out.print(yytext()); return new Symbol(SintaxisVisualSym.casee, yycolumn, yyline, yytext());
          }
        case 80: break;
        case 25: 
          { System.out.print(yytext()); return new Symbol(SintaxisVisualSym.ass, yycolumn, yyline, yytext());
          }
        case 81: break;
        case 45: 
          { System.out.print(yytext()); /*return new Symbol(SintaxisVisualSym.com, yycolumn, yyline, yytext());*/
          }
        case 82: break;
        case 38: 
          { System.out.print(yytext()); return new Symbol(SintaxisVisualSym.stepp, yycolumn, yyline, yytext());
          }
        case 83: break;
        case 41: 
          { System.out.print(yytext()); return new Symbol(SintaxisVisualSym.charr, yycolumn, yyline, yytext());
          }
        case 84: break;
        case 37: 
          { System.out.print(yytext());/* return new Symbol(SintaxisVisualSym.com, yycolumn, yyline, yytext());*/
          }
        case 85: break;
        case 60: 
          { System.out.print(yytext()); return new Symbol(SintaxisVisualSym.writeln, yycolumn, yyline, yytext());
          }
        case 86: break;
        case 11: 
          { System.out.print(yytext()); return new Symbol(SintaxisVisualSym.por, yycolumn, yyline, yytext());
          }
        case 87: break;
        case 16: 
          { System.out.print(yytext()); return new Symbol(SintaxisVisualSym.y, yycolumn, yyline, yytext());
          }
        case 88: break;
        case 50: 
          { System.out.print(yytext()); return new Symbol(SintaxisVisualSym.elseiff, yycolumn, yyline, yytext());
          }
        case 89: break;
        case 21: 
          { System.out.print(yytext()); return new Symbol(SintaxisVisualSym.to, yycolumn, yyline, yytext());
          }
        case 90: break;
        case 15: 
          { System.out.print(yytext()); return new Symbol(SintaxisVisualSym.coma, yycolumn, yyline, yytext());
          }
        case 91: break;
        case 36: 
          { System.out.print(yytext()); return new Symbol(SintaxisVisualSym.mod, yycolumn, yyline, yytext());
          }
        case 92: break;
        case 6: 
          { System.out.print(yytext()); return new Symbol(SintaxisVisualSym.menor, yycolumn, yyline, yytext());
          }
        case 93: break;
        case 28: 
          { System.out.print(yytext()); return new Symbol(SintaxisVisualSym.mayorig, yycolumn, yyline, yytext());
          }
        case 94: break;
        case 24: 
          { System.out.print(yytext()); return new Symbol(SintaxisVisualSym.doo, yycolumn, yyline, yytext());
          }
        case 95: break;
        case 12: 
          { System.out.print(yytext()); return new Symbol(SintaxisVisualSym.div, yycolumn, yyline, yytext());
          }
        case 96: break;
        case 39: 
          { System.out.print(yytext()); return new Symbol(SintaxisVisualSym.nextt, yycolumn, yyline, yytext());
          }
        case 97: break;
        case 10: 
          { System.out.print(yytext()); return new Symbol(SintaxisVisualSym.menos, yycolumn, yyline, yytext());
          }
        case 98: break;
        case 17: 
          { yybegin(STRING);
          }
        case 99: break;
        case 26: 
          { System.out.print(yytext()); return new Symbol(SintaxisVisualSym.noigual, yycolumn, yyline, yytext());
          }
        case 100: break;
        case 4: 
          { System.out.print(yytext()); return new Symbol(SintaxisVisualSym.entero, yycolumn, yyline, yytext());
          }
        case 101: break;
        case 34: 
          { System.out.print(yytext()); return new Symbol(SintaxisVisualSym.dimm, yycolumn, yyline, yytext());
          }
        case 102: break;
        case 49: 
          { System.out.print(yytext()); return new Symbol(SintaxisVisualSym.selectt, yycolumn, yyline, yytext());
          }
        case 103: break;
        case 7: 
          { System.out.print(yytext()); return new Symbol(SintaxisVisualSym.mayor, yycolumn, yyline, yytext());
          }
        case 104: break;
        case 20: 
          { System.out.print(yytext()); /*ignorar*/
          }
        case 105: break;
        case 1: 
          { System.out.print(yytext()); /*error*/
          }
        case 106: break;
        case 54: 
          { System.out.print(yytext()); return new Symbol(SintaxisVisualSym.decimall, yycolumn, yyline, yytext());
          }
        case 107: break;
        case 5: 
          { System.out.print(yytext()); return new Symbol(SintaxisVisualSym.espacio, yycolumn, yyline, yytext());
          }
        case 108: break;
        case 18: 
          { string.append(yytext());
          }
        case 109: break;
        case 55: 
          { System.out.print(yytext()); return new Symbol(SintaxisVisualSym.functionn, yycolumn, yyline, yytext());
          }
        case 110: break;
        case 30: 
          { System.out.print(yytext()); return new Symbol(SintaxisVisualSym.subb, yycolumn, yyline, yytext());
          }
        case 111: break;
        case 44: 
          { System.out.print(yytext()); return new Symbol(SintaxisVisualSym.loopp, yycolumn, yyline, yytext());
          }
        case 112: break;
        case 58: 
          { System.out.print(yytext()); return new Symbol(SintaxisVisualSym.floatinput, yycolumn, yyline, yytext());
          }
        case 113: break;
        case 33: 
          { System.out.print(yytext()); return new Symbol(SintaxisVisualSym.endd, yycolumn, yyline, yytext());
          }
        case 114: break;
        case 29: 
          { System.out.print(yytext()); return new Symbol(SintaxisVisualSym.decimal, yycolumn, yyline, yytext());
          }
        case 115: break;
        case 47: 
          { System.out.print(yytext()); return new Symbol(SintaxisVisualSym.byval, yycolumn, yyline, yytext());
          }
        case 116: break;
        case 27: 
          { System.out.print(yytext()); return new Symbol(SintaxisVisualSym.menorig, yycolumn, yyline, yytext());
          }
        case 117: break;
        case 23: 
          { System.out.print(yytext()); return new Symbol(SintaxisVisualSym.orr, yycolumn, yyline, yytext());
          }
        case 118: break;
        case 32: 
          { System.out.print(yytext()); return new Symbol(SintaxisVisualSym.nott, yycolumn, yyline, yytext());
          }
        case 119: break;
        case 46: 
          { System.out.print(yytext()); return new Symbol(SintaxisVisualSym.character, yycolumn, yyline, yytext().substring(1, yytext().length() - 2));
          }
        case 120: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
              { return new java_cup.runtime.Symbol(SintaxisVisualSym.EOF); }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
