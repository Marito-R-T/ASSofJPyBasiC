
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package com.mycompany.assofjpybasic.backend.analizador.java;

import java_cup.runtime.*;
import com.mycompany.assofjpybasic.backend.semantica.java.*;
import com.mycompany.assofjpybasic.backend.semantica.programa.*;
import com.mycompany.assofjpybasic.backend.semantica.programa.cod3.*;
import com.mycompany.assofjpybasic.backend.semantica.python.*;
import com.mycompany.assofjpybasic.backend.error.Errores;
import java.util.ArrayList;
import java.util.List;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class SintaxisJava extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return SintaxisJavaSym.class;
}

  /** Default constructor. */
  @Deprecated
  public SintaxisJava() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public SintaxisJava(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public SintaxisJava(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\172\000\002\002\004\000\002\002\003\000\002\003" +
    "\004\000\002\003\002\000\002\060\002\000\002\004\011" +
    "\000\002\004\004\000\002\036\004\000\002\036\002\000" +
    "\002\027\003\000\002\027\003\000\002\027\004\000\002" +
    "\027\004\000\002\061\002\000\002\006\013\000\002\062" +
    "\002\000\002\005\014\000\002\007\003\000\002\007\003" +
    "\000\002\010\003\000\002\010\003\000\002\010\003\000" +
    "\002\012\005\000\002\012\002\000\002\013\006\000\002" +
    "\013\002\000\002\040\004\000\002\040\003\000\002\040" +
    "\004\000\002\040\002\000\002\043\005\000\002\041\003" +
    "\000\002\041\003\000\002\041\004\000\002\063\002\000" +
    "\002\042\005\000\002\057\005\000\002\057\003\000\002" +
    "\056\005\000\002\056\003\000\002\044\003\000\002\044" +
    "\003\000\002\044\003\000\002\044\003\000\002\044\003" +
    "\000\002\031\007\000\002\064\002\000\002\037\006\000" +
    "\002\037\003\000\002\032\013\000\002\051\004\000\002" +
    "\065\002\000\002\051\005\000\002\052\003\000\002\052" +
    "\003\000\002\033\011\000\002\034\011\000\002\022\011" +
    "\000\002\022\002\000\002\035\004\000\002\035\002\000" +
    "\002\045\012\000\002\066\002\000\002\055\010\000\002" +
    "\055\002\000\002\067\002\000\002\046\006\000\002\046" +
    "\002\000\002\030\004\000\002\030\004\000\002\030\004" +
    "\000\002\030\004\000\002\054\006\000\002\047\006\000" +
    "\002\047\006\000\002\053\005\000\002\053\005\000\002" +
    "\014\005\000\002\014\005\000\002\014\003\000\002\014" +
    "\004\000\002\015\005\000\002\015\005\000\002\015\005" +
    "\000\002\015\003\000\002\016\004\000\002\016\004\000" +
    "\002\016\003\000\002\017\004\000\002\017\003\000\002" +
    "\017\003\000\002\017\003\000\002\017\005\000\002\017" +
    "\003\000\002\011\004\000\002\011\002\000\002\025\005" +
    "\000\002\025\003\000\002\024\005\000\002\024\003\000" +
    "\002\023\004\000\002\023\003\000\002\023\005\000\002" +
    "\026\005\000\002\026\005\000\002\026\005\000\002\026" +
    "\005\000\002\026\005\000\002\026\005\000\002\050\005" +
    "\000\002\050\005\000\002\050\003\000\002\050\003\000" +
    "\002\020\003\000\002\020\004\000\002\020\003\000\002" +
    "\020\003\000\002\020\003\000\002\020\005\000\002\021" +
    "\006\000\002\021\006\000\002\021\006" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\367\000\010\002\ufffe\003\ufffe\004\ufffe\001\002\000" +
    "\004\002\371\001\002\000\010\002\000\003\007\004\006" +
    "\001\002\000\004\005\012\001\002\000\006\003\007\004" +
    "\006\001\002\000\010\002\uffff\003\uffff\004\uffff\001\002" +
    "\000\010\002\ufffb\003\ufffb\004\ufffb\001\002\000\004\063" +
    "\013\001\002\000\004\047\014\001\002\000\016\003\ufffd" +
    "\004\ufffd\007\ufffd\010\ufffd\011\ufffd\050\ufffd\001\002\000" +
    "\016\003\ufff9\004\ufff9\007\ufff9\010\ufff9\011\ufff9\050\ufff9" +
    "\001\002\000\016\003\024\004\031\007\017\010\023\011" +
    "\025\050\022\001\002\000\004\063\uffee\001\002\000\016" +
    "\003\ufffa\004\ufffa\007\ufffa\010\ufffa\011\ufffa\050\ufffa\001" +
    "\002\000\004\063\uffdf\001\002\000\010\002\ufffc\003\ufffc" +
    "\004\ufffc\001\002\000\004\063\uffed\001\002\000\014\003" +
    "\024\004\031\007\017\010\023\011\025\001\002\000\004" +
    "\063\uffec\001\002\000\004\052\362\001\002\000\016\003" +
    "\ufff8\004\ufff8\007\ufff8\010\ufff8\011\ufff8\050\ufff8\001\002" +
    "\000\016\003\ufff7\004\ufff7\007\ufff7\010\ufff7\011\ufff7\050" +
    "\ufff7\001\002\000\014\006\034\007\017\010\023\011\025" +
    "\063\033\001\002\000\004\063\352\001\002\000\004\045" +
    "\036\001\002\000\004\063\ufff0\001\002\000\004\063\uffef" +
    "\001\002\000\012\007\017\010\023\011\025\046\uffea\001" +
    "\002\000\004\046\047\001\002\000\004\063\041\001\002" +
    "\000\006\046\uffe8\051\043\001\002\000\004\046\uffeb\001" +
    "\002\000\010\007\017\010\023\011\025\001\002\000\004" +
    "\063\045\001\002\000\006\046\uffe8\051\043\001\002\000" +
    "\004\046\uffe9\001\002\000\004\047\050\001\002\000\050" +
    "\003\ufff4\007\ufff4\010\ufff4\011\ufff4\015\ufff4\017\ufff4\020" +
    "\ufff4\021\ufff4\022\ufff4\026\ufff4\027\ufff4\031\ufff4\050\ufff4" +
    "\053\ufff4\054\ufff4\055\ufff4\056\ufff4\057\ufff4\063\ufff4\001" +
    "\002\000\050\003\100\007\017\010\023\011\025\015\075" +
    "\017\106\020\067\021\101\022\061\026\077\027\103\031" +
    "\056\050\uffe4\053\071\054\055\055\102\056\053\057\054" +
    "\063\uffa2\001\002\000\004\052\351\001\002\000\004\045" +
    "\346\001\002\000\004\045\343\001\002\000\004\045\340" +
    "\001\002\000\004\052\337\001\002\000\004\052\336\001" +
    "\002\000\054\003\uffd9\007\uffd9\010\uffd9\011\uffd9\015\uffd9" +
    "\017\uffd9\020\uffd9\021\uffd9\022\uffd9\023\uffd9\025\uffd9\026" +
    "\uffd9\027\uffd9\031\uffd9\050\uffd9\053\uffd9\054\uffd9\055\uffd9" +
    "\056\uffd9\057\uffd9\063\uffd9\001\002\000\004\045\316\001" +
    "\002\000\010\023\uffe6\025\uffe6\050\uffe6\001\002\000\054" +
    "\003\uffd5\007\uffd5\010\uffd5\011\uffd5\015\uffd5\017\uffd5\020" +
    "\uffd5\021\uffd5\022\uffd5\023\uffd5\025\uffd5\026\uffd5\027\uffd5" +
    "\031\uffd5\050\uffd5\053\uffd5\054\uffd5\055\uffd5\056\uffd5\057" +
    "\uffd5\063\uffd5\001\002\000\004\050\315\001\002\000\004" +
    "\052\314\001\002\000\054\003\uffd6\007\uffd6\010\uffd6\011" +
    "\uffd6\015\uffd6\017\uffd6\020\uffd6\021\uffd6\022\uffd6\023\uffd6" +
    "\025\uffd6\026\uffd6\027\uffd6\031\uffd6\050\uffd6\053\uffd6\054" +
    "\uffd6\055\uffd6\056\uffd6\057\uffd6\063\uffd6\001\002\000\004" +
    "\045\310\001\002\000\004\063\307\001\002\000\004\045" +
    "\266\001\002\000\054\003\uffe1\007\uffe1\010\uffe1\011\uffe1" +
    "\015\uffe1\017\uffe1\020\uffe1\021\uffe1\022\uffe1\023\uffe1\025" +
    "\uffe1\026\uffe1\027\uffe1\031\uffe1\050\uffe1\053\uffe1\054\uffe1" +
    "\055\uffe1\056\uffe1\057\uffe1\063\uffe1\001\002\000\054\003" +
    "\uffe2\007\uffe2\010\uffe2\011\uffe2\015\uffe2\017\uffe2\020\uffe2" +
    "\021\uffe2\022\uffe2\023\uffe2\025\uffe2\026\uffe2\027\uffe2\031" +
    "\uffe2\050\uffe2\053\uffe2\054\uffe2\055\uffe2\056\uffe2\057\uffe2" +
    "\063\uffe2\001\002\000\054\003\uffd7\007\uffd7\010\uffd7\011" +
    "\uffd7\015\uffd7\017\uffd7\020\uffd7\021\uffd7\022\uffd7\023\uffd7" +
    "\025\uffd7\026\uffd7\027\uffd7\031\uffd7\050\uffd7\053\uffd7\054" +
    "\uffd7\055\uffd7\056\uffd7\057\uffd7\063\uffd7\001\002\000\004" +
    "\045\251\001\002\000\004\052\250\001\002\000\032\003" +
    "\130\027\103\040\132\041\123\045\133\055\102\056\053" +
    "\057\054\063\uffa2\064\127\065\121\066\125\001\002\000" +
    "\042\003\100\007\017\010\023\011\025\015\075\017\106" +
    "\020\067\021\101\022\061\027\103\053\071\054\055\055" +
    "\102\056\053\057\054\063\uffa2\001\002\000\030\007\017" +
    "\010\023\011\025\027\103\047\205\053\071\054\055\055" +
    "\102\056\053\057\054\063\uffa2\001\002\000\004\045\234" +
    "\001\002\000\004\030\233\001\002\000\054\003\uffd8\007" +
    "\uffd8\010\uffd8\011\uffd8\015\uffd8\017\uffd8\020\uffd8\021\uffd8" +
    "\022\uffd8\023\uffd8\025\uffd8\026\uffd8\027\uffd8\031\uffd8\050" +
    "\uffd8\053\uffd8\054\uffd8\055\uffd8\056\uffd8\057\uffd8\063\uffd8" +
    "\001\002\000\054\003\100\007\017\010\023\011\025\015" +
    "\075\017\106\020\067\021\101\022\061\023\uffe4\025\uffe4" +
    "\026\077\027\103\031\056\050\uffe4\053\071\054\055\055" +
    "\102\056\053\057\054\063\uffa2\001\002\000\004\045\107" +
    "\001\002\000\014\007\017\010\023\011\025\027\103\063" +
    "\uffa2\001\002\000\004\063\231\001\002\000\004\052\154" +
    "\001\002\000\004\063\uffce\001\002\000\004\063\115\001" +
    "\002\000\004\052\uffcd\001\002\000\010\051\uffda\052\uffda" +
    "\060\116\001\002\000\032\003\130\027\103\040\132\041" +
    "\123\045\133\055\102\056\053\057\054\063\uffa2\064\127" +
    "\065\121\066\125\001\002\000\012\040\135\041\136\051" +
    "\uffdb\052\uffdb\001\002\000\044\012\uffad\013\uffad\024\uffad" +
    "\032\uffad\033\uffad\034\uffad\035\uffad\036\uffad\037\uffad\040" +
    "\uffad\041\uffad\042\uffad\043\uffad\044\uffad\046\uffad\051\uffad" +
    "\052\uffad\001\002\000\044\012\uffa7\013\uffa7\024\uffa7\032" +
    "\uffa7\033\uffa7\034\uffa7\035\uffa7\036\uffa7\037\uffa7\040\uffa7" +
    "\041\uffa7\042\uffa7\043\uffa7\044\uffa7\046\uffa7\051\uffa7\052" +
    "\uffa7\001\002\000\044\012\uffa4\013\uffa4\024\uffa4\032\uffa4" +
    "\033\uffa4\034\uffa4\035\uffa4\036\uffa4\037\uffa4\040\uffa4\041" +
    "\uffa4\042\uffa4\043\uffa4\044\uffa4\046\uffa4\051\uffa4\052\uffa4" +
    "\001\002\000\030\027\103\040\132\041\123\045\133\055" +
    "\102\056\053\057\054\063\uffa2\064\127\065\121\066\125" +
    "\001\002\000\044\012\uffaa\013\uffaa\024\uffaa\032\uffaa\033" +
    "\uffaa\034\uffaa\035\uffaa\036\uffaa\037\uffaa\040\uffaa\041\uffaa" +
    "\042\uffaa\043\uffaa\044\uffaa\046\uffaa\051\uffaa\052\uffaa\001" +
    "\002\000\044\012\uffa6\013\uffa6\024\uffa6\032\uffa6\033\uffa6" +
    "\034\uffa6\035\uffa6\036\uffa6\037\uffa6\040\uffa6\041\uffa6\042" +
    "\uffa6\043\uffa6\044\uffa6\046\uffa6\051\uffa6\052\uffa6\001\002" +
    "\000\044\012\uffb2\013\uffb2\024\uffb2\032\uffb2\033\uffb2\034" +
    "\uffb2\035\uffb2\036\uffb2\037\uffb2\040\uffb2\041\uffb2\042\141" +
    "\043\143\044\142\046\uffb2\051\uffb2\052\uffb2\001\002\000" +
    "\044\012\uffa8\013\uffa8\024\uffa8\032\uffa8\033\uffa8\034\uffa8" +
    "\035\uffa8\036\uffa8\037\uffa8\040\uffa8\041\uffa8\042\uffa8\043" +
    "\uffa8\044\uffa8\046\uffa8\051\uffa8\052\uffa8\001\002\000\030" +
    "\027\103\040\132\041\123\045\133\055\102\056\053\057" +
    "\054\063\uffa2\064\127\065\121\066\125\001\002\000\004" +
    "\063\151\001\002\000\030\027\103\040\132\041\123\045" +
    "\133\055\102\056\053\057\054\063\uffa2\064\127\065\121" +
    "\066\125\001\002\000\032\003\130\027\103\040\132\041" +
    "\123\045\133\055\102\056\053\057\054\063\uffa2\064\127" +
    "\065\121\066\125\001\002\000\010\040\135\041\136\046" +
    "\137\001\002\000\030\027\103\040\132\041\123\045\133" +
    "\055\102\056\053\057\054\063\uffa2\064\127\065\121\066" +
    "\125\001\002\000\030\027\103\040\132\041\123\045\133" +
    "\055\102\056\053\057\054\063\uffa2\064\127\065\121\066" +
    "\125\001\002\000\044\012\uffa5\013\uffa5\024\uffa5\032\uffa5" +
    "\033\uffa5\034\uffa5\035\uffa5\036\uffa5\037\uffa5\040\uffa5\041" +
    "\uffa5\042\uffa5\043\uffa5\044\uffa5\046\uffa5\051\uffa5\052\uffa5" +
    "\001\002\000\044\012\uffb3\013\uffb3\024\uffb3\032\uffb3\033" +
    "\uffb3\034\uffb3\035\uffb3\036\uffb3\037\uffb3\040\uffb3\041\uffb3" +
    "\042\141\043\143\044\142\046\uffb3\051\uffb3\052\uffb3\001" +
    "\002\000\030\027\103\040\132\041\123\045\133\055\102" +
    "\056\053\057\054\063\uffa2\064\127\065\121\066\125\001" +
    "\002\000\030\027\103\040\132\041\123\045\133\055\102" +
    "\056\053\057\054\063\uffa2\064\127\065\121\066\125\001" +
    "\002\000\030\027\103\040\132\041\123\045\133\055\102" +
    "\056\053\057\054\063\uffa2\064\127\065\121\066\125\001" +
    "\002\000\044\012\uffaf\013\uffaf\024\uffaf\032\uffaf\033\uffaf" +
    "\034\uffaf\035\uffaf\036\uffaf\037\uffaf\040\uffaf\041\uffaf\042" +
    "\uffaf\043\uffaf\044\uffaf\046\uffaf\051\uffaf\052\uffaf\001\002" +
    "\000\044\012\uffae\013\uffae\024\uffae\032\uffae\033\uffae\034" +
    "\uffae\035\uffae\036\uffae\037\uffae\040\uffae\041\uffae\042\uffae" +
    "\043\uffae\044\uffae\046\uffae\051\uffae\052\uffae\001\002\000" +
    "\044\012\uffb0\013\uffb0\024\uffb0\032\uffb0\033\uffb0\034\uffb0" +
    "\035\uffb0\036\uffb0\037\uffb0\040\uffb0\041\uffb0\042\uffb0\043" +
    "\uffb0\044\uffb0\046\uffb0\051\uffb0\052\uffb0\001\002\000\044" +
    "\012\uffb4\013\uffb4\024\uffb4\032\uffb4\033\uffb4\034\uffb4\035" +
    "\uffb4\036\uffb4\037\uffb4\040\uffb4\041\uffb4\042\141\043\143" +
    "\044\142\046\uffb4\051\uffb4\052\uffb4\001\002\000\044\012" +
    "\uffab\013\uffab\024\uffab\032\uffab\033\uffab\034\uffab\035\uffab" +
    "\036\uffab\037\uffab\040\uffab\041\uffab\042\uffab\043\uffab\044" +
    "\uffab\046\uffab\051\uffab\052\uffab\001\002\000\044\012\uffa9" +
    "\013\uffa9\024\uffa9\032\uffa9\033\uffa9\034\uffa9\035\uffa9\036" +
    "\uffa9\037\uffa9\040\uffa9\041\uffa9\042\uffa9\043\uffa9\044\uffa9" +
    "\046\uffa9\051\uffa9\052\uffa9\001\002\000\044\012\uffb1\013" +
    "\uffb1\024\uffb1\032\uffb1\033\uffb1\034\uffb1\035\uffb1\036\uffb1" +
    "\037\uffb1\040\uffb1\041\uffb1\042\141\043\143\044\142\046" +
    "\uffb1\051\uffb1\052\uffb1\001\002\000\044\012\uffac\013\uffac" +
    "\024\uffac\032\uffac\033\uffac\034\uffac\035\uffac\036\uffac\037" +
    "\uffac\040\uffac\041\uffac\042\uffac\043\uffac\044\uffac\046\uffac" +
    "\051\uffac\052\uffac\001\002\000\034\003\130\014\162\027" +
    "\103\040\132\041\123\045\156\055\102\056\053\057\054" +
    "\063\uffa2\064\127\065\121\066\125\001\002\000\012\012" +
    "\167\013\uffa0\046\uffa0\052\uffa0\001\002\000\034\003\130" +
    "\014\162\027\103\040\132\041\123\045\156\055\102\056" +
    "\053\057\054\063\uffa2\064\127\065\121\066\125\001\002" +
    "\000\012\012\uff9e\013\uff9e\046\uff9e\052\uff9e\001\002\000" +
    "\012\012\uff9c\013\uff9c\046\uff9c\052\uff9c\001\002\000\022" +
    "\032\215\033\214\034\217\035\216\036\212\037\213\040" +
    "\135\041\136\001\002\000\034\003\130\014\162\027\103" +
    "\040\132\041\123\045\156\055\102\056\053\057\054\063" +
    "\uffa2\064\127\065\121\066\125\001\002\000\006\013\165" +
    "\052\164\001\002\000\006\027\103\063\uffa2\001\002\000" +
    "\034\003\130\014\162\027\103\040\132\041\123\045\156" +
    "\055\102\056\053\057\054\063\uffa2\064\127\065\121\066" +
    "\125\001\002\000\012\012\167\013\uffa1\046\uffa1\052\uffa1" +
    "\001\002\000\034\003\130\014\162\027\103\040\132\041" +
    "\123\045\156\055\102\056\053\057\054\063\uffa2\064\127" +
    "\065\121\066\125\001\002\000\012\012\uff9f\013\uff9f\046" +
    "\uff9f\052\uff9f\001\002\000\004\046\202\001\002\000\004" +
    "\063\175\001\002\000\004\046\uffcc\001\002\000\004\046" +
    "\uffcb\001\002\000\010\060\177\061\176\062\200\001\002" +
    "\000\004\046\uffb6\001\002\000\032\003\130\027\103\040" +
    "\132\041\123\045\133\055\102\056\053\057\054\063\uffa2" +
    "\064\127\065\121\066\125\001\002\000\004\046\uffb5\001" +
    "\002\000\012\040\135\041\136\046\uffb9\052\uffb9\001\002" +
    "\000\030\007\017\010\023\011\025\027\103\047\205\053" +
    "\071\054\055\055\102\056\053\057\054\063\uffa2\001\002" +
    "\000\054\003\uffd0\007\uffd0\010\uffd0\011\uffd0\015\uffd0\017" +
    "\uffd0\020\uffd0\021\uffd0\022\uffd0\023\uffd0\025\uffd0\026\uffd0" +
    "\027\uffd0\031\uffd0\050\uffd0\053\uffd0\054\uffd0\055\uffd0\056" +
    "\uffd0\057\uffd0\063\uffd0\001\002\000\056\003\uffd1\007\uffd1" +
    "\010\uffd1\011\uffd1\015\uffd1\016\uffd1\017\uffd1\020\uffd1\021" +
    "\uffd1\022\uffd1\023\uffd1\025\uffd1\026\uffd1\027\uffd1\031\uffd1" +
    "\050\uffd1\053\uffd1\054\uffd1\055\uffd1\056\uffd1\057\uffd1\063" +
    "\uffd1\001\002\000\050\003\uffd3\007\uffd3\010\uffd3\011\uffd3" +
    "\015\uffd3\017\uffd3\020\uffd3\021\uffd3\022\uffd3\026\uffd3\027" +
    "\uffd3\031\uffd3\050\uffd3\053\uffd3\054\uffd3\055\uffd3\056\uffd3" +
    "\057\uffd3\063\uffd3\001\002\000\050\003\100\007\017\010" +
    "\023\011\025\015\075\017\106\020\067\021\101\022\061" +
    "\026\077\027\103\031\056\050\uffe4\053\071\054\055\055" +
    "\102\056\053\057\054\063\uffa2\001\002\000\004\050\210" +
    "\001\002\000\056\003\uffd2\007\uffd2\010\uffd2\011\uffd2\015" +
    "\uffd2\016\uffd2\017\uffd2\020\uffd2\021\uffd2\022\uffd2\023\uffd2" +
    "\025\uffd2\026\uffd2\027\uffd2\031\uffd2\050\uffd2\053\uffd2\054" +
    "\uffd2\055\uffd2\056\uffd2\057\uffd2\063\uffd2\001\002\000\012" +
    "\012\uff9d\013\uff9d\046\uff9d\052\uff9d\001\002\000\032\003" +
    "\130\027\103\040\132\041\123\045\133\055\102\056\053" +
    "\057\054\063\uffa2\064\127\065\121\066\125\001\002\000" +
    "\032\003\130\027\103\040\132\041\123\045\133\055\102" +
    "\056\053\057\054\063\uffa2\064\127\065\121\066\125\001" +
    "\002\000\032\003\130\027\103\040\132\041\123\045\133" +
    "\055\102\056\053\057\054\063\uffa2\064\127\065\121\066" +
    "\125\001\002\000\032\003\130\027\103\040\132\041\123" +
    "\045\133\055\102\056\053\057\054\063\uffa2\064\127\065" +
    "\121\066\125\001\002\000\032\003\130\027\103\040\132" +
    "\041\123\045\133\055\102\056\053\057\054\063\uffa2\064" +
    "\127\065\121\066\125\001\002\000\032\003\130\027\103" +
    "\040\132\041\123\045\133\055\102\056\053\057\054\063" +
    "\uffa2\064\127\065\121\066\125\001\002\000\016\012\uff97" +
    "\013\uff97\040\135\041\136\046\uff97\052\uff97\001\002\000" +
    "\016\012\uff96\013\uff96\040\135\041\136\046\uff96\052\uff96" +
    "\001\002\000\016\012\uff99\013\uff99\040\135\041\136\046" +
    "\uff99\052\uff99\001\002\000\016\012\uff98\013\uff98\040\135" +
    "\041\136\046\uff98\052\uff98\001\002\000\016\012\uff9a\013" +
    "\uff9a\040\135\041\136\046\uff9a\052\uff9a\001\002\000\016" +
    "\012\uff95\013\uff95\040\135\041\136\046\uff95\052\uff95\001" +
    "\002\000\024\032\215\033\214\034\217\035\216\036\212" +
    "\037\213\040\135\041\136\046\137\001\002\000\006\013" +
    "\165\046\230\001\002\000\012\012\uff9b\013\uff9b\046\uff9b" +
    "\052\uff9b\001\002\000\004\052\uffcf\001\002\000\010\023" +
    "\uffe7\025\uffe7\050\uffe7\001\002\000\004\063\uffa3\001\002" +
    "\000\004\067\235\001\002\000\004\046\236\001\002\000" +
    "\044\012\uff8a\013\uff8a\024\uff8a\032\uff8a\033\uff8a\034\uff8a" +
    "\035\uff8a\036\uff8a\037\uff8a\040\uff8a\041\uff8a\042\uff8a\043" +
    "\uff8a\044\uff8a\046\uff8a\051\uff8a\052\uff8a\001\002\000\004" +
    "\020\240\001\002\000\004\045\241\001\002\000\034\003" +
    "\130\014\162\027\103\040\132\041\123\045\156\055\102" +
    "\056\053\057\054\063\uffa2\064\127\065\121\066\125\001" +
    "\002\000\006\013\165\046\243\001\002\000\004\052\244" +
    "\001\002\000\054\003\uffca\007\uffca\010\uffca\011\uffca\015" +
    "\uffca\017\uffca\020\uffca\021\uffca\022\uffca\023\uffca\025\uffca" +
    "\026\uffca\027\uffca\031\uffca\050\uffca\053\uffca\054\uffca\055" +
    "\uffca\056\uffca\057\uffca\063\uffca\001\002\000\054\003\uffe0" +
    "\007\uffe0\010\uffe0\011\uffe0\015\uffe0\017\uffe0\020\uffe0\021" +
    "\uffe0\022\uffe0\023\uffe0\025\uffe0\026\uffe0\027\uffe0\031\uffe0" +
    "\050\uffe0\053\uffe0\054\uffe0\055\uffe0\056\uffe0\057\uffe0\063" +
    "\uffe0\001\002\000\010\040\135\041\136\052\247\001\002" +
    "\000\010\023\uffe3\025\uffe3\050\uffe3\001\002\000\056\003" +
    "\uffbd\007\uffbd\010\uffbd\011\uffbd\015\uffbd\016\uffbd\017\uffbd" +
    "\020\uffbd\021\uffbd\022\uffbd\023\uffbd\025\uffbd\026\uffbd\027" +
    "\uffbd\031\uffbd\050\uffbd\053\uffbd\054\uffbd\055\uffbd\056\uffbd" +
    "\057\uffbd\063\uffbd\001\002\000\034\003\130\014\162\027" +
    "\103\040\132\041\123\045\156\055\102\056\053\057\054" +
    "\063\uffa2\064\127\065\121\066\125\001\002\000\006\013" +
    "\165\046\253\001\002\000\030\007\017\010\023\011\025" +
    "\027\103\047\205\053\071\054\055\055\102\056\053\057" +
    "\054\063\uffa2\001\002\000\056\003\uffc7\007\uffc7\010\uffc7" +
    "\011\uffc7\015\uffc7\016\uffc7\017\uffc7\020\uffc7\021\uffc7\022" +
    "\uffc7\023\uffc7\025\uffc7\026\uffc7\027\uffc7\031\uffc7\050\uffc7" +
    "\053\uffc7\054\uffc7\055\uffc7\056\uffc7\057\uffc7\063\uffc7\001" +
    "\002\000\056\003\uffc5\007\uffc5\010\uffc5\011\uffc5\015\uffc5" +
    "\016\257\017\uffc5\020\uffc5\021\uffc5\022\uffc5\023\uffc5\025" +
    "\uffc5\026\uffc5\027\uffc5\031\uffc5\050\uffc5\053\uffc5\054\uffc5" +
    "\055\uffc5\056\uffc5\057\uffc5\063\uffc5\001\002\000\054\003" +
    "\uffc9\007\uffc9\010\uffc9\011\uffc9\015\uffc9\017\uffc9\020\uffc9" +
    "\021\uffc9\022\uffc9\023\uffc9\025\uffc9\026\uffc9\027\uffc9\031" +
    "\uffc9\050\uffc9\053\uffc9\054\uffc9\055\uffc9\056\uffc9\057\uffc9" +
    "\063\uffc9\001\002\000\032\007\017\010\023\011\025\015" +
    "\261\027\103\047\205\053\071\054\055\055\102\056\053" +
    "\057\054\063\uffa2\001\002\000\054\003\uffc6\007\uffc6\010" +
    "\uffc6\011\uffc6\015\uffc6\017\uffc6\020\uffc6\021\uffc6\022\uffc6" +
    "\023\uffc6\025\uffc6\026\uffc6\027\uffc6\031\uffc6\050\uffc6\053" +
    "\uffc6\054\uffc6\055\uffc6\056\uffc6\057\uffc6\063\uffc6\001\002" +
    "\000\004\045\262\001\002\000\034\003\130\014\162\027" +
    "\103\040\132\041\123\045\156\055\102\056\053\057\054" +
    "\063\uffa2\064\127\065\121\066\125\001\002\000\006\013" +
    "\165\046\264\001\002\000\030\007\017\010\023\011\025" +
    "\027\103\047\205\053\071\054\055\055\102\056\053\057" +
    "\054\063\uffa2\001\002\000\056\003\uffc8\007\uffc8\010\uffc8" +
    "\011\uffc8\015\uffc8\016\uffc8\017\uffc8\020\uffc8\021\uffc8\022" +
    "\uffc8\023\uffc8\025\uffc8\026\uffc8\027\uffc8\031\uffc8\050\uffc8" +
    "\053\uffc8\054\uffc8\055\uffc8\056\uffc8\057\uffc8\063\uffc8\001" +
    "\002\000\026\027\103\045\277\055\102\056\053\057\054" +
    "\063\uffa2\064\274\065\267\066\273\067\272\001\002\000" +
    "\006\040\uff8d\046\uff8d\001\002\000\006\040\uff90\046\uff90" +
    "\001\002\000\006\040\303\046\304\001\002\000\006\040" +
    "\uff91\046\uff91\001\002\000\006\040\uff8c\046\uff8c\001\002" +
    "\000\006\040\uff8e\046\uff8e\001\002\000\004\063\302\001" +
    "\002\000\006\040\uff92\046\uff92\001\002\000\032\003\130" +
    "\027\103\040\132\041\123\045\133\055\102\056\053\057" +
    "\054\063\uffa2\064\127\065\121\066\125\001\002\000\010" +
    "\040\135\041\136\046\301\001\002\000\006\040\uff8b\046" +
    "\uff8b\001\002\000\006\040\uff8f\046\uff8f\001\002\000\026" +
    "\027\103\045\277\055\102\056\053\057\054\063\uffa2\064" +
    "\274\065\267\066\273\067\305\001\002\000\004\052\uffb8" +
    "\001\002\000\006\040\uff93\046\uff93\001\002\000\006\040" +
    "\uff94\046\uff94\001\002\000\004\060\177\001\002\000\034" +
    "\003\130\014\162\027\103\040\132\041\123\045\156\055" +
    "\102\056\053\057\054\063\uffa2\064\127\065\121\066\125" +
    "\001\002\000\006\013\165\046\312\001\002\000\030\007" +
    "\017\010\023\011\025\027\103\047\205\053\071\054\055" +
    "\055\102\056\053\057\054\063\uffa2\001\002\000\054\003" +
    "\uffd4\007\uffd4\010\uffd4\011\uffd4\015\uffd4\017\uffd4\020\uffd4" +
    "\021\uffd4\022\uffd4\023\uffd4\025\uffd4\026\uffd4\027\uffd4\031" +
    "\uffd4\050\uffd4\053\uffd4\054\uffd4\055\uffd4\056\uffd4\057\uffd4" +
    "\063\uffd4\001\002\000\056\003\uffbb\007\uffbb\010\uffbb\011" +
    "\uffbb\015\uffbb\016\uffbb\017\uffbb\020\uffbb\021\uffbb\022\uffbb" +
    "\023\uffbb\025\uffbb\026\uffbb\027\uffbb\031\uffbb\050\uffbb\053" +
    "\uffbb\054\uffbb\055\uffbb\056\uffbb\057\uffbb\063\uffbb\001\002" +
    "\000\016\003\ufff3\004\ufff3\007\ufff3\010\ufff3\011\ufff3\050" +
    "\ufff3\001\002\000\032\003\130\027\103\040\132\041\123" +
    "\045\133\055\102\056\053\057\054\063\uffa2\064\127\065" +
    "\121\066\125\001\002\000\010\040\135\041\136\046\320" +
    "\001\002\000\004\047\321\001\002\000\010\023\uffc1\025" +
    "\uffc1\050\uffc1\001\002\000\010\023\325\025\324\050\uffbe" +
    "\001\002\000\004\050\335\001\002\000\004\024\332\001" +
    "\002\000\032\003\130\027\103\040\132\041\123\045\133" +
    "\055\102\056\053\057\054\063\uffa2\064\127\065\121\066" +
    "\125\001\002\000\010\024\327\040\135\041\136\001\002" +
    "\000\054\003\uffc3\007\uffc3\010\uffc3\011\uffc3\015\uffc3\017" +
    "\uffc3\020\uffc3\021\uffc3\022\uffc3\023\uffc3\025\uffc3\026\uffc3" +
    "\027\uffc3\031\uffc3\050\uffc3\053\uffc3\054\uffc3\055\uffc3\056" +
    "\uffc3\057\uffc3\063\uffc3\001\002\000\054\003\100\007\017" +
    "\010\023\011\025\015\075\017\106\020\067\021\101\022" +
    "\061\023\uffe4\025\uffe4\026\077\027\103\031\056\050\uffe4" +
    "\053\071\054\055\055\102\056\053\057\054\063\uffa2\001" +
    "\002\000\010\023\uffc2\025\uffc2\050\uffc2\001\002\000\050" +
    "\003\uffc0\007\uffc0\010\uffc0\011\uffc0\015\uffc0\017\uffc0\020" +
    "\uffc0\021\uffc0\022\uffc0\026\uffc0\027\uffc0\031\uffc0\050\uffc0" +
    "\053\uffc0\054\uffc0\055\uffc0\056\uffc0\057\uffc0\063\uffc0\001" +
    "\002\000\050\003\100\007\017\010\023\011\025\015\075" +
    "\017\106\020\067\021\101\022\061\026\077\027\103\031" +
    "\056\050\uffe4\053\071\054\055\055\102\056\053\057\054" +
    "\063\uffa2\001\002\000\004\050\uffbf\001\002\000\054\003" +
    "\uffc4\007\uffc4\010\uffc4\011\uffc4\015\uffc4\017\uffc4\020\uffc4" +
    "\021\uffc4\022\uffc4\023\uffc4\025\uffc4\026\uffc4\027\uffc4\031" +
    "\uffc4\050\uffc4\053\uffc4\054\uffc4\055\uffc4\056\uffc4\057\uffc4" +
    "\063\uffc4\001\002\000\056\003\uffbc\007\uffbc\010\uffbc\011" +
    "\uffbc\015\uffbc\016\uffbc\017\uffbc\020\uffbc\021\uffbc\022\uffbc" +
    "\023\uffbc\025\uffbc\026\uffbc\027\uffbc\031\uffbc\050\uffbc\053" +
    "\uffbc\054\uffbc\055\uffbc\056\uffbc\057\uffbc\063\uffbc\001\002" +
    "\000\010\023\uffe5\025\uffe5\050\uffe5\001\002\000\026\027" +
    "\103\045\277\055\102\056\053\057\054\063\uffa2\064\274" +
    "\065\267\066\273\067\272\001\002\000\006\040\303\046" +
    "\342\001\002\000\004\052\uffb7\001\002\000\004\067\344" +
    "\001\002\000\004\046\345\001\002\000\044\012\uff88\013" +
    "\uff88\024\uff88\032\uff88\033\uff88\034\uff88\035\uff88\036\uff88" +
    "\037\uff88\040\uff88\041\uff88\042\uff88\043\uff88\044\uff88\046" +
    "\uff88\051\uff88\052\uff88\001\002\000\004\067\347\001\002" +
    "\000\004\046\350\001\002\000\044\012\uff89\013\uff89\024" +
    "\uff89\032\uff89\033\uff89\034\uff89\035\uff89\036\uff89\037\uff89" +
    "\040\uff89\041\uff89\042\uff89\043\uff89\044\uff89\046\uff89\051" +
    "\uff89\052\uff89\001\002\000\056\003\uffba\007\uffba\010\uffba" +
    "\011\uffba\015\uffba\016\uffba\017\uffba\020\uffba\021\uffba\022" +
    "\uffba\023\uffba\025\uffba\026\uffba\027\uffba\031\uffba\050\uffba" +
    "\053\uffba\054\uffba\055\uffba\056\uffba\057\uffba\063\uffba\001" +
    "\002\000\004\045\353\001\002\000\012\007\017\010\023" +
    "\011\025\046\uffea\001\002\000\004\046\355\001\002\000" +
    "\004\047\356\001\002\000\050\003\ufff2\007\ufff2\010\ufff2" +
    "\011\ufff2\015\ufff2\017\ufff2\020\ufff2\021\ufff2\022\ufff2\026" +
    "\ufff2\027\ufff2\031\ufff2\050\ufff2\053\ufff2\054\ufff2\055\ufff2" +
    "\056\ufff2\057\ufff2\063\ufff2\001\002\000\050\003\100\007" +
    "\017\010\023\011\025\015\075\017\106\020\067\021\101" +
    "\022\061\026\077\027\103\031\056\050\uffe4\053\071\054" +
    "\055\055\102\056\053\057\054\063\uffa2\001\002\000\004" +
    "\050\361\001\002\000\016\003\ufff1\004\ufff1\007\ufff1\010" +
    "\ufff1\011\ufff1\050\ufff1\001\002\000\016\003\ufff6\004\ufff6" +
    "\007\ufff6\010\ufff6\011\ufff6\050\ufff6\001\002\000\016\003" +
    "\ufff5\004\ufff5\007\ufff5\010\ufff5\011\ufff5\050\ufff5\001\002" +
    "\000\004\063\115\001\002\000\006\051\uffdc\052\uffdc\001" +
    "\002\000\006\051\367\052\uffde\001\002\000\004\063\115" +
    "\001\002\000\006\051\uffdd\052\uffdd\001\002\000\004\002" +
    "\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\367\000\006\002\003\003\004\001\001\000\002\001" +
    "\001\000\004\004\007\001\001\000\002\001\001\000\004" +
    "\004\010\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\060\014\001\001" +
    "\000\004\036\015\001\001\000\014\005\026\006\027\010" +
    "\020\027\017\042\025\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\063\363\001\001\000\002\001\001\000" +
    "\002\001\001\000\014\005\026\006\027\010\020\027\362" +
    "\042\025\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\007\031\010\034" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\010\037\012\036\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\013\041\001" +
    "\001\000\002\001\001\000\004\010\043\001\001\000\002" +
    "\001\001\000\004\013\045\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\061\050\001\001\000\042\010\020" +
    "\011\067\021\051\030\071\031\057\032\103\033\073\034" +
    "\065\040\063\041\104\042\056\043\061\044\072\045\062" +
    "\047\064\054\075\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\016\011\130\014\245\015\125\016\117\017\123\021\121" +
    "\001\001\000\036\010\020\011\067\021\051\030\071\031" +
    "\057\032\103\033\073\034\065\041\244\042\056\044\072" +
    "\045\062\047\064\054\075\001\001\000\022\010\020\011" +
    "\067\021\051\030\203\037\236\042\056\047\064\054\075" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\042\010\020\011\067\021\051\030\071\031\057" +
    "\032\103\033\073\034\065\040\231\041\104\042\056\043" +
    "\061\044\072\045\062\047\064\054\075\001\001\000\002" +
    "\001\001\000\010\010\111\011\107\051\110\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\065\112\001\001" +
    "\000\004\056\113\001\001\000\002\001\001\000\002\001" +
    "\001\000\016\011\130\014\116\015\125\016\117\017\123" +
    "\021\121\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\011\130\016\152" +
    "\017\123\021\121\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\011\130" +
    "\015\151\016\117\017\123\021\121\001\001\000\002\001" +
    "\001\000\012\011\130\016\147\017\123\021\121\001\001" +
    "\000\016\011\130\014\133\015\125\016\117\017\123\021" +
    "\121\001\001\000\002\001\001\000\014\011\130\015\146" +
    "\016\117\017\123\021\121\001\001\000\014\011\130\015" +
    "\137\016\117\017\123\021\121\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\011\130\016\145\017\123\021" +
    "\121\001\001\000\012\011\130\016\144\017\123\021\121" +
    "\001\001\000\012\011\130\016\143\017\123\021\121\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\026\011\130\014\160" +
    "\015\125\016\117\017\123\021\121\023\156\024\154\025" +
    "\162\026\157\001\001\000\002\001\001\000\026\011\130" +
    "\014\225\015\125\016\117\017\123\021\121\023\156\024" +
    "\154\025\226\026\157\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\022\011\130\014\160\015" +
    "\125\016\117\017\123\021\121\023\210\026\157\001\001" +
    "\000\002\001\001\000\012\011\171\052\170\053\173\054" +
    "\172\001\001\000\024\011\130\014\160\015\125\016\117" +
    "\017\123\021\121\023\156\024\165\026\157\001\001\000" +
    "\002\001\001\000\022\011\130\014\160\015\125\016\117" +
    "\017\123\021\121\023\167\026\157\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\016\011\130\014\200\015\125\016\117\017\123\021\121" +
    "\001\001\000\002\001\001\000\002\001\001\000\022\010" +
    "\020\011\067\021\051\030\203\037\202\042\056\047\064" +
    "\054\075\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\064\205\001\001\000\042\010\020\011\067\021\051" +
    "\030\071\031\057\032\103\033\073\034\065\040\206\041" +
    "\104\042\056\043\061\044\072\045\062\047\064\054\075" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\016\011\130\014\224\015\125\016\117\017\123" +
    "\021\121\001\001\000\016\011\130\014\223\015\125\016" +
    "\117\017\123\021\121\001\001\000\016\011\130\014\222" +
    "\015\125\016\117\017\123\021\121\001\001\000\016\011" +
    "\130\014\221\015\125\016\117\017\123\021\121\001\001" +
    "\000\016\011\130\014\220\015\125\016\117\017\123\021" +
    "\121\001\001\000\016\011\130\014\217\015\125\016\117" +
    "\017\123\021\121\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\026\011\130" +
    "\014\160\015\125\016\117\017\123\021\121\023\156\024" +
    "\154\025\241\026\157\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\026\011\130" +
    "\014\160\015\125\016\117\017\123\021\121\023\156\024" +
    "\154\025\251\026\157\001\001\000\002\001\001\000\022" +
    "\010\020\011\067\021\051\030\203\037\253\042\056\047" +
    "\064\054\075\001\001\000\004\022\254\001\001\000\004" +
    "\035\255\001\001\000\002\001\001\000\022\010\020\011" +
    "\067\021\051\030\203\037\257\042\056\047\064\054\075" +
    "\001\001\000\002\001\001\000\002\001\001\000\026\011" +
    "\130\014\160\015\125\016\117\017\123\021\121\023\156" +
    "\024\154\025\262\026\157\001\001\000\002\001\001\000" +
    "\022\010\020\011\067\021\051\030\203\037\264\042\056" +
    "\047\064\054\075\001\001\000\002\001\001\000\012\011" +
    "\274\020\275\021\267\050\270\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\016\011\130\014\277\015\125\016\117\017" +
    "\123\021\121\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\011\274\020\305\021\267\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\026\011\130\014\160\015\125\016" +
    "\117\017\123\021\121\023\156\024\154\025\310\026\157" +
    "\001\001\000\002\001\001\000\022\010\020\011\067\021" +
    "\051\030\203\037\312\042\056\047\064\054\075\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\016\011\130\014\316\015\125\016\117\017\123\021\121" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\055" +
    "\321\001\001\000\004\046\322\001\001\000\002\001\001" +
    "\000\002\001\001\000\016\011\130\014\325\015\125\016" +
    "\117\017\123\021\121\001\001\000\002\001\001\000\004" +
    "\066\327\001\001\000\042\010\020\011\067\021\051\030" +
    "\071\031\057\032\103\033\073\034\065\040\330\041\104" +
    "\042\056\043\061\044\072\045\062\047\064\054\075\001" +
    "\001\000\002\001\001\000\004\067\332\001\001\000\042" +
    "\010\020\011\067\021\051\030\071\031\057\032\103\033" +
    "\073\034\065\040\333\041\104\042\056\043\061\044\072" +
    "\045\062\047\064\054\075\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\011\274\020\275\021\267\050\340\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\010\037\012\353\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\062\356\001\001\000\042\010\020\011\067" +
    "\021\051\030\071\031\057\032\103\033\073\034\065\040" +
    "\357\041\104\042\056\043\061\044\072\045\062\047\064" +
    "\054\075\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\056\364\057\365" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\056" +
    "\367\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$SintaxisJava$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$SintaxisJava$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$SintaxisJava$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    private Symbol s;
    private JavaSemantica java = new JavaSemantica();
    private TablaJava tabla;
    private List<VariableJava> variables;
    private MetodoJava actual;
    private Errores errores = new Errores();
    int ret = 4;
    int cas = 0;
    private int linea;

    public void setLinea(int line){
            this.linea = line;
    }
    
    public void syntax_error(Symbol sym){
            errores.errorSintactico(sym, linea); 
    }

    public void unrecovered_syntax_error(Symbol sym) throws java.lang.Exception{
            errores.errorSintactico(sym, linea); 
    }

    public JavaSemantica getJava() {
            return java;
    }
    
    public void reportarSem(String texto){
            errores.errorSemantico(getS(), texto, linea);
    }

    public Symbol getS(){
        return this.cur_token;
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$SintaxisJava$actions {
  private final SintaxisJava parser;

  /** Constructor */
  CUP$SintaxisJava$actions(SintaxisJava parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$SintaxisJava$do_action_part00000000(
    int                        CUP$SintaxisJava$act_num,
    java_cup.runtime.lr_parser CUP$SintaxisJava$parser,
    java.util.Stack            CUP$SintaxisJava$stack,
    int                        CUP$SintaxisJava$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$SintaxisJava$result;

      /* select the action based on the action number */
      switch (CUP$SintaxisJava$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= JAVA EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-1)).value;
		RESULT = start_val;
              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$SintaxisJava$parser.done_parsing();
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // JAVA ::= CLASSES 
            {
              Object RESULT =null;
		java.mostrarClases();
              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("JAVA",0, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // CLASSES ::= CLASSES CLASS 
            {
              Object RESULT =null;

              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("CLASSES",1, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // CLASSES ::= 
            {
              Object RESULT =null;

              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("CLASSES",1, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // NT$0 ::= 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-1)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-1)).value;
TablaJava sem = new TablaJava(e1); if(!java.agregarTabla(sem)){
                                reportarSem("Clase ya existente con id: <"+e1+">");}
                                tabla = sem; TablaJava.AMBITO += 1;
              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("NT$0",46, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // CLASS ::= publicc classs id llavea NT$0 STATEMENTS_CLASS llavec 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-2)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-4)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-4)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-4)).value;
		tabla.eliminarAmbito(TablaJava.AMBITO); TablaJava.AMBITO -= 1; 
                tabla.verificarConstructores(); tabla = null;
              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("CLASS",2, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-6)), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // CLASS ::= error CLASS 
            {
              Object RESULT =null;

              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("CLASS",2, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // STATEMENTS_CLASS ::= STATEMENTS_CLASS STATEMENT_CLASS 
            {
              List<Triplete> RESULT =null;

              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("STATEMENTS_CLASS",28, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // STATEMENTS_CLASS ::= 
            {
              List<Triplete> RESULT =null;
		
              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("STATEMENTS_CLASS",28, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // STATEMENT_CLASS ::= METODO 
            {
              List<Triplete> RESULT =null;

              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("STATEMENT_CLASS",21, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // STATEMENT_CLASS ::= CONSTRUCTOR 
            {
              List<Triplete> RESULT =null;

              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("STATEMENT_CLASS",21, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // STATEMENT_CLASS ::= DEF_VAR puntocoma 
            {
              List<Triplete> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-1)).right;
		List<Triplete> e1 = (List<Triplete>)((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-1)).value;
		tabla.getPrincipales().addAll(e1);
              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("STATEMENT_CLASS",21, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // STATEMENT_CLASS ::= error STATEMENT_CLASS 
            {
              List<Triplete> RESULT =null;

              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("STATEMENT_CLASS",21, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // NT$1 ::= 
            {
              Object RESULT =null;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-4)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-4)).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-4)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-2)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-2)).right;
		List<VariableJava> e3 = (List<VariableJava>)((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-2)).value;

                MetodoJava met = new MetodoJava(e2, 5, e3);
                actual = met;
                if(!tabla.addConstructor(met)){
                        reportarSem("Constructor de la clase : "+ e2 +" ya existente con mismos parametros");
                }
                        TablaJava.AMBITO += 1;
              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("NT$1",47, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // CONSTRUCTOR ::= publicc id para LIST_PAR parc llavea NT$1 STATEMENTS_METODO llavec 
            {
              Object RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-7)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-7)).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-7)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-5)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-5)).right;
		List<VariableJava> e3 = (List<VariableJava>)((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-5)).value;
		int e4left = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-1)).left;
		int e4right = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-1)).right;
		List<Triplete> e4 = (List<Triplete>)((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-1)).value;
		tabla.eliminarAmbito(TablaJava.AMBITO); TablaJava.AMBITO -= 1;
                actual.getTripletes().addAll(e4);
                actual = null;
                
              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("CONSTRUCTOR",4, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-8)), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // NT$2 ::= 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-5)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-5)).right;
		Integer e1 = (Integer)((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-5)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-4)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-4)).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-4)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-2)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-2)).right;
		List<VariableJava> e3 = (List<VariableJava>)((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-2)).value;
ret = e1;
                MetodoJava met = new MetodoJava(e2, e1, e3);
                actual = met;
                if(!tabla.addMetodo(met)){
                        reportarSem("Metodo ya existente con id: <"+e2+"> con mismos parametros");
                }
                        TablaJava.AMBITO += 1;
              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("NT$2",48, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // METODO ::= publicc TYPE_V id para LIST_PAR parc llavea NT$2 STATEMENTS_METODO llavec 
            {
              Object RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-2)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-8)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-8)).right;
		Integer e1 = (Integer)((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-8)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-7)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-7)).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-7)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-5)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-5)).right;
		List<VariableJava> e3 = (List<VariableJava>)((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-5)).value;
		int e4left = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-1)).left;
		int e4right = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-1)).right;
		List<Triplete> e4 = (List<Triplete>)((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-1)).value;
		tabla.eliminarAmbito(TablaJava.AMBITO); TablaJava.AMBITO -= 1;
                actual.getTripletes().addAll(e4);
                actual = null;
                
              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("METODO",3, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-9)), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // TYPE_V ::= voidd 
            {
              Integer RESULT =null;
		RESULT = TablaJava.VOID;
              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("TYPE_V",5, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // TYPE_V ::= TYPE 
            {
              Integer RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()).right;
		Integer e1 = (Integer)((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.peek()).value;
		RESULT = e1;
              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("TYPE_V",5, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // TYPE ::= intt 
            {
              Integer RESULT =null;
		RESULT = TablaJava.INT;
              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("TYPE",6, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // TYPE ::= floatt 
            {
              Integer RESULT =null;
		RESULT = TablaJava.FLOAT;
              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("TYPE",6, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // TYPE ::= charr 
            {
              Integer RESULT =null;
		RESULT = TablaJava.CHAR;
              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("TYPE",6, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // LIST_PAR ::= TYPE id LIST_PARR 
            {
              List<VariableJava> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-2)).right;
		Integer e1 = (Integer)((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-1)).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-1)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()).right;
		List<VariableJava> e3 = (List<VariableJava>)((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.peek()).value;
		tabla.getVariables().add(0, new VariableJava(e2, e1, TablaJava.AMBITO+1, null));
                e3.add(0, new VariableJava(e2, e1, TablaJava.AMBITO + 1, null)); RESULT = e3;
              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("LIST_PAR",8, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // LIST_PAR ::= 
            {
              List<VariableJava> RESULT =null;
		RESULT = new ArrayList<>();
              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("LIST_PAR",8, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // LIST_PARR ::= coma TYPE id LIST_PARR 
            {
              List<VariableJava> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-2)).right;
		Integer e1 = (Integer)((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-1)).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-1)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()).right;
		List<VariableJava> e3 = (List<VariableJava>)((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.peek()).value;
		tabla.getVariables().add(0, new VariableJava(e2, e1, TablaJava.AMBITO+1, null));
                e3.add(0, new VariableJava(e2, e1, TablaJava.AMBITO + 1, null)); RESULT = e3;
              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("LIST_PARR",9, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // LIST_PARR ::= 
            {
              List<VariableJava> RESULT =null;
		RESULT = new ArrayList<>();
              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("LIST_PARR",9, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // STATEMENTS_METODO ::= STATEMENT_METODO STATEMENTS_METODO 
            {
              List<Triplete> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-1)).right;
		List<Triplete> e1 = (List<Triplete>)((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()).right;
		List<Triplete> e2 = (List<Triplete>)((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.peek()).value;
		e1.addAll(e2); RESULT = e1;
              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("STATEMENTS_METODO",30, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // STATEMENTS_METODO ::= RETURN 
            {
              List<Triplete> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()).right;
		List<Triplete> e1 = (List<Triplete>)((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.peek()).value;
		RESULT = e1;
              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("STATEMENTS_METODO",30, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // STATEMENTS_METODO ::= breakk puntocoma 
            {
              List<Triplete> RESULT =null;
		if(cas==0){
                reportarSem("Break no esta dentro de un switch");
                } RESULT = new ArrayList<>();
              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("STATEMENTS_METODO",30, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // STATEMENTS_METODO ::= 
            {
              List<Triplete> RESULT =null;
		RESULT = new ArrayList<>();
              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("STATEMENTS_METODO",30, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // RETURN ::= returnn OPERACION_A puntocoma 
            {
              List<Triplete> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-1)).right;
		OperacionJava e1 = (OperacionJava)((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-1)).value;
		List<Triplete> tri = new ArrayList<>();
                        if(e1==null || e1.getTipo() != ret){
                                reportarSem("Return de tipo " + OperacionJava.obtenerTipo(e1.getTipo())
                                + " y se espera un tipo: " + OperacionJava.obtenerTipo(actual.getTIPO()));
                                RESULT = tri;}
                        else{tri.addAll(e1.mostrarTripletes()); tri.add(new Return(e1.getTriplete()));
                        RESULT = tri;}
              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("RETURN",33, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // STATEMENT_METODO ::= COMP_STATE 
            {
              List<Triplete> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()).right;
		List<Triplete> e1 = (List<Triplete>)((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.peek()).value;
		RESULT = e1;
              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("STATEMENT_METODO",31, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // STATEMENT_METODO ::= STATEMENT_LINE 
            {
              List<Triplete> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()).right;
		List<Triplete> e1 = (List<Triplete>)((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.peek()).value;
		RESULT = e1;
              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("STATEMENT_METODO",31, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // STATEMENT_METODO ::= error STATEMENT_METODO 
            {
              List<Triplete> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()).right;
		List<Triplete> e1 = (List<Triplete>)((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.peek()).value;
		RESULT = e1;
              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("STATEMENT_METODO",31, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // NT$3 ::= 
            {
              List<Triplete> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()).right;
		Integer e1 = (Integer)((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.peek()).value;
variables = new ArrayList<>();
              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("NT$3",49, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // DEF_VAR ::= TYPE NT$3 LIST_VAR 
            {
              List<Triplete> RESULT =null;
              // propagate RESULT from NT$3
                RESULT = (List<Triplete>) ((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-1)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-2)).right;
		Integer e1 = (Integer)((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()).right;
		List<VariableJava> e2 = (List<VariableJava>)((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.peek()).value;
		VariableJava.agregarTipo(variables, e1);
                        if(!tabla.addListVar(variables)){
                                reportarSem("Unas variables de las registradas ya existen");}
                                variables = new ArrayList<>();
                        RESULT = VariableJava.obtenerTripletes(e2, e1);
              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("DEF_VAR",32, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // LIST_VAR ::= LIST_VAR coma AS_VAR 
            {
              List<VariableJava> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-2)).right;
		List<VariableJava> e1 = (List<VariableJava>)((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()).right;
		VariableJava e2 = (VariableJava)((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.peek()).value;
		e1.add(e2); RESULT = e1;
              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("LIST_VAR",45, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // LIST_VAR ::= AS_VAR 
            {
              List<VariableJava> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()).right;
		VariableJava e1 = (VariableJava)((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.peek()).value;
		List<VariableJava> var = new ArrayList<>(); var.add(e1); RESULT = var;
              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("LIST_VAR",45, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // AS_VAR ::= id igual OPERACION_A 
            {
              VariableJava RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()).right;
		OperacionJava e2 = (OperacionJava)((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.peek()).value;
		variables.add(new VariableJava(e1, TablaJava.AMBITO, null));
        VariableJava var = new VariableJava(e1, TablaJava.AMBITO, new AsignarValor(new TerminalOperator(e1), e2.getTriplete(),null));
        var.getTripletes().addAll(e2.mostrarTripletes()); RESULT = var;
              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("AS_VAR",44, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // AS_VAR ::= id 
            {
              VariableJava RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.peek()).value;
		variables.add(new VariableJava(e1, TablaJava.AMBITO, null));
        RESULT = new VariableJava(e1, TablaJava.AMBITO, new AsignarValor(new TerminalOperator(e1), null, null));
              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("AS_VAR",44, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // COMP_STATE ::= WHILE 
            {
              List<Triplete> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()).right;
		List<Triplete> e1 = (List<Triplete>)((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.peek()).value;
		RESULT = e1;
              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("COMP_STATE",34, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // COMP_STATE ::= FOR 
            {
              List<Triplete> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()).right;
		List<Triplete> e1 = (List<Triplete>)((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.peek()).value;
		RESULT = e1;
              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("COMP_STATE",34, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // COMP_STATE ::= DO_WHILE 
            {
              List<Triplete> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()).right;
		List<Triplete> e1 = (List<Triplete>)((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.peek()).value;
		RESULT = e1;
              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("COMP_STATE",34, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // COMP_STATE ::= IF_ELSE 
            {
              List<Triplete> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()).right;
		List<Triplete> e1 = (List<Triplete>)((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.peek()).value;
		RESULT = e1;
              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("COMP_STATE",34, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // COMP_STATE ::= SWITCH 
            {
              List<Triplete> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()).right;
		List<Triplete> e1 = (List<Triplete>)((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.peek()).value;
		RESULT = e1;
              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("COMP_STATE",34, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // WHILE ::= whilee para CONDICION parc BLOQUE 
            {
              List<Triplete> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-2)).right;
		CondicionPrograma e1 = (CondicionPrograma)((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()).right;
		List<Triplete> e2 = (List<Triplete>)((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.peek()).value;
		RESULT = Else_Operator.WHILE(e1, e2);
              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("WHILE",23, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-4)), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // NT$4 ::= 
            {
              List<Triplete> RESULT =null;
TablaJava.AMBITO += 1;
              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("NT$4",50, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // BLOQUE ::= llavea NT$4 STATEMENTS_METODO llavec 
            {
              List<Triplete> RESULT =null;
              // propagate RESULT from NT$4
                RESULT = (List<Triplete>) ((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-2)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-1)).right;
		List<Triplete> e1 = (List<Triplete>)((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-1)).value;
		tabla.eliminarAmbito(TablaJava.AMBITO); TablaJava.AMBITO -= 1;
                                                RESULT = e1;
              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("BLOQUE",29, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // BLOQUE ::= STATEMENT_LINE 
            {
              List<Triplete> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()).right;
		List<Triplete> e1 = (List<Triplete>)((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.peek()).value;
		RESULT = e1;
              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("BLOQUE",29, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // FOR ::= forr para INICIO puntocoma CONDICION puntocoma STEP parc BLOQUE 
            {
              List<Triplete> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-6)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-6)).right;
		List<Triplete> e1 = (List<Triplete>)((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-6)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-4)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-4)).right;
		CondicionPrograma e2 = (CondicionPrograma)((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-4)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-2)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-2)).right;
		List<Triplete> e3 = (List<Triplete>)((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-2)).value;
		int e4left = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()).left;
		int e4right = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()).right;
		List<Triplete> e4 = (List<Triplete>)((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.peek()).value;
		RESULT = Else_Operator.FOR(e1, e3, e2, e4);
              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("FOR",24, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-8)), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // INICIO ::= THIS id 
            {
              List<Triplete> RESULT =null;
		int e0left = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-1)).left;
		int e0right = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-1)).right;
		Boolean e0 = (Boolean)((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-1)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.peek()).value;
		List<Triplete> tri = new ArrayList<>();
                        int num; if(e0){num = tabla.existeVarGlobal(new VariableJava(e1, TablaJava.AMBITO, null));}
                        else {num = tabla.existeVar(new VariableJava(e1, TablaJava.AMBITO, null));}
                        if(num == -1){
                        reportarSem("No existe variable con id: " + e1);
                                }
                        RESULT = new ArrayList<>();
              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("INICIO",39, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // NT$5 ::= 
            {
              List<Triplete> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()).right;
		Integer e1 = (Integer)((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.peek()).value;
TablaJava.AMBITO += 1; variables = new ArrayList<>();
              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("NT$5",51, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // INICIO ::= TYPE NT$5 AS_VAR 
            {
              List<Triplete> RESULT =null;
              // propagate RESULT from NT$5
                RESULT = (List<Triplete>) ((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-1)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-2)).right;
		Integer e1 = (Integer)((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()).right;
		VariableJava e2 = (VariableJava)((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.peek()).value;
		 List<Triplete> tri = new ArrayList<>(); VariableJava.agregarTipo(variables, e1);
                if(!tabla.addListVar(variables)){
                        reportarSem("Ya existe variable con id: " + e2.getId());
                        } TablaJava.AMBITO -= 1;
                ((AsignarValor) e2.getTriplete()).setTipo(OperacionJava.obtenerTipo(e1));
                tri.addAll(e2.mostrarTripletes()); RESULT = tri;
              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("INICIO",39, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // STEP ::= AS_VAR_LINE 
            {
              List<Triplete> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()).right;
		List<Triplete> e1 = (List<Triplete>)((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.peek()).value;
		RESULT = e1;
              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("STEP",40, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // STEP ::= OP_VAR 
            {
              List<Triplete> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()).right;
		List<Triplete> e1 = (List<Triplete>)((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.peek()).value;
		RESULT = e1;
              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("STEP",40, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // DO_WHILE ::= doo BLOQUE whilee para CONDICION parc puntocoma 
            {
              List<Triplete> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-5)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-5)).right;
		List<Triplete> e1 = (List<Triplete>)((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-5)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-2)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-2)).right;
		CondicionPrograma e2 = (CondicionPrograma)((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-2)).value;
		RESULT = Else_Operator.DOWHILE(e2, e1);
              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("DO_WHILE",25, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-6)), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // IF_ELSE ::= iff para CONDICION parc BLOQUE ELSEIF ELSE 
            {
              List<Triplete> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-4)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-4)).right;
		CondicionPrograma e1 = (CondicionPrograma)((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-4)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-2)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-2)).right;
		List<Triplete> e2 = (List<Triplete>)((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-2)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-1)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-1)).right;
		Else_Operator e3 = (Else_Operator)((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-1)).value;
		int e4left = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()).left;
		int e4right = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()).right;
		List<Triplete> e4 = (List<Triplete>)((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.peek()).value;
		e3.agregarIf(e1, e2); RESULT = e3.juntarTripletes(e4);
              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("IF_ELSE",26, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-6)), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // ELSEIF ::= ELSEIF elsee iff para CONDICION parc BLOQUE 
            {
              Else_Operator RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-6)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-6)).right;
		Else_Operator e1 = (Else_Operator)((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-6)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-2)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-2)).right;
		CondicionPrograma e2 = (CondicionPrograma)((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-2)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()).right;
		List<Triplete> e3 = (List<Triplete>)((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.peek()).value;
		RESULT = e1.agregarElseIf(e2, e3);
              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("ELSEIF",16, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-6)), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // ELSEIF ::= 
            {
              Else_Operator RESULT =null;
		RESULT = new Else_Operator();
              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("ELSEIF",16, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // ELSE ::= elsee BLOQUE 
            {
              List<Triplete> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()).right;
		List<Triplete> e1 = (List<Triplete>)((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.peek()).value;
		RESULT = e1;
              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("ELSE",27, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // ELSE ::= 
            {
              List<Triplete> RESULT =null;
		RESULT = null;
              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("ELSE",27, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // SWITCH ::= switchh para OPERACION_A parc llavea CASES DEFAULT llavec 
            {
              List<Triplete> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-5)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-5)).right;
		OperacionJava e1 = (OperacionJava)((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-5)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-2)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-2)).right;
		CasePrograma e2 = (CasePrograma)((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-2)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-1)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-1)).right;
		List<Triplete> e3 = (List<Triplete>)((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-1)).value;
		RESULT = e2.agregarDefault(e1, e3);
              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("SWITCH",35, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-7)), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // NT$6 ::= 
            {
              CasePrograma RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-3)).right;
		CasePrograma e1 = (CasePrograma)((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-1)).right;
		OperacionJava e2 = (OperacionJava)((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-1)).value;
cas++;
              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("NT$6",52, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // CASES ::= CASES casee OPERACION_A dosp NT$6 STATEMENTS_METODO 
            {
              CasePrograma RESULT =null;
              // propagate RESULT from NT$6
                RESULT = (CasePrograma) ((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-1)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-5)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-5)).right;
		CasePrograma e1 = (CasePrograma)((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-5)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-3)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-3)).right;
		OperacionJava e2 = (OperacionJava)((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-3)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()).right;
		List<Triplete> e3 = (List<Triplete>)((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.peek()).value;
		cas--; if(e2!=null){RESULT  = e1.agregarCase(e2, e3);}
              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("CASES",43, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-5)), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // CASES ::= 
            {
              CasePrograma RESULT =null;
		RESULT = new CasePrograma();
              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("CASES",43, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // NT$7 ::= 
            {
              List<Triplete> RESULT =null;
cas++;
              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("NT$7",53, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // DEFAULT ::= defaultt dosp NT$7 STATEMENTS_METODO 
            {
              List<Triplete> RESULT =null;
              // propagate RESULT from NT$7
                RESULT = (List<Triplete>) ((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-1)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()).right;
		List<Triplete> e1 = (List<Triplete>)((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.peek()).value;
		cas--;
                RESULT = e1;
              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("DEFAULT",36, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // DEFAULT ::= 
            {
              List<Triplete> RESULT =null;
		RESULT = new ArrayList<>();
              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("DEFAULT",36, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // STATEMENT_LINE ::= AS_VAR_LINE puntocoma 
            {
              List<Triplete> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-1)).right;
		List<Triplete> e1 = (List<Triplete>)((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-1)).value;
		RESULT = e1;
              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("STATEMENT_LINE",22, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // STATEMENT_LINE ::= DEF_VAR puntocoma 
            {
              List<Triplete> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-1)).right;
		List<Triplete> e1 = (List<Triplete>)((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-1)).value;
		RESULT = e1;
              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("STATEMENT_LINE",22, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // STATEMENT_LINE ::= WRITE puntocoma 
            {
              List<Triplete> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-1)).right;
		List<Triplete> e1 = (List<Triplete>)((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-1)).value;
		RESULT = e1;
              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("STATEMENT_LINE",22, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // STATEMENT_LINE ::= INPUT puntocoma 
            {
              List<Triplete> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-1)).right;
		OperacionJava e1 = (OperacionJava)((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-1)).value;
		AsignarValor vl = new AsignarValor(new AsignarTemporal(null, null, OperacionJava.obtenerTipo(e1)),null
                ,OperacionJava.obtenerTipo(e1)); 
                List<Triplete> tri = new ArrayList<>(); tri.add(vl); 
                tri.add(new AsignarValor(vl.getOperando1(), e1.getTriplete(), null)); RESULT = tri;
              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("STATEMENT_LINE",22, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // AS_VAR_LINE ::= THIS id igual OPERACION_A 
            {
              List<Triplete> RESULT =null;
		int e0left = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-3)).left;
		int e0right = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-3)).right;
		Boolean e0 = (Boolean)((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-3)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()).right;
		OperacionJava e2 = (OperacionJava)((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.peek()).value;
		 List<Triplete> tri = new ArrayList<>();
                        int num = tabla.existeVar(new VariableJava(e1, TablaJava.AMBITO, null)); 
                        if(num==-1){
                        reportarSem("Variable con id: "+ e1 + " no ha sido declarada");
                        } else if (num<e2.getTipo()) {
                        reportarSem("Variable con tipo: "+ OperacionJava.obtenerTipo(num) 
                        + " solo acepta tipo " + OperacionJava.obtenerTipo(e2.getTipo()));
                        }
                        else{tri.addAll(e2.mostrarTripletes());
                        tri.add(new AsignarValor(new TerminalOperator(e1), e2.getTriplete(), null));}
                        RESULT = tri;
              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("AS_VAR_LINE",42, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // WRITE ::= println para STRING parc 
            {
              List<Triplete> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-1)).right;
		List<Triplete> e1 = (List<Triplete>)((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-1)).value;
		e1.add(new Printf("\\n")); RESULT = e1;
              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("WRITE",37, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // WRITE ::= print para STRING parc 
            {
              List<Triplete> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-1)).right;
		List<Triplete> e1 = (List<Triplete>)((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-1)).value;
		RESULT = e1;
              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("WRITE",37, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // OP_VAR ::= THIS id masmas 
            {
              List<Triplete> RESULT =null;
		int e0left = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-2)).left;
		int e0right = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-2)).right;
		Boolean e0 = (Boolean)((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-2)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-1)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-1)).value;
		 List<Triplete> tri = new ArrayList<>();
                        int num; if(e0){num = tabla.existeVarGlobal(new VariableJava(e1, TablaJava.AMBITO, null));}
                        else {num = tabla.existeVar(new VariableJava(e1, TablaJava.AMBITO, null));}
                        if(num == -1){
                                reportarSem("Variable con id: "+ e1 + " no ha sido declarada");
                        }else{
                                SumOperator sum = new SumOperator(null, new TerminalOperator(e1), new TerminalOperator("1"), OperacionJava.obtenerTipo(num));
                                tri.add(sum); tri.add(new AsignarValor(new TerminalOperator(e1), sum, null));}
                                RESULT = tri;
              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("OP_VAR",41, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // OP_VAR ::= THIS id menosmenos 
            {
              List<Triplete> RESULT =null;
		int e0left = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-2)).left;
		int e0right = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-2)).right;
		Boolean e0 = (Boolean)((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-2)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-1)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-1)).value;
		 List<Triplete> tri = new ArrayList<>();
                        int num; if(e0){num = tabla.existeVarGlobal(new VariableJava(e1, TablaJava.AMBITO, null));}
                        else {num = tabla.existeVar(new VariableJava(e1, TablaJava.AMBITO, null));}
                        if(num == -1){
                                reportarSem("Variable con id: "+ e1 + " no ha sido declarada");
                        } else {
                                RestOperator rest = new RestOperator(null, new TerminalOperator(e1), new TerminalOperator("1"), OperacionJava.obtenerTipo(num));
                                tri.add(rest); tri.add(new AsignarValor(new TerminalOperator(e1), rest, null));}
                                RESULT = tri;
              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("OP_VAR",41, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // OPERACION_A ::= OPERACION_A mas OPERACION_M 
            {
              OperacionJava RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-2)).right;
		OperacionJava e1 = (OperacionJava)((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()).right;
		OperacionJava e2 = (OperacionJava)((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.peek()).value;
		if(e1!=null&&e2!=null){
                        RESULT = new OperacionJava(e1, e2,
                        new SumOperator(null, e1.getTriplete(), e2.getTriplete(), OperacionJava.obtenerTipo(e1, e2)));}
              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("OPERACION_A",10, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // OPERACION_A ::= OPERACION_A menos OPERACION_M 
            {
              OperacionJava RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-2)).right;
		OperacionJava e1 = (OperacionJava)((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()).right;
		OperacionJava e2 = (OperacionJava)((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.peek()).value;
		if(e1!=null&&e2!=null){
                        RESULT = new OperacionJava(e1, e2,
                        new RestOperator(null, e1.getTriplete(), e2.getTriplete(), OperacionJava.obtenerTipo(e1, e2)));}
              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("OPERACION_A",10, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // OPERACION_A ::= OPERACION_M 
            {
              OperacionJava RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()).right;
		OperacionJava e1 = (OperacionJava)((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.peek()).value;
		RESULT = e1;
              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("OPERACION_A",10, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // OPERACION_A ::= error OPERACION_M 
            {
              OperacionJava RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()).right;
		OperacionJava e1 = (OperacionJava)((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.peek()).value;
		RESULT = e1;
              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("OPERACION_A",10, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // OPERACION_M ::= OPERACION_M por OPERACION_U 
            {
              OperacionJava RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-2)).right;
		OperacionJava e1 = (OperacionJava)((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()).right;
		OperacionJava e2 = (OperacionJava)((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.peek()).value;
		if(e1!=null&&e2!=null){
                                RESULT = new OperacionJava(e1, e2,
                                new PorOperator(null, e1.getTriplete(), e2.getTriplete(), OperacionJava.obtenerTipo(e1, e2)));}
              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("OPERACION_M",11, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // OPERACION_M ::= OPERACION_M div OPERACION_U 
            {
              OperacionJava RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-2)).right;
		OperacionJava e1 = (OperacionJava)((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()).right;
		OperacionJava e2 = (OperacionJava)((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.peek()).value;
		if(e1!=null&&e2!=null){
                                RESULT = new OperacionJava(e1, e2,
                                new DivOperator(null, e1.getTriplete(), e2.getTriplete(), OperacionJava.obtenerTipo(e1, e2)));}
              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("OPERACION_M",11, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // OPERACION_M ::= OPERACION_M mod OPERACION_U 
            {
              OperacionJava RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-2)).right;
		OperacionJava e1 = (OperacionJava)((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()).right;
		OperacionJava e2 = (OperacionJava)((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.peek()).value;
		if(e1!=null&&e2!=null){
                                RESULT = new OperacionJava(e1, e2,
                               new ModOperator(null, e1.getTriplete(), e2.getTriplete(), OperacionJava.obtenerTipo(e1, e2)));}
              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("OPERACION_M",11, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // OPERACION_M ::= OPERACION_U 
            {
              OperacionJava RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()).right;
		OperacionJava e1 = (OperacionJava)((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.peek()).value;
		RESULT = e1;
              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("OPERACION_M",11, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // OPERACION_U ::= menos OPERACION_U 
            {
              OperacionJava RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()).right;
		OperacionJava e1 = (OperacionJava)((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.peek()).value;
		RESULT = new OperacionJava(new OperacionJava(TablaJava.INT, new TerminalOperator("0")),
                        e1, new RestOperator(null, new TerminalOperator("0"), e1.getTriplete(), OperacionJava.obtenerTipo(e1)));
              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("OPERACION_U",12, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // OPERACION_U ::= mas OPERACION_U 
            {
              OperacionJava RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()).right;
		OperacionJava e1 = (OperacionJava)((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.peek()).value;
		RESULT = e1;
              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("OPERACION_U",12, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // OPERACION_U ::= ATOM 
            {
              OperacionJava RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()).right;
		OperacionJava e1 = (OperacionJava)((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.peek()).value;
		RESULT = e1;
              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("OPERACION_U",12, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // ATOM ::= THIS id 
            {
              OperacionJava RESULT =null;
		int e0left = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-1)).left;
		int e0right = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-1)).right;
		Boolean e0 = (Boolean)((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-1)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.peek()).value;
		int num;
                        if(e0){num = tabla.existeVarGlobal(new VariableJava(e1, TablaJava.AMBITO, 
                        new TerminalOperator(e1)));}
                        else {num = tabla.existeVar(new VariableJava(e1, TablaJava.AMBITO,
                        new TerminalOperator(e1)));}
                        if(num == -1){
                                reportarSem("Variable con id: "+ e1 + " no ha sido declarada");
                        } else {
                                RESULT = new OperacionJava(num, new TerminalOperator(e1));}
              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("ATOM",13, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // ATOM ::= entero 
            {
              OperacionJava RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.peek()).value;
		RESULT = new OperacionJava(TablaJava.INT, new TerminalOperator(e1));
              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("ATOM",13, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // ATOM ::= decimal 
            {
              OperacionJava RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.peek()).value;
		RESULT = new OperacionJava(TablaJava.FLOAT, new TerminalOperator(e1));
              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("ATOM",13, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // ATOM ::= character 
            {
              OperacionJava RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.peek()).value;
		RESULT = new OperacionJava(TablaJava.CHAR, new TerminalOperator(e1));
              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("ATOM",13, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // ATOM ::= para OPERACION_A parc 
            {
              OperacionJava RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-1)).right;
		OperacionJava e1 = (OperacionJava)((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-1)).value;
		RESULT = e1;
              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("ATOM",13, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // ATOM ::= INPUT 
            {
              OperacionJava RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()).right;
		OperacionJava e1 = (OperacionJava)((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.peek()).value;
		RESULT = e1;
              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("ATOM",13, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // THIS ::= thiss punto 
            {
              Boolean RESULT =null;
		RESULT = true;
              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("THIS",7, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // THIS ::= 
            {
              Boolean RESULT =null;
		RESULT = false;
              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("THIS",7, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // CONDICION ::= CONDICION orr AND 
            {
              CondicionPrograma RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-2)).right;
		CondicionPrograma e1 = (CondicionPrograma)((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()).right;
		CondicionPrograma e2 = (CondicionPrograma)((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.peek()).value;
		RESULT = IfPrograma.OR(e1, e2);
              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("CONDICION",19, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // CONDICION ::= AND 
            {
              CondicionPrograma RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()).right;
		CondicionPrograma e1 = (CondicionPrograma)((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.peek()).value;
		RESULT = e1;
              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("CONDICION",19, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // AND ::= AND andd NOT 
            {
              CondicionPrograma RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-2)).right;
		CondicionPrograma e1 = (CondicionPrograma)((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()).right;
		CondicionPrograma e2 = (CondicionPrograma)((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.peek()).value;
		RESULT = IfPrograma.AND(e1, e2);
              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("AND",18, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // AND ::= NOT 
            {
              CondicionPrograma RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()).right;
		CondicionPrograma e1 = (CondicionPrograma)((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.peek()).value;
		RESULT = e1;
              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("AND",18, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // NOT ::= nott NOT 
            {
              CondicionPrograma RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()).right;
		CondicionPrograma e1 = (CondicionPrograma)((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.peek()).value;
		RESULT = IfPrograma.NOT(e1);
              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("NOT",17, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // NOT ::= COMPARACION 
            {
              CondicionPrograma RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()).right;
		Triplete e1 = (Triplete)((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.peek()).value;
		RESULT = new IfPrograma(new If_Operator(e1, new Etiqueta()), ((CondicionalOperator)e1).getTripletes());
              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("NOT",17, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // NOT ::= para CONDICION parc 
            {
              CondicionPrograma RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-1)).right;
		CondicionPrograma e1 = (CondicionPrograma)((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-1)).value;
		RESULT = e1;
              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("NOT",17, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // COMPARACION ::= OPERACION_A igig OPERACION_A 
            {
              Triplete RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-2)).right;
		OperacionJava e1 = (OperacionJava)((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()).right;
		OperacionJava e2 = (OperacionJava)((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.peek()).value;
		RESULT = new IgualOperator(e1.getTriplete(), e2.getTriplete(),
                e1.getTripletes(), e2.getTripletes());
              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("COMPARACION",20, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // COMPARACION ::= OPERACION_A noigual OPERACION_A 
            {
              Triplete RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-2)).right;
		OperacionJava e1 = (OperacionJava)((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()).right;
		OperacionJava e2 = (OperacionJava)((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.peek()).value;
		RESULT = new NoIgualOperator(e1.getTriplete(), e2.getTriplete(),
                e1.getTripletes(), e2.getTripletes());
              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("COMPARACION",20, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // COMPARACION ::= OPERACION_A menor OPERACION_A 
            {
              Triplete RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-2)).right;
		OperacionJava e1 = (OperacionJava)((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()).right;
		OperacionJava e2 = (OperacionJava)((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.peek()).value;
		RESULT = new MenorOperator(e1.getTriplete(), e2.getTriplete(),
                e1.getTripletes(), e2.getTripletes());
              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("COMPARACION",20, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // COMPARACION ::= OPERACION_A menorig OPERACION_A 
            {
              Triplete RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-2)).right;
		OperacionJava e1 = (OperacionJava)((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()).right;
		OperacionJava e2 = (OperacionJava)((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.peek()).value;
		RESULT = new MenorIgOperator(e1.getTriplete(), e2.getTriplete(),
                e1.getTripletes(), e2.getTripletes());
              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("COMPARACION",20, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // COMPARACION ::= OPERACION_A mayor OPERACION_A 
            {
              Triplete RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-2)).right;
		OperacionJava e1 = (OperacionJava)((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()).right;
		OperacionJava e2 = (OperacionJava)((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.peek()).value;
		RESULT = new MayorOperator(e1.getTriplete(), e2.getTriplete(),
                e1.getTripletes(), e2.getTripletes());
              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("COMPARACION",20, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // COMPARACION ::= OPERACION_A mayorig OPERACION_A 
            {
              Triplete RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-2)).right;
		OperacionJava e1 = (OperacionJava)((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()).right;
		OperacionJava e2 = (OperacionJava)((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.peek()).value;
		RESULT = new MayorIgOperator(e1.getTriplete(), e2.getTriplete(),
                e1.getTripletes(), e2.getTripletes());
              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("COMPARACION",20, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // STRING ::= STRING mas EXPR 
            {
              List<Triplete> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-2)).right;
		List<Triplete> e1 = (List<Triplete>)((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()).right;
		OperacionJava e2 = (OperacionJava)((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.peek()).value;
		e1.addAll(e2.getTripletes()); e1.add(new Printf(Input.tipoJAVA(e2), e2.getTriplete())); RESULT = e1;
              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("STRING",38, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // STRING ::= STRING mas string 
            {
              List<Triplete> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-2)).right;
		List<Triplete> e1 = (List<Triplete>)((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.peek()).value;
		e1.add(new Printf(e2)); RESULT = e1;
              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("STRING",38, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // STRING ::= EXPR 
            {
              List<Triplete> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()).right;
		OperacionJava e1 = (OperacionJava)((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.peek()).value;
		List<Triplete> tri = new ArrayList<>(); tri.addAll(e1.getTripletes());
                tri.add(new Printf(Input.tipoJAVA(e1), e1.getTriplete()));
                RESULT = tri;
              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("STRING",38, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // STRING ::= string 
            {
              List<Triplete> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.peek()).value;
		List<Triplete> tri = new ArrayList<>(); tri.add(new Printf(e1));
                RESULT = tri;
              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("STRING",38, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // EXPR ::= INPUT 
            {
              OperacionJava RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()).right;
		OperacionJava e1 = (OperacionJava)((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.peek()).value;
		RESULT = e1;
              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("EXPR",14, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // EXPR ::= THIS id 
            {
              OperacionJava RESULT =null;
		int e0left = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-1)).left;
		int e0right = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-1)).right;
		Boolean e0 = (Boolean)((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-1)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.peek()).value;
		int num; if(e0){num = tabla.existeVarGlobal(new VariableJava(e1, TablaJava.AMBITO, null));}
                        else {num = tabla.existeVar(new VariableJava(e1, TablaJava.AMBITO, null));}
                        if(num == -1){
                                reportarSem("Variable con id: "+ e1 + " no ha sido declarada");
                        }else{
                                RESULT = new OperacionJava(num, new TerminalOperator(e1));}
              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("EXPR",14, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // EXPR ::= entero 
            {
              OperacionJava RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.peek()).value;
		RESULT = new OperacionJava(TablaJava.INT, new TerminalOperator(e1));
              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("EXPR",14, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // EXPR ::= decimal 
            {
              OperacionJava RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.peek()).value;
		RESULT = new OperacionJava(TablaJava.FLOAT, new TerminalOperator(e1));
              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("EXPR",14, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // EXPR ::= character 
            {
              OperacionJava RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.peek()).value;
		RESULT = new OperacionJava(TablaJava.CHAR, new TerminalOperator(e1));
              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("EXPR",14, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // EXPR ::= para OPERACION_A parc 
            {
              OperacionJava RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-1)).right;
		OperacionJava e1 = (OperacionJava)((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-1)).value;
		RESULT = e1;
              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("EXPR",14, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // INPUT ::= charinput para string parc 
            {
              OperacionJava RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-1)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-1)).value;
		OperacionJava op = new OperacionJava(TablaJava.CHAR,
                                new Input("%c"));
                                op.getTripletes().add(new Printf(e1));
                                RESULT = op;
              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("INPUT",15, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // INPUT ::= intinput para string parc 
            {
              OperacionJava RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-1)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-1)).value;
		OperacionJava op = new OperacionJava(TablaJava.INT,
                                new Input("%d"));
                                op.getTripletes().add(new Printf(e1));
                                RESULT = op;
              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("INPUT",15, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // INPUT ::= floatinput para string parc 
            {
              OperacionJava RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-1)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-1)).value;
		OperacionJava op = new OperacionJava(TablaJava.FLOAT,
                                new Input("%f"));
                                op.getTripletes().add(new Printf(e1));
                                RESULT = op;
              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("INPUT",15, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$SintaxisJava$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$SintaxisJava$do_action(
    int                        CUP$SintaxisJava$act_num,
    java_cup.runtime.lr_parser CUP$SintaxisJava$parser,
    java.util.Stack            CUP$SintaxisJava$stack,
    int                        CUP$SintaxisJava$top)
    throws java.lang.Exception
    {
              return CUP$SintaxisJava$do_action_part00000000(
                               CUP$SintaxisJava$act_num,
                               CUP$SintaxisJava$parser,
                               CUP$SintaxisJava$stack,
                               CUP$SintaxisJava$top);
    }
}

}
