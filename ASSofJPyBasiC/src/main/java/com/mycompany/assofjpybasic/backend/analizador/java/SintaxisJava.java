
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package com.mycompany.assofjpybasic.backend.analizador.java;

import java_cup.runtime.*;
import com.mycompany.assofjpybasic.backend.semantica.java.*;
import java.util.ArrayList;
import java.util.List;
import com.mycompany.assofjpybasic.backend.semantica.java.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class SintaxisJava extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return SintaxisJavaSym.class;
}

  /** Default constructor. */
  @Deprecated
  public SintaxisJava() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public SintaxisJava(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public SintaxisJava(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\152\000\002\002\004\000\002\002\003\000\002\003" +
    "\004\000\002\003\002\000\002\057\002\000\002\004\011" +
    "\000\002\005\004\000\002\005\002\000\002\006\003\000" +
    "\002\006\004\000\002\060\002\000\002\007\014\000\002" +
    "\010\003\000\002\010\003\000\002\011\003\000\002\011" +
    "\003\000\002\011\003\000\002\012\005\000\002\012\002" +
    "\000\002\017\006\000\002\017\002\000\002\020\004\000" +
    "\002\020\002\000\002\021\003\000\002\021\003\000\002" +
    "\061\002\000\002\022\005\000\002\023\005\000\002\023" +
    "\003\000\002\024\005\000\002\024\003\000\002\025\003" +
    "\000\002\025\003\000\002\025\003\000\002\025\003\000" +
    "\002\025\003\000\002\026\007\000\002\062\002\000\002" +
    "\027\006\000\002\027\003\000\002\030\013\000\002\031" +
    "\003\000\002\031\004\000\002\032\003\000\002\032\003" +
    "\000\002\033\011\000\002\034\011\000\002\035\011\000" +
    "\002\035\002\000\002\036\004\000\002\036\002\000\002" +
    "\037\012\000\002\040\004\000\002\040\002\000\002\041" +
    "\006\000\002\042\005\000\002\042\002\000\002\043\004" +
    "\000\002\043\004\000\002\043\004\000\002\043\004\000" +
    "\002\056\005\000\002\044\006\000\002\044\006\000\002" +
    "\045\004\000\002\045\004\000\002\013\005\000\002\013" +
    "\005\000\002\013\003\000\002\014\005\000\002\014\005" +
    "\000\002\014\005\000\002\014\003\000\002\015\004\000" +
    "\002\015\004\000\002\015\003\000\002\016\003\000\002" +
    "\016\003\000\002\016\003\000\002\016\003\000\002\016" +
    "\005\000\002\047\005\000\002\047\003\000\002\050\005" +
    "\000\002\050\003\000\002\051\004\000\002\051\003\000" +
    "\002\052\005\000\002\052\005\000\002\052\005\000\002" +
    "\052\005\000\002\052\005\000\002\052\005\000\002\052" +
    "\005\000\002\053\005\000\002\053\003\000\002\046\003" +
    "\000\002\046\003\000\002\046\003\000\002\046\003\000" +
    "\002\046\005\000\002\054\003\000\002\054\003\000\002" +
    "\055\006\000\002\055\006\000\002\055\006" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\324\000\006\002\ufffe\004\ufffe\001\002\000\004\002" +
    "\326\001\002\000\006\002\000\004\006\001\002\000\004" +
    "\005\010\001\002\000\006\002\uffff\004\uffff\001\002\000" +
    "\004\061\011\001\002\000\004\045\012\001\002\000\014" +
    "\004\ufffd\007\ufffd\010\ufffd\011\ufffd\046\ufffd\001\002\000" +
    "\014\004\ufffa\007\ufffa\010\ufffa\011\ufffa\046\ufffa\001\002" +
    "\000\014\004\025\007\015\010\021\011\022\046\020\001" +
    "\002\000\004\061\ufff3\001\002\000\014\004\ufffb\007\ufffb" +
    "\010\ufffb\011\ufffb\046\ufffb\001\002\000\004\061\uffe8\001" +
    "\002\000\006\002\ufffc\004\ufffc\001\002\000\004\061\ufff2" +
    "\001\002\000\004\061\ufff1\001\002\000\004\050\320\001" +
    "\002\000\014\004\ufff9\007\ufff9\010\ufff9\011\ufff9\046\ufff9" +
    "\001\002\000\012\006\027\007\015\010\021\011\022\001" +
    "\002\000\004\061\031\001\002\000\004\061\ufff5\001\002" +
    "\000\004\061\ufff4\001\002\000\004\043\032\001\002\000" +
    "\012\007\015\010\021\011\022\044\uffef\001\002\000\004" +
    "\044\043\001\002\000\004\061\035\001\002\000\006\044" +
    "\uffed\047\037\001\002\000\004\044\ufff0\001\002\000\010" +
    "\007\015\010\021\011\022\001\002\000\004\061\041\001" +
    "\002\000\006\044\uffed\047\037\001\002\000\004\044\uffee" +
    "\001\002\000\004\045\044\001\002\000\040\007\ufff7\010" +
    "\ufff7\011\ufff7\015\ufff7\020\ufff7\021\ufff7\022\ufff7\023\ufff7" +
    "\046\ufff7\051\ufff7\052\ufff7\053\ufff7\054\ufff7\055\ufff7\061" +
    "\ufff7\001\002\000\040\007\uffeb\010\uffeb\011\uffeb\015\uffeb" +
    "\020\uffeb\021\uffeb\022\uffeb\023\uffeb\046\uffeb\051\uffeb\052" +
    "\uffeb\053\uffeb\054\uffeb\055\uffeb\061\uffeb\001\002\000\040" +
    "\007\015\010\021\011\022\015\067\020\076\021\061\022" +
    "\071\023\055\046\074\051\062\052\052\053\072\054\050" +
    "\055\051\061\065\001\002\000\004\050\317\001\002\000" +
    "\004\043\314\001\002\000\004\043\311\001\002\000\004" +
    "\043\306\001\002\000\004\050\305\001\002\000\044\007" +
    "\uffe2\010\uffe2\011\uffe2\015\uffe2\020\uffe2\021\uffe2\022\uffe2" +
    "\023\uffe2\024\uffe2\026\uffe2\046\uffe2\051\uffe2\052\uffe2\053" +
    "\uffe2\054\uffe2\055\uffe2\061\uffe2\001\002\000\004\043\266" +
    "\001\002\000\044\007\uffde\010\uffde\011\uffde\015\uffde\020" +
    "\uffde\021\uffde\022\uffde\023\uffde\024\uffde\026\uffde\046\uffde" +
    "\051\uffde\052\uffde\053\uffde\054\uffde\055\uffde\061\uffde\001" +
    "\002\000\004\050\265\001\002\000\044\007\uffdf\010\uffdf" +
    "\011\uffdf\015\uffdf\020\uffdf\021\uffdf\022\uffdf\023\uffdf\024" +
    "\uffdf\026\uffdf\046\uffdf\051\uffdf\052\uffdf\053\uffdf\054\uffdf" +
    "\055\uffdf\061\uffdf\001\002\000\004\043\261\001\002\000" +
    "\004\043\244\001\002\000\044\007\uffe9\010\uffe9\011\uffe9" +
    "\015\uffe9\020\uffe9\021\uffe9\022\uffe9\023\uffe9\024\uffe9\026" +
    "\uffe9\046\uffe9\051\uffe9\052\uffe9\053\uffe9\054\uffe9\055\uffe9" +
    "\061\uffe9\001\002\000\044\007\uffea\010\uffea\011\uffea\015" +
    "\uffea\020\uffea\021\uffea\022\uffea\023\uffea\024\uffea\026\uffea" +
    "\046\uffea\051\uffea\052\uffea\053\uffea\054\uffea\055\uffea\061" +
    "\uffea\001\002\000\004\056\202\001\002\000\044\007\uffe0" +
    "\010\uffe0\011\uffe0\015\uffe0\020\uffe0\021\uffe0\022\uffe0\023" +
    "\uffe0\024\uffe0\026\uffe0\046\uffe0\051\uffe0\052\uffe0\053\uffe0" +
    "\054\uffe0\055\uffe0\061\uffe0\001\002\000\004\043\227\001" +
    "\002\000\004\050\226\001\002\000\026\007\015\010\021" +
    "\011\022\045\207\051\062\052\052\053\072\054\050\055" +
    "\051\061\065\001\002\000\004\043\215\001\002\000\044" +
    "\007\uffe1\010\uffe1\011\uffe1\015\uffe1\020\uffe1\021\uffe1\022" +
    "\uffe1\023\uffe1\024\uffe1\026\uffe1\046\uffe1\051\uffe1\052\uffe1" +
    "\053\uffe1\054\uffe1\055\uffe1\061\uffe1\001\002\000\014\004" +
    "\ufff6\007\ufff6\010\ufff6\011\ufff6\046\ufff6\001\002\000\040" +
    "\007\uffec\010\uffec\011\uffec\015\uffec\020\uffec\021\uffec\022" +
    "\uffec\023\uffec\046\uffec\051\uffec\052\uffec\053\uffec\054\uffec" +
    "\055\uffec\061\uffec\001\002\000\004\043\077\001\002\000" +
    "\012\007\015\010\021\011\022\061\102\001\002\000\004" +
    "\050\141\001\002\000\004\061\104\001\002\000\004\050" +
    "\uffd8\001\002\000\004\050\uffd7\001\002\000\010\047\uffe3" +
    "\050\uffe3\056\105\001\002\000\026\036\121\037\112\043" +
    "\122\053\072\054\050\055\051\061\106\062\117\063\111" +
    "\064\115\001\002\000\044\012\uffb5\013\uffb5\025\uffb5\030" +
    "\uffb5\031\uffb5\032\uffb5\033\uffb5\034\uffb5\035\uffb5\036\uffb5" +
    "\037\uffb5\040\uffb5\041\uffb5\042\uffb5\044\uffb5\047\uffb5\050" +
    "\uffb5\001\002\000\012\036\124\044\uff9c\047\uff9c\050\uff9c" +
    "\001\002\000\044\012\uffb9\013\uffb9\025\uffb9\030\uffb9\031" +
    "\uffb9\032\uffb9\033\uffb9\034\uffb9\035\uffb9\036\uffb9\037\uffb9" +
    "\040\uffb9\041\uffb9\042\uffb9\044\uffb9\047\uffb9\050\uffb9\001" +
    "\002\000\044\012\uffb3\013\uffb3\025\uffb3\030\uffb3\031\uffb3" +
    "\032\uffb3\033\uffb3\034\uffb3\035\uffb3\036\uffb3\037\uffb3\040" +
    "\uffb3\041\uffb3\042\uffb3\044\uffb3\047\uffb3\050\uffb3\001\002" +
    "\000\020\036\121\037\112\043\122\061\106\062\117\063" +
    "\111\064\115\001\002\000\010\044\uff9b\047\uff9b\050\uff9b" +
    "\001\002\000\044\012\uffb6\013\uffb6\025\uffb6\030\uffb6\031" +
    "\uffb6\032\uffb6\033\uffb6\034\uffb6\035\uffb6\036\uffb6\037\uffb6" +
    "\040\uffb6\041\uffb6\042\uffb6\044\uffb6\047\uffb6\050\uffb6\001" +
    "\002\000\044\012\uffb2\013\uffb2\025\uffb2\030\uffb2\031\uffb2" +
    "\032\uffb2\033\uffb2\034\uffb2\035\uffb2\036\uffb2\037\uffb2\040" +
    "\uffb2\041\uffb2\042\uffb2\044\uffb2\047\uffb2\050\uffb2\001\002" +
    "\000\044\012\uffbd\013\uffbd\025\uffbd\030\uffbd\031\uffbd\032" +
    "\uffbd\033\uffbd\034\uffbd\035\uffbd\036\uffbd\037\136\040\127" +
    "\041\131\042\130\044\uffbd\047\uffbd\050\uffbd\001\002\000" +
    "\044\012\uffb4\013\uffb4\025\uffb4\030\uffb4\031\uffb4\032\uffb4" +
    "\033\uffb4\034\uffb4\035\uffb4\036\uffb4\037\uffb4\040\uffb4\041" +
    "\uffb4\042\uffb4\044\uffb4\047\uffb4\050\uffb4\001\002\000\006" +
    "\047\uffe4\050\uffe4\001\002\000\020\036\121\037\112\043" +
    "\122\061\106\062\117\063\111\064\115\001\002\000\020" +
    "\036\121\037\112\043\122\061\106\062\117\063\111\064" +
    "\115\001\002\000\006\036\124\044\125\001\002\000\020" +
    "\036\121\037\112\043\122\061\106\062\117\063\111\064" +
    "\115\001\002\000\044\012\uffb1\013\uffb1\025\uffb1\030\uffb1" +
    "\031\uffb1\032\uffb1\033\uffb1\034\uffb1\035\uffb1\036\uffb1\037" +
    "\uffb1\040\uffb1\041\uffb1\042\uffb1\044\uffb1\047\uffb1\050\uffb1" +
    "\001\002\000\042\012\uffbf\013\uffbf\025\uffbf\030\uffbf\031" +
    "\uffbf\032\uffbf\033\uffbf\034\uffbf\035\uffbf\036\uffbf\040\127" +
    "\041\131\042\130\044\uffbf\047\uffbf\050\uffbf\001\002\000" +
    "\020\036\121\037\112\043\122\061\106\062\117\063\111" +
    "\064\115\001\002\000\020\036\121\037\112\043\122\061" +
    "\106\062\117\063\111\064\115\001\002\000\020\036\121" +
    "\037\112\043\122\061\106\062\117\063\111\064\115\001" +
    "\002\000\044\012\uffbb\013\uffbb\025\uffbb\030\uffbb\031\uffbb" +
    "\032\uffbb\033\uffbb\034\uffbb\035\uffbb\036\uffbb\037\uffbb\040" +
    "\uffbb\041\uffbb\042\uffbb\044\uffbb\047\uffbb\050\uffbb\001\002" +
    "\000\044\012\uffba\013\uffba\025\uffba\030\uffba\031\uffba\032" +
    "\uffba\033\uffba\034\uffba\035\uffba\036\uffba\037\uffba\040\uffba" +
    "\041\uffba\042\uffba\044\uffba\047\uffba\050\uffba\001\002\000" +
    "\044\012\uffbc\013\uffbc\025\uffbc\030\uffbc\031\uffbc\032\uffbc" +
    "\033\uffbc\034\uffbc\035\uffbc\036\uffbc\037\uffbc\040\uffbc\041" +
    "\uffbc\042\uffbc\044\uffbc\047\uffbc\050\uffbc\001\002\000\044" +
    "\012\uffb7\013\uffb7\025\uffb7\030\uffb7\031\uffb7\032\uffb7\033" +
    "\uffb7\034\uffb7\035\uffb7\036\uffb7\037\uffb7\040\uffb7\041\uffb7" +
    "\042\uffb7\044\uffb7\047\uffb7\050\uffb7\001\002\000\020\036" +
    "\121\037\112\043\122\061\106\062\117\063\111\064\115" +
    "\001\002\000\042\012\uffbe\013\uffbe\025\uffbe\030\uffbe\031" +
    "\uffbe\032\uffbe\033\uffbe\034\uffbe\035\uffbe\036\uffbe\040\127" +
    "\041\131\042\130\044\uffbe\047\uffbe\050\uffbe\001\002\000" +
    "\044\012\uffb8\013\uffb8\025\uffb8\030\uffb8\031\uffb8\032\uffb8" +
    "\033\uffb8\034\uffb8\035\uffb8\036\uffb8\037\uffb8\040\uffb8\041" +
    "\uffb8\042\uffb8\044\uffb8\047\uffb8\050\uffb8\001\002\000\022" +
    "\014\143\036\121\037\112\043\150\061\106\062\117\063" +
    "\111\064\115\001\002\000\012\012\uffab\013\uffab\044\uffab" +
    "\050\uffab\001\002\000\022\014\143\036\121\037\112\043" +
    "\150\061\106\062\117\063\111\064\115\001\002\000\012" +
    "\012\156\013\uffaf\044\uffaf\050\uffaf\001\002\000\020\030" +
    "\162\031\163\032\165\033\164\034\160\035\161\036\124" +
    "\001\002\000\012\012\uffad\013\uffad\044\uffad\050\uffad\001" +
    "\002\000\006\013\154\050\174\001\002\000\022\014\143" +
    "\036\121\037\112\043\150\061\106\062\117\063\111\064" +
    "\115\001\002\000\022\030\162\031\163\032\165\033\164" +
    "\034\160\035\161\036\124\044\125\001\002\000\006\013" +
    "\154\044\153\001\002\000\012\012\uffa4\013\uffa4\044\uffa4" +
    "\050\uffa4\001\002\000\022\014\143\036\121\037\112\043" +
    "\150\061\106\062\117\063\111\064\115\001\002\000\012" +
    "\012\156\013\uffb0\044\uffb0\050\uffb0\001\002\000\022\014" +
    "\143\036\121\037\112\043\150\061\106\062\117\063\111" +
    "\064\115\001\002\000\012\012\uffae\013\uffae\044\uffae\050" +
    "\uffae\001\002\000\020\036\121\037\112\043\122\061\106" +
    "\062\117\063\111\064\115\001\002\000\020\036\121\037" +
    "\112\043\122\061\106\062\117\063\111\064\115\001\002" +
    "\000\020\036\121\037\112\043\122\061\106\062\117\063" +
    "\111\064\115\001\002\000\020\036\121\037\112\043\122" +
    "\061\106\062\117\063\111\064\115\001\002\000\020\036" +
    "\121\037\112\043\122\061\106\062\117\063\111\064\115" +
    "\001\002\000\020\036\121\037\112\043\122\061\106\062" +
    "\117\063\111\064\115\001\002\000\014\012\uffa7\013\uffa7" +
    "\036\124\044\uffa7\050\uffa7\001\002\000\014\012\uffa6\013" +
    "\uffa6\036\124\044\uffa6\050\uffa6\001\002\000\014\012\uffa8" +
    "\013\uffa8\036\124\044\uffa8\050\uffa8\001\002\000\014\012" +
    "\uffa9\013\uffa9\036\124\044\uffa9\050\uffa9\001\002\000\014" +
    "\012\uffaa\013\uffaa\036\124\044\uffaa\050\uffaa\001\002\000" +
    "\014\012\uffa5\013\uffa5\036\124\044\uffa5\050\uffa5\001\002" +
    "\000\004\061\200\001\002\000\004\044\205\001\002\000" +
    "\004\044\uffd6\001\002\000\004\044\uffd5\001\002\000\010" +
    "\056\202\057\201\060\203\001\002\000\004\044\uffc1\001" +
    "\002\000\026\036\121\037\112\043\122\053\072\054\050" +
    "\055\051\061\106\062\117\063\111\064\115\001\002\000" +
    "\004\044\uffc0\001\002\000\006\044\uffc4\050\uffc4\001\002" +
    "\000\026\007\015\010\021\011\022\045\207\051\062\052" +
    "\052\053\072\054\050\055\051\061\065\001\002\000\046" +
    "\007\uffda\010\uffda\011\uffda\015\uffda\016\uffda\020\uffda\021" +
    "\uffda\022\uffda\023\uffda\024\uffda\026\uffda\046\uffda\051\uffda" +
    "\052\uffda\053\uffda\054\uffda\055\uffda\061\uffda\001\002\000" +
    "\040\007\uffdc\010\uffdc\011\uffdc\015\uffdc\020\uffdc\021\uffdc" +
    "\022\uffdc\023\uffdc\046\uffdc\051\uffdc\052\uffdc\053\uffdc\054" +
    "\uffdc\055\uffdc\061\uffdc\001\002\000\044\007\uffd9\010\uffd9" +
    "\011\uffd9\015\uffd9\020\uffd9\021\uffd9\022\uffd9\023\uffd9\024" +
    "\uffd9\026\uffd9\046\uffd9\051\uffd9\052\uffd9\053\uffd9\054\uffd9" +
    "\055\uffd9\061\uffd9\001\002\000\040\007\uffeb\010\uffeb\011" +
    "\uffeb\015\uffeb\020\uffeb\021\uffeb\022\uffeb\023\uffeb\046\uffeb" +
    "\051\uffeb\052\uffeb\053\uffeb\054\uffeb\055\uffeb\061\uffeb\001" +
    "\002\000\040\007\015\010\021\011\022\015\067\020\076" +
    "\021\061\022\071\023\055\046\213\051\062\052\052\053" +
    "\072\054\050\055\051\061\065\001\002\000\046\007\uffdb" +
    "\010\uffdb\011\uffdb\015\uffdb\016\uffdb\020\uffdb\021\uffdb\022" +
    "\uffdb\023\uffdb\024\uffdb\026\uffdb\046\uffdb\051\uffdb\052\uffdb" +
    "\053\uffdb\054\uffdb\055\uffdb\061\uffdb\001\002\000\012\012" +
    "\uffac\013\uffac\044\uffac\050\uffac\001\002\000\004\065\216" +
    "\001\002\000\004\044\217\001\002\000\010\044\uff9a\047" +
    "\uff9a\050\uff9a\001\002\000\004\021\221\001\002\000\004" +
    "\043\222\001\002\000\022\014\143\036\121\037\112\043" +
    "\150\061\106\062\117\063\111\064\115\001\002\000\006" +
    "\013\154\044\224\001\002\000\004\050\225\001\002\000" +
    "\044\007\uffd4\010\uffd4\011\uffd4\015\uffd4\020\uffd4\021\uffd4" +
    "\022\uffd4\023\uffd4\024\uffd4\026\uffd4\046\uffd4\051\uffd4\052" +
    "\uffd4\053\uffd4\054\uffd4\055\uffd4\061\uffd4\001\002\000\046" +
    "\007\uffc8\010\uffc8\011\uffc8\015\uffc8\016\uffc8\020\uffc8\021" +
    "\uffc8\022\uffc8\023\uffc8\024\uffc8\026\uffc8\046\uffc8\051\uffc8" +
    "\052\uffc8\053\uffc8\054\uffc8\055\uffc8\061\uffc8\001\002\000" +
    "\022\014\143\036\121\037\112\043\150\061\106\062\117" +
    "\063\111\064\115\001\002\000\006\013\154\044\231\001" +
    "\002\000\026\007\015\010\021\011\022\045\207\051\062" +
    "\052\052\053\072\054\050\055\051\061\065\001\002\000" +
    "\046\007\uffd1\010\uffd1\011\uffd1\015\uffd1\016\uffd1\020\uffd1" +
    "\021\uffd1\022\uffd1\023\uffd1\024\uffd1\026\uffd1\046\uffd1\051" +
    "\uffd1\052\uffd1\053\uffd1\054\uffd1\055\uffd1\061\uffd1\001\002" +
    "\000\046\007\uffcf\010\uffcf\011\uffcf\015\uffcf\016\235\020" +
    "\uffcf\021\uffcf\022\uffcf\023\uffcf\024\uffcf\026\uffcf\046\uffcf" +
    "\051\uffcf\052\uffcf\053\uffcf\054\uffcf\055\uffcf\061\uffcf\001" +
    "\002\000\044\007\uffd3\010\uffd3\011\uffd3\015\uffd3\020\uffd3" +
    "\021\uffd3\022\uffd3\023\uffd3\024\uffd3\026\uffd3\046\uffd3\051" +
    "\uffd3\052\uffd3\053\uffd3\054\uffd3\055\uffd3\061\uffd3\001\002" +
    "\000\030\007\015\010\021\011\022\015\237\045\207\051" +
    "\062\052\052\053\072\054\050\055\051\061\065\001\002" +
    "\000\044\007\uffd0\010\uffd0\011\uffd0\015\uffd0\020\uffd0\021" +
    "\uffd0\022\uffd0\023\uffd0\024\uffd0\026\uffd0\046\uffd0\051\uffd0" +
    "\052\uffd0\053\uffd0\054\uffd0\055\uffd0\061\uffd0\001\002\000" +
    "\004\043\240\001\002\000\022\014\143\036\121\037\112" +
    "\043\150\061\106\062\117\063\111\064\115\001\002\000" +
    "\006\013\154\044\242\001\002\000\026\007\015\010\021" +
    "\011\022\045\207\051\062\052\052\053\072\054\050\055" +
    "\051\061\065\001\002\000\046\007\uffd2\010\uffd2\011\uffd2" +
    "\015\uffd2\016\uffd2\020\uffd2\021\uffd2\022\uffd2\023\uffd2\024" +
    "\uffd2\026\uffd2\046\uffd2\051\uffd2\052\uffd2\053\uffd2\054\uffd2" +
    "\055\uffd2\061\uffd2\001\002\000\014\043\245\062\250\063" +
    "\246\064\253\065\252\001\002\000\020\036\121\037\112" +
    "\043\122\061\106\062\117\063\111\064\115\001\002\000" +
    "\006\036\uff9e\044\uff9e\001\002\000\006\036\uffa2\044\uffa2" +
    "\001\002\000\006\036\uff9f\044\uff9f\001\002\000\006\036" +
    "\254\044\255\001\002\000\006\036\uffa1\044\uffa1\001\002" +
    "\000\006\036\uffa0\044\uffa0\001\002\000\014\043\245\062" +
    "\250\063\246\064\253\065\252\001\002\000\004\050\uffc3" +
    "\001\002\000\006\036\uffa3\044\uffa3\001\002\000\006\036" +
    "\124\044\260\001\002\000\006\036\uff9d\044\uff9d\001\002" +
    "\000\022\014\143\036\121\037\112\043\150\061\106\062" +
    "\117\063\111\064\115\001\002\000\006\013\154\044\263" +
    "\001\002\000\026\007\015\010\021\011\022\045\207\051" +
    "\062\052\052\053\072\054\050\055\051\061\065\001\002" +
    "\000\044\007\uffdd\010\uffdd\011\uffdd\015\uffdd\020\uffdd\021" +
    "\uffdd\022\uffdd\023\uffdd\024\uffdd\026\uffdd\046\uffdd\051\uffdd" +
    "\052\uffdd\053\uffdd\054\uffdd\055\uffdd\061\uffdd\001\002\000" +
    "\046\007\uffc6\010\uffc6\011\uffc6\015\uffc6\016\uffc6\020\uffc6" +
    "\021\uffc6\022\uffc6\023\uffc6\024\uffc6\026\uffc6\046\uffc6\051" +
    "\uffc6\052\uffc6\053\uffc6\054\uffc6\055\uffc6\061\uffc6\001\002" +
    "\000\026\036\121\037\112\043\122\053\072\054\050\055" +
    "\051\061\106\062\117\063\111\064\115\001\002\000\004" +
    "\044\270\001\002\000\004\045\271\001\002\000\010\024" +
    "\uffcc\026\uffcc\046\uffcc\001\002\000\010\024\276\026\274" +
    "\046\uffc9\001\002\000\004\046\304\001\002\000\004\025" +
    "\302\001\002\000\010\024\uffcd\026\uffcd\046\uffcd\001\002" +
    "\000\020\036\121\037\112\043\122\061\106\062\117\063" +
    "\111\064\115\001\002\000\006\025\300\036\124\001\002" +
    "\000\036\007\015\010\021\011\022\015\067\020\076\021" +
    "\061\022\071\023\055\051\062\052\052\053\072\054\050" +
    "\055\051\061\065\001\002\000\010\024\uffcb\026\uffcb\046" +
    "\uffcb\001\002\000\036\007\015\010\021\011\022\015\067" +
    "\020\076\021\061\022\071\023\055\051\062\052\052\053" +
    "\072\054\050\055\051\061\065\001\002\000\004\046\uffca" +
    "\001\002\000\044\007\uffce\010\uffce\011\uffce\015\uffce\020" +
    "\uffce\021\uffce\022\uffce\023\uffce\024\uffce\026\uffce\046\uffce" +
    "\051\uffce\052\uffce\053\uffce\054\uffce\055\uffce\061\uffce\001" +
    "\002\000\046\007\uffc7\010\uffc7\011\uffc7\015\uffc7\016\uffc7" +
    "\020\uffc7\021\uffc7\022\uffc7\023\uffc7\024\uffc7\026\uffc7\046" +
    "\uffc7\051\uffc7\052\uffc7\053\uffc7\054\uffc7\055\uffc7\061\uffc7" +
    "\001\002\000\014\043\245\062\250\063\246\064\253\065" +
    "\252\001\002\000\006\036\254\044\310\001\002\000\004" +
    "\050\uffc2\001\002\000\004\065\312\001\002\000\004\044" +
    "\313\001\002\000\010\044\uff98\047\uff98\050\uff98\001\002" +
    "\000\004\065\315\001\002\000\004\044\316\001\002\000" +
    "\010\044\uff99\047\uff99\050\uff99\001\002\000\046\007\uffc5" +
    "\010\uffc5\011\uffc5\015\uffc5\016\uffc5\020\uffc5\021\uffc5\022" +
    "\uffc5\023\uffc5\024\uffc5\026\uffc5\046\uffc5\051\uffc5\052\uffc5" +
    "\053\uffc5\054\uffc5\055\uffc5\061\uffc5\001\002\000\014\004" +
    "\ufff8\007\ufff8\010\ufff8\011\ufff8\046\ufff8\001\002\000\004" +
    "\061\104\001\002\000\006\047\uffe5\050\uffe5\001\002\000" +
    "\006\047\324\050\uffe7\001\002\000\004\061\104\001\002" +
    "\000\006\047\uffe6\050\uffe6\001\002\000\004\002\001\001" +
    "\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\324\000\006\002\003\003\004\001\001\000\002\001" +
    "\001\000\004\004\006\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\057" +
    "\012\001\001\000\004\005\013\001\001\000\012\006\015" +
    "\007\023\011\016\022\022\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\061\320\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\010\025\011\027\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\011\033\012\032\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\017\035\001\001\000\002\001" +
    "\001\000\004\011\037\001\001\000\002\001\001\000\004" +
    "\017\041\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\060\044\001\001\000\004\020\045\001\001\000\034" +
    "\011\016\021\074\022\052\025\063\026\053\030\072\033" +
    "\065\034\057\037\055\043\062\044\056\055\046\056\067" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\020\011\016" +
    "\022\052\027\217\043\205\044\056\055\046\056\067\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\011\100\031" +
    "\077\001\001\000\002\001\001\000\004\024\102\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\016\013\106\014\115\015\107\016\113\054\117\055\112" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\015\137\016\113\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\015\134\016\113\001\001\000\012\013\122\014\115\015" +
    "\107\016\113\001\001\000\002\001\001\000\010\014\125" +
    "\015\107\016\113\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\015\133\016\113\001\001\000\006\015\132" +
    "\016\113\001\001\000\006\015\131\016\113\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\014\136\015\107\016\113\001\001\000" +
    "\002\001\001\000\002\001\001\000\022\013\144\014\115" +
    "\015\107\016\113\047\146\050\143\051\145\052\141\001" +
    "\001\000\002\001\001\000\016\013\144\014\115\015\107" +
    "\016\113\051\213\052\141\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\022" +
    "\013\150\014\115\015\107\016\113\047\151\050\143\051" +
    "\145\052\141\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\020\013\144\014\115\015\107\016" +
    "\113\050\154\051\145\052\141\001\001\000\002\001\001" +
    "\000\016\013\144\014\115\015\107\016\113\051\156\052" +
    "\141\001\001\000\002\001\001\000\012\013\172\014\115" +
    "\015\107\016\113\001\001\000\012\013\171\014\115\015" +
    "\107\016\113\001\001\000\012\013\170\014\115\015\107" +
    "\016\113\001\001\000\012\013\167\014\115\015\107\016" +
    "\113\001\001\000\012\013\166\014\115\015\107\016\113" +
    "\001\001\000\012\013\165\014\115\015\107\016\113\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\032\174\045\176\056\175\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\016\013\106\014\115\015\107\016\113" +
    "\054\203\055\112\001\001\000\002\001\001\000\002\001" +
    "\001\000\020\011\016\022\052\027\207\043\205\044\056" +
    "\055\046\056\067\001\001\000\002\001\001\000\004\062" +
    "\210\001\001\000\002\001\001\000\004\020\211\001\001" +
    "\000\034\011\016\021\074\022\052\025\063\026\053\030" +
    "\072\033\065\034\057\037\055\043\062\044\056\055\046" +
    "\056\067\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\022\013\144\014\115\015" +
    "\107\016\113\047\222\050\143\051\145\052\141\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\022\013\144\014\115\015\107\016\113" +
    "\047\227\050\143\051\145\052\141\001\001\000\002\001" +
    "\001\000\020\011\016\022\052\027\231\043\205\044\056" +
    "\055\046\056\067\001\001\000\004\035\232\001\001\000" +
    "\004\036\233\001\001\000\002\001\001\000\020\011\016" +
    "\022\052\027\235\043\205\044\056\055\046\056\067\001" +
    "\001\000\002\001\001\000\002\001\001\000\022\013\144" +
    "\014\115\015\107\016\113\047\240\050\143\051\145\052" +
    "\141\001\001\000\002\001\001\000\020\011\016\022\052" +
    "\027\242\043\205\044\056\055\046\056\067\001\001\000" +
    "\002\001\001\000\006\046\246\053\250\001\001\000\012" +
    "\013\256\014\115\015\107\016\113\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\046\255\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\022\013\144\014\115\015\107\016" +
    "\113\047\261\050\143\051\145\052\141\001\001\000\002" +
    "\001\001\000\020\011\016\022\052\027\263\043\205\044" +
    "\056\055\046\056\067\001\001\000\002\001\001\000\002" +
    "\001\001\000\016\013\106\014\115\015\107\016\113\054" +
    "\266\055\112\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\040\271\001\001\000\006\041\274\042\272\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\013\276\014\115\015\107\016\113\001\001\000" +
    "\002\001\001\000\034\011\016\021\300\022\052\025\063" +
    "\026\053\030\072\033\065\034\057\037\055\043\062\044" +
    "\056\055\046\056\067\001\001\000\002\001\001\000\034" +
    "\011\016\021\302\022\052\025\063\026\053\030\072\033" +
    "\065\034\057\037\055\043\062\044\056\055\046\056\067" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\046\246\053\306\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\023" +
    "\322\024\321\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\024\324\001\001\000\002\001\001\000\002\001" +
    "\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$SintaxisJava$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$SintaxisJava$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$SintaxisJava$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    private Symbol s;
    private JavaSemantica java = new JavaSemantica();
    private TablaJava tabla;
    private List<VariableJava> variables;
    
    public void syntax_error(Symbol sym){
        System.out.println("\n" + sym.value + sym.sym);
        System.out.println("Error Sintactico en la letra: " + sym.value + "   <linea>: "  + (sym.right + 1) + "    <columna>: " + (sym.left + 1) + "\n");
    }

    public void unrecovered_syntax_error(Symbol sym) throws java.lang.Exception{
        System.out.println("\n" + sym.value + sym.sym);
        System.out.println("Error Sintactico en la letra: " + sym.value + "   <linea>: "  + (sym.right + 1) + "    <columna>: " + (sym.left + 1) + "\n");
    }

    public Symbol getS(){
        return this.cur_token;
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$SintaxisJava$actions {
  private final SintaxisJava parser;

  /** Constructor */
  CUP$SintaxisJava$actions(SintaxisJava parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$SintaxisJava$do_action_part00000000(
    int                        CUP$SintaxisJava$act_num,
    java_cup.runtime.lr_parser CUP$SintaxisJava$parser,
    java.util.Stack            CUP$SintaxisJava$stack,
    int                        CUP$SintaxisJava$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$SintaxisJava$result;

      /* select the action based on the action number */
      switch (CUP$SintaxisJava$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= JAVA EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-1)).value;
		RESULT = start_val;
              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$SintaxisJava$parser.done_parsing();
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // JAVA ::= CLASSES 
            {
              Object RESULT =null;

              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("JAVA",0, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // CLASSES ::= CLASSES CLASS 
            {
              Object RESULT =null;

              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("CLASSES",1, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // CLASSES ::= 
            {
              Object RESULT =null;

              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("CLASSES",1, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // NT$0 ::= 
            {
              Object RESULT =null;
TablaJava sem = new TablaJava(); java.getTabla().add(sem); tabla = sem; TablaJava.AMBITO += 1;
              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("NT$0",45, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // CLASS ::= publicc classs id llavea NT$0 STATEMENTS_CLASS llavec 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-2)).value;
		tabla.eliminarAmbito(TablaJava.AMBITO); TablaJava.AMBITO -= 1; tabla = null;
              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("CLASS",2, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-6)), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // STATEMENTS_CLASS ::= STATEMENTS_CLASS STATEMENT_CLASS 
            {
              Object RESULT =null;

              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("STATEMENTS_CLASS",3, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // STATEMENTS_CLASS ::= 
            {
              Object RESULT =null;
		
              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("STATEMENTS_CLASS",3, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // STATEMENT_CLASS ::= METODO 
            {
              Object RESULT =null;

              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("STATEMENT_CLASS",4, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // STATEMENT_CLASS ::= DEF_VAR puntocoma 
            {
              Object RESULT =null;

              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("STATEMENT_CLASS",4, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // NT$1 ::= 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-5)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-5)).right;
		Integer e1 = (Integer)((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-5)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-4)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-4)).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-4)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-2)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-2)).right;
		List<VariableJava> e3 = (List<VariableJava>)((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-2)).value;
if(tabla.addMetodo(new MetodoJava(e2, e1, e3))){
                        syntax_error(getS());
                } 
                        TablaJava.AMBITO += 1;
              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("NT$1",46, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // METODO ::= publicc TYPE_V id para LIST_PAR parc llavea NT$1 STATEMENTS_METODO llavec 
            {
              Object RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-2)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-8)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-8)).right;
		Integer e1 = (Integer)((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-8)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-7)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-7)).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-7)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-5)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-5)).right;
		List<VariableJava> e3 = (List<VariableJava>)((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-5)).value;
		tabla.eliminarAmbito(TablaJava.AMBITO); TablaJava.AMBITO -= 1;
              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("METODO",5, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-9)), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // TYPE_V ::= voidd 
            {
              Integer RESULT =null;
		RESULT = TablaJava.VOID;
              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("TYPE_V",6, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // TYPE_V ::= TYPE 
            {
              Integer RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()).right;
		Integer e1 = (Integer)((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.peek()).value;
		RESULT = e1;
              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("TYPE_V",6, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // TYPE ::= intt 
            {
              Integer RESULT =null;
		RESULT = TablaJava.INT;
              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("TYPE",7, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // TYPE ::= floatt 
            {
              Integer RESULT =null;
		RESULT = TablaJava.FLOAT;
              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("TYPE",7, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // TYPE ::= charr 
            {
              Integer RESULT =null;
		RESULT = TablaJava.CHAR;
              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("TYPE",7, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // LIST_PAR ::= TYPE id LIST_PARR 
            {
              List<VariableJava> RESULT =null;

              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("LIST_PAR",8, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // LIST_PAR ::= 
            {
              List<VariableJava> RESULT =null;

              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("LIST_PAR",8, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // LIST_PARR ::= coma TYPE id LIST_PARR 
            {
              Object RESULT =null;

              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("LIST_PARR",13, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // LIST_PARR ::= 
            {
              Object RESULT =null;

              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("LIST_PARR",13, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // STATEMENTS_METODO ::= STATEMENTS_METODO STATEMENT_METODO 
            {
              Object RESULT =null;

              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("STATEMENTS_METODO",14, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // STATEMENTS_METODO ::= 
            {
              Object RESULT =null;

              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("STATEMENTS_METODO",14, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // STATEMENT_METODO ::= COMP_STATE 
            {
              Object RESULT =null;

              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("STATEMENT_METODO",15, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // STATEMENT_METODO ::= STATEMENT_LINE 
            {
              Object RESULT =null;

              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("STATEMENT_METODO",15, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // NT$2 ::= 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()).right;
		Integer e1 = (Integer)((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.peek()).value;
variables = new ArrayList<>();
              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("NT$2",47, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // DEF_VAR ::= TYPE NT$2 LIST_VAR 
            {
              Object RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-1)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-2)).right;
		Integer e1 = (Integer)((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-2)).value;
		VariableJava.agregarTipo(variables, e1);
                                        if(!tabla.addListVar(variables)){syntax_error(getS());} variables = new ArrayList<>();
              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("DEF_VAR",16, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // LIST_VAR ::= LIST_VAR coma AS_VAR 
            {
              Object RESULT =null;
		
              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("LIST_VAR",17, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // LIST_VAR ::= AS_VAR 
            {
              Object RESULT =null;
		
              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("LIST_VAR",17, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // AS_VAR ::= id igual EXPR 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-2)).value;
		variables.add(new VariableJava(e1, TablaJava.AMBITO));
              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("AS_VAR",18, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // AS_VAR ::= id 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.peek()).value;
		variables.add(new VariableJava(e1, TablaJava.AMBITO));
              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("AS_VAR",18, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // COMP_STATE ::= WHILE 
            {
              Object RESULT =null;

              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("COMP_STATE",19, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // COMP_STATE ::= FOR 
            {
              Object RESULT =null;

              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("COMP_STATE",19, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // COMP_STATE ::= DO_WHILE 
            {
              Object RESULT =null;

              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("COMP_STATE",19, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // COMP_STATE ::= IF_ELSE 
            {
              Object RESULT =null;

              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("COMP_STATE",19, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // COMP_STATE ::= SWITCH 
            {
              Object RESULT =null;

              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("COMP_STATE",19, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // WHILE ::= whilee para CONDICION parc BLOQUE 
            {
              Object RESULT =null;

              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("WHILE",20, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-4)), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // NT$3 ::= 
            {
              Object RESULT =null;
TablaJava.AMBITO += 1;
              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("NT$3",48, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // BLOQUE ::= llavea NT$3 STATEMENTS_METODO llavec 
            {
              Object RESULT =null;
              // propagate RESULT from NT$3
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-2)).value;
		tabla.eliminarAmbito(TablaJava.AMBITO); TablaJava.AMBITO -= 1;
              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("BLOQUE",21, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // BLOQUE ::= STATEMENT_LINE 
            {
              Object RESULT =null;

              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("BLOQUE",21, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // FOR ::= forr para INICIO puntocoma CONDICION puntocoma STEP parc BLOQUE 
            {
              Object RESULT =null;

              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("FOR",22, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-8)), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // INICIO ::= id 
            {
              Object RESULT =null;

              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("INICIO",23, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // INICIO ::= TYPE AS_VAR 
            {
              Object RESULT =null;

              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("INICIO",23, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // STEP ::= AS_VAR_LINE 
            {
              Object RESULT =null;

              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("STEP",24, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // STEP ::= OP_VAR 
            {
              Object RESULT =null;

              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("STEP",24, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // DO_WHILE ::= doo BLOQUE whilee para CONDICION parc puntocoma 
            {
              Object RESULT =null;

              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("DO_WHILE",25, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-6)), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // IF_ELSE ::= iff para CONDICION parc BLOQUE ELSEIF ELSE 
            {
              Object RESULT =null;

              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("IF_ELSE",26, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-6)), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // ELSEIF ::= ELSEIF elsee iff para CONDICION parc BLOQUE 
            {
              Object RESULT =null;

              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("ELSEIF",27, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-6)), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // ELSEIF ::= 
            {
              Object RESULT =null;

              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("ELSEIF",27, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // ELSE ::= elsee BLOQUE 
            {
              Object RESULT =null;

              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("ELSE",28, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // ELSE ::= 
            {
              Object RESULT =null;

              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("ELSE",28, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // SWITCH ::= switchh para EXPR parc llavea CASES DEFAULT llavec 
            {
              Object RESULT =null;

              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("SWITCH",29, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-7)), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // CASES ::= CASES CASE 
            {
              Object RESULT =null;

              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("CASES",30, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // CASES ::= 
            {
              Object RESULT =null;

              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("CASES",30, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // CASE ::= casee OPERACION_A dosp STATEMENT_METODO 
            {
              Object RESULT =null;

              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("CASE",31, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // DEFAULT ::= defaultt dosp STATEMENT_METODO 
            {
              Object RESULT =null;

              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("DEFAULT",32, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // DEFAULT ::= 
            {
              Object RESULT =null;

              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("DEFAULT",32, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // STATEMENT_LINE ::= AS_VAR_LINE puntocoma 
            {
              Object RESULT =null;

              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("STATEMENT_LINE",33, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // STATEMENT_LINE ::= DEF_VAR puntocoma 
            {
              Object RESULT =null;

              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("STATEMENT_LINE",33, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // STATEMENT_LINE ::= WRITE puntocoma 
            {
              Object RESULT =null;

              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("STATEMENT_LINE",33, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // STATEMENT_LINE ::= INPUT puntocoma 
            {
              Object RESULT =null;

              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("STATEMENT_LINE",33, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // AS_VAR_LINE ::= id igual EXPR 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-2)).value;
		if(!tabla.existeVar(new VariableJava(e1, TablaJava.AMBITO))){syntax_error(getS());}
              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("AS_VAR_LINE",44, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // WRITE ::= println para STRING parc 
            {
              Object RESULT =null;

              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("WRITE",34, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // WRITE ::= print para STRING parc 
            {
              Object RESULT =null;

              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("WRITE",34, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // OP_VAR ::= id masmas 
            {
              Object RESULT =null;

              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("OP_VAR",35, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // OP_VAR ::= id menosmenos 
            {
              Object RESULT =null;

              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("OP_VAR",35, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // OPERACION_A ::= OPERACION_A mas OPERACION_M 
            {
              OperacionJava RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-2)).right;
		OperacionJava e1 = (OperacionJava)((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()).right;
		OperacionJava e2 = (OperacionJava)((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.peek()).value;
		RESULT = new OperacionJava(TablaJava.regresarTipo(e1.getTipo(), e2.getTipo()));
              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("OPERACION_A",9, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // OPERACION_A ::= OPERACION_M menos OPERACION_M 
            {
              OperacionJava RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-2)).right;
		OperacionJava e1 = (OperacionJava)((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()).right;
		OperacionJava e2 = (OperacionJava)((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.peek()).value;
		RESULT = new OperacionJava(TablaJava.regresarTipo(e1.getTipo(), e2.getTipo()));
              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("OPERACION_A",9, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // OPERACION_A ::= OPERACION_M 
            {
              OperacionJava RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()).right;
		OperacionJava e1 = (OperacionJava)((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.peek()).value;
		RESULT = e1;
              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("OPERACION_A",9, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // OPERACION_M ::= OPERACION_M por OPERACION_U 
            {
              OperacionJava RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-2)).right;
		OperacionJava e1 = (OperacionJava)((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()).right;
		OperacionJava e2 = (OperacionJava)((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.peek()).value;
		RESULT = new OperacionJava(TablaJava.regresarTipo(e1.getTipo(), e2.getTipo()));
              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("OPERACION_M",10, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // OPERACION_M ::= OPERACION_M div OPERACION_U 
            {
              OperacionJava RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-2)).right;
		OperacionJava e1 = (OperacionJava)((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()).right;
		OperacionJava e2 = (OperacionJava)((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.peek()).value;
		RESULT = new OperacionJava(TablaJava.regresarTipo(e1.getTipo(), e2.getTipo()));
              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("OPERACION_M",10, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // OPERACION_M ::= OPERACION_M mod OPERACION_U 
            {
              OperacionJava RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-2)).right;
		OperacionJava e1 = (OperacionJava)((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()).right;
		OperacionJava e2 = (OperacionJava)((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.peek()).value;
		RESULT = new OperacionJava(TablaJava.regresarTipo(e1.getTipo(), e2.getTipo()));
              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("OPERACION_M",10, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // OPERACION_M ::= OPERACION_U 
            {
              OperacionJava RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()).right;
		OperacionJava e1 = (OperacionJava)((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.peek()).value;
		RESULT = e1;
              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("OPERACION_M",10, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // OPERACION_U ::= menos OPERACION_U 
            {
              OperacionJava RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()).right;
		OperacionJava e1 = (OperacionJava)((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.peek()).value;
		if(e1.getTipo()==1){e1.setTipo(TablaJava.INT); RESULT = e1;} RESULT = e1;
              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("OPERACION_U",11, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // OPERACION_U ::= mas OPERACION_U 
            {
              OperacionJava RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()).right;
		OperacionJava e1 = (OperacionJava)((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.peek()).value;
		RESULT = e1;
              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("OPERACION_U",11, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // OPERACION_U ::= ATOM 
            {
              OperacionJava RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()).right;
		OperacionJava e1 = (OperacionJava)((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.peek()).value;
		RESULT = e1;
              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("OPERACION_U",11, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // ATOM ::= id 
            {
              OperacionJava RESULT =null;
		RESULT = new OperacionJava(0);
              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("ATOM",12, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // ATOM ::= entero 
            {
              OperacionJava RESULT =null;
		RESULT = new OperacionJava(TablaJava.INT);
              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("ATOM",12, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // ATOM ::= decimal 
            {
              OperacionJava RESULT =null;
		RESULT = new OperacionJava(TablaJava.FLOAT);
              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("ATOM",12, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // ATOM ::= character 
            {
              OperacionJava RESULT =null;
		RESULT = new OperacionJava(TablaJava.CHAR);
              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("ATOM",12, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // ATOM ::= para OPERACION_A parc 
            {
              OperacionJava RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-1)).right;
		OperacionJava e1 = (OperacionJava)((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-1)).value;
		RESULT = e1;
              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("ATOM",12, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // CONDICION ::= CONDICION orr AND 
            {
              Object RESULT =null;

              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("CONDICION",37, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // CONDICION ::= AND 
            {
              Object RESULT =null;

              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("CONDICION",37, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // AND ::= AND andd NOT 
            {
              Object RESULT =null;

              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("AND",38, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // AND ::= NOT 
            {
              Object RESULT =null;

              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("AND",38, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // NOT ::= nott NOT 
            {
              Object RESULT =null;

              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("NOT",39, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // NOT ::= COMPARACION 
            {
              Object RESULT =null;

              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("NOT",39, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // COMPARACION ::= OPERACION_A igig OPERACION_A 
            {
              Object RESULT =null;

              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("COMPARACION",40, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // COMPARACION ::= OPERACION_A noigual OPERACION_A 
            {
              Object RESULT =null;

              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("COMPARACION",40, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // COMPARACION ::= OPERACION_A menor OPERACION_A 
            {
              Object RESULT =null;

              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("COMPARACION",40, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // COMPARACION ::= OPERACION_A menorig OPERACION_A 
            {
              Object RESULT =null;

              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("COMPARACION",40, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // COMPARACION ::= OPERACION_A mayor OPERACION_A 
            {
              Object RESULT =null;

              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("COMPARACION",40, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // COMPARACION ::= OPERACION_A mayorig OPERACION_A 
            {
              Object RESULT =null;

              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("COMPARACION",40, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // COMPARACION ::= para CONDICION parc 
            {
              Object RESULT =null;

              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("COMPARACION",40, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // STRING ::= STRING mas EXPR_STRING 
            {
              Object RESULT =null;

              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("STRING",41, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // STRING ::= EXPR_STRING 
            {
              Object RESULT =null;

              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("STRING",41, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // EXPR_STRING ::= string 
            {
              Object RESULT =null;

              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("EXPR_STRING",36, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // EXPR_STRING ::= character 
            {
              Object RESULT =null;

              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("EXPR_STRING",36, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // EXPR_STRING ::= entero 
            {
              Object RESULT =null;

              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("EXPR_STRING",36, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // EXPR_STRING ::= decimal 
            {
              Object RESULT =null;

              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("EXPR_STRING",36, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // EXPR_STRING ::= para OPERACION_A parc 
            {
              Object RESULT =null;

              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("EXPR_STRING",36, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // EXPR ::= OPERACION_A 
            {
              Object RESULT =null;

              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("EXPR",42, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // EXPR ::= INPUT 
            {
              Object RESULT =null;

              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("EXPR",42, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // INPUT ::= charinput para string parc 
            {
              Object RESULT =null;

              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("INPUT",43, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // INPUT ::= intinput para string parc 
            {
              Object RESULT =null;

              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("INPUT",43, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // INPUT ::= floatinput para string parc 
            {
              Object RESULT =null;

              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("INPUT",43, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$SintaxisJava$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$SintaxisJava$do_action(
    int                        CUP$SintaxisJava$act_num,
    java_cup.runtime.lr_parser CUP$SintaxisJava$parser,
    java.util.Stack            CUP$SintaxisJava$stack,
    int                        CUP$SintaxisJava$top)
    throws java.lang.Exception
    {
              return CUP$SintaxisJava$do_action_part00000000(
                               CUP$SintaxisJava$act_num,
                               CUP$SintaxisJava$parser,
                               CUP$SintaxisJava$stack,
                               CUP$SintaxisJava$top);
    }
}

}
