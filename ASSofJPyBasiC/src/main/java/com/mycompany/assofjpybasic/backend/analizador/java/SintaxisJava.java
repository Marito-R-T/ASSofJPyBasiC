
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package com.mycompany.assofjpybasic.backend.analizador.java;

import java_cup.runtime.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class SintaxisJava extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return SintaxisJavaSym.class;
}

  /** Default constructor. */
  @Deprecated
  public SintaxisJava() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public SintaxisJava(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public SintaxisJava(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\146\000\002\002\004\000\002\002\003\000\002\003" +
    "\004\000\002\003\002\000\002\004\010\000\002\005\004" +
    "\000\002\005\003\000\002\006\003\000\002\006\003\000" +
    "\002\007\013\000\002\007\012\000\002\010\003\000\002" +
    "\010\003\000\002\011\003\000\002\011\003\000\002\011" +
    "\003\000\002\012\005\000\002\012\002\000\002\013\006" +
    "\000\002\013\002\000\002\014\004\000\002\014\002\000" +
    "\002\015\003\000\002\015\003\000\002\015\003\000\002" +
    "\016\004\000\002\017\005\000\002\017\003\000\002\020" +
    "\005\000\002\020\003\000\002\021\003\000\002\021\003" +
    "\000\002\021\003\000\002\021\003\000\002\021\003\000" +
    "\002\022\007\000\002\023\005\000\002\023\003\000\002" +
    "\024\013\000\002\025\003\000\002\025\004\000\002\026" +
    "\003\000\002\026\003\000\002\027\011\000\002\030\011" +
    "\000\002\031\011\000\002\031\002\000\002\032\004\000" +
    "\002\032\002\000\002\033\012\000\002\034\004\000\002" +
    "\034\002\000\002\035\005\000\002\036\005\000\002\036" +
    "\002\000\002\037\004\000\002\037\004\000\002\037\004" +
    "\000\002\040\006\000\002\040\006\000\002\041\004\000" +
    "\002\041\004\000\002\042\005\000\002\042\005\000\002" +
    "\042\003\000\002\043\005\000\002\043\005\000\002\043" +
    "\005\000\002\043\003\000\002\045\004\000\002\045\004" +
    "\000\002\045\003\000\002\046\003\000\002\046\003\000" +
    "\002\046\003\000\002\046\005\000\002\047\005\000\002" +
    "\047\003\000\002\050\005\000\002\050\003\000\002\051" +
    "\004\000\002\051\003\000\002\052\005\000\002\052\005" +
    "\000\002\052\005\000\002\052\005\000\002\052\005\000" +
    "\002\052\005\000\002\052\005\000\002\053\005\000\002" +
    "\053\003\000\002\044\003\000\002\044\003\000\002\044" +
    "\003\000\002\044\003\000\002\044\005\000\002\054\003" +
    "\000\002\054\003\000\002\054\003\000\002\055\006\000" +
    "\002\055\006\000\002\055\006" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\322\000\006\002\ufffe\004\ufffe\001\002\000\004\002" +
    "\324\001\002\000\006\002\000\004\006\001\002\000\004" +
    "\005\010\001\002\000\006\002\uffff\004\uffff\001\002\000" +
    "\004\061\011\001\002\000\004\045\012\001\002\000\012" +
    "\004\023\007\013\010\016\011\020\001\002\000\004\061" +
    "\ufff4\001\002\000\014\004\ufffb\007\ufffb\010\ufffb\011\ufffb" +
    "\046\ufffb\001\002\000\004\061\061\001\002\000\004\061" +
    "\ufff3\001\002\000\014\004\023\007\013\010\016\011\020" +
    "\046\317\001\002\000\004\061\ufff2\001\002\000\014\004" +
    "\ufff9\007\ufff9\010\ufff9\011\ufff9\046\ufff9\001\002\000\014" +
    "\004\ufffa\007\ufffa\010\ufffa\011\ufffa\046\ufffa\001\002\000" +
    "\014\006\025\007\013\010\016\011\020\061\027\001\002" +
    "\000\004\061\307\001\002\000\004\061\ufff6\001\002\000" +
    "\004\061\ufff5\001\002\000\004\043\030\001\002\000\012" +
    "\007\013\010\016\011\020\044\ufff0\001\002\000\004\044" +
    "\041\001\002\000\004\061\033\001\002\000\006\044\uffee" +
    "\047\035\001\002\000\004\044\ufff1\001\002\000\010\007" +
    "\013\010\016\011\020\001\002\000\004\061\037\001\002" +
    "\000\006\044\uffee\047\035\001\002\000\004\044\uffef\001" +
    "\002\000\004\045\042\001\002\000\032\007\uffec\010\uffec" +
    "\011\uffec\015\uffec\020\uffec\021\uffec\022\uffec\023\uffec\046" +
    "\uffec\051\uffec\052\uffec\061\uffec\001\002\000\032\007\013" +
    "\010\016\011\020\015\062\020\067\021\053\022\063\023" +
    "\047\046\064\051\054\052\044\061\061\001\002\000\004" +
    "\043\304\001\002\000\040\007\uffeb\010\uffeb\011\uffeb\015" +
    "\uffeb\020\uffeb\021\uffeb\022\uffeb\023\uffeb\024\uffeb\026\uffeb" +
    "\046\uffeb\050\210\051\uffeb\052\uffeb\061\uffeb\001\002\000" +
    "\036\007\uffe3\010\uffe3\011\uffe3\015\uffe3\020\uffe3\021\uffe3" +
    "\022\uffe3\023\uffe3\024\uffe3\026\uffe3\046\uffe3\051\uffe3\052" +
    "\uffe3\061\uffe3\001\002\000\004\043\266\001\002\000\036" +
    "\007\uffdf\010\uffdf\011\uffdf\015\uffdf\020\uffdf\021\uffdf\022" +
    "\uffdf\023\uffdf\024\uffdf\026\uffdf\046\uffdf\051\uffdf\052\uffdf" +
    "\061\uffdf\001\002\000\004\050\265\001\002\000\036\007" +
    "\uffe0\010\uffe0\011\uffe0\015\uffe0\020\uffe0\021\uffe0\022\uffe0" +
    "\023\uffe0\024\uffe0\026\uffe0\046\uffe0\051\uffe0\052\uffe0\061" +
    "\uffe0\001\002\000\004\043\261\001\002\000\004\043\244" +
    "\001\002\000\036\007\uffe9\010\uffe9\011\uffe9\015\uffe9\020" +
    "\uffe9\021\uffe9\022\uffe9\023\uffe9\024\uffe9\026\uffe9\046\uffe9" +
    "\051\uffe9\052\uffe9\061\uffe9\001\002\000\036\007\uffea\010" +
    "\uffea\011\uffea\015\uffea\020\uffea\021\uffea\022\uffea\023\uffea" +
    "\024\uffea\026\uffea\046\uffea\051\uffea\052\uffea\061\uffea\001" +
    "\002\000\036\007\uffe1\010\uffe1\011\uffe1\015\uffe1\020\uffe1" +
    "\021\uffe1\022\uffe1\023\uffe1\024\uffe1\026\uffe1\046\uffe1\051" +
    "\uffe1\052\uffe1\061\uffe1\001\002\000\004\050\243\001\002" +
    "\000\046\004\uffe4\007\uffe4\010\uffe4\011\uffe4\015\uffe4\020" +
    "\uffe4\021\uffe4\022\uffe4\023\uffe4\024\uffe4\026\uffe4\046\uffe4" +
    "\047\uffe4\050\uffe4\051\uffe4\052\uffe4\056\161\061\uffe4\001" +
    "\002\000\004\043\226\001\002\000\020\007\013\010\016" +
    "\011\020\045\205\051\054\052\044\061\061\001\002\000" +
    "\014\004\ufff7\007\ufff7\010\ufff7\011\ufff7\046\ufff7\001\002" +
    "\000\036\007\uffe2\010\uffe2\011\uffe2\015\uffe2\020\uffe2\021" +
    "\uffe2\022\uffe2\023\uffe2\024\uffe2\026\uffe2\046\uffe2\051\uffe2" +
    "\052\uffe2\061\uffe2\001\002\000\032\007\uffed\010\uffed\011" +
    "\uffed\015\uffed\020\uffed\021\uffed\022\uffed\023\uffed\046\uffed" +
    "\051\uffed\052\uffed\061\uffed\001\002\000\004\043\070\001" +
    "\002\000\012\007\013\010\016\011\020\061\072\001\002" +
    "\000\004\050\075\001\002\000\004\050\uffda\001\002\000" +
    "\004\061\061\001\002\000\004\050\uffd9\001\002\000\020" +
    "\014\100\036\112\037\105\043\114\061\101\062\110\063" +
    "\104\001\002\000\012\012\uffb0\013\uffb0\044\uffb0\050\uffb0" +
    "\001\002\000\012\012\122\013\uffb4\044\uffb4\050\uffb4\001" +
    "\002\000\020\014\100\036\112\037\105\043\114\061\101" +
    "\062\110\063\104\001\002\000\100\004\uffb9\007\uffb9\010" +
    "\uffb9\011\uffb9\012\uffb9\013\uffb9\015\uffb9\020\uffb9\021\uffb9" +
    "\022\uffb9\023\uffb9\024\uffb9\026\uffb9\030\uffb9\031\uffb9\032" +
    "\uffb9\033\uffb9\034\uffb9\035\uffb9\036\uffb9\037\uffb9\040\uffb9" +
    "\041\uffb9\042\uffb9\044\uffb9\046\uffb9\047\uffb9\050\uffb9\051" +
    "\uffb9\052\uffb9\061\uffb9\001\002\000\020\030\127\031\130" +
    "\032\133\033\131\034\124\035\126\036\125\001\002\000" +
    "\100\004\uffbd\007\uffbd\010\uffbd\011\uffbd\012\uffbd\013\uffbd" +
    "\015\uffbd\020\uffbd\021\uffbd\022\uffbd\023\uffbd\024\uffbd\026" +
    "\uffbd\030\uffbd\031\uffbd\032\uffbd\033\uffbd\034\uffbd\035\uffbd" +
    "\036\uffbd\037\uffbd\040\uffbd\041\uffbd\042\uffbd\044\uffbd\046" +
    "\uffbd\047\uffbd\050\uffbd\051\uffbd\052\uffbd\061\uffbd\001\002" +
    "\000\100\004\uffb7\007\uffb7\010\uffb7\011\uffb7\012\uffb7\013" +
    "\uffb7\015\uffb7\020\uffb7\021\uffb7\022\uffb7\023\uffb7\024\uffb7" +
    "\026\uffb7\030\uffb7\031\uffb7\032\uffb7\033\uffb7\034\uffb7\035" +
    "\uffb7\036\uffb7\037\uffb7\040\uffb7\041\uffb7\042\uffb7\044\uffb7" +
    "\046\uffb7\047\uffb7\050\uffb7\051\uffb7\052\uffb7\061\uffb7\001" +
    "\002\000\016\036\112\037\105\043\135\061\101\062\110" +
    "\063\104\001\002\000\100\004\uffba\007\uffba\010\uffba\011" +
    "\uffba\012\uffba\013\uffba\015\uffba\020\uffba\021\uffba\022\uffba" +
    "\023\uffba\024\uffba\026\uffba\030\uffba\031\uffba\032\uffba\033" +
    "\uffba\034\uffba\035\uffba\036\uffba\037\uffba\040\uffba\041\uffba" +
    "\042\uffba\044\uffba\046\uffba\047\uffba\050\uffba\051\uffba\052" +
    "\uffba\061\uffba\001\002\000\100\004\uffc1\007\uffc1\010\uffc1" +
    "\011\uffc1\012\uffc1\013\uffc1\015\uffc1\020\uffc1\021\uffc1\022" +
    "\uffc1\023\uffc1\024\uffc1\026\uffc1\030\uffc1\031\uffc1\032\uffc1" +
    "\033\uffc1\034\uffc1\035\uffc1\036\uffc1\037\214\040\144\041" +
    "\146\042\145\044\uffc1\046\uffc1\047\uffc1\050\uffc1\051\uffc1" +
    "\052\uffc1\061\uffc1\001\002\000\100\004\uffb8\007\uffb8\010" +
    "\uffb8\011\uffb8\012\uffb8\013\uffb8\015\uffb8\020\uffb8\021\uffb8" +
    "\022\uffb8\023\uffb8\024\uffb8\026\uffb8\030\uffb8\031\uffb8\032" +
    "\uffb8\033\uffb8\034\uffb8\035\uffb8\036\uffb8\037\uffb8\040\uffb8" +
    "\041\uffb8\042\uffb8\044\uffb8\046\uffb8\047\uffb8\050\uffb8\051" +
    "\uffb8\052\uffb8\061\uffb8\001\002\000\012\012\uffb2\013\uffb2" +
    "\044\uffb2\050\uffb2\001\002\000\016\036\112\037\105\043" +
    "\135\061\101\062\110\063\104\001\002\000\006\013\120" +
    "\050\153\001\002\000\020\014\100\036\112\037\105\043" +
    "\114\061\101\062\110\063\104\001\002\000\022\030\127" +
    "\031\130\032\133\033\131\034\124\035\126\036\125\044" +
    "\132\001\002\000\006\013\120\044\117\001\002\000\012" +
    "\012\uffa9\013\uffa9\044\uffa9\050\uffa9\001\002\000\020\014" +
    "\100\036\112\037\105\043\114\061\101\062\110\063\104" +
    "\001\002\000\012\012\122\013\uffb5\044\uffb5\050\uffb5\001" +
    "\002\000\020\014\100\036\112\037\105\043\114\061\101" +
    "\062\110\063\104\001\002\000\012\012\uffb3\013\uffb3\044" +
    "\uffb3\050\uffb3\001\002\000\016\036\112\037\105\043\135" +
    "\061\101\062\110\063\104\001\002\000\016\036\112\037" +
    "\105\043\135\061\101\062\110\063\104\001\002\000\016" +
    "\036\112\037\105\043\135\061\101\062\110\063\104\001" +
    "\002\000\016\036\112\037\105\043\135\061\101\062\110" +
    "\063\104\001\002\000\016\036\112\037\105\043\135\061" +
    "\101\062\110\063\104\001\002\000\016\036\112\037\105" +
    "\043\135\061\101\062\110\063\104\001\002\000\100\004" +
    "\uffb6\007\uffb6\010\uffb6\011\uffb6\012\uffb6\013\uffb6\015\uffb6" +
    "\020\uffb6\021\uffb6\022\uffb6\023\uffb6\024\uffb6\026\uffb6\030" +
    "\uffb6\031\uffb6\032\uffb6\033\uffb6\034\uffb6\035\uffb6\036\uffb6" +
    "\037\uffb6\040\uffb6\041\uffb6\042\uffb6\044\uffb6\046\uffb6\047" +
    "\uffb6\050\uffb6\051\uffb6\052\uffb6\061\uffb6\001\002\000\016" +
    "\036\112\037\105\043\135\061\101\062\110\063\104\001" +
    "\002\000\014\012\uffac\013\uffac\036\125\044\uffac\050\uffac" +
    "\001\002\000\016\036\112\037\105\043\135\061\101\062" +
    "\110\063\104\001\002\000\006\036\125\044\132\001\002" +
    "\000\014\012\uffab\013\uffab\036\125\044\uffab\050\uffab\001" +
    "\002\000\014\012\uffad\013\uffad\036\125\044\uffad\050\uffad" +
    "\001\002\000\014\012\uffae\013\uffae\036\125\044\uffae\050" +
    "\uffae\001\002\000\014\012\uffaf\013\uffaf\036\125\044\uffaf" +
    "\050\uffaf\001\002\000\076\004\uffc3\007\uffc3\010\uffc3\011" +
    "\uffc3\012\uffc3\013\uffc3\015\uffc3\020\uffc3\021\uffc3\022\uffc3" +
    "\023\uffc3\024\uffc3\026\uffc3\030\uffc3\031\uffc3\032\uffc3\033" +
    "\uffc3\034\uffc3\035\uffc3\036\uffc3\040\144\041\146\042\145" +
    "\044\uffc3\046\uffc3\047\uffc3\050\uffc3\051\uffc3\052\uffc3\061" +
    "\uffc3\001\002\000\016\036\112\037\105\043\135\061\101" +
    "\062\110\063\104\001\002\000\016\036\112\037\105\043" +
    "\135\061\101\062\110\063\104\001\002\000\016\036\112" +
    "\037\105\043\135\061\101\062\110\063\104\001\002\000" +
    "\100\004\uffbf\007\uffbf\010\uffbf\011\uffbf\012\uffbf\013\uffbf" +
    "\015\uffbf\020\uffbf\021\uffbf\022\uffbf\023\uffbf\024\uffbf\026" +
    "\uffbf\030\uffbf\031\uffbf\032\uffbf\033\uffbf\034\uffbf\035\uffbf" +
    "\036\uffbf\037\uffbf\040\uffbf\041\uffbf\042\uffbf\044\uffbf\046" +
    "\uffbf\047\uffbf\050\uffbf\051\uffbf\052\uffbf\061\uffbf\001\002" +
    "\000\100\004\uffbe\007\uffbe\010\uffbe\011\uffbe\012\uffbe\013" +
    "\uffbe\015\uffbe\020\uffbe\021\uffbe\022\uffbe\023\uffbe\024\uffbe" +
    "\026\uffbe\030\uffbe\031\uffbe\032\uffbe\033\uffbe\034\uffbe\035" +
    "\uffbe\036\uffbe\037\uffbe\040\uffbe\041\uffbe\042\uffbe\044\uffbe" +
    "\046\uffbe\047\uffbe\050\uffbe\051\uffbe\052\uffbe\061\uffbe\001" +
    "\002\000\100\004\uffc0\007\uffc0\010\uffc0\011\uffc0\012\uffc0" +
    "\013\uffc0\015\uffc0\020\uffc0\021\uffc0\022\uffc0\023\uffc0\024" +
    "\uffc0\026\uffc0\030\uffc0\031\uffc0\032\uffc0\033\uffc0\034\uffc0" +
    "\035\uffc0\036\uffc0\037\uffc0\040\uffc0\041\uffc0\042\uffc0\044" +
    "\uffc0\046\uffc0\047\uffc0\050\uffc0\051\uffc0\052\uffc0\061\uffc0" +
    "\001\002\000\014\012\uffaa\013\uffaa\036\125\044\uffaa\050" +
    "\uffaa\001\002\000\004\061\157\001\002\000\004\044\203" +
    "\001\002\000\004\044\uffd8\001\002\000\004\044\uffd7\001" +
    "\002\000\012\044\uffe4\056\161\057\160\060\162\001\002" +
    "\000\004\044\uffc5\001\002\000\026\036\112\037\105\043" +
    "\135\053\166\054\164\055\170\061\101\062\110\063\104" +
    "\064\167\001\002\000\004\044\uffc4\001\002\000\050\004" +
    "\uffa1\007\uffa1\010\uffa1\011\uffa1\015\uffa1\020\uffa1\021\uffa1" +
    "\022\uffa1\023\uffa1\024\uffa1\026\uffa1\036\125\044\uffa1\046" +
    "\uffa1\047\uffa1\050\uffa1\051\uffa1\052\uffa1\061\uffa1\001\002" +
    "\000\004\043\200\001\002\000\046\004\uff9f\007\uff9f\010" +
    "\uff9f\011\uff9f\015\uff9f\020\uff9f\021\uff9f\022\uff9f\023\uff9f" +
    "\024\uff9f\026\uff9f\044\uff9f\046\uff9f\047\uff9f\050\uff9f\051" +
    "\uff9f\052\uff9f\061\uff9f\001\002\000\004\043\175\001\002" +
    "\000\046\004\uffa0\007\uffa0\010\uffa0\011\uffa0\015\uffa0\020" +
    "\uffa0\021\uffa0\022\uffa0\023\uffa0\024\uffa0\026\uffa0\044\uffa0" +
    "\046\uffa0\047\uffa0\050\uffa0\051\uffa0\052\uffa0\061\uffa0\001" +
    "\002\000\004\043\172\001\002\000\046\004\uffe5\007\uffe5" +
    "\010\uffe5\011\uffe5\015\uffe5\020\uffe5\021\uffe5\022\uffe5\023" +
    "\uffe5\024\uffe5\026\uffe5\044\uffe5\046\uffe5\047\uffe5\050\uffe5" +
    "\051\uffe5\052\uffe5\061\uffe5\001\002\000\004\065\173\001" +
    "\002\000\004\044\174\001\002\000\046\004\uff9c\007\uff9c" +
    "\010\uff9c\011\uff9c\015\uff9c\020\uff9c\021\uff9c\022\uff9c\023" +
    "\uff9c\024\uff9c\026\uff9c\044\uff9c\046\uff9c\047\uff9c\050\uff9c" +
    "\051\uff9c\052\uff9c\061\uff9c\001\002\000\004\065\176\001" +
    "\002\000\004\044\177\001\002\000\046\004\uff9e\007\uff9e" +
    "\010\uff9e\011\uff9e\015\uff9e\020\uff9e\021\uff9e\022\uff9e\023" +
    "\uff9e\024\uff9e\026\uff9e\044\uff9e\046\uff9e\047\uff9e\050\uff9e" +
    "\051\uff9e\052\uff9e\061\uff9e\001\002\000\004\065\201\001" +
    "\002\000\004\044\202\001\002\000\046\004\uff9d\007\uff9d" +
    "\010\uff9d\011\uff9d\015\uff9d\020\uff9d\021\uff9d\022\uff9d\023" +
    "\uff9d\024\uff9d\026\uff9d\044\uff9d\046\uff9d\047\uff9d\050\uff9d" +
    "\051\uff9d\052\uff9d\061\uff9d\001\002\000\020\007\013\010" +
    "\016\011\020\045\205\051\054\052\044\061\061\001\002" +
    "\000\040\007\uffdc\010\uffdc\011\uffdc\015\uffdc\016\uffdc\020" +
    "\uffdc\021\uffdc\022\uffdc\023\uffdc\024\uffdc\026\uffdc\046\uffdc" +
    "\051\uffdc\052\uffdc\061\uffdc\001\002\000\032\007\uffec\010" +
    "\uffec\011\uffec\015\uffec\020\uffec\021\uffec\022\uffec\023\uffec" +
    "\046\uffec\051\uffec\052\uffec\061\uffec\001\002\000\004\050" +
    "\210\001\002\000\036\007\uffdb\010\uffdb\011\uffdb\015\uffdb" +
    "\020\uffdb\021\uffdb\022\uffdb\023\uffdb\024\uffdb\026\uffdb\046" +
    "\uffdb\051\uffdb\052\uffdb\061\uffdb\001\002\000\040\007\uffc9" +
    "\010\uffc9\011\uffc9\015\uffc9\016\uffc9\020\uffc9\021\uffc9\022" +
    "\uffc9\023\uffc9\024\uffc9\026\uffc9\046\uffc9\051\uffc9\052\uffc9" +
    "\061\uffc9\001\002\000\032\007\013\010\016\011\020\015" +
    "\062\020\067\021\053\022\063\023\047\046\212\051\054" +
    "\052\044\061\061\001\002\000\040\007\uffdd\010\uffdd\011" +
    "\uffdd\015\uffdd\016\uffdd\020\uffdd\021\uffdd\022\uffdd\023\uffdd" +
    "\024\uffdd\026\uffdd\046\uffdd\051\uffdd\052\uffdd\061\uffdd\001" +
    "\002\000\100\004\uffbb\007\uffbb\010\uffbb\011\uffbb\012\uffbb" +
    "\013\uffbb\015\uffbb\020\uffbb\021\uffbb\022\uffbb\023\uffbb\024" +
    "\uffbb\026\uffbb\030\uffbb\031\uffbb\032\uffbb\033\uffbb\034\uffbb" +
    "\035\uffbb\036\uffbb\037\uffbb\040\uffbb\041\uffbb\042\uffbb\044" +
    "\uffbb\046\uffbb\047\uffbb\050\uffbb\051\uffbb\052\uffbb\061\uffbb" +
    "\001\002\000\016\036\112\037\105\043\135\061\101\062" +
    "\110\063\104\001\002\000\076\004\uffc2\007\uffc2\010\uffc2" +
    "\011\uffc2\012\uffc2\013\uffc2\015\uffc2\020\uffc2\021\uffc2\022" +
    "\uffc2\023\uffc2\024\uffc2\026\uffc2\030\uffc2\031\uffc2\032\uffc2" +
    "\033\uffc2\034\uffc2\035\uffc2\036\uffc2\040\144\041\146\042" +
    "\145\044\uffc2\046\uffc2\047\uffc2\050\uffc2\051\uffc2\052\uffc2" +
    "\061\uffc2\001\002\000\100\004\uffbc\007\uffbc\010\uffbc\011" +
    "\uffbc\012\uffbc\013\uffbc\015\uffbc\020\uffbc\021\uffbc\022\uffbc" +
    "\023\uffbc\024\uffbc\026\uffbc\030\uffbc\031\uffbc\032\uffbc\033" +
    "\uffbc\034\uffbc\035\uffbc\036\uffbc\037\uffbc\040\uffbc\041\uffbc" +
    "\042\uffbc\044\uffbc\046\uffbc\047\uffbc\050\uffbc\051\uffbc\052" +
    "\uffbc\061\uffbc\001\002\000\012\012\uffb1\013\uffb1\044\uffb1" +
    "\050\uffb1\001\002\000\004\021\221\001\002\000\004\043" +
    "\222\001\002\000\020\014\100\036\112\037\105\043\114" +
    "\061\101\062\110\063\104\001\002\000\006\013\120\044" +
    "\224\001\002\000\004\050\225\001\002\000\036\007\uffd6" +
    "\010\uffd6\011\uffd6\015\uffd6\020\uffd6\021\uffd6\022\uffd6\023" +
    "\uffd6\024\uffd6\026\uffd6\046\uffd6\051\uffd6\052\uffd6\061\uffd6" +
    "\001\002\000\020\014\100\036\112\037\105\043\114\061" +
    "\101\062\110\063\104\001\002\000\006\013\120\044\230" +
    "\001\002\000\020\007\013\010\016\011\020\045\205\051" +
    "\054\052\044\061\061\001\002\000\040\007\uffd3\010\uffd3" +
    "\011\uffd3\015\uffd3\016\uffd3\020\uffd3\021\uffd3\022\uffd3\023" +
    "\uffd3\024\uffd3\026\uffd3\046\uffd3\051\uffd3\052\uffd3\061\uffd3" +
    "\001\002\000\040\007\uffd1\010\uffd1\011\uffd1\015\uffd1\016" +
    "\234\020\uffd1\021\uffd1\022\uffd1\023\uffd1\024\uffd1\026\uffd1" +
    "\046\uffd1\051\uffd1\052\uffd1\061\uffd1\001\002\000\036\007" +
    "\uffd5\010\uffd5\011\uffd5\015\uffd5\020\uffd5\021\uffd5\022\uffd5" +
    "\023\uffd5\024\uffd5\026\uffd5\046\uffd5\051\uffd5\052\uffd5\061" +
    "\uffd5\001\002\000\022\007\013\010\016\011\020\015\236" +
    "\045\205\051\054\052\044\061\061\001\002\000\036\007" +
    "\uffd2\010\uffd2\011\uffd2\015\uffd2\020\uffd2\021\uffd2\022\uffd2" +
    "\023\uffd2\024\uffd2\026\uffd2\046\uffd2\051\uffd2\052\uffd2\061" +
    "\uffd2\001\002\000\004\043\237\001\002\000\020\014\100" +
    "\036\112\037\105\043\114\061\101\062\110\063\104\001" +
    "\002\000\006\013\120\044\241\001\002\000\020\007\013" +
    "\010\016\011\020\045\205\051\054\052\044\061\061\001" +
    "\002\000\040\007\uffd4\010\uffd4\011\uffd4\015\uffd4\016\uffd4" +
    "\020\uffd4\021\uffd4\022\uffd4\023\uffd4\024\uffd4\026\uffd4\046" +
    "\uffd4\051\uffd4\052\uffd4\061\uffd4\001\002\000\040\007\uffca" +
    "\010\uffca\011\uffca\015\uffca\016\uffca\020\uffca\021\uffca\022" +
    "\uffca\023\uffca\024\uffca\026\uffca\046\uffca\051\uffca\052\uffca" +
    "\061\uffca\001\002\000\014\043\245\062\251\063\246\064" +
    "\253\065\252\001\002\000\016\036\112\037\105\043\135" +
    "\061\101\062\110\063\104\001\002\000\006\036\uffa3\044" +
    "\uffa3\001\002\000\006\036\uffa7\044\uffa7\001\002\000\006" +
    "\036\254\044\255\001\002\000\006\036\uffa4\044\uffa4\001" +
    "\002\000\006\036\uffa6\044\uffa6\001\002\000\006\036\uffa5" +
    "\044\uffa5\001\002\000\014\043\245\062\251\063\246\064" +
    "\253\065\252\001\002\000\004\050\uffc7\001\002\000\006" +
    "\036\uffa8\044\uffa8\001\002\000\006\036\125\044\260\001" +
    "\002\000\006\036\uffa2\044\uffa2\001\002\000\020\014\100" +
    "\036\112\037\105\043\114\061\101\062\110\063\104\001" +
    "\002\000\006\013\120\044\263\001\002\000\020\007\013" +
    "\010\016\011\020\045\205\051\054\052\044\061\061\001" +
    "\002\000\036\007\uffde\010\uffde\011\uffde\015\uffde\020\uffde" +
    "\021\uffde\022\uffde\023\uffde\024\uffde\026\uffde\046\uffde\051" +
    "\uffde\052\uffde\061\uffde\001\002\000\040\007\uffc8\010\uffc8" +
    "\011\uffc8\015\uffc8\016\uffc8\020\uffc8\021\uffc8\022\uffc8\023" +
    "\uffc8\024\uffc8\026\uffc8\046\uffc8\051\uffc8\052\uffc8\061\uffc8" +
    "\001\002\000\026\036\112\037\105\043\135\053\166\054" +
    "\164\055\170\061\101\062\110\063\104\064\167\001\002" +
    "\000\004\044\270\001\002\000\004\045\271\001\002\000" +
    "\010\024\uffce\026\uffce\046\uffce\001\002\000\010\024\276" +
    "\026\274\046\uffcb\001\002\000\004\046\303\001\002\000" +
    "\004\025\301\001\002\000\010\024\uffcf\026\uffcf\046\uffcf" +
    "\001\002\000\004\025\277\001\002\000\030\007\013\010" +
    "\016\011\020\015\062\020\067\021\053\022\063\023\047" +
    "\051\054\052\044\061\061\001\002\000\010\024\uffcd\026" +
    "\uffcd\046\uffcd\001\002\000\030\007\013\010\016\011\020" +
    "\015\062\020\067\021\053\022\063\023\047\051\054\052" +
    "\044\061\061\001\002\000\004\046\uffcc\001\002\000\036" +
    "\007\uffd0\010\uffd0\011\uffd0\015\uffd0\020\uffd0\021\uffd0\022" +
    "\uffd0\023\uffd0\024\uffd0\026\uffd0\046\uffd0\051\uffd0\052\uffd0" +
    "\061\uffd0\001\002\000\014\043\245\062\251\063\246\064" +
    "\253\065\252\001\002\000\006\036\254\044\306\001\002" +
    "\000\004\050\uffc6\001\002\000\004\043\310\001\002\000" +
    "\012\007\013\010\016\011\020\044\ufff0\001\002\000\004" +
    "\044\312\001\002\000\004\045\313\001\002\000\032\007" +
    "\uffec\010\uffec\011\uffec\015\uffec\020\uffec\021\uffec\022\uffec" +
    "\023\uffec\046\uffec\051\uffec\052\uffec\061\uffec\001\002\000" +
    "\032\007\013\010\016\011\020\015\062\020\067\021\053" +
    "\022\063\023\047\046\315\051\054\052\044\061\061\001" +
    "\002\000\014\004\ufff8\007\ufff8\010\ufff8\011\ufff8\046\ufff8" +
    "\001\002\000\014\004\ufffc\007\ufffc\010\ufffc\011\ufffc\046" +
    "\ufffc\001\002\000\006\002\ufffd\004\ufffd\001\002\000\044" +
    "\004\uffe6\007\uffe6\010\uffe6\011\uffe6\015\uffe6\020\uffe6\021" +
    "\uffe6\022\uffe6\023\uffe6\024\uffe6\026\uffe6\046\uffe6\047\uffe6" +
    "\050\uffe6\051\uffe6\052\uffe6\061\uffe6\001\002\000\044\004" +
    "\uffe8\007\uffe8\010\uffe8\011\uffe8\015\uffe8\020\uffe8\021\uffe8" +
    "\022\uffe8\023\uffe8\024\uffe8\026\uffe8\046\uffe8\047\322\050" +
    "\uffe8\051\uffe8\052\uffe8\061\uffe8\001\002\000\004\061\061" +
    "\001\002\000\044\004\uffe7\007\uffe7\010\uffe7\011\uffe7\015" +
    "\uffe7\020\uffe7\021\uffe7\022\uffe7\023\uffe7\024\uffe7\026\uffe7" +
    "\046\uffe7\047\uffe7\050\uffe7\051\uffe7\052\uffe7\061\uffe7\001" +
    "\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\322\000\006\002\003\003\004\001\001\000\002\001" +
    "\001\000\004\004\006\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\014\005" +
    "\016\006\013\007\021\011\014\016\020\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\017\320\020\317\001" +
    "\001\000\002\001\001\000\012\006\315\007\021\011\014" +
    "\016\020\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\010\023\011\025\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\011\031\012\030\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\013\033\001\001\000\002\001" +
    "\001\000\004\011\035\001\001\000\002\001\001\000\004" +
    "\013\037\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\014\042\001\001\000\032\011\014\015\065\016\044" +
    "\020\057\021\055\022\045\024\064\027\056\030\051\033" +
    "\047\037\054\040\050\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\016\011\014\016\205\020\057\023\217\037" +
    "\203\040\050\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\011\072\025" +
    "\070\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\020\073\001\001\000\002\001\001\000\022\042\101\043" +
    "\106\045\102\046\105\047\112\050\076\051\110\052\075" +
    "\001\001\000\002\001\001\000\002\001\001\000\016\042" +
    "\101\043\106\045\102\046\105\051\216\052\075\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\045\215\046\105\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\045\212\046\105\001\001\000\002\001\001" +
    "\000\022\042\114\043\106\045\102\046\105\047\115\050" +
    "\076\051\110\052\075\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\020\042\101\043\106\045" +
    "\102\046\105\050\120\051\110\052\075\001\001\000\002" +
    "\001\001\000\016\042\101\043\106\045\102\046\105\051" +
    "\122\052\075\001\001\000\002\001\001\000\012\042\151" +
    "\043\106\045\102\046\105\001\001\000\010\043\142\045" +
    "\102\046\105\001\001\000\012\042\141\043\106\045\102" +
    "\046\105\001\001\000\012\042\140\043\106\045\102\046" +
    "\105\001\001\000\012\042\137\043\106\045\102\046\105" +
    "\001\001\000\012\042\136\043\106\045\102\046\105\001" +
    "\001\000\002\001\001\000\012\042\133\043\106\045\102" +
    "\046\105\001\001\000\002\001\001\000\012\042\135\043" +
    "\106\045\102\046\105\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\045\150\046\105\001\001" +
    "\000\006\045\147\046\105\001\001\000\006\045\146\046" +
    "\105\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\020\154\026\153\041" +
    "\155\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\016\042" +
    "\162\043\106\045\102\046\105\054\170\055\164\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\016\011\014\016\205\020\057\023\206" +
    "\037\203\040\050\001\001\000\002\001\001\000\004\014" +
    "\210\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\032\011\014\015\065\016\044\020\057\021" +
    "\055\022\045\024\064\027\056\030\051\033\047\037\054" +
    "\040\050\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\043\214\045\102\046\105\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\022\042\101\043\106\045\102\046\105" +
    "\047\222\050\076\051\110\052\075\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\022\042\101" +
    "\043\106\045\102\046\105\047\226\050\076\051\110\052" +
    "\075\001\001\000\002\001\001\000\016\011\014\016\205" +
    "\020\057\023\230\037\203\040\050\001\001\000\004\031" +
    "\231\001\001\000\004\032\232\001\001\000\002\001\001" +
    "\000\016\011\014\016\205\020\057\023\234\037\203\040" +
    "\050\001\001\000\002\001\001\000\002\001\001\000\022" +
    "\042\101\043\106\045\102\046\105\047\237\050\076\051" +
    "\110\052\075\001\001\000\002\001\001\000\016\011\014" +
    "\016\205\020\057\023\241\037\203\040\050\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\044\246\053\247" +
    "\001\001\000\012\042\256\043\106\045\102\046\105\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\044\255\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\022\042\101\043" +
    "\106\045\102\046\105\047\261\050\076\051\110\052\075" +
    "\001\001\000\002\001\001\000\016\011\014\016\205\020" +
    "\057\023\263\037\203\040\050\001\001\000\002\001\001" +
    "\000\002\001\001\000\016\042\162\043\106\045\102\046" +
    "\105\054\266\055\164\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\034\271\001\001\000\006\035\274\036" +
    "\272\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\032\011\014\015\277\016" +
    "\044\020\057\021\055\022\045\024\064\027\056\030\051" +
    "\033\047\037\054\040\050\001\001\000\002\001\001\000" +
    "\032\011\014\015\301\016\044\020\057\021\055\022\045" +
    "\024\064\027\056\030\051\033\047\037\054\040\050\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\044\246" +
    "\053\304\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\011\031\012\310\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\014\313\001\001\000" +
    "\032\011\014\015\065\016\044\020\057\021\055\022\045" +
    "\024\064\027\056\030\051\033\047\037\054\040\050\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\020\322\001" +
    "\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$SintaxisJava$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$SintaxisJava$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$SintaxisJava$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    private Symbol s;
    
    public void syntax_error(Symbol sym){
        System.out.println("\n" + sym.value + sym.sym);
        System.out.println("Error Sintactico en la letra: " + sym.value + "   <linea>: "  + (sym.right + 1) + "    <columna>: " + (sym.left + 1) + "\n");
    }

    public void unrecovered_syntax_error(Symbol sym) throws java.lang.Exception{
        System.out.println("\n" + sym.value + sym.sym);
        System.out.println("Error Sintactico en la letra: " + sym.value + "   <linea>: "  + (sym.right + 1) + "    <columna>: " + (sym.left + 1) + "\n");
    }

    public Symbol getS(){
        System.out.println(this.s.value);
        System.out.print(this.s.value);
        return this.s;
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$SintaxisJava$actions {
  private final SintaxisJava parser;

  /** Constructor */
  CUP$SintaxisJava$actions(SintaxisJava parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$SintaxisJava$do_action_part00000000(
    int                        CUP$SintaxisJava$act_num,
    java_cup.runtime.lr_parser CUP$SintaxisJava$parser,
    java.util.Stack            CUP$SintaxisJava$stack,
    int                        CUP$SintaxisJava$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$SintaxisJava$result;

      /* select the action based on the action number */
      switch (CUP$SintaxisJava$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= JAVA EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-1)).value;
		RESULT = start_val;
              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$SintaxisJava$parser.done_parsing();
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // JAVA ::= CLASSES 
            {
              Object RESULT =null;

              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("JAVA",0, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // CLASSES ::= CLASSES CLASS 
            {
              Object RESULT =null;

              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("CLASSES",1, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // CLASSES ::= 
            {
              Object RESULT =null;

              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("CLASSES",1, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // CLASS ::= publicc classs id llavea STATEMENTS_CLASS llavec 
            {
              Object RESULT =null;

              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("CLASS",2, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-5)), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // STATEMENTS_CLASS ::= STATEMENTS_CLASS STATEMENT_CLASS 
            {
              Object RESULT =null;

              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("STATEMENTS_CLASS",3, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // STATEMENTS_CLASS ::= STATEMENT_CLASS 
            {
              Object RESULT =null;

              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("STATEMENTS_CLASS",3, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // STATEMENT_CLASS ::= METODO 
            {
              Object RESULT =null;

              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("STATEMENT_CLASS",4, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // STATEMENT_CLASS ::= DEF_VAR 
            {
              Object RESULT =null;

              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("STATEMENT_CLASS",4, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // METODO ::= publicc TYPE_V id para LIST_PAR parc llavea STATEMENTS_METODO llavec 
            {
              Object RESULT =null;

              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("METODO",5, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-8)), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // METODO ::= publicc id para LIST_PAR parc llavea STATEMENTS_METODO llavec 
            {
              Object RESULT =null;

              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("METODO",5, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-7)), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // TYPE_V ::= voidd 
            {
              Object RESULT =null;

              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("TYPE_V",6, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // TYPE_V ::= TYPE 
            {
              Object RESULT =null;

              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("TYPE_V",6, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // TYPE ::= intt 
            {
              Object RESULT =null;

              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("TYPE",7, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // TYPE ::= floatt 
            {
              Object RESULT =null;

              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("TYPE",7, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // TYPE ::= charr 
            {
              Object RESULT =null;

              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("TYPE",7, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // LIST_PAR ::= TYPE id LIST_PARR 
            {
              Object RESULT =null;

              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("LIST_PAR",8, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // LIST_PAR ::= 
            {
              Object RESULT =null;

              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("LIST_PAR",8, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // LIST_PARR ::= coma TYPE id LIST_PARR 
            {
              Object RESULT =null;

              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("LIST_PARR",9, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // LIST_PARR ::= 
            {
              Object RESULT =null;

              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("LIST_PARR",9, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // STATEMENTS_METODO ::= STATEMENTS_METODO STATEMENT_METODO 
            {
              Object RESULT =null;

              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("STATEMENTS_METODO",10, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // STATEMENTS_METODO ::= 
            {
              Object RESULT =null;

              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("STATEMENTS_METODO",10, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // STATEMENT_METODO ::= DEF_VAR 
            {
              Object RESULT =null;

              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("STATEMENT_METODO",11, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // STATEMENT_METODO ::= COMP_STATE 
            {
              Object RESULT =null;

              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("STATEMENT_METODO",11, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // STATEMENT_METODO ::= STATEMENT_LINE 
            {
              Object RESULT =null;

              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("STATEMENT_METODO",11, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // DEF_VAR ::= TYPE LIST_VAR 
            {
              Object RESULT =null;

              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("DEF_VAR",12, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // LIST_VAR ::= LIST_VAR coma AS_VAR 
            {
              Object RESULT =null;

              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("LIST_VAR",13, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // LIST_VAR ::= AS_VAR 
            {
              Object RESULT =null;

              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("LIST_VAR",13, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // AS_VAR ::= id igual EXPR 
            {
              Object RESULT =null;

              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("AS_VAR",14, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // AS_VAR ::= id 
            {
              Object RESULT =null;

              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("AS_VAR",14, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // COMP_STATE ::= WHILE 
            {
              Object RESULT =null;

              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("COMP_STATE",15, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // COMP_STATE ::= FOR 
            {
              Object RESULT =null;

              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("COMP_STATE",15, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // COMP_STATE ::= DO_WHILE 
            {
              Object RESULT =null;

              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("COMP_STATE",15, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // COMP_STATE ::= IF_ELSE 
            {
              Object RESULT =null;

              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("COMP_STATE",15, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // COMP_STATE ::= SWITCH 
            {
              Object RESULT =null;

              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("COMP_STATE",15, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // WHILE ::= whilee para CONDICION parc BLOQUE 
            {
              Object RESULT =null;

              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("WHILE",16, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-4)), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // BLOQUE ::= llavea STATEMENTS_METODO llavec 
            {
              Object RESULT =null;

              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("BLOQUE",17, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // BLOQUE ::= STATEMENT_LINE 
            {
              Object RESULT =null;

              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("BLOQUE",17, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // FOR ::= forr para INICIO puntocoma CONDICION puntocoma STEP parc BLOQUE 
            {
              Object RESULT =null;

              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("FOR",18, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-8)), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // INICIO ::= id 
            {
              Object RESULT =null;

              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("INICIO",19, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // INICIO ::= TYPE AS_VAR 
            {
              Object RESULT =null;

              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("INICIO",19, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // STEP ::= AS_VAR 
            {
              Object RESULT =null;

              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("STEP",20, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // STEP ::= OP_VAR 
            {
              Object RESULT =null;

              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("STEP",20, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // DO_WHILE ::= doo BLOQUE whilee para CONDICION parc puntocoma 
            {
              Object RESULT =null;

              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("DO_WHILE",21, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-6)), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // IF_ELSE ::= iff para CONDICION parc BLOQUE ELSEIF ELSE 
            {
              Object RESULT =null;

              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("IF_ELSE",22, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-6)), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // ELSEIF ::= ELSEIF elsee iff para CONDICION parc BLOQUE 
            {
              Object RESULT =null;

              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("ELSEIF",23, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-6)), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // ELSEIF ::= 
            {
              Object RESULT =null;

              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("ELSEIF",23, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // ELSE ::= elsee BLOQUE 
            {
              Object RESULT =null;

              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("ELSE",24, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // ELSE ::= 
            {
              Object RESULT =null;

              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("ELSE",24, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // SWITCH ::= switchh para EXPR parc llavea CASES DEFAULT llavec 
            {
              Object RESULT =null;

              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("SWITCH",25, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-7)), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // CASES ::= CASES CASE 
            {
              Object RESULT =null;

              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("CASES",26, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // CASES ::= 
            {
              Object RESULT =null;

              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("CASES",26, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // CASE ::= casee dosp STATEMENT_METODO 
            {
              Object RESULT =null;

              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("CASE",27, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // DEFAULT ::= defaultt dosp STATEMENT_METODO 
            {
              Object RESULT =null;

              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("DEFAULT",28, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // DEFAULT ::= 
            {
              Object RESULT =null;

              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("DEFAULT",28, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // STATEMENT_LINE ::= AS_VAR puntocoma 
            {
              Object RESULT =null;

              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("STATEMENT_LINE",29, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // STATEMENT_LINE ::= DEF_VAR puntocoma 
            {
              Object RESULT =null;

              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("STATEMENT_LINE",29, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // STATEMENT_LINE ::= WRITE puntocoma 
            {
              Object RESULT =null;

              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("STATEMENT_LINE",29, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // WRITE ::= println para STRING parc 
            {
              Object RESULT =null;

              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("WRITE",30, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // WRITE ::= print para STRING parc 
            {
              Object RESULT =null;

              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("WRITE",30, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // OP_VAR ::= id masmas 
            {
              Object RESULT =null;

              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("OP_VAR",31, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // OP_VAR ::= id menosmenos 
            {
              Object RESULT =null;

              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("OP_VAR",31, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // OPERACION_A ::= OPERACION_A mas OPERACION_M 
            {
              Object RESULT =null;

              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("OPERACION_A",32, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // OPERACION_A ::= OPERACION_M menos OPERACION_M 
            {
              Object RESULT =null;

              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("OPERACION_A",32, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // OPERACION_A ::= OPERACION_M 
            {
              Object RESULT =null;

              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("OPERACION_A",32, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // OPERACION_M ::= OPERACION_M por OPERACION_U 
            {
              Object RESULT =null;

              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("OPERACION_M",33, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // OPERACION_M ::= OPERACION_M div OPERACION_U 
            {
              Object RESULT =null;

              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("OPERACION_M",33, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // OPERACION_M ::= OPERACION_M mod OPERACION_U 
            {
              Object RESULT =null;

              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("OPERACION_M",33, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // OPERACION_M ::= OPERACION_U 
            {
              Object RESULT =null;

              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("OPERACION_M",33, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // OPERACION_U ::= menos OPERACION_U 
            {
              Object RESULT =null;

              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("OPERACION_U",35, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // OPERACION_U ::= mas OPERACION_U 
            {
              Object RESULT =null;

              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("OPERACION_U",35, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // OPERACION_U ::= ATOM 
            {
              Object RESULT =null;

              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("OPERACION_U",35, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // ATOM ::= id 
            {
              Object RESULT =null;

              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("ATOM",36, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // ATOM ::= entero 
            {
              Object RESULT =null;

              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("ATOM",36, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // ATOM ::= decimal 
            {
              Object RESULT =null;

              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("ATOM",36, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // ATOM ::= para OPERACION_A parc 
            {
              Object RESULT =null;

              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("ATOM",36, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // CONDICION ::= CONDICION orr AND 
            {
              Object RESULT =null;

              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("CONDICION",37, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // CONDICION ::= AND 
            {
              Object RESULT =null;

              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("CONDICION",37, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // AND ::= AND andd NOT 
            {
              Object RESULT =null;

              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("AND",38, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // AND ::= NOT 
            {
              Object RESULT =null;

              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("AND",38, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // NOT ::= nott NOT 
            {
              Object RESULT =null;

              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("NOT",39, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // NOT ::= COMPARACION 
            {
              Object RESULT =null;

              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("NOT",39, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // COMPARACION ::= OPERACION_A igig OPERACION_A 
            {
              Object RESULT =null;

              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("COMPARACION",40, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // COMPARACION ::= OPERACION_A noigual OPERACION_A 
            {
              Object RESULT =null;

              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("COMPARACION",40, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // COMPARACION ::= OPERACION_A menor OPERACION_A 
            {
              Object RESULT =null;

              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("COMPARACION",40, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // COMPARACION ::= OPERACION_A menorig OPERACION_A 
            {
              Object RESULT =null;

              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("COMPARACION",40, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // COMPARACION ::= OPERACION_A mayor OPERACION_A 
            {
              Object RESULT =null;

              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("COMPARACION",40, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // COMPARACION ::= OPERACION_A mayorig OPERACION_A 
            {
              Object RESULT =null;

              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("COMPARACION",40, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // COMPARACION ::= para CONDICION parc 
            {
              Object RESULT =null;

              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("COMPARACION",40, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // STRING ::= STRING mas EXPR_STRING 
            {
              Object RESULT =null;

              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("STRING",41, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // STRING ::= EXPR_STRING 
            {
              Object RESULT =null;

              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("STRING",41, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // EXPR_STRING ::= string 
            {
              Object RESULT =null;

              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("EXPR_STRING",34, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // EXPR_STRING ::= character 
            {
              Object RESULT =null;

              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("EXPR_STRING",34, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // EXPR_STRING ::= entero 
            {
              Object RESULT =null;

              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("EXPR_STRING",34, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // EXPR_STRING ::= decimal 
            {
              Object RESULT =null;

              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("EXPR_STRING",34, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // EXPR_STRING ::= para OPERACION_A parc 
            {
              Object RESULT =null;

              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("EXPR_STRING",34, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // EXPR ::= OPERACION_A 
            {
              Object RESULT =null;

              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("EXPR",42, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // EXPR ::= character 
            {
              Object RESULT =null;

              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("EXPR",42, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // EXPR ::= INPUT 
            {
              Object RESULT =null;

              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("EXPR",42, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // INPUT ::= charinput para string parc 
            {
              Object RESULT =null;

              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("INPUT",43, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // INPUT ::= intinput para string parc 
            {
              Object RESULT =null;

              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("INPUT",43, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // INPUT ::= floatinput para string parc 
            {
              Object RESULT =null;

              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("INPUT",43, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$SintaxisJava$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$SintaxisJava$do_action(
    int                        CUP$SintaxisJava$act_num,
    java_cup.runtime.lr_parser CUP$SintaxisJava$parser,
    java.util.Stack            CUP$SintaxisJava$stack,
    int                        CUP$SintaxisJava$top)
    throws java.lang.Exception
    {
              return CUP$SintaxisJava$do_action_part00000000(
                               CUP$SintaxisJava$act_num,
                               CUP$SintaxisJava$parser,
                               CUP$SintaxisJava$stack,
                               CUP$SintaxisJava$top);
    }
}

}
