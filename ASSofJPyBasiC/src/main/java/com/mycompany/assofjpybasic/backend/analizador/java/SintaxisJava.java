
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package com.mycompany.assofjpybasic.backend.analizador.java;

import java_cup.runtime.*;
import com.mycompany.assofjpybasic.backend.semantica.java.*;
import com.mycompany.assofjpybasic.backend.semantica.programa.*;
import com.mycompany.assofjpybasic.backend.semantica.programa.cod3.*;
import com.mycompany.assofjpybasic.backend.semantica.python.*;
import com.mycompany.assofjpybasic.backend.error.Errores;
import java.util.ArrayList;
import java.util.List;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class SintaxisJava extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return SintaxisJavaSym.class;
}

  /** Default constructor. */
  @Deprecated
  public SintaxisJava() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public SintaxisJava(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public SintaxisJava(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\272\000\002\002\004\000\002\002\003\000\002\003" +
    "\004\000\002\003\002\000\002\064\002\000\002\004\011" +
    "\000\002\065\002\000\002\004\011\000\002\066\002\000" +
    "\002\004\011\000\002\067\002\000\002\004\011\000\002" +
    "\004\004\000\002\037\004\000\002\037\002\000\002\030" +
    "\003\000\002\030\003\000\002\030\004\000\002\030\004" +
    "\000\002\070\002\000\002\006\013\000\002\071\002\000" +
    "\002\006\013\000\002\072\002\000\002\006\013\000\002" +
    "\073\002\000\002\006\013\000\002\074\002\000\002\005" +
    "\014\000\002\075\002\000\002\005\014\000\002\076\002" +
    "\000\002\005\014\000\002\077\002\000\002\005\014\000" +
    "\002\007\003\000\002\007\003\000\002\010\003\000\002" +
    "\010\003\000\002\010\003\000\002\012\005\000\002\012" +
    "\002\000\002\013\006\000\002\013\002\000\002\041\004" +
    "\000\002\041\003\000\002\041\004\000\002\041\002\000" +
    "\002\044\005\000\002\042\003\000\002\042\003\000\002" +
    "\042\004\000\002\100\002\000\002\043\005\000\002\063" +
    "\005\000\002\063\003\000\002\057\005\000\002\057\003" +
    "\000\002\045\003\000\002\045\003\000\002\045\003\000" +
    "\002\045\003\000\002\045\003\000\002\032\007\000\002" +
    "\032\007\000\002\032\007\000\002\032\007\000\002\101" +
    "\002\000\002\040\006\000\002\040\003\000\002\033\013" +
    "\000\002\033\013\000\002\033\013\000\002\033\013\000" +
    "\002\033\013\000\002\033\013\000\002\033\013\000\002" +
    "\052\003\000\002\102\002\000\002\052\005\000\002\053" +
    "\003\000\002\053\003\000\002\034\011\000\002\034\011" +
    "\000\002\034\011\000\002\034\011\000\002\034\011\000" +
    "\002\034\011\000\002\035\011\000\002\035\011\000\002" +
    "\035\011\000\002\035\011\000\002\023\011\000\002\023" +
    "\002\000\002\023\011\000\002\023\011\000\002\023\011" +
    "\000\002\023\011\000\002\036\004\000\002\036\002\000" +
    "\002\046\012\000\002\046\012\000\002\046\012\000\002" +
    "\046\012\000\002\103\002\000\002\056\010\000\002\056" +
    "\002\000\002\056\007\000\002\104\002\000\002\047\006" +
    "\000\002\047\002\000\002\031\004\000\002\031\004\000" +
    "\002\031\004\000\002\031\004\000\002\055\006\000\002" +
    "\050\006\000\002\050\006\000\002\050\006\000\002\050" +
    "\006\000\002\050\006\000\002\054\005\000\002\054\005" +
    "\000\002\014\005\000\002\014\005\000\002\014\003\000" +
    "\002\014\004\000\002\015\005\000\002\015\005\000\002" +
    "\015\005\000\002\015\003\000\002\016\004\000\002\016" +
    "\004\000\002\016\003\000\002\017\005\000\002\017\003" +
    "\000\002\017\003\000\002\017\003\000\002\017\005\000" +
    "\002\017\003\000\002\062\005\000\002\062\002\000\002" +
    "\011\004\000\002\011\002\000\002\026\005\000\002\026" +
    "\003\000\002\025\005\000\002\025\003\000\002\024\004" +
    "\000\002\024\003\000\002\024\005\000\002\027\005\000" +
    "\002\027\005\000\002\027\005\000\002\027\005\000\002" +
    "\027\005\000\002\027\005\000\002\051\005\000\002\051" +
    "\005\000\002\051\003\000\002\051\003\000\002\020\003" +
    "\000\002\020\004\000\002\020\003\000\002\020\003\000" +
    "\002\020\003\000\002\020\005\000\002\021\006\000\002" +
    "\021\006\000\002\021\006\000\002\021\006\000\002\021" +
    "\006\000\002\021\006\000\002\021\006\000\002\021\006" +
    "\000\002\021\006\000\002\021\006\000\002\021\006\000" +
    "\002\021\006\000\002\022\006\000\002\022\006\000\002" +
    "\022\006\000\002\061\003\000\002\061\002\000\002\060" +
    "\005\000\002\060\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u01c4\000\010\002\ufffe\003\ufffe\004\ufffe\001\002\000" +
    "\004\002\u01c6\001\002\000\010\002\000\003\007\004\006" +
    "\001\002\000\006\003\013\005\012\001\002\000\006\003" +
    "\007\004\006\001\002\000\010\002\uffff\003\uffff\004\uffff" +
    "\001\002\000\010\002\ufff5\003\ufff5\004\ufff5\001\002\000" +
    "\006\003\u01b8\063\u01b9\001\002\000\004\063\014\001\002" +
    "\000\004\047\015\001\002\000\016\003\ufffb\004\ufffb\007" +
    "\ufffb\010\ufffb\011\ufffb\050\ufffb\001\002\000\016\003\ufff3" +
    "\004\ufff3\007\ufff3\010\ufff3\011\ufff3\050\ufff3\001\002\000" +
    "\016\003\025\004\032\007\020\010\023\011\026\050\024" +
    "\001\002\000\006\003\uffdc\063\uffdc\001\002\000\016\003" +
    "\ufff4\004\ufff4\007\ufff4\010\ufff4\011\ufff4\050\ufff4\001\002" +
    "\000\004\063\uffcd\001\002\000\006\003\uffdb\063\uffdb\001" +
    "\002\000\010\002\ufffa\003\ufffa\004\ufffa\001\002\000\014" +
    "\003\025\004\032\007\020\010\023\011\026\001\002\000" +
    "\006\003\uffda\063\uffda\001\002\000\004\052\u01b1\001\002" +
    "\000\016\003\ufff2\004\ufff2\007\ufff2\010\ufff2\011\ufff2\050" +
    "\ufff2\001\002\000\016\003\ufff1\004\ufff1\007\ufff1\010\ufff1" +
    "\011\ufff1\050\ufff1\001\002\000\016\003\033\006\035\007" +
    "\020\010\023\011\026\063\036\001\002\000\006\045\u01a2" +
    "\063\u01a3\001\002\000\006\003\u018c\063\u018d\001\002\000" +
    "\006\003\uffde\063\uffde\001\002\000\006\003\041\045\040" +
    "\001\002\000\006\003\uffdd\063\uffdd\001\002\000\014\003" +
    "\u0180\007\020\010\023\011\026\046\uffd8\001\002\000\012" +
    "\007\020\010\023\011\026\046\uffd8\001\002\000\004\046" +
    "\052\001\002\000\004\063\044\001\002\000\006\046\uffd6" +
    "\051\046\001\002\000\004\046\uffd9\001\002\000\010\007" +
    "\020\010\023\011\026\001\002\000\004\063\050\001\002" +
    "\000\006\046\uffd6\051\046\001\002\000\004\046\uffd7\001" +
    "\002\000\004\047\053\001\002\000\042\003\uffea\007\uffea" +
    "\010\uffea\011\uffea\015\uffea\017\uffea\020\uffea\021\uffea\022" +
    "\uffea\026\uffea\027\uffea\031\uffea\050\uffea\053\uffea\054\uffea" +
    "\063\uffea\001\002\000\042\003\100\007\020\010\023\011" +
    "\026\015\076\017\105\020\067\021\101\022\061\026\077" +
    "\027\102\031\056\050\uffd2\053\071\054\055\063\uff72\001" +
    "\002\000\004\045\u017d\001\002\000\004\052\u017c\001\002" +
    "\000\004\052\u017b\001\002\000\046\003\uffc7\007\uffc7\010" +
    "\uffc7\011\uffc7\015\uffc7\017\uffc7\020\uffc7\021\uffc7\022\uffc7" +
    "\023\uffc7\025\uffc7\026\uffc7\027\uffc7\031\uffc7\050\uffc7\053" +
    "\uffc7\054\uffc7\063\uffc7\001\002\000\006\003\u0157\045\u0156" +
    "\001\002\000\010\023\uffd4\025\uffd4\050\uffd4\001\002\000" +
    "\046\003\uffc3\007\uffc3\010\uffc3\011\uffc3\015\uffc3\017\uffc3" +
    "\020\uffc3\021\uffc3\022\uffc3\023\uffc3\025\uffc3\026\uffc3\027" +
    "\uffc3\031\uffc3\050\uffc3\053\uffc3\054\uffc3\063\uffc3\001\002" +
    "\000\004\052\u0155\001\002\000\004\050\u0154\001\002\000" +
    "\046\003\uffc4\007\uffc4\010\uffc4\011\uffc4\015\uffc4\017\uffc4" +
    "\020\uffc4\021\uffc4\022\uffc4\023\uffc4\025\uffc4\026\uffc4\027" +
    "\uffc4\031\uffc4\050\uffc4\053\uffc4\054\uffc4\063\uffc4\001\002" +
    "\000\006\003\u0148\045\u0147\001\002\000\004\063\u013e\001" +
    "\002\000\006\003\u0127\045\u0126\001\002\000\046\003\uffd0" +
    "\007\uffd0\010\uffd0\011\uffd0\015\uffd0\017\uffd0\020\uffd0\021" +
    "\uffd0\022\uffd0\023\uffd0\025\uffd0\026\uffd0\027\uffd0\031\uffd0" +
    "\050\uffd0\053\uffd0\054\uffd0\063\uffd0\001\002\000\046\003" +
    "\uffcf\007\uffcf\010\uffcf\011\uffcf\015\uffcf\017\uffcf\020\uffcf" +
    "\021\uffcf\022\uffcf\023\uffcf\025\uffcf\026\uffcf\027\uffcf\031" +
    "\uffcf\050\uffcf\053\uffcf\054\uffcf\063\uffcf\001\002\000\046" +
    "\003\uffc5\007\uffc5\010\uffc5\011\uffc5\015\uffc5\017\uffc5\020" +
    "\uffc5\021\uffc5\022\uffc5\023\uffc5\025\uffc5\026\uffc5\027\uffc5" +
    "\031\uffc5\050\uffc5\053\uffc5\054\uffc5\063\uffc5\001\002\000" +
    "\004\052\u0125\001\002\000\006\003\374\045\373\001\002" +
    "\000\032\003\133\027\102\040\136\041\124\045\137\055" +
    "\126\056\122\057\134\063\uff72\064\132\065\123\066\130" +
    "\001\002\000\034\003\100\007\020\010\023\011\026\015" +
    "\076\017\105\020\067\021\101\022\061\027\102\053\071" +
    "\054\055\063\uff72\001\002\000\022\007\020\010\023\011" +
    "\026\027\102\047\253\053\071\054\055\063\uff72\001\002" +
    "\000\004\030\342\001\002\000\046\003\uffc6\007\uffc6\010" +
    "\uffc6\011\uffc6\015\uffc6\017\uffc6\020\uffc6\021\uffc6\022\uffc6" +
    "\023\uffc6\025\uffc6\026\uffc6\027\uffc6\031\uffc6\050\uffc6\053" +
    "\uffc6\054\uffc6\063\uffc6\001\002\000\046\003\100\007\020" +
    "\010\023\011\026\015\076\017\105\020\067\021\101\022" +
    "\061\023\uffd2\025\uffd2\026\077\027\102\031\056\050\uffd2" +
    "\053\071\054\055\063\uff72\001\002\000\006\003\107\045" +
    "\106\001\002\000\016\003\302\007\020\010\023\011\026" +
    "\027\102\063\uff72\001\002\000\014\007\020\010\023\011" +
    "\026\027\102\063\uff72\001\002\000\004\063\300\001\002" +
    "\000\006\003\uffb4\052\uffb4\001\002\000\004\052\223\001" +
    "\002\000\004\063\uffb3\001\002\000\004\063\116\001\002" +
    "\000\006\003\uffb2\052\uffb2\001\002\000\012\003\uffc8\051" +
    "\uffc8\052\uffc8\060\117\001\002\000\032\003\133\027\102" +
    "\040\136\041\124\045\137\055\126\056\122\057\134\063" +
    "\uff72\064\132\065\123\066\130\001\002\000\014\003\uffc9" +
    "\040\141\041\142\051\uffc9\052\uffc9\001\002\000\046\003" +
    "\uff7f\012\uff7f\013\uff7f\024\uff7f\032\uff7f\033\uff7f\034\uff7f" +
    "\035\uff7f\036\uff7f\037\uff7f\040\uff7f\041\uff7f\042\uff7f\043" +
    "\uff7f\044\uff7f\046\uff7f\051\uff7f\052\uff7f\001\002\000\006" +
    "\003\213\045\212\001\002\000\046\003\uff79\012\uff79\013" +
    "\uff79\024\uff79\032\uff79\033\uff79\034\uff79\035\uff79\036\uff79" +
    "\037\uff79\040\uff79\041\uff79\042\uff79\043\uff79\044\uff79\046" +
    "\uff79\051\uff79\052\uff79\001\002\000\030\027\102\040\136" +
    "\041\124\045\137\055\126\056\122\057\134\063\uff72\064" +
    "\132\065\123\066\130\001\002\000\046\003\uff7c\012\uff7c" +
    "\013\uff7c\024\uff7c\032\uff7c\033\uff7c\034\uff7c\035\uff7c\036" +
    "\uff7c\037\uff7c\040\uff7c\041\uff7c\042\uff7c\043\uff7c\044\uff7c" +
    "\046\uff7c\051\uff7c\052\uff7c\001\002\000\006\003\201\045" +
    "\200\001\002\000\046\003\uff76\012\uff76\013\uff76\024\uff76" +
    "\032\uff76\033\uff76\034\uff76\035\uff76\036\uff76\037\uff76\040" +
    "\uff76\041\uff76\042\uff76\043\uff76\044\uff76\046\uff76\051\uff76" +
    "\052\uff76\001\002\000\046\003\uff78\012\uff78\013\uff78\024" +
    "\uff78\032\uff78\033\uff78\034\uff78\035\uff78\036\uff78\037\uff78" +
    "\040\uff78\041\uff78\042\uff78\043\uff78\044\uff78\046\uff78\051" +
    "\uff78\052\uff78\001\002\000\046\003\uff84\012\uff84\013\uff84" +
    "\024\uff84\032\uff84\033\uff84\034\uff84\035\uff84\036\uff84\037" +
    "\uff84\040\uff84\041\uff84\042\145\043\147\044\146\046\uff84" +
    "\051\uff84\052\uff84\001\002\000\046\003\uff7a\012\uff7a\013" +
    "\uff7a\024\uff7a\032\uff7a\033\uff7a\034\uff7a\035\uff7a\036\uff7a" +
    "\037\uff7a\040\uff7a\041\uff7a\042\uff7a\043\uff7a\044\uff7a\046" +
    "\uff7a\051\uff7a\052\uff7a\001\002\000\030\027\102\040\136" +
    "\041\124\045\137\055\126\056\122\057\134\063\uff72\064" +
    "\132\065\123\066\130\001\002\000\006\003\167\045\166" +
    "\001\002\000\004\063\155\001\002\000\030\027\102\040" +
    "\136\041\124\045\137\055\126\056\122\057\134\063\uff72" +
    "\064\132\065\123\066\130\001\002\000\032\003\133\027" +
    "\102\040\136\041\124\045\137\055\126\056\122\057\134" +
    "\063\uff72\064\132\065\123\066\130\001\002\000\010\040" +
    "\141\041\142\046\143\001\002\000\030\027\102\040\136" +
    "\041\124\045\137\055\126\056\122\057\134\063\uff72\064" +
    "\132\065\123\066\130\001\002\000\030\027\102\040\136" +
    "\041\124\045\137\055\126\056\122\057\134\063\uff72\064" +
    "\132\065\123\066\130\001\002\000\046\003\uff77\012\uff77" +
    "\013\uff77\024\uff77\032\uff77\033\uff77\034\uff77\035\uff77\036" +
    "\uff77\037\uff77\040\uff77\041\uff77\042\uff77\043\uff77\044\uff77" +
    "\046\uff77\051\uff77\052\uff77\001\002\000\046\003\uff85\012" +
    "\uff85\013\uff85\024\uff85\032\uff85\033\uff85\034\uff85\035\uff85" +
    "\036\uff85\037\uff85\040\uff85\041\uff85\042\145\043\147\044" +
    "\146\046\uff85\051\uff85\052\uff85\001\002\000\030\027\102" +
    "\040\136\041\124\045\137\055\126\056\122\057\134\063" +
    "\uff72\064\132\065\123\066\130\001\002\000\030\027\102" +
    "\040\136\041\124\045\137\055\126\056\122\057\134\063" +
    "\uff72\064\132\065\123\066\130\001\002\000\030\027\102" +
    "\040\136\041\124\045\137\055\126\056\122\057\134\063" +
    "\uff72\064\132\065\123\066\130\001\002\000\046\003\uff81" +
    "\012\uff81\013\uff81\024\uff81\032\uff81\033\uff81\034\uff81\035" +
    "\uff81\036\uff81\037\uff81\040\uff81\041\uff81\042\uff81\043\uff81" +
    "\044\uff81\046\uff81\051\uff81\052\uff81\001\002\000\046\003" +
    "\uff80\012\uff80\013\uff80\024\uff80\032\uff80\033\uff80\034\uff80" +
    "\035\uff80\036\uff80\037\uff80\040\uff80\041\uff80\042\uff80\043" +
    "\uff80\044\uff80\046\uff80\051\uff80\052\uff80\001\002\000\046" +
    "\003\uff82\012\uff82\013\uff82\024\uff82\032\uff82\033\uff82\034" +
    "\uff82\035\uff82\036\uff82\037\uff82\040\uff82\041\uff82\042\uff82" +
    "\043\uff82\044\uff82\046\uff82\051\uff82\052\uff82\001\002\000" +
    "\046\003\uff86\012\uff86\013\uff86\024\uff86\032\uff86\033\uff86" +
    "\034\uff86\035\uff86\036\uff86\037\uff86\040\uff86\041\uff86\042" +
    "\145\043\147\044\146\046\uff86\051\uff86\052\uff86\001\002" +
    "\000\046\003\uff7d\012\uff7d\013\uff7d\024\uff7d\032\uff7d\033" +
    "\uff7d\034\uff7d\035\uff7d\036\uff7d\037\uff7d\040\uff7d\041\uff7d" +
    "\042\uff7d\043\uff7d\044\uff7d\046\uff7d\051\uff7d\052\uff7d\001" +
    "\002\000\050\003\uff74\012\uff74\013\uff74\024\uff74\032\uff74" +
    "\033\uff74\034\uff74\035\uff74\036\uff74\037\uff74\040\uff74\041" +
    "\uff74\042\uff74\043\uff74\044\uff74\045\156\046\uff74\051\uff74" +
    "\052\uff74\001\002\000\036\003\133\027\102\040\136\041" +
    "\124\045\137\046\uff4a\051\uff4a\055\126\056\122\057\134" +
    "\063\uff72\064\132\065\123\066\130\001\002\000\046\003" +
    "\uff7b\012\uff7b\013\uff7b\024\uff7b\032\uff7b\033\uff7b\034\uff7b" +
    "\035\uff7b\036\uff7b\037\uff7b\040\uff7b\041\uff7b\042\uff7b\043" +
    "\uff7b\044\uff7b\046\uff7b\051\uff7b\052\uff7b\001\002\000\006" +
    "\046\uff4b\051\uff4b\001\002\000\006\046\164\051\163\001" +
    "\002\000\012\040\141\041\142\046\uff48\051\uff48\001\002" +
    "\000\032\003\133\027\102\040\136\041\124\045\137\055" +
    "\126\056\122\057\134\063\uff72\064\132\065\123\066\130" +
    "\001\002\000\046\003\uff75\012\uff75\013\uff75\024\uff75\032" +
    "\uff75\033\uff75\034\uff75\035\uff75\036\uff75\037\uff75\040\uff75" +
    "\041\uff75\042\uff75\043\uff75\044\uff75\046\uff75\051\uff75\052" +
    "\uff75\001\002\000\012\040\141\041\142\046\uff49\051\uff49" +
    "\001\002\000\006\003\172\067\173\001\002\000\004\067" +
    "\170\001\002\000\004\046\171\001\002\000\046\003\uff54" +
    "\012\uff54\013\uff54\024\uff54\032\uff54\033\uff54\034\uff54\035" +
    "\uff54\036\uff54\037\uff54\040\uff54\041\uff54\042\uff54\043\uff54" +
    "\044\uff54\046\uff54\051\uff54\052\uff54\001\002\000\004\046" +
    "\176\001\002\000\006\003\174\046\175\001\002\000\046" +
    "\003\uff52\012\uff52\013\uff52\024\uff52\032\uff52\033\uff52\034" +
    "\uff52\035\uff52\036\uff52\037\uff52\040\uff52\041\uff52\042\uff52" +
    "\043\uff52\044\uff52\046\uff52\051\uff52\052\uff52\001\002\000" +
    "\046\003\uff58\012\uff58\013\uff58\024\uff58\032\uff58\033\uff58" +
    "\034\uff58\035\uff58\036\uff58\037\uff58\040\uff58\041\uff58\042" +
    "\uff58\043\uff58\044\uff58\046\uff58\051\uff58\052\uff58\001\002" +
    "\000\046\003\uff53\012\uff53\013\uff53\024\uff53\032\uff53\033" +
    "\uff53\034\uff53\035\uff53\036\uff53\037\uff53\040\uff53\041\uff53" +
    "\042\uff53\043\uff53\044\uff53\046\uff53\051\uff53\052\uff53\001" +
    "\002\000\046\003\uff83\012\uff83\013\uff83\024\uff83\032\uff83" +
    "\033\uff83\034\uff83\035\uff83\036\uff83\037\uff83\040\uff83\041" +
    "\uff83\042\145\043\147\044\146\046\uff83\051\uff83\052\uff83" +
    "\001\002\000\006\003\204\067\205\001\002\000\004\067" +
    "\202\001\002\000\004\046\203\001\002\000\046\003\uff57" +
    "\012\uff57\013\uff57\024\uff57\032\uff57\033\uff57\034\uff57\035" +
    "\uff57\036\uff57\037\uff57\040\uff57\041\uff57\042\uff57\043\uff57" +
    "\044\uff57\046\uff57\051\uff57\052\uff57\001\002\000\004\046" +
    "\210\001\002\000\006\003\206\046\207\001\002\000\046" +
    "\003\uff55\012\uff55\013\uff55\024\uff55\032\uff55\033\uff55\034" +
    "\uff55\035\uff55\036\uff55\037\uff55\040\uff55\041\uff55\042\uff55" +
    "\043\uff55\044\uff55\046\uff55\051\uff55\052\uff55\001\002\000" +
    "\046\003\uff5a\012\uff5a\013\uff5a\024\uff5a\032\uff5a\033\uff5a" +
    "\034\uff5a\035\uff5a\036\uff5a\037\uff5a\040\uff5a\041\uff5a\042" +
    "\uff5a\043\uff5a\044\uff5a\046\uff5a\051\uff5a\052\uff5a\001\002" +
    "\000\046\003\uff56\012\uff56\013\uff56\024\uff56\032\uff56\033" +
    "\uff56\034\uff56\035\uff56\036\uff56\037\uff56\040\uff56\041\uff56" +
    "\042\uff56\043\uff56\044\uff56\046\uff56\051\uff56\052\uff56\001" +
    "\002\000\046\003\uff7e\012\uff7e\013\uff7e\024\uff7e\032\uff7e" +
    "\033\uff7e\034\uff7e\035\uff7e\036\uff7e\037\uff7e\040\uff7e\041" +
    "\uff7e\042\uff7e\043\uff7e\044\uff7e\046\uff7e\051\uff7e\052\uff7e" +
    "\001\002\000\006\003\216\067\217\001\002\000\004\067" +
    "\214\001\002\000\004\046\215\001\002\000\046\003\uff51" +
    "\012\uff51\013\uff51\024\uff51\032\uff51\033\uff51\034\uff51\035" +
    "\uff51\036\uff51\037\uff51\040\uff51\041\uff51\042\uff51\043\uff51" +
    "\044\uff51\046\uff51\051\uff51\052\uff51\001\002\000\004\046" +
    "\222\001\002\000\006\003\220\046\221\001\002\000\046" +
    "\003\uff4f\012\uff4f\013\uff4f\024\uff4f\032\uff4f\033\uff4f\034" +
    "\uff4f\035\uff4f\036\uff4f\037\uff4f\040\uff4f\041\uff4f\042\uff4f" +
    "\043\uff4f\044\uff4f\046\uff4f\051\uff4f\052\uff4f\001\002\000" +
    "\046\003\uff59\012\uff59\013\uff59\024\uff59\032\uff59\033\uff59" +
    "\034\uff59\035\uff59\036\uff59\037\uff59\040\uff59\041\uff59\042" +
    "\uff59\043\uff59\044\uff59\046\uff59\051\uff59\052\uff59\001\002" +
    "\000\046\003\uff50\012\uff50\013\uff50\024\uff50\032\uff50\033" +
    "\uff50\034\uff50\035\uff50\036\uff50\037\uff50\040\uff50\041\uff50" +
    "\042\uff50\043\uff50\044\uff50\046\uff50\051\uff50\052\uff50\001" +
    "\002\000\034\003\133\014\231\027\102\040\136\041\124" +
    "\045\225\055\126\056\122\057\134\063\uff72\064\132\065" +
    "\123\066\130\001\002\000\014\003\uff70\012\236\013\uff70" +
    "\046\uff70\052\uff70\001\002\000\034\003\133\014\231\027" +
    "\102\040\136\041\124\045\225\055\126\056\122\057\134" +
    "\063\uff72\064\132\065\123\066\130\001\002\000\014\003" +
    "\uff6e\012\uff6e\013\uff6e\046\uff6e\052\uff6e\001\002\000\014" +
    "\003\uff6c\012\uff6c\013\uff6c\046\uff6c\052\uff6c\001\002\000" +
    "\022\032\263\033\264\034\266\035\265\036\261\037\262" +
    "\040\141\041\142\001\002\000\034\003\133\014\231\027" +
    "\102\040\136\041\124\045\225\055\126\056\122\057\134" +
    "\063\uff72\064\132\065\123\066\130\001\002\000\006\013" +
    "\234\052\233\001\002\000\006\027\102\063\uff72\001\002" +
    "\000\034\003\133\014\231\027\102\040\136\041\124\045" +
    "\225\055\126\056\122\057\134\063\uff72\064\132\065\123" +
    "\066\130\001\002\000\014\003\uff71\012\236\013\uff71\046" +
    "\uff71\052\uff71\001\002\000\034\003\133\014\231\027\102" +
    "\040\136\041\124\045\225\055\126\056\122\057\134\063" +
    "\uff72\064\132\065\123\066\130\001\002\000\014\003\uff6f" +
    "\012\uff6f\013\uff6f\046\uff6f\052\uff6f\001\002\000\004\046" +
    "\251\001\002\000\004\063\244\001\002\000\004\046\uffb1" +
    "\001\002\000\004\046\uffb0\001\002\000\010\060\246\061" +
    "\245\062\247\001\002\000\004\046\uff88\001\002\000\032" +
    "\003\133\027\102\040\136\041\124\045\137\055\126\056" +
    "\122\057\134\063\uff72\064\132\065\123\066\130\001\002" +
    "\000\004\046\uff87\001\002\000\014\003\uff8e\040\141\041" +
    "\142\046\uff8e\052\uff8e\001\002\000\022\007\020\010\023" +
    "\011\026\027\102\047\253\053\071\054\055\063\uff72\001" +
    "\002\000\050\003\uffbc\007\uffbc\010\uffbc\011\uffbc\015\uffbc" +
    "\016\uffbc\017\uffbc\020\uffbc\021\uffbc\022\uffbc\023\uffbc\025" +
    "\uffbc\026\uffbc\027\uffbc\031\uffbc\050\uffbc\053\uffbc\054\uffbc" +
    "\063\uffbc\001\002\000\042\003\uffbe\007\uffbe\010\uffbe\011" +
    "\uffbe\015\uffbe\017\uffbe\020\uffbe\021\uffbe\022\uffbe\026\uffbe" +
    "\027\uffbe\031\uffbe\050\uffbe\053\uffbe\054\uffbe\063\uffbe\001" +
    "\002\000\046\003\uffba\007\uffba\010\uffba\011\uffba\015\uffba" +
    "\017\uffba\020\uffba\021\uffba\022\uffba\023\uffba\025\uffba\026" +
    "\uffba\027\uffba\031\uffba\050\uffba\053\uffba\054\uffba\063\uffba" +
    "\001\002\000\042\003\100\007\020\010\023\011\026\015" +
    "\076\017\105\020\067\021\101\022\061\026\077\027\102" +
    "\031\056\050\uffd2\053\071\054\055\063\uff72\001\002\000" +
    "\004\050\257\001\002\000\050\003\uffbd\007\uffbd\010\uffbd" +
    "\011\uffbd\015\uffbd\016\uffbd\017\uffbd\020\uffbd\021\uffbd\022" +
    "\uffbd\023\uffbd\025\uffbd\026\uffbd\027\uffbd\031\uffbd\050\uffbd" +
    "\053\uffbd\054\uffbd\063\uffbd\001\002\000\014\003\uff6d\012" +
    "\uff6d\013\uff6d\046\uff6d\052\uff6d\001\002\000\032\003\133" +
    "\027\102\040\136\041\124\045\137\055\126\056\122\057" +
    "\134\063\uff72\064\132\065\123\066\130\001\002\000\032" +
    "\003\133\027\102\040\136\041\124\045\137\055\126\056" +
    "\122\057\134\063\uff72\064\132\065\123\066\130\001\002" +
    "\000\032\003\133\027\102\040\136\041\124\045\137\055" +
    "\126\056\122\057\134\063\uff72\064\132\065\123\066\130" +
    "\001\002\000\032\003\133\027\102\040\136\041\124\045" +
    "\137\055\126\056\122\057\134\063\uff72\064\132\065\123" +
    "\066\130\001\002\000\032\003\133\027\102\040\136\041" +
    "\124\045\137\055\126\056\122\057\134\063\uff72\064\132" +
    "\065\123\066\130\001\002\000\032\003\133\027\102\040" +
    "\136\041\124\045\137\055\126\056\122\057\134\063\uff72" +
    "\064\132\065\123\066\130\001\002\000\020\003\uff67\012" +
    "\uff67\013\uff67\040\141\041\142\046\uff67\052\uff67\001\002" +
    "\000\020\003\uff66\012\uff66\013\uff66\040\141\041\142\046" +
    "\uff66\052\uff66\001\002\000\020\003\uff68\012\uff68\013\uff68" +
    "\040\141\041\142\046\uff68\052\uff68\001\002\000\020\003" +
    "\uff69\012\uff69\013\uff69\040\141\041\142\046\uff69\052\uff69" +
    "\001\002\000\020\003\uff6a\012\uff6a\013\uff6a\040\141\041" +
    "\142\046\uff6a\052\uff6a\001\002\000\020\003\uff65\012\uff65" +
    "\013\uff65\040\141\041\142\046\uff65\052\uff65\001\002\000" +
    "\024\032\263\033\264\034\266\035\265\036\261\037\262" +
    "\040\141\041\142\046\143\001\002\000\006\013\234\046" +
    "\277\001\002\000\014\003\uff6b\012\uff6b\013\uff6b\046\uff6b" +
    "\052\uff6b\001\002\000\004\060\246\001\002\000\006\003" +
    "\312\052\311\001\002\000\004\052\303\001\002\000\034" +
    "\003\133\014\231\027\102\040\136\041\124\045\225\055" +
    "\126\056\122\057\134\063\uff72\064\132\065\123\066\130" +
    "\001\002\000\006\013\234\052\305\001\002\000\006\027" +
    "\102\063\uff72\001\002\000\004\046\307\001\002\000\022" +
    "\007\020\010\023\011\026\027\102\047\253\053\071\054" +
    "\055\063\uff72\001\002\000\046\003\uffb9\007\uffb9\010\uffb9" +
    "\011\uffb9\015\uffb9\017\uffb9\020\uffb9\021\uffb9\022\uffb9\023" +
    "\uffb9\025\uffb9\026\uffb9\027\uffb9\031\uffb9\050\uffb9\053\uffb9" +
    "\054\uffb9\063\uffb9\001\002\000\034\003\320\014\231\027" +
    "\102\040\136\041\124\045\225\055\126\056\122\057\134" +
    "\063\uff72\064\132\065\123\066\130\001\002\000\034\003" +
    "\133\014\231\027\102\040\136\041\124\045\225\055\126" +
    "\056\122\057\134\063\uff72\064\132\065\123\066\130\001" +
    "\002\000\006\013\234\052\314\001\002\000\006\027\102" +
    "\063\uff72\001\002\000\004\046\316\001\002\000\022\007" +
    "\020\010\023\011\026\027\102\047\253\053\071\054\055" +
    "\063\uff72\001\002\000\046\003\uffb8\007\uffb8\010\uffb8\011" +
    "\uffb8\015\uffb8\017\uffb8\020\uffb8\021\uffb8\022\uffb8\023\uffb8" +
    "\025\uffb8\026\uffb8\027\uffb8\031\uffb8\050\uffb8\053\uffb8\054" +
    "\uffb8\063\uffb8\001\002\000\032\027\102\040\136\041\124" +
    "\045\137\052\335\055\126\056\122\057\134\063\uff72\064" +
    "\132\065\123\066\130\001\002\000\010\003\323\013\234" +
    "\052\322\001\002\000\010\003\330\027\102\063\uff72\001" +
    "\002\000\006\027\102\063\uff72\001\002\000\004\046\325" +
    "\001\002\000\022\007\020\010\023\011\026\027\102\047" +
    "\253\053\071\054\055\063\uff72\001\002\000\046\003\uffb6" +
    "\007\uffb6\010\uffb6\011\uffb6\015\uffb6\017\uffb6\020\uffb6\021" +
    "\uffb6\022\uffb6\023\uffb6\025\uffb6\026\uffb6\027\uffb6\031\uffb6" +
    "\050\uffb6\053\uffb6\054\uffb6\063\uffb6\001\002\000\004\046" +
    "\333\001\002\000\004\046\331\001\002\000\022\007\020" +
    "\010\023\011\026\027\102\047\253\053\071\054\055\063" +
    "\uff72\001\002\000\046\003\uffb5\007\uffb5\010\uffb5\011\uffb5" +
    "\015\uffb5\017\uffb5\020\uffb5\021\uffb5\022\uffb5\023\uffb5\025" +
    "\uffb5\026\uffb5\027\uffb5\031\uffb5\050\uffb5\053\uffb5\054\uffb5" +
    "\063\uffb5\001\002\000\022\007\020\010\023\011\026\027" +
    "\102\047\253\053\071\054\055\063\uff72\001\002\000\046" +
    "\003\uffbb\007\uffbb\010\uffbb\011\uffbb\015\uffbb\017\uffbb\020" +
    "\uffbb\021\uffbb\022\uffbb\023\uffbb\025\uffbb\026\uffbb\027\uffbb" +
    "\031\uffbb\050\uffbb\053\uffbb\054\uffbb\063\uffbb\001\002\000" +
    "\006\027\102\063\uff72\001\002\000\004\046\337\001\002" +
    "\000\022\007\020\010\023\011\026\027\102\047\253\053" +
    "\071\054\055\063\uff72\001\002\000\046\003\uffb7\007\uffb7" +
    "\010\uffb7\011\uffb7\015\uffb7\017\uffb7\020\uffb7\021\uffb7\022" +
    "\uffb7\023\uffb7\025\uffb7\026\uffb7\027\uffb7\031\uffb7\050\uffb7" +
    "\053\uffb7\054\uffb7\063\uffb7\001\002\000\010\023\uffd5\025" +
    "\uffd5\050\uffd5\001\002\000\004\063\uff73\001\002\000\006" +
    "\003\344\020\345\001\002\000\004\045\364\001\002\000" +
    "\006\003\347\045\346\001\002\000\034\003\353\014\231" +
    "\027\102\040\136\041\124\045\225\055\126\056\122\057" +
    "\134\063\uff72\064\132\065\123\066\130\001\002\000\034" +
    "\003\133\014\231\027\102\040\136\041\124\045\225\055" +
    "\126\056\122\057\134\063\uff72\064\132\065\123\066\130" +
    "\001\002\000\006\013\234\046\351\001\002\000\004\052" +
    "\352\001\002\000\046\003\uffad\007\uffad\010\uffad\011\uffad" +
    "\015\uffad\017\uffad\020\uffad\021\uffad\022\uffad\023\uffad\025" +
    "\uffad\026\uffad\027\uffad\031\uffad\050\uffad\053\uffad\054\uffad" +
    "\063\uffad\001\002\000\032\027\102\040\136\041\124\045" +
    "\137\046\362\055\126\056\122\057\134\063\uff72\064\132" +
    "\065\123\066\130\001\002\000\010\003\355\013\234\046" +
    "\356\001\002\000\004\052\361\001\002\000\006\003\360" +
    "\052\357\001\002\000\046\003\uffaf\007\uffaf\010\uffaf\011" +
    "\uffaf\015\uffaf\017\uffaf\020\uffaf\021\uffaf\022\uffaf\023\uffaf" +
    "\025\uffaf\026\uffaf\027\uffaf\031\uffaf\050\uffaf\053\uffaf\054" +
    "\uffaf\063\uffaf\001\002\000\046\003\uffaa\007\uffaa\010\uffaa" +
    "\011\uffaa\015\uffaa\017\uffaa\020\uffaa\021\uffaa\022\uffaa\023" +
    "\uffaa\025\uffaa\026\uffaa\027\uffaa\031\uffaa\050\uffaa\053\uffaa" +
    "\054\uffaa\063\uffaa\001\002\000\046\003\uffab\007\uffab\010" +
    "\uffab\011\uffab\015\uffab\017\uffab\020\uffab\021\uffab\022\uffab" +
    "\023\uffab\025\uffab\026\uffab\027\uffab\031\uffab\050\uffab\053" +
    "\uffab\054\uffab\063\uffab\001\002\000\004\052\363\001\002" +
    "\000\046\003\uffac\007\uffac\010\uffac\011\uffac\015\uffac\017" +
    "\uffac\020\uffac\021\uffac\022\uffac\023\uffac\025\uffac\026\uffac" +
    "\027\uffac\031\uffac\050\uffac\053\uffac\054\uffac\063\uffac\001" +
    "\002\000\034\003\133\014\231\027\102\040\136\041\124" +
    "\045\225\055\126\056\122\057\134\063\uff72\064\132\065" +
    "\123\066\130\001\002\000\006\013\234\046\366\001\002" +
    "\000\004\052\367\001\002\000\046\003\uffae\007\uffae\010" +
    "\uffae\011\uffae\015\uffae\017\uffae\020\uffae\021\uffae\022\uffae" +
    "\023\uffae\025\uffae\026\uffae\027\uffae\031\uffae\050\uffae\053" +
    "\uffae\054\uffae\063\uffae\001\002\000\046\003\uffce\007\uffce" +
    "\010\uffce\011\uffce\015\uffce\017\uffce\020\uffce\021\uffce\022" +
    "\uffce\023\uffce\025\uffce\026\uffce\027\uffce\031\uffce\050\uffce" +
    "\053\uffce\054\uffce\063\uffce\001\002\000\010\040\141\041" +
    "\142\052\372\001\002\000\010\023\uffd1\025\uffd1\050\uffd1" +
    "\001\002\000\034\003\u0117\014\231\027\102\040\136\041" +
    "\124\045\225\055\126\056\122\057\134\063\uff72\064\132" +
    "\065\123\066\130\001\002\000\034\003\133\014\231\027" +
    "\102\040\136\041\124\045\225\055\126\056\122\057\134" +
    "\063\uff72\064\132\065\123\066\130\001\002\000\006\013" +
    "\234\046\376\001\002\000\022\007\020\010\023\011\026" +
    "\027\102\047\253\053\071\054\055\063\uff72\001\002\000" +
    "\050\003\uffa4\007\uffa4\010\uffa4\011\uffa4\015\uffa4\016\uffa4" +
    "\017\uffa4\020\uffa4\021\uffa4\022\uffa4\023\uffa4\025\uffa4\026" +
    "\uffa4\027\uffa4\031\uffa4\050\uffa4\053\uffa4\054\uffa4\063\uffa4" +
    "\001\002\000\050\003\uff9e\007\uff9e\010\uff9e\011\uff9e\015" +
    "\uff9e\016\u0102\017\uff9e\020\uff9e\021\uff9e\022\uff9e\023\uff9e" +
    "\025\uff9e\026\uff9e\027\uff9e\031\uff9e\050\uff9e\053\uff9e\054" +
    "\uff9e\063\uff9e\001\002\000\046\003\uffa8\007\uffa8\010\uffa8" +
    "\011\uffa8\015\uffa8\017\uffa8\020\uffa8\021\uffa8\022\uffa8\023" +
    "\uffa8\025\uffa8\026\uffa8\027\uffa8\031\uffa8\050\uffa8\053\uffa8" +
    "\054\uffa8\063\uffa8\001\002\000\026\003\u0103\007\020\010" +
    "\023\011\026\015\u0105\027\102\047\253\053\071\054\055" +
    "\063\uff72\001\002\000\004\045\u0113\001\002\000\046\003" +
    "\uff9f\007\uff9f\010\uff9f\011\uff9f\015\uff9f\017\uff9f\020\uff9f" +
    "\021\uff9f\022\uff9f\023\uff9f\025\uff9f\026\uff9f\027\uff9f\031" +
    "\uff9f\050\uff9f\053\uff9f\054\uff9f\063\uff9f\001\002\000\006" +
    "\003\u0107\045\u0106\001\002\000\034\003\u010b\014\231\027" +
    "\102\040\136\041\124\045\225\055\126\056\122\057\134" +
    "\063\uff72\064\132\065\123\066\130\001\002\000\034\003" +
    "\133\014\231\027\102\040\136\041\124\045\225\055\126" +
    "\056\122\057\134\063\uff72\064\132\065\123\066\130\001" +
    "\002\000\006\013\234\046\u0109\001\002\000\022\007\020" +
    "\010\023\011\026\027\102\047\253\053\071\054\055\063" +
    "\uff72\001\002\000\050\003\uffa2\007\uffa2\010\uffa2\011\uffa2" +
    "\015\uffa2\016\uffa2\017\uffa2\020\uffa2\021\uffa2\022\uffa2\023" +
    "\uffa2\025\uffa2\026\uffa2\027\uffa2\031\uffa2\050\uffa2\053\uffa2" +
    "\054\uffa2\063\uffa2\001\002\000\032\027\102\040\136\041" +
    "\124\045\137\046\u0111\055\126\056\122\057\134\063\uff72" +
    "\064\132\065\123\066\130\001\002\000\010\003\u010d\013" +
    "\234\046\u010e\001\002\000\022\007\020\010\023\011\026" +
    "\027\102\047\253\053\071\054\055\063\uff72\001\002\000" +
    "\022\007\020\010\023\011\026\027\102\047\253\053\071" +
    "\054\055\063\uff72\001\002\000\050\003\uffa5\007\uffa5\010" +
    "\uffa5\011\uffa5\015\uffa5\016\uffa5\017\uffa5\020\uffa5\021\uffa5" +
    "\022\uffa5\023\uffa5\025\uffa5\026\uffa5\027\uffa5\031\uffa5\050" +
    "\uffa5\053\uffa5\054\uffa5\063\uffa5\001\002\000\050\003\uffa0" +
    "\007\uffa0\010\uffa0\011\uffa0\015\uffa0\016\uffa0\017\uffa0\020" +
    "\uffa0\021\uffa0\022\uffa0\023\uffa0\025\uffa0\026\uffa0\027\uffa0" +
    "\031\uffa0\050\uffa0\053\uffa0\054\uffa0\063\uffa0\001\002\000" +
    "\022\007\020\010\023\011\026\027\102\047\253\053\071" +
    "\054\055\063\uff72\001\002\000\050\003\uffa1\007\uffa1\010" +
    "\uffa1\011\uffa1\015\uffa1\016\uffa1\017\uffa1\020\uffa1\021\uffa1" +
    "\022\uffa1\023\uffa1\025\uffa1\026\uffa1\027\uffa1\031\uffa1\050" +
    "\uffa1\053\uffa1\054\uffa1\063\uffa1\001\002\000\034\003\133" +
    "\014\231\027\102\040\136\041\124\045\225\055\126\056" +
    "\122\057\134\063\uff72\064\132\065\123\066\130\001\002" +
    "\000\006\013\234\046\u0115\001\002\000\022\007\020\010" +
    "\023\011\026\027\102\047\253\053\071\054\055\063\uff72" +
    "\001\002\000\050\003\uffa3\007\uffa3\010\uffa3\011\uffa3\015" +
    "\uffa3\016\uffa3\017\uffa3\020\uffa3\021\uffa3\022\uffa3\023\uffa3" +
    "\025\uffa3\026\uffa3\027\uffa3\031\uffa3\050\uffa3\053\uffa3\054" +
    "\uffa3\063\uffa3\001\002\000\032\027\102\040\136\041\124" +
    "\045\137\046\u0121\055\126\056\122\057\134\063\uff72\064" +
    "\132\065\123\066\130\001\002\000\010\003\u0119\013\234" +
    "\046\u011a\001\002\000\022\007\020\010\023\011\026\027" +
    "\102\047\253\053\071\054\055\063\uff72\001\002\000\022" +
    "\007\020\010\023\011\026\027\102\047\253\053\071\054" +
    "\055\063\uff72\001\002\000\050\003\uffa4\007\uffa4\010\uffa4" +
    "\011\uffa4\015\uffa4\016\uffa4\017\uffa4\020\uffa4\021\uffa4\022" +
    "\uffa4\023\uffa4\025\uffa4\026\uffa4\027\uffa4\031\uffa4\050\uffa4" +
    "\053\uffa4\054\uffa4\063\uffa4\001\002\000\050\003\uff9e\007" +
    "\uff9e\010\uff9e\011\uff9e\015\uff9e\016\u0102\017\uff9e\020\uff9e" +
    "\021\uff9e\022\uff9e\023\uff9e\025\uff9e\026\uff9e\027\uff9e\031" +
    "\uff9e\050\uff9e\053\uff9e\054\uff9e\063\uff9e\001\002\000\046" +
    "\003\uffa9\007\uffa9\010\uffa9\011\uffa9\015\uffa9\017\uffa9\020" +
    "\uffa9\021\uffa9\022\uffa9\023\uffa9\025\uffa9\026\uffa9\027\uffa9" +
    "\031\uffa9\050\uffa9\053\uffa9\054\uffa9\063\uffa9\001\002\000" +
    "\050\003\uffa4\007\uffa4\010\uffa4\011\uffa4\015\uffa4\016\uffa4" +
    "\017\uffa4\020\uffa4\021\uffa4\022\uffa4\023\uffa4\025\uffa4\026" +
    "\uffa4\027\uffa4\031\uffa4\050\uffa4\053\uffa4\054\uffa4\063\uffa4" +
    "\001\002\000\050\003\uff9e\007\uff9e\010\uff9e\011\uff9e\015" +
    "\uff9e\016\u0102\017\uff9e\020\uff9e\021\uff9e\022\uff9e\023\uff9e" +
    "\025\uff9e\026\uff9e\027\uff9e\031\uff9e\050\uff9e\053\uff9e\054" +
    "\uff9e\063\uff9e\001\002\000\046\003\uffa6\007\uffa6\010\uffa6" +
    "\011\uffa6\015\uffa6\017\uffa6\020\uffa6\021\uffa6\022\uffa6\023" +
    "\uffa6\025\uffa6\026\uffa6\027\uffa6\031\uffa6\050\uffa6\053\uffa6" +
    "\054\uffa6\063\uffa6\001\002\000\022\007\020\010\023\011" +
    "\026\027\102\047\253\053\071\054\055\063\uff72\001\002" +
    "\000\050\003\uffa4\007\uffa4\010\uffa4\011\uffa4\015\uffa4\016" +
    "\uffa4\017\uffa4\020\uffa4\021\uffa4\022\uffa4\023\uffa4\025\uffa4" +
    "\026\uffa4\027\uffa4\031\uffa4\050\uffa4\053\uffa4\054\uffa4\063" +
    "\uffa4\001\002\000\050\003\uff9e\007\uff9e\010\uff9e\011\uff9e" +
    "\015\uff9e\016\u0102\017\uff9e\020\uff9e\021\uff9e\022\uff9e\023" +
    "\uff9e\025\uff9e\026\uff9e\027\uff9e\031\uff9e\050\uff9e\053\uff9e" +
    "\054\uff9e\063\uff9e\001\002\000\046\003\uffa7\007\uffa7\010" +
    "\uffa7\011\uffa7\015\uffa7\017\uffa7\020\uffa7\021\uffa7\022\uffa7" +
    "\023\uffa7\025\uffa7\026\uffa7\027\uffa7\031\uffa7\050\uffa7\053" +
    "\uffa7\054\uffa7\063\uffa7\001\002\000\050\003\uff92\007\uff92" +
    "\010\uff92\011\uff92\015\uff92\016\uff92\017\uff92\020\uff92\021" +
    "\uff92\022\uff92\023\uff92\025\uff92\026\uff92\027\uff92\031\uff92" +
    "\050\uff92\053\uff92\054\uff92\063\uff92\001\002\000\030\003" +
    "\u0139\027\102\045\u0130\055\126\056\122\057\134\063\uff72" +
    "\064\u012d\065\u0128\066\u012c\067\u012b\001\002\000\026\027" +
    "\102\045\u0130\055\126\056\122\057\134\063\uff72\064\u012d" +
    "\065\u0128\066\u012c\067\u012b\001\002\000\010\003\uff5d\040" +
    "\uff5d\046\uff5d\001\002\000\006\040\u0134\046\u0135\001\002" +
    "\000\010\003\uff60\040\uff60\046\uff60\001\002\000\010\003" +
    "\uff61\040\uff61\046\uff61\001\002\000\010\003\uff5c\040\uff5c" +
    "\046\uff5c\001\002\000\010\003\uff5e\040\uff5e\046\uff5e\001" +
    "\002\000\004\063\u0133\001\002\000\010\003\uff62\040\uff62" +
    "\046\uff62\001\002\000\032\003\133\027\102\040\136\041" +
    "\124\045\137\055\126\056\122\057\134\063\uff72\064\132" +
    "\065\123\066\130\001\002\000\010\040\141\041\142\046" +
    "\u0132\001\002\000\010\003\uff5b\040\uff5b\046\uff5b\001\002" +
    "\000\010\003\uff5f\040\uff5f\046\uff5f\001\002\000\026\027" +
    "\102\045\u0130\055\126\056\122\057\134\063\uff72\064\u012d" +
    "\065\u0128\066\u012c\067\u0136\001\002\000\004\052\uff8b\001" +
    "\002\000\010\003\uff63\040\uff63\046\uff63\001\002\000\010" +
    "\003\uff64\040\uff64\046\uff64\001\002\000\010\003\u013b\040" +
    "\u0134\046\u013c\001\002\000\004\046\u013a\001\002\000\004" +
    "\052\uff8a\001\002\000\004\052\uff89\001\002\000\004\052" +
    "\uff8d\001\002\000\050\003\uff8f\007\uff8f\010\uff8f\011\uff8f" +
    "\015\uff8f\016\uff8f\017\uff8f\020\uff8f\021\uff8f\022\uff8f\023" +
    "\uff8f\025\uff8f\026\uff8f\027\uff8f\031\uff8f\050\uff8f\053\uff8f" +
    "\054\uff8f\063\uff8f\001\002\000\010\003\u0140\045\u013f\060" +
    "\246\001\002\000\036\003\u0144\027\102\040\136\041\124" +
    "\045\137\046\uff4a\051\uff4a\055\126\056\122\057\134\063" +
    "\uff72\064\132\065\123\066\130\001\002\000\036\003\133" +
    "\027\102\040\136\041\124\045\137\046\uff4a\051\uff4a\055" +
    "\126\056\122\057\134\063\uff72\064\132\065\123\066\130" +
    "\001\002\000\006\046\u0142\051\163\001\002\000\050\003" +
    "\uff4d\007\uff4d\010\uff4d\011\uff4d\015\uff4d\016\uff4d\017\uff4d" +
    "\020\uff4d\021\uff4d\022\uff4d\023\uff4d\025\uff4d\026\uff4d\027" +
    "\uff4d\031\uff4d\050\uff4d\053\uff4d\054\uff4d\063\uff4d\001\002" +
    "\000\006\046\u0146\051\163\001\002\000\032\027\102\040" +
    "\136\041\124\045\137\046\u0145\055\126\056\122\057\134" +
    "\063\uff72\064\132\065\123\066\130\001\002\000\050\003" +
    "\uff4c\007\uff4c\010\uff4c\011\uff4c\015\uff4c\016\uff4c\017\uff4c" +
    "\020\uff4c\021\uff4c\022\uff4c\023\uff4c\025\uff4c\026\uff4c\027" +
    "\uff4c\031\uff4c\050\uff4c\053\uff4c\054\uff4c\063\uff4c\001\002" +
    "\000\050\003\uff4e\007\uff4e\010\uff4e\011\uff4e\015\uff4e\016" +
    "\uff4e\017\uff4e\020\uff4e\021\uff4e\022\uff4e\023\uff4e\025\uff4e" +
    "\026\uff4e\027\uff4e\031\uff4e\050\uff4e\053\uff4e\054\uff4e\063" +
    "\uff4e\001\002\000\034\003\u014c\014\231\027\102\040\136" +
    "\041\124\045\225\055\126\056\122\057\134\063\uff72\064" +
    "\132\065\123\066\130\001\002\000\034\003\133\014\231" +
    "\027\102\040\136\041\124\045\225\055\126\056\122\057" +
    "\134\063\uff72\064\132\065\123\066\130\001\002\000\006" +
    "\013\234\046\u014a\001\002\000\022\007\020\010\023\011" +
    "\026\027\102\047\253\053\071\054\055\063\uff72\001\002" +
    "\000\046\003\uffc1\007\uffc1\010\uffc1\011\uffc1\015\uffc1\017" +
    "\uffc1\020\uffc1\021\uffc1\022\uffc1\023\uffc1\025\uffc1\026\uffc1" +
    "\027\uffc1\031\uffc1\050\uffc1\053\uffc1\054\uffc1\063\uffc1\001" +
    "\002\000\032\027\102\040\136\041\124\045\137\046\u0152" +
    "\055\126\056\122\057\134\063\uff72\064\132\065\123\066" +
    "\130\001\002\000\010\003\u014e\013\234\046\u014f\001\002" +
    "\000\022\007\020\010\023\011\026\027\102\047\253\053" +
    "\071\054\055\063\uff72\001\002\000\022\007\020\010\023" +
    "\011\026\027\102\047\253\053\071\054\055\063\uff72\001" +
    "\002\000\046\003\uffc2\007\uffc2\010\uffc2\011\uffc2\015\uffc2" +
    "\017\uffc2\020\uffc2\021\uffc2\022\uffc2\023\uffc2\025\uffc2\026" +
    "\uffc2\027\uffc2\031\uffc2\050\uffc2\053\uffc2\054\uffc2\063\uffc2" +
    "\001\002\000\046\003\uffbf\007\uffbf\010\uffbf\011\uffbf\015" +
    "\uffbf\017\uffbf\020\uffbf\021\uffbf\022\uffbf\023\uffbf\025\uffbf" +
    "\026\uffbf\027\uffbf\031\uffbf\050\uffbf\053\uffbf\054\uffbf\063" +
    "\uffbf\001\002\000\022\007\020\010\023\011\026\027\102" +
    "\047\253\053\071\054\055\063\uff72\001\002\000\046\003" +
    "\uffc0\007\uffc0\010\uffc0\011\uffc0\015\uffc0\017\uffc0\020\uffc0" +
    "\021\uffc0\022\uffc0\023\uffc0\025\uffc0\026\uffc0\027\uffc0\031" +
    "\uffc0\050\uffc0\053\uffc0\054\uffc0\063\uffc0\001\002\000\016" +
    "\003\uffe9\004\uffe9\007\uffe9\010\uffe9\011\uffe9\050\uffe9\001" +
    "\002\000\050\003\uff90\007\uff90\010\uff90\011\uff90\015\uff90" +
    "\016\uff90\017\uff90\020\uff90\021\uff90\022\uff90\023\uff90\025" +
    "\uff90\026\uff90\027\uff90\031\uff90\050\uff90\053\uff90\054\uff90" +
    "\063\uff90\001\002\000\032\003\u016b\027\102\040\136\041" +
    "\124\045\137\055\126\056\122\057\134\063\uff72\064\132" +
    "\065\123\066\130\001\002\000\032\003\133\027\102\040" +
    "\136\041\124\045\137\055\126\056\122\057\134\063\uff72" +
    "\064\132\065\123\066\130\001\002\000\010\040\141\041" +
    "\142\046\u0159\001\002\000\004\047\u015a\001\002\000\010" +
    "\023\uff97\025\uff97\050\uff97\001\002\000\010\023\u015e\025" +
    "\u015d\050\uff93\001\002\000\004\050\u0169\001\002\000\004" +
    "\024\u0166\001\002\000\032\003\u0160\027\102\040\136\041" +
    "\124\045\137\055\126\056\122\057\134\063\uff72\064\132" +
    "\065\123\066\130\001\002\000\010\024\u0163\040\141\041" +
    "\142\001\002\000\032\024\u0161\027\102\040\136\041\124" +
    "\045\137\055\126\056\122\057\134\063\uff72\064\132\065" +
    "\123\066\130\001\002\000\034\003\100\007\020\010\023" +
    "\011\026\015\076\017\105\020\067\021\101\022\061\027" +
    "\102\053\071\054\055\063\uff72\001\002\000\010\023\uff96" +
    "\025\uff96\050\uff96\001\002\000\046\003\uff99\007\uff99\010" +
    "\uff99\011\uff99\015\uff99\017\uff99\020\uff99\021\uff99\022\uff99" +
    "\023\uff99\025\uff99\026\uff99\027\uff99\031\uff99\050\uff99\053" +
    "\uff99\054\uff99\063\uff99\001\002\000\046\003\100\007\020" +
    "\010\023\011\026\015\076\017\105\020\067\021\101\022" +
    "\061\023\uffd2\025\uffd2\026\077\027\102\031\056\050\uffd2" +
    "\053\071\054\055\063\uff72\001\002\000\010\023\uff98\025" +
    "\uff98\050\uff98\001\002\000\042\003\uff95\007\uff95\010\uff95" +
    "\011\uff95\015\uff95\017\uff95\020\uff95\021\uff95\022\uff95\026" +
    "\uff95\027\uff95\031\uff95\050\uff95\053\uff95\054\uff95\063\uff95" +
    "\001\002\000\042\003\100\007\020\010\023\011\026\015" +
    "\076\017\105\020\067\021\101\022\061\026\077\027\102" +
    "\031\056\050\uffd2\053\071\054\055\063\uff72\001\002\000" +
    "\004\050\uff94\001\002\000\046\003\uff9c\007\uff9c\010\uff9c" +
    "\011\uff9c\015\uff9c\017\uff9c\020\uff9c\021\uff9c\022\uff9c\023" +
    "\uff9c\025\uff9c\026\uff9c\027\uff9c\031\uff9c\050\uff9c\053\uff9c" +
    "\054\uff9c\063\uff9c\001\002\000\012\003\u0171\040\141\041" +
    "\142\046\u0172\001\002\000\032\027\102\040\136\041\124" +
    "\045\137\046\u016c\055\126\056\122\057\134\063\uff72\064" +
    "\132\065\123\066\130\001\002\000\004\047\u016d\001\002" +
    "\000\010\023\uff97\025\uff97\050\uff97\001\002\000\010\023" +
    "\u015e\025\u015d\050\uff93\001\002\000\004\050\u0170\001\002" +
    "\000\046\003\uff9b\007\uff9b\010\uff9b\011\uff9b\015\uff9b\017" +
    "\uff9b\020\uff9b\021\uff9b\022\uff9b\023\uff9b\025\uff9b\026\uff9b" +
    "\027\uff9b\031\uff9b\050\uff9b\053\uff9b\054\uff9b\063\uff9b\001" +
    "\002\000\004\047\u0177\001\002\000\004\047\u0173\001\002" +
    "\000\010\023\uff97\025\uff97\050\uff97\001\002\000\010\023" +
    "\u015e\025\u015d\050\uff93\001\002\000\004\050\u0176\001\002" +
    "\000\046\003\uff9d\007\uff9d\010\uff9d\011\uff9d\015\uff9d\017" +
    "\uff9d\020\uff9d\021\uff9d\022\uff9d\023\uff9d\025\uff9d\026\uff9d" +
    "\027\uff9d\031\uff9d\050\uff9d\053\uff9d\054\uff9d\063\uff9d\001" +
    "\002\000\010\023\uff97\025\uff97\050\uff97\001\002\000\010" +
    "\023\u015e\025\u015d\050\uff93\001\002\000\004\050\u017a\001" +
    "\002\000\046\003\uff9a\007\uff9a\010\uff9a\011\uff9a\015\uff9a" +
    "\017\uff9a\020\uff9a\021\uff9a\022\uff9a\023\uff9a\025\uff9a\026" +
    "\uff9a\027\uff9a\031\uff9a\050\uff9a\053\uff9a\054\uff9a\063\uff9a" +
    "\001\002\000\050\003\uff91\007\uff91\010\uff91\011\uff91\015" +
    "\uff91\016\uff91\017\uff91\020\uff91\021\uff91\022\uff91\023\uff91" +
    "\025\uff91\026\uff91\027\uff91\031\uff91\050\uff91\053\uff91\054" +
    "\uff91\063\uff91\001\002\000\010\023\uffd3\025\uffd3\050\uffd3" +
    "\001\002\000\026\027\102\045\u0130\055\126\056\122\057" +
    "\134\063\uff72\064\u012d\065\u0128\066\u012c\067\u012b\001\002" +
    "\000\006\040\u0134\046\u017f\001\002\000\004\052\uff8c\001" +
    "\002\000\004\046\u0187\001\002\000\004\046\u0182\001\002" +
    "\000\004\047\u0183\001\002\000\042\003\uffee\007\uffee\010" +
    "\uffee\011\uffee\015\uffee\017\uffee\020\uffee\021\uffee\022\uffee" +
    "\026\uffee\027\uffee\031\uffee\050\uffee\053\uffee\054\uffee\063" +
    "\uffee\001\002\000\042\003\100\007\020\010\023\011\026" +
    "\015\076\017\105\020\067\021\101\022\061\026\077\027" +
    "\102\031\056\050\uffd2\053\071\054\055\063\uff72\001\002" +
    "\000\004\050\u0186\001\002\000\016\003\uffed\004\uffed\007" +
    "\uffed\010\uffed\011\uffed\050\uffed\001\002\000\004\047\u0188" +
    "\001\002\000\042\003\uffe8\007\uffe8\010\uffe8\011\uffe8\015" +
    "\uffe8\017\uffe8\020\uffe8\021\uffe8\022\uffe8\026\uffe8\027\uffe8" +
    "\031\uffe8\050\uffe8\053\uffe8\054\uffe8\063\uffe8\001\002\000" +
    "\042\003\100\007\020\010\023\011\026\015\076\017\105" +
    "\020\067\021\101\022\061\026\077\027\102\031\056\050" +
    "\uffd2\053\071\054\055\063\uff72\001\002\000\004\050\u018b" +
    "\001\002\000\016\003\uffe7\004\uffe7\007\uffe7\010\uffe7\011" +
    "\uffe7\050\uffe7\001\002\000\004\045\u019b\001\002\000\004" +
    "\045\u018e\001\002\000\014\003\u018f\007\020\010\023\011" +
    "\026\046\uffd8\001\002\000\004\046\u0196\001\002\000\004" +
    "\046\u0191\001\002\000\004\047\u0192\001\002\000\042\003" +
    "\uffe6\007\uffe6\010\uffe6\011\uffe6\015\uffe6\017\uffe6\020\uffe6" +
    "\021\uffe6\022\uffe6\026\uffe6\027\uffe6\031\uffe6\050\uffe6\053" +
    "\uffe6\054\uffe6\063\uffe6\001\002\000\042\003\100\007\020" +
    "\010\023\011\026\015\076\017\105\020\067\021\101\022" +
    "\061\026\077\027\102\031\056\050\uffd2\053\071\054\055" +
    "\063\uff72\001\002\000\004\050\u0195\001\002\000\016\003" +
    "\uffe5\004\uffe5\007\uffe5\010\uffe5\011\uffe5\050\uffe5\001\002" +
    "\000\004\047\u0197\001\002\000\042\003\uffe0\007\uffe0\010" +
    "\uffe0\011\uffe0\015\uffe0\017\uffe0\020\uffe0\021\uffe0\022\uffe0" +
    "\026\uffe0\027\uffe0\031\uffe0\050\uffe0\053\uffe0\054\uffe0\063" +
    "\uffe0\001\002\000\042\003\100\007\020\010\023\011\026" +
    "\015\076\017\105\020\067\021\101\022\061\026\077\027" +
    "\102\031\056\050\uffd2\053\071\054\055\063\uff72\001\002" +
    "\000\004\050\u019a\001\002\000\016\003\uffdf\004\uffdf\007" +
    "\uffdf\010\uffdf\011\uffdf\050\uffdf\001\002\000\012\007\020" +
    "\010\023\011\026\046\uffd8\001\002\000\004\046\u019d\001" +
    "\002\000\004\047\u019e\001\002\000\042\003\uffe2\007\uffe2" +
    "\010\uffe2\011\uffe2\015\uffe2\017\uffe2\020\uffe2\021\uffe2\022" +
    "\uffe2\026\uffe2\027\uffe2\031\uffe2\050\uffe2\053\uffe2\054\uffe2" +
    "\063\uffe2\001\002\000\042\003\100\007\020\010\023\011" +
    "\026\015\076\017\105\020\067\021\101\022\061\026\077" +
    "\027\102\031\056\050\uffd2\053\071\054\055\063\uff72\001" +
    "\002\000\004\050\u01a1\001\002\000\016\003\uffe1\004\uffe1" +
    "\007\uffe1\010\uffe1\011\uffe1\050\uffe1\001\002\000\012\007" +
    "\020\010\023\011\026\046\uffd8\001\002\000\004\045\u01a4" +
    "\001\002\000\012\007\020\010\023\011\026\046\uffd8\001" +
    "\002\000\004\046\u01a6\001\002\000\004\047\u01a7\001\002" +
    "\000\042\003\uffe4\007\uffe4\010\uffe4\011\uffe4\015\uffe4\017" +
    "\uffe4\020\uffe4\021\uffe4\022\uffe4\026\uffe4\027\uffe4\031\uffe4" +
    "\050\uffe4\053\uffe4\054\uffe4\063\uffe4\001\002\000\042\003" +
    "\100\007\020\010\023\011\026\015\076\017\105\020\067" +
    "\021\101\022\061\026\077\027\102\031\056\050\uffd2\053" +
    "\071\054\055\063\uff72\001\002\000\004\050\u01aa\001\002" +
    "\000\016\003\uffe3\004\uffe3\007\uffe3\010\uffe3\011\uffe3\050" +
    "\uffe3\001\002\000\004\046\u01ac\001\002\000\004\047\u01ad" +
    "\001\002\000\042\003\uffec\007\uffec\010\uffec\011\uffec\015" +
    "\uffec\017\uffec\020\uffec\021\uffec\022\uffec\026\uffec\027\uffec" +
    "\031\uffec\050\uffec\053\uffec\054\uffec\063\uffec\001\002\000" +
    "\042\003\100\007\020\010\023\011\026\015\076\017\105" +
    "\020\067\021\101\022\061\026\077\027\102\031\056\050" +
    "\uffd2\053\071\054\055\063\uff72\001\002\000\004\050\u01b0" +
    "\001\002\000\016\003\uffeb\004\uffeb\007\uffeb\010\uffeb\011" +
    "\uffeb\050\uffeb\001\002\000\016\003\ufff0\004\ufff0\007\ufff0" +
    "\010\ufff0\011\ufff0\050\ufff0\001\002\000\016\003\uffef\004" +
    "\uffef\007\uffef\010\uffef\011\uffef\050\uffef\001\002\000\004" +
    "\063\116\001\002\000\006\051\uffca\052\uffca\001\002\000" +
    "\006\051\u01b6\052\uffcc\001\002\000\004\063\116\001\002" +
    "\000\006\051\uffcb\052\uffcb\001\002\000\004\047\u01c2\001" +
    "\002\000\006\003\u01ba\047\u01bb\001\002\000\016\003\ufff7" +
    "\004\ufff7\007\ufff7\010\ufff7\011\ufff7\050\ufff7\001\002\000" +
    "\016\003\ufffd\004\ufffd\007\ufffd\010\ufffd\011\ufffd\050\ufffd" +
    "\001\002\000\016\003\ufff3\004\ufff3\007\ufff3\010\ufff3\011" +
    "\ufff3\050\ufff3\001\002\000\016\003\025\004\032\007\020" +
    "\010\023\011\026\050\u01be\001\002\000\010\002\ufffc\003" +
    "\ufffc\004\ufffc\001\002\000\016\003\ufff3\004\ufff3\007\ufff3" +
    "\010\ufff3\011\ufff3\050\ufff3\001\002\000\016\003\025\004" +
    "\032\007\020\010\023\011\026\050\u01c1\001\002\000\010" +
    "\002\ufff6\003\ufff6\004\ufff6\001\002\000\016\003\ufff9\004" +
    "\ufff9\007\ufff9\010\ufff9\011\ufff9\050\ufff9\001\002\000\016" +
    "\003\ufff3\004\ufff3\007\ufff3\010\ufff3\011\ufff3\050\ufff3\001" +
    "\002\000\016\003\025\004\032\007\020\010\023\011\026" +
    "\050\u01c5\001\002\000\010\002\ufff8\003\ufff8\004\ufff8\001" +
    "\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u01c4\000\006\002\003\003\004\001\001\000\002\001" +
    "\001\000\004\004\007\001\001\000\002\001\001\000\004" +
    "\004\010\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\065\015\001\001\000\004\037\016\001\001\000\014\005" +
    "\027\006\030\010\021\030\020\043\026\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\100\u01b2\001\001\000" +
    "\002\001\001\000\002\001\001\000\014\005\027\006\030" +
    "\010\021\030\u01b1\043\026\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\007\033\010\036\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\010\042\012\u0180\001\001\000\006\010\042\012" +
    "\041\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\013\044\001\001\000\002\001\001\000\004\010\046\001" +
    "\001\000\002\001\001\000\004\013\050\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\072\053\001\001\000" +
    "\040\010\021\011\067\031\072\032\057\033\102\034\073" +
    "\035\065\041\064\042\103\043\056\044\061\045\071\046" +
    "\062\050\063\055\074\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\022\u013c\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\016\011\134\014\370\015\130\016\120" +
    "\017\124\021\126\001\001\000\034\010\021\011\067\031" +
    "\072\032\057\033\102\034\073\035\065\042\367\043\056" +
    "\045\071\046\062\050\063\055\074\001\001\000\020\010" +
    "\021\011\067\031\251\040\342\043\056\050\063\055\074" +
    "\001\001\000\002\001\001\000\002\001\001\000\040\010" +
    "\021\011\067\031\072\032\057\033\102\034\073\035\065" +
    "\041\340\042\103\043\056\044\061\045\071\046\062\050" +
    "\063\055\074\001\001\000\002\001\001\000\012\010\112" +
    "\011\107\052\300\055\110\001\001\000\012\010\112\011" +
    "\107\052\111\055\110\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\102\113\001\001\000" +
    "\004\057\114\001\001\000\002\001\001\000\002\001\001" +
    "\000\016\011\134\014\117\015\130\016\120\017\124\021" +
    "\126\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\011\134\016\210\017" +
    "\124\021\126\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\014\011\134\015\176\016\120\017\124" +
    "\021\126\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\011\134\016\153\017\124\021\126\001\001\000\016" +
    "\011\134\014\137\015\130\016\120\017\124\021\126\001" +
    "\001\000\002\001\001\000\014\011\134\015\152\016\120" +
    "\017\124\021\126\001\001\000\014\011\134\015\143\016" +
    "\120\017\124\021\126\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\011\134\016\151\017\124\021\126\001" +
    "\001\000\012\011\134\016\150\017\124\021\126\001\001" +
    "\000\012\011\134\016\147\017\124\021\126\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\062\156\001\001\000" +
    "\022\011\134\014\161\015\130\016\120\017\124\021\126" +
    "\060\157\061\160\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\016\011\134" +
    "\014\164\015\130\016\120\017\124\021\126\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\026\011\134\014\227\015" +
    "\130\016\120\017\124\021\126\024\225\025\223\026\231" +
    "\027\226\001\001\000\002\001\001\000\026\011\134\014" +
    "\274\015\130\016\120\017\124\021\126\024\225\025\223" +
    "\026\275\027\226\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\022\011\134\014\227\015\130" +
    "\016\120\017\124\021\126\024\257\027\226\001\001\000" +
    "\002\001\001\000\012\011\240\053\237\054\242\055\241" +
    "\001\001\000\024\011\134\014\227\015\130\016\120\017" +
    "\124\021\126\024\225\025\234\027\226\001\001\000\002" +
    "\001\001\000\022\011\134\014\227\015\130\016\120\017" +
    "\124\021\126\024\236\027\226\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\016" +
    "\011\134\014\247\015\130\016\120\017\124\021\126\001" +
    "\001\000\002\001\001\000\002\001\001\000\020\010\021" +
    "\011\067\031\251\040\253\043\056\050\063\055\074\001" +
    "\001\000\002\001\001\000\004\101\254\001\001\000\002" +
    "\001\001\000\040\010\021\011\067\031\072\032\057\033" +
    "\102\034\073\035\065\041\255\042\103\043\056\044\061" +
    "\045\071\046\062\050\063\055\074\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\016\011\134" +
    "\014\273\015\130\016\120\017\124\021\126\001\001\000" +
    "\016\011\134\014\272\015\130\016\120\017\124\021\126" +
    "\001\001\000\016\011\134\014\271\015\130\016\120\017" +
    "\124\021\126\001\001\000\016\011\134\014\270\015\130" +
    "\016\120\017\124\021\126\001\001\000\016\011\134\014" +
    "\267\015\130\016\120\017\124\021\126\001\001\000\016" +
    "\011\134\014\266\015\130\016\120\017\124\021\126\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\026\011" +
    "\134\014\227\015\130\016\120\017\124\021\126\024\225" +
    "\025\223\026\303\027\226\001\001\000\002\001\001\000" +
    "\012\011\240\053\305\054\242\055\241\001\001\000\002" +
    "\001\001\000\020\010\021\011\067\031\251\040\307\043" +
    "\056\050\063\055\074\001\001\000\002\001\001\000\026" +
    "\011\134\014\227\015\130\016\120\017\124\021\126\024" +
    "\225\025\223\026\320\027\226\001\001\000\026\011\134" +
    "\014\227\015\130\016\120\017\124\021\126\024\225\025" +
    "\223\026\312\027\226\001\001\000\002\001\001\000\012" +
    "\011\240\053\314\054\242\055\241\001\001\000\002\001" +
    "\001\000\020\010\021\011\067\031\251\040\316\043\056" +
    "\050\063\055\074\001\001\000\002\001\001\000\014\011" +
    "\134\015\176\016\120\017\124\021\126\001\001\000\002" +
    "\001\001\000\012\011\240\053\326\054\242\055\241\001" +
    "\001\000\012\011\240\053\323\054\242\055\241\001\001" +
    "\000\002\001\001\000\020\010\021\011\067\031\251\040" +
    "\325\043\056\050\063\055\074\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\020\010\021\011" +
    "\067\031\251\040\331\043\056\050\063\055\074\001\001" +
    "\000\002\001\001\000\020\010\021\011\067\031\251\040" +
    "\333\043\056\050\063\055\074\001\001\000\002\001\001" +
    "\000\012\011\240\053\335\054\242\055\241\001\001\000" +
    "\002\001\001\000\020\010\021\011\067\031\251\040\337" +
    "\043\056\050\063\055\074\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\026\011\134\014\227\015" +
    "\130\016\120\017\124\021\126\024\225\025\223\026\353" +
    "\027\226\001\001\000\026\011\134\014\227\015\130\016" +
    "\120\017\124\021\126\024\225\025\223\026\347\027\226" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\014\011\134\015\176\016\120\017\124\021\126" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\026\011\134\014" +
    "\227\015\130\016\120\017\124\021\126\024\225\025\223" +
    "\026\364\027\226\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\026\011\134\014\227\015\130\016" +
    "\120\017\124\021\126\024\225\025\223\026\u0117\027\226" +
    "\001\001\000\026\011\134\014\227\015\130\016\120\017" +
    "\124\021\126\024\225\025\223\026\374\027\226\001\001" +
    "\000\002\001\001\000\020\010\021\011\067\031\251\040" +
    "\376\043\056\050\063\055\074\001\001\000\004\023\377" +
    "\001\001\000\004\036\u0100\001\001\000\002\001\001\000" +
    "\020\010\021\011\067\031\251\040\u0103\043\056\050\063" +
    "\055\074\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\026\011\134\014\227\015\130\016\120" +
    "\017\124\021\126\024\225\025\223\026\u010b\027\226\001" +
    "\001\000\026\011\134\014\227\015\130\016\120\017\124" +
    "\021\126\024\225\025\223\026\u0107\027\226\001\001\000" +
    "\002\001\001\000\020\010\021\011\067\031\251\040\u0109" +
    "\043\056\050\063\055\074\001\001\000\002\001\001\000" +
    "\014\011\134\015\176\016\120\017\124\021\126\001\001" +
    "\000\002\001\001\000\020\010\021\011\067\031\251\040" +
    "\u010f\043\056\050\063\055\074\001\001\000\020\010\021" +
    "\011\067\031\251\040\u010e\043\056\050\063\055\074\001" +
    "\001\000\002\001\001\000\002\001\001\000\020\010\021" +
    "\011\067\031\251\040\u0111\043\056\050\063\055\074\001" +
    "\001\000\002\001\001\000\026\011\134\014\227\015\130" +
    "\016\120\017\124\021\126\024\225\025\223\026\u0113\027" +
    "\226\001\001\000\002\001\001\000\020\010\021\011\067" +
    "\031\251\040\u0115\043\056\050\063\055\074\001\001\000" +
    "\002\001\001\000\014\011\134\015\176\016\120\017\124" +
    "\021\126\001\001\000\002\001\001\000\020\010\021\011" +
    "\067\031\251\040\u011d\043\056\050\063\055\074\001\001" +
    "\000\020\010\021\011\067\031\251\040\u011a\043\056\050" +
    "\063\055\074\001\001\000\004\023\u011b\001\001\000\004" +
    "\036\u011c\001\001\000\002\001\001\000\004\023\u011e\001" +
    "\001\000\004\036\u011f\001\001\000\002\001\001\000\020" +
    "\010\021\011\067\031\251\040\u0121\043\056\050\063\055" +
    "\074\001\001\000\004\023\u0122\001\001\000\004\036\u0123" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\011" +
    "\u012d\020\u012e\021\u0129\051\u0137\001\001\000\012\011\u012d" +
    "\020\u012e\021\u0129\051\u0128\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\016\011\134\014\u0130\015\130\016\120\017\124" +
    "\021\126\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\011\u012d\020\u0136\021\u0129\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\022\011\134\014\161\015\130\016\120\017\124" +
    "\021\126\060\157\061\u0142\001\001\000\022\011\134\014" +
    "\161\015\130\016\120\017\124\021\126\060\157\061\u0140" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\014\011\134\015\176\016\120\017\124\021\126" +
    "\001\001\000\002\001\001\000\002\001\001\000\026\011" +
    "\134\014\227\015\130\016\120\017\124\021\126\024\225" +
    "\025\223\026\u014c\027\226\001\001\000\026\011\134\014" +
    "\227\015\130\016\120\017\124\021\126\024\225\025\223" +
    "\026\u0148\027\226\001\001\000\002\001\001\000\020\010" +
    "\021\011\067\031\251\040\u014a\043\056\050\063\055\074" +
    "\001\001\000\002\001\001\000\014\011\134\015\176\016" +
    "\120\017\124\021\126\001\001\000\002\001\001\000\020" +
    "\010\021\011\067\031\251\040\u0150\043\056\050\063\055" +
    "\074\001\001\000\020\010\021\011\067\031\251\040\u014f" +
    "\043\056\050\063\055\074\001\001\000\002\001\001\000" +
    "\002\001\001\000\020\010\021\011\067\031\251\040\u0152" +
    "\043\056\050\063\055\074\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\016\011\134\014\u0169" +
    "\015\130\016\120\017\124\021\126\001\001\000\016\011" +
    "\134\014\u0157\015\130\016\120\017\124\021\126\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\056\u015a\001" +
    "\001\000\004\047\u015b\001\001\000\002\001\001\000\002" +
    "\001\001\000\016\011\134\014\u015e\015\130\016\120\017" +
    "\124\021\126\001\001\000\002\001\001\000\014\011\134" +
    "\015\176\016\120\017\124\021\126\001\001\000\034\010" +
    "\021\011\067\031\072\032\057\033\102\034\073\035\065" +
    "\042\u0161\043\056\045\071\046\062\050\063\055\074\001" +
    "\001\000\002\001\001\000\004\103\u0163\001\001\000\040" +
    "\010\021\011\067\031\072\032\057\033\102\034\073\035" +
    "\065\041\u0164\042\103\043\056\044\061\045\071\046\062" +
    "\050\063\055\074\001\001\000\002\001\001\000\004\104" +
    "\u0166\001\001\000\040\010\021\011\067\031\072\032\057" +
    "\033\102\034\073\035\065\041\u0167\042\103\043\056\044" +
    "\061\045\071\046\062\050\063\055\074\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\014\011" +
    "\134\015\176\016\120\017\124\021\126\001\001\000\002" +
    "\001\001\000\004\056\u016d\001\001\000\004\047\u016e\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\056\u0173\001\001\000\004\047" +
    "\u0174\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\056\u0177\001\001\000\004\047\u0178\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\011\u012d\020\u012e\021\u0129\051\u017d\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\070\u0183\001\001\000" +
    "\040\010\021\011\067\031\072\032\057\033\102\034\073" +
    "\035\065\041\u0184\042\103\043\056\044\061\045\071\046" +
    "\062\050\063\055\074\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\073\u0188\001\001\000" +
    "\040\010\021\011\067\031\072\032\057\033\102\034\073" +
    "\035\065\041\u0189\042\103\043\056\044\061\045\071\046" +
    "\062\050\063\055\074\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\010" +
    "\042\012\u018f\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\074\u0192\001\001\000\040\010" +
    "\021\011\067\031\072\032\057\033\102\034\073\035\065" +
    "\041\u0193\042\103\043\056\044\061\045\071\046\062\050" +
    "\063\055\074\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\077\u0197\001\001\000\040\010" +
    "\021\011\067\031\072\032\057\033\102\034\073\035\065" +
    "\041\u0198\042\103\043\056\044\061\045\071\046\062\050" +
    "\063\055\074\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\010\042\012\u019b\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\076\u019e\001\001\000\040\010\021" +
    "\011\067\031\072\032\057\033\102\034\073\035\065\041" +
    "\u019f\042\103\043\056\044\061\045\071\046\062\050\063" +
    "\055\074\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\010\042\012\u01aa\001\001\000\002\001\001\000\006" +
    "\010\042\012\u01a4\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\075\u01a7\001\001\000\040\010\021\011\067" +
    "\031\072\032\057\033\102\034\073\035\065\041\u01a8\042" +
    "\103\043\056\044\061\045\071\046\062\050\063\055\074" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\071\u01ad\001\001\000\040" +
    "\010\021\011\067\031\072\032\057\033\102\034\073\035" +
    "\065\041\u01ae\042\103\043\056\044\061\045\071\046\062" +
    "\050\063\055\074\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\057\u01b3" +
    "\063\u01b4\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\057\u01b6\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\067\u01be\001\001\000\004\064" +
    "\u01bb\001\001\000\004\037\u01bc\001\001\000\014\005\027" +
    "\006\030\010\021\030\020\043\026\001\001\000\002\001" +
    "\001\000\004\037\u01bf\001\001\000\014\005\027\006\030" +
    "\010\021\030\020\043\026\001\001\000\002\001\001\000" +
    "\004\066\u01c2\001\001\000\004\037\u01c3\001\001\000\014" +
    "\005\027\006\030\010\021\030\020\043\026\001\001\000" +
    "\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$SintaxisJava$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$SintaxisJava$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$SintaxisJava$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    private Symbol s;
    private JavaSemantica java = new JavaSemantica();
    private TablaJava tabla;
    private List<VariableJava> variables;
    private MetodoJava actual;
    private Errores errores = new Errores();
    int ret = 4;
    int cas = 0;
    private int linea;

    public void setLinea(int line){
            this.linea = line;
    }
    
    public void syntax_error(Symbol sym){
            errores.errorSintactico(sym, linea); 
    }

    public void unrecovered_syntax_error(Symbol sym) throws java.lang.Exception{
            errores.errorSintactico(sym, linea); 
    }

    public JavaSemantica getJava() {
            return java;
    }
    
    public void reportarSem(String texto){
            errores.errorSemantico(getS(), texto, linea);
    }

    public Symbol getS(){
        return this.cur_token;
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$SintaxisJava$actions {
  private final SintaxisJava parser;

  /** Constructor */
  CUP$SintaxisJava$actions(SintaxisJava parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$SintaxisJava$do_action_part00000000(
    int                        CUP$SintaxisJava$act_num,
    java_cup.runtime.lr_parser CUP$SintaxisJava$parser,
    java.util.Stack            CUP$SintaxisJava$stack,
    int                        CUP$SintaxisJava$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$SintaxisJava$result;

      /* select the action based on the action number */
      switch (CUP$SintaxisJava$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= JAVA EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-1)).value;
		RESULT = start_val;
              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$SintaxisJava$parser.done_parsing();
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // JAVA ::= CLASSES 
            {
              Object RESULT =null;
		java.mostrarClases();
              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("JAVA",0, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // CLASSES ::= CLASSES CLASS 
            {
              Object RESULT =null;

              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("CLASSES",1, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // CLASSES ::= 
            {
              Object RESULT =null;

              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("CLASSES",1, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // NT$0 ::= 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-1)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-1)).value;
TablaJava sem = new TablaJava(e1); if(!java.agregarTabla(sem)){
                                reportarSem("Clase ya existente con id: <"+e1+">");}
                                tabla = sem; TablaJava.AMBITO += 1;
              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("NT$0",50, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // CLASS ::= publicc classs id llavea NT$0 STATEMENTS_CLASS llavec 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-2)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-4)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-4)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-4)).value;
		tabla.eliminarAmbito(TablaJava.AMBITO); TablaJava.AMBITO -= 1; 
                tabla.verificarConstructores(); tabla = null;
              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("CLASS",2, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-6)), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // NT$1 ::= 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-1)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-1)).value;
TablaJava sem = new TablaJava(e1);
                                tabla = sem; TablaJava.AMBITO += 1; reportarSem("Error en la iniciacion de clases, falto la palabra class");
              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("NT$1",51, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // CLASS ::= publicc error id llavea NT$1 STATEMENTS_CLASS llavec 
            {
              Object RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-2)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-4)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-4)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-4)).value;
		tabla.eliminarAmbito(TablaJava.AMBITO); TablaJava.AMBITO -= 1;
              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("CLASS",2, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-6)), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // NT$2 ::= 
            {
              Object RESULT =null;
TablaJava sem = new TablaJava("");
                                tabla = sem; TablaJava.AMBITO += 1; reportarSem("Error en la iniciacion de clases, falto el id");
              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("NT$2",52, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // CLASS ::= publicc classs error llavea NT$2 STATEMENTS_CLASS llavec 
            {
              Object RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-2)).value;
		tabla.eliminarAmbito(TablaJava.AMBITO); TablaJava.AMBITO -= 1;
              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("CLASS",2, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-6)), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // NT$3 ::= 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-1)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-1)).value;
TablaJava sem = new TablaJava(e1);
                                tabla = sem; TablaJava.AMBITO += 1; reportarSem("Error en la iniciacion de clases, falto la palabra class");
              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("NT$3",53, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // CLASS ::= publicc classs id error NT$3 STATEMENTS_CLASS llavec 
            {
              Object RESULT =null;
              // propagate RESULT from NT$3
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-2)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-4)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-4)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-4)).value;
		tabla.eliminarAmbito(TablaJava.AMBITO); TablaJava.AMBITO -= 1;
              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("CLASS",2, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-6)), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // CLASS ::= error CLASS 
            {
              Object RESULT =null;

              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("CLASS",2, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // STATEMENTS_CLASS ::= STATEMENTS_CLASS STATEMENT_CLASS 
            {
              ListaTripletes RESULT =null;

              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("STATEMENTS_CLASS",29, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // STATEMENTS_CLASS ::= 
            {
              ListaTripletes RESULT =null;
		
              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("STATEMENTS_CLASS",29, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // STATEMENT_CLASS ::= METODO 
            {
              ListaTripletes RESULT =null;

              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("STATEMENT_CLASS",22, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // STATEMENT_CLASS ::= CONSTRUCTOR 
            {
              ListaTripletes RESULT =null;

              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("STATEMENT_CLASS",22, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // STATEMENT_CLASS ::= DEF_VAR puntocoma 
            {
              ListaTripletes RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-1)).right;
		ListaTripletes e1 = (ListaTripletes)((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-1)).value;
		tabla.getPrincipales().addAll(e1);
              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("STATEMENT_CLASS",22, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // STATEMENT_CLASS ::= error STATEMENT_CLASS 
            {
              ListaTripletes RESULT =null;

              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("STATEMENT_CLASS",22, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // NT$4 ::= 
            {
              Object RESULT =null;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-4)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-4)).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-4)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-2)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-2)).right;
		List<VariableJava> e3 = (List<VariableJava>)((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-2)).value;

                MetodoJava met = new MetodoJava(e2, 5, e3, tabla.getId());
                actual = met;
                if(!tabla.addConstructor(met)){
                        reportarSem("Constructor de la clase : "+ e2 +" ya existente con mismos parametros");
                }
                        TablaJava.AMBITO += 1;
              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("NT$4",54, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // CONSTRUCTOR ::= publicc id para LIST_PAR parc llavea NT$4 STATEMENTS_METODO llavec 
            {
              Object RESULT =null;
              // propagate RESULT from NT$4
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-7)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-7)).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-7)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-5)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-5)).right;
		List<VariableJava> e3 = (List<VariableJava>)((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-5)).value;
		int e4left = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-1)).left;
		int e4right = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-1)).right;
		ListaTripletes e4 = (ListaTripletes)((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-1)).value;
		tabla.eliminarAmbito(TablaJava.AMBITO); TablaJava.AMBITO -= 1;
                actual.getTripletes().addAll(e4);
                actual = null;
                
              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("CONSTRUCTOR",4, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-8)), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // NT$5 ::= 
            {
              Object RESULT =null;
		int e3left = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-2)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-2)).right;
		List<VariableJava> e3 = (List<VariableJava>)((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-2)).value;
 reportarSem("Error en constructor, falta id");
                MetodoJava met = new MetodoJava("", 5, e3, tabla.getId());
                actual = met; TablaJava.AMBITO += 1;
              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("NT$5",55, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // CONSTRUCTOR ::= publicc error para LIST_PAR parc llavea NT$5 STATEMENTS_METODO llavec 
            {
              Object RESULT =null;
              // propagate RESULT from NT$5
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-2)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-5)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-5)).right;
		List<VariableJava> e3 = (List<VariableJava>)((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-5)).value;
		int e4left = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-1)).left;
		int e4right = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-1)).right;
		ListaTripletes e4 = (ListaTripletes)((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-1)).value;
		tabla.eliminarAmbito(TablaJava.AMBITO); TablaJava.AMBITO -= 1;
              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("CONSTRUCTOR",4, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-8)), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // NT$6 ::= 
            {
              Object RESULT =null;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-4)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-4)).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-4)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-2)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-2)).right;
		List<VariableJava> e3 = (List<VariableJava>)((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-2)).value;
 reportarSem("Error en constructor, falta ( antes de parametros");
                MetodoJava met = new MetodoJava(e2, 5, e3, tabla.getId());
                actual = met; TablaJava.AMBITO += 1;
              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("NT$6",56, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // CONSTRUCTOR ::= publicc id error LIST_PAR parc llavea NT$6 STATEMENTS_METODO llavec 
            {
              Object RESULT =null;
              // propagate RESULT from NT$6
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-7)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-7)).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-7)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-5)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-5)).right;
		List<VariableJava> e3 = (List<VariableJava>)((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-5)).value;
		int e4left = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-1)).left;
		int e4right = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-1)).right;
		ListaTripletes e4 = (ListaTripletes)((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-1)).value;
		tabla.eliminarAmbito(TablaJava.AMBITO); TablaJava.AMBITO -= 1;
              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("CONSTRUCTOR",4, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-8)), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // NT$7 ::= 
            {
              Object RESULT =null;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-4)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-4)).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-4)).value;
 reportarSem("Error en constructor, se esperaban parametros entre los ()");
                MetodoJava met = new MetodoJava(e2, 5, new ArrayList<>(), tabla.getId());
                actual = met; TablaJava.AMBITO += 1;
              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("NT$7",57, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // CONSTRUCTOR ::= publicc id para error parc llavea NT$7 STATEMENTS_METODO llavec 
            {
              Object RESULT =null;
              // propagate RESULT from NT$7
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-7)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-7)).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-7)).value;
		int e4left = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-1)).left;
		int e4right = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-1)).right;
		ListaTripletes e4 = (ListaTripletes)((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-1)).value;
		tabla.eliminarAmbito(TablaJava.AMBITO); TablaJava.AMBITO -= 1;
              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("CONSTRUCTOR",4, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-8)), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // NT$8 ::= 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-5)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-5)).right;
		Integer e1 = (Integer)((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-5)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-4)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-4)).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-4)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-2)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-2)).right;
		List<VariableJava> e3 = (List<VariableJava>)((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-2)).value;
ret = e1;
                MetodoJava met = new MetodoJava(e2, e1, e3, tabla.getId());
                actual = met;
                if(!tabla.addMetodo(met)){
                        reportarSem("Metodo ya existente con id: <"+e2+"> con mismos parametros");
                }
                        TablaJava.AMBITO += 1;
              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("NT$8",58, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // METODO ::= publicc TYPE_V id para LIST_PAR parc llavea NT$8 STATEMENTS_METODO llavec 
            {
              Object RESULT =null;
              // propagate RESULT from NT$8
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-2)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-8)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-8)).right;
		Integer e1 = (Integer)((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-8)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-7)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-7)).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-7)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-5)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-5)).right;
		List<VariableJava> e3 = (List<VariableJava>)((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-5)).value;
		int e4left = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-1)).left;
		int e4right = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-1)).right;
		ListaTripletes e4 = (ListaTripletes)((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-1)).value;
		tabla.eliminarAmbito(TablaJava.AMBITO); TablaJava.AMBITO -= 1;
                actual.getTripletes().addAll(e4);
                actual = null;
                
              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("METODO",3, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-9)), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // NT$9 ::= 
            {
              Object RESULT =null;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-4)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-4)).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-4)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-2)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-2)).right;
		List<VariableJava> e3 = (List<VariableJava>)((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-2)).value;
 reportarSem("Error en inicialización de clase, se esperaba un tipo antes del id");
                MetodoJava met = new MetodoJava(e2, 0, e3, tabla.getId());
                actual = met; TablaJava.AMBITO += 1;
              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("NT$9",59, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // METODO ::= publicc error id para LIST_PAR parc llavea NT$9 STATEMENTS_METODO llavec 
            {
              Object RESULT =null;
              // propagate RESULT from NT$9
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-7)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-7)).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-7)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-5)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-5)).right;
		List<VariableJava> e3 = (List<VariableJava>)((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-5)).value;
		int e4left = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-1)).left;
		int e4right = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-1)).right;
		ListaTripletes e4 = (ListaTripletes)((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-1)).value;
		tabla.eliminarAmbito(TablaJava.AMBITO); TablaJava.AMBITO -= 1;
              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("METODO",3, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-9)), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // NT$10 ::= 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-5)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-5)).right;
		Integer e1 = (Integer)((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-5)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-2)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-2)).right;
		List<VariableJava> e3 = (List<VariableJava>)((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-2)).value;
 reportarSem("Error en inicialización de clase, se esperaba un id después del tipado");
                MetodoJava met = new MetodoJava("", e1, e3, tabla.getId());
                actual = met; TablaJava.AMBITO += 1;
              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("NT$10",60, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // METODO ::= publicc TYPE_V error para LIST_PAR parc llavea NT$10 STATEMENTS_METODO llavec 
            {
              Object RESULT =null;
              // propagate RESULT from NT$10
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-2)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-8)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-8)).right;
		Integer e1 = (Integer)((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-8)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-5)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-5)).right;
		List<VariableJava> e3 = (List<VariableJava>)((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-5)).value;
		int e4left = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-1)).left;
		int e4right = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-1)).right;
		ListaTripletes e4 = (ListaTripletes)((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-1)).value;
		tabla.eliminarAmbito(TablaJava.AMBITO); TablaJava.AMBITO -= 1;
              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("METODO",3, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-9)), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // NT$11 ::= 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-5)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-5)).right;
		Integer e1 = (Integer)((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-5)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-4)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-4)).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-4)).value;
 reportarSem("Error en inicialización de clase, se esperaban parametros entre los ()");
                MetodoJava met = new MetodoJava(e2, e1, new ArrayList<>(), tabla.getId());
                actual = met; TablaJava.AMBITO += 1;
              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("NT$11",61, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // METODO ::= publicc TYPE_V id para error parc llavea NT$11 STATEMENTS_METODO llavec 
            {
              Object RESULT =null;
              // propagate RESULT from NT$11
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-2)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-8)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-8)).right;
		Integer e1 = (Integer)((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-8)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-7)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-7)).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-7)).value;
		int e4left = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-1)).left;
		int e4right = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-1)).right;
		ListaTripletes e4 = (ListaTripletes)((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-1)).value;
		tabla.eliminarAmbito(TablaJava.AMBITO); TablaJava.AMBITO -= 1;
              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("METODO",3, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-9)), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // TYPE_V ::= voidd 
            {
              Integer RESULT =null;
		RESULT = TablaJava.VOID;
              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("TYPE_V",5, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // TYPE_V ::= TYPE 
            {
              Integer RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()).right;
		Integer e1 = (Integer)((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.peek()).value;
		RESULT = e1;
              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("TYPE_V",5, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // TYPE ::= intt 
            {
              Integer RESULT =null;
		RESULT = TablaJava.INT;
              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("TYPE",6, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // TYPE ::= floatt 
            {
              Integer RESULT =null;
		RESULT = TablaJava.FLOAT;
              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("TYPE",6, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // TYPE ::= charr 
            {
              Integer RESULT =null;
		RESULT = TablaJava.CHAR;
              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("TYPE",6, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // LIST_PAR ::= TYPE id LIST_PARR 
            {
              List<VariableJava> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-2)).right;
		Integer e1 = (Integer)((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-1)).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-1)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()).right;
		List<VariableJava> e3 = (List<VariableJava>)((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.peek()).value;
		
                VariableJava var = new VariableJava(e2, e1, TablaJava.AMBITO+1, null);
                var.setDireccion(tabla.getVariables().size());
                tabla.getVariables().add(var);
                e3.add(var); RESULT = e3;
              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("LIST_PAR",8, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // LIST_PAR ::= 
            {
              List<VariableJava> RESULT =null;
		RESULT = new ArrayList<>();
              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("LIST_PAR",8, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // LIST_PARR ::= coma TYPE id LIST_PARR 
            {
              List<VariableJava> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-2)).right;
		Integer e1 = (Integer)((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-1)).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-1)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()).right;
		List<VariableJava> e3 = (List<VariableJava>)((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.peek()).value;
		
                VariableJava var = new VariableJava(e2, e1, TablaJava.AMBITO+1, null);
                var.setDireccion(tabla.getVariables().size());
                tabla.getVariables().add(var);
                e3.add(var); RESULT = e3;
              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("LIST_PARR",9, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // LIST_PARR ::= 
            {
              List<VariableJava> RESULT =null;
		RESULT = new ArrayList<>();
              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("LIST_PARR",9, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // STATEMENTS_METODO ::= STATEMENT_METODO STATEMENTS_METODO 
            {
              ListaTripletes RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-1)).right;
		ListaTripletes e1 = (ListaTripletes)((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()).right;
		ListaTripletes e2 = (ListaTripletes)((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.peek()).value;
		if(!e2.isFin()){
                                                                if(e1.isRet()){
                                                                        reportarSem("ya existe varios returns, algunos no se toman en cuenta");
                                                                }else {e1.addAll(e2);}} RESULT = e1;
              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("STATEMENTS_METODO",31, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // STATEMENTS_METODO ::= RETURN 
            {
              ListaTripletes RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()).right;
		ListaTripletes e1 = (ListaTripletes)((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.peek()).value;
		RESULT = e1;
              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("STATEMENTS_METODO",31, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // STATEMENTS_METODO ::= breakk puntocoma 
            {
              ListaTripletes RESULT =null;
		if(cas==0){
                reportarSem("Break no esta dentro de un switch");
                } RESULT = new ListaTripletes();
              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("STATEMENTS_METODO",31, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // STATEMENTS_METODO ::= 
            {
              ListaTripletes RESULT =null;
		RESULT = new ListaTripletes(true);
              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("STATEMENTS_METODO",31, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // RETURN ::= returnn OPERACION_A puntocoma 
            {
              ListaTripletes RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-1)).right;
		OperacionJava e1 = (OperacionJava)((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-1)).value;
		ListaTripletes tri = new ListaTripletes();
                        if(e1==null || e1.getTipo() != ret){
                                reportarSem("Return de tipo " + OperacionJava.obtenerTipo(e1.getTipo())
                                + " y se espera un tipo: " + OperacionJava.obtenerTipo(actual.getTIPO()));
                                RESULT = tri;}
                        else{tri.setRet(true); tri.addAll(e1.mostrarTripletes()); 
                        SumOperator sum = new SumOperator(null, new P(), new TerminalOperator("1"),"int"); tri.add(sum);
                        tri.add(new Return(e1.getTriplete(), sum));
                        RESULT = tri;}
              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("RETURN",34, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // STATEMENT_METODO ::= COMP_STATE 
            {
              ListaTripletes RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()).right;
		ListaTripletes e1 = (ListaTripletes)((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.peek()).value;
		RESULT = e1;
              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("STATEMENT_METODO",32, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // STATEMENT_METODO ::= STATEMENT_LINE 
            {
              ListaTripletes RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()).right;
		ListaTripletes e1 = (ListaTripletes)((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.peek()).value;
		RESULT = e1;
              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("STATEMENT_METODO",32, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // STATEMENT_METODO ::= error STATEMENT_METODO 
            {
              ListaTripletes RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()).right;
		ListaTripletes e1 = (ListaTripletes)((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.peek()).value;
		RESULT = e1;
              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("STATEMENT_METODO",32, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // NT$12 ::= 
            {
              ListaTripletes RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()).right;
		Integer e1 = (Integer)((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.peek()).value;
variables = new ArrayList<>();
              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("NT$12",62, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // DEF_VAR ::= TYPE NT$12 LIST_VAR 
            {
              ListaTripletes RESULT =null;
              // propagate RESULT from NT$12
                RESULT = (ListaTripletes) ((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-1)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-2)).right;
		Integer e1 = (Integer)((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()).right;
		List<VariableJava> e2 = (List<VariableJava>)((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.peek()).value;
		VariableJava.agregarTipo(e2, e1);
                        if(!tabla.addListVar(e2)){
                                reportarSem("Unas variables de las registradas ya existen");}
                                variables = new ArrayList<>();
                        RESULT = new ListaTripletes(tabla.obtenerTripletes(e2, e1));
              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("DEF_VAR",33, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // LIST_VAR ::= LIST_VAR coma AS_VAR 
            {
              List<VariableJava> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-2)).right;
		List<VariableJava> e1 = (List<VariableJava>)((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()).right;
		VariableJava e2 = (VariableJava)((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.peek()).value;
		e1.add(e2); RESULT = e1;
              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("LIST_VAR",49, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // LIST_VAR ::= AS_VAR 
            {
              List<VariableJava> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()).right;
		VariableJava e1 = (VariableJava)((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.peek()).value;
		List<VariableJava> var = new ArrayList<>(); var.add(e1); RESULT = var;
              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("LIST_VAR",49, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // AS_VAR ::= id igual OPERACION_A 
            {
              VariableJava RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()).right;
		OperacionJava e2 = (OperacionJava)((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.peek()).value;
		variables.add(new VariableJava(e1, TablaJava.AMBITO, null));
        VariableJava var = new VariableJava(e1, TablaJava.AMBITO, new AsignarValor(new TerminalOperator(e1), e2.getTriplete(),null));
        var.getTripletes().addAll(e2.mostrarTripletes()); RESULT = var;
              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("AS_VAR",45, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // AS_VAR ::= id 
            {
              VariableJava RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.peek()).value;
		variables.add(new VariableJava(e1, TablaJava.AMBITO, null));
        RESULT = new VariableJava(e1, TablaJava.AMBITO, new AsignarValor(new TerminalOperator(e1), null, null));
              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("AS_VAR",45, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // COMP_STATE ::= WHILE 
            {
              ListaTripletes RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()).right;
		ListaTripletes e1 = (ListaTripletes)((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.peek()).value;
		RESULT = e1;
              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("COMP_STATE",35, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // COMP_STATE ::= FOR 
            {
              ListaTripletes RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()).right;
		ListaTripletes e1 = (ListaTripletes)((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.peek()).value;
		RESULT = e1;
              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("COMP_STATE",35, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // COMP_STATE ::= DO_WHILE 
            {
              ListaTripletes RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()).right;
		ListaTripletes e1 = (ListaTripletes)((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.peek()).value;
		RESULT = e1;
              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("COMP_STATE",35, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // COMP_STATE ::= IF_ELSE 
            {
              ListaTripletes RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()).right;
		ListaTripletes e1 = (ListaTripletes)((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.peek()).value;
		RESULT = e1;
              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("COMP_STATE",35, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // COMP_STATE ::= SWITCH 
            {
              ListaTripletes RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()).right;
		ListaTripletes e1 = (ListaTripletes)((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.peek()).value;
		RESULT = e1;
              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("COMP_STATE",35, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // WHILE ::= whilee para CONDICION parc BLOQUE 
            {
              ListaTripletes RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-2)).right;
		CondicionPrograma e1 = (CondicionPrograma)((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()).right;
		ListaTripletes e2 = (ListaTripletes)((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.peek()).value;
		RESULT = Else_Operator.WHILE(e1, e2);
              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("WHILE",24, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-4)), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // WHILE ::= whilee error CONDICION parc BLOQUE 
            {
              ListaTripletes RESULT =null;
		reportarSem("Error en un while, se esperaba un ( antes de la condicion");
                RESULT = new ListaTripletes();
              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("WHILE",24, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-4)), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // WHILE ::= whilee para error parc BLOQUE 
            {
              ListaTripletes RESULT =null;
		reportarSem("Error en un while, se esperaba una condicion");
                RESULT = new ListaTripletes();
              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("WHILE",24, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-4)), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // WHILE ::= whilee para CONDICION error BLOQUE 
            {
              ListaTripletes RESULT =null;
		reportarSem("Error en un while, se ) despues de la condicion");
                RESULT = new ListaTripletes();
              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("WHILE",24, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-4)), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // NT$13 ::= 
            {
              ListaTripletes RESULT =null;
TablaJava.AMBITO += 1;
              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("NT$13",63, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // BLOQUE ::= llavea NT$13 STATEMENTS_METODO llavec 
            {
              ListaTripletes RESULT =null;
              // propagate RESULT from NT$13
                RESULT = (ListaTripletes) ((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-2)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-1)).right;
		ListaTripletes e1 = (ListaTripletes)((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-1)).value;
		tabla.eliminarAmbito(TablaJava.AMBITO); TablaJava.AMBITO -= 1;
                                                RESULT = e1;
              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("BLOQUE",30, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // BLOQUE ::= STATEMENT_LINE 
            {
              ListaTripletes RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()).right;
		ListaTripletes e1 = (ListaTripletes)((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.peek()).value;
		RESULT = e1;
              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("BLOQUE",30, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // FOR ::= forr para INICIO puntocoma CONDICION puntocoma STEP parc BLOQUE 
            {
              ListaTripletes RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-6)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-6)).right;
		ListaTripletes e1 = (ListaTripletes)((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-6)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-4)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-4)).right;
		CondicionPrograma e2 = (CondicionPrograma)((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-4)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-2)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-2)).right;
		ListaTripletes e3 = (ListaTripletes)((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-2)).value;
		int e4left = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()).left;
		int e4right = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()).right;
		ListaTripletes e4 = (ListaTripletes)((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.peek()).value;
		RESULT = Else_Operator.FOR(e1, e3, e2, e4);
              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("FOR",25, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-8)), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // FOR ::= forr error INICIO puntocoma CONDICION puntocoma STEP parc BLOQUE 
            {
              ListaTripletes RESULT =null;
		 reportarSem("Error en for, se esperaba un ( despues del for");
                RESULT = new ListaTripletes();
              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("FOR",25, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-8)), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // FOR ::= forr para error puntocoma CONDICION puntocoma STEP parc BLOQUE 
            {
              ListaTripletes RESULT =null;
		 reportarSem("Error en for, se esperaba una inicializacion de variable despues del (");
                RESULT = new ListaTripletes();
              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("FOR",25, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-8)), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // FOR ::= forr para INICIO error CONDICION puntocoma STEP parc BLOQUE 
            {
              ListaTripletes RESULT =null;
		 reportarSem("Error en for, se esperaba un ; despues de la inicializacion de variable");
                RESULT = new ListaTripletes();
              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("FOR",25, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-8)), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // FOR ::= forr para INICIO puntocoma error puntocoma STEP parc BLOQUE 
            {
              ListaTripletes RESULT =null;
		 reportarSem("Error en for, se esperaba una condicion despues del primer ;");
                RESULT = new ListaTripletes();
              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("FOR",25, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-8)), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // FOR ::= forr para INICIO puntocoma CONDICION error STEP parc BLOQUE 
            {
              ListaTripletes RESULT =null;
		 reportarSem("Error en for, se esperaba un : despues de la condicion");
                RESULT = new ListaTripletes();
              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("FOR",25, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-8)), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // FOR ::= forr para INICIO puntocoma CONDICION puntocoma error parc BLOQUE 
            {
              ListaTripletes RESULT =null;
		 reportarSem("Error en for, se esperaba un el paso del for despues del segundo ;");
                RESULT = new ListaTripletes();
              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("FOR",25, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-8)), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // INICIO ::= AS_VAR_LINE 
            {
              ListaTripletes RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()).right;
		ListaTripletes e1 = (ListaTripletes)((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.peek()).value;
		
                        RESULT = new ListaTripletes(e1);
              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("INICIO",40, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // NT$14 ::= 
            {
              ListaTripletes RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()).right;
		Integer e1 = (Integer)((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.peek()).value;
TablaJava.AMBITO += 1; variables = new ArrayList<>();
              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("NT$14",64, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // INICIO ::= TYPE NT$14 AS_VAR 
            {
              ListaTripletes RESULT =null;
              // propagate RESULT from NT$14
                RESULT = (ListaTripletes) ((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-1)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-2)).right;
		Integer e1 = (Integer)((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()).right;
		VariableJava e2 = (VariableJava)((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.peek()).value;
		ListaTripletes tri = new ListaTripletes();
                VariableJava.agregarTipo(variables, e1);
                if(!tabla.addListVar(variables)){
                        reportarSem("Ya existe variable con id: " + e2.getId());
                }else { TablaJava.AMBITO -= 1;
                ((AsignarValor) e2.getTriplete()).setTipo(OperacionJava.obtenerTipo(e1));
                tri.addAll(e2.getTripletes());
                SumOperator sum = tabla.devolverSum(e2.getId(), false, null);
                tri.add(sum);
                AsignarTemporal ast = new AsignarTemporal(null, tabla.devolverDireccion(sum), "float");
                tri.add(ast);
                tri.add(new AsignarValor(ast, e2.getTriplete().getOperando2(), null));} RESULT = tri;
              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("INICIO",40, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // STEP ::= AS_VAR_LINE 
            {
              ListaTripletes RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()).right;
		ListaTripletes e1 = (ListaTripletes)((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.peek()).value;
		RESULT = e1;
              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("STEP",41, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // STEP ::= OP_VAR 
            {
              ListaTripletes RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()).right;
		ListaTripletes e1 = (ListaTripletes)((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.peek()).value;
		RESULT = e1;
              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("STEP",41, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // DO_WHILE ::= doo BLOQUE whilee para CONDICION parc puntocoma 
            {
              ListaTripletes RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-5)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-5)).right;
		ListaTripletes e1 = (ListaTripletes)((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-5)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-2)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-2)).right;
		CondicionPrograma e2 = (CondicionPrograma)((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-2)).value;
		RESULT = Else_Operator.DOWHILE(e2, e1);
              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("DO_WHILE",26, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-6)), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // DO_WHILE ::= doo BLOQUE error para CONDICION parc puntocoma 
            {
              ListaTripletes RESULT =null;
		reportarSem("Error en un do-while, se esperaba un while, despues del bloque de codigo");
                RESULT = new ListaTripletes();
              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("DO_WHILE",26, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-6)), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // DO_WHILE ::= doo BLOQUE whilee error CONDICION parc puntocoma 
            {
              ListaTripletes RESULT =null;
		reportarSem("Error en un do-while, se esperaba un while, despues del bloque");
                RESULT = new ListaTripletes();
              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("DO_WHILE",26, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-6)), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // DO_WHILE ::= doo BLOQUE whilee para error parc puntocoma 
            {
              ListaTripletes RESULT =null;
		reportarSem("Error en un do-while, se esperaba una condicional");
                RESULT = new ListaTripletes();
              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("DO_WHILE",26, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-6)), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // DO_WHILE ::= doo BLOQUE whilee para CONDICION error puntocoma 
            {
              ListaTripletes RESULT =null;
		reportarSem("Error en un do-while, se esperaba un ), despues de la condicion");
                RESULT = new ListaTripletes();
              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("DO_WHILE",26, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-6)), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // DO_WHILE ::= doo BLOQUE whilee para CONDICION parc error 
            {
              ListaTripletes RESULT =null;
		reportarSem("Error en un do-while, se esperaba un ; al final");
                RESULT = new ListaTripletes();
              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("DO_WHILE",26, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-6)), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // IF_ELSE ::= iff para CONDICION parc BLOQUE ELSEIF ELSE 
            {
              ListaTripletes RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-4)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-4)).right;
		CondicionPrograma e1 = (CondicionPrograma)((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-4)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-2)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-2)).right;
		ListaTripletes e2 = (ListaTripletes)((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-2)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-1)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-1)).right;
		Else_Operator e3 = (Else_Operator)((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-1)).value;
		int e4left = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()).left;
		int e4right = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()).right;
		ListaTripletes e4 = (ListaTripletes)((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.peek()).value;
		e3.agregarIf(e1, e2); RESULT = e3.juntarTripletes(e4);
              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("IF_ELSE",27, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-6)), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // IF_ELSE ::= iff error CONDICION parc BLOQUE ELSEIF ELSE 
            {
              ListaTripletes RESULT =null;
		reportarSem("Error en un if, se esperaba ( antes de la condicion");
                RESULT = new ListaTripletes();
              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("IF_ELSE",27, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-6)), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // IF_ELSE ::= iff para error parc BLOQUE ELSEIF ELSE 
            {
              ListaTripletes RESULT =null;
		reportarSem("Error en un if, se esperaba una condicion");
                RESULT = new ListaTripletes();
              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("IF_ELSE",27, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-6)), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // IF_ELSE ::= iff para CONDICION error BLOQUE ELSEIF ELSE 
            {
              ListaTripletes RESULT =null;
		reportarSem("Error en un if, se esperaba ) despues de la condicion");
                RESULT = new ListaTripletes();
              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("IF_ELSE",27, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-6)), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // ELSEIF ::= ELSEIF elsee iff para CONDICION parc BLOQUE 
            {
              Else_Operator RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-6)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-6)).right;
		Else_Operator e1 = (Else_Operator)((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-6)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-2)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-2)).right;
		CondicionPrograma e2 = (CondicionPrograma)((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-2)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()).right;
		ListaTripletes e3 = (ListaTripletes)((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.peek()).value;
		RESULT = e1.agregarElseIf(e2, e3);
              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("ELSEIF",17, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-6)), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // ELSEIF ::= 
            {
              Else_Operator RESULT =null;
		RESULT = new Else_Operator();
              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("ELSEIF",17, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // ELSEIF ::= ELSEIF elsee error para CONDICION parc BLOQUE 
            {
              Else_Operator RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-6)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-6)).right;
		Else_Operator e1 = (Else_Operator)((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-6)).value;
		reportarSem("Error en un else if, se esperaba un else if, y no un else, ya que tiene condicion");
                RESULT = e1;
              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("ELSEIF",17, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-6)), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // ELSEIF ::= ELSEIF elsee iff error CONDICION parc BLOQUE 
            {
              Else_Operator RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-6)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-6)).right;
		Else_Operator e1 = (Else_Operator)((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-6)).value;
		reportarSem("Error en un else if, se esperaba ( despues del if");
                RESULT = e1;
              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("ELSEIF",17, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-6)), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // ELSEIF ::= ELSEIF elsee iff para error parc BLOQUE 
            {
              Else_Operator RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-6)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-6)).right;
		Else_Operator e1 = (Else_Operator)((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-6)).value;
		reportarSem("Error en un else if, se esperaba una condicion");
                RESULT = e1;
              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("ELSEIF",17, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-6)), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // ELSEIF ::= ELSEIF elsee iff para CONDICION error BLOQUE 
            {
              Else_Operator RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-6)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-6)).right;
		Else_Operator e1 = (Else_Operator)((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-6)).value;
		reportarSem("Error en un else if, se esperaba ) despues de la condicion");
                RESULT = e1;
              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("ELSEIF",17, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-6)), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // ELSE ::= elsee BLOQUE 
            {
              ListaTripletes RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()).right;
		ListaTripletes e1 = (ListaTripletes)((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.peek()).value;
		RESULT = e1;
              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("ELSE",28, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // ELSE ::= 
            {
              ListaTripletes RESULT =null;
		RESULT = new ListaTripletes();
              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("ELSE",28, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // SWITCH ::= switchh para OPERACION_A parc llavea CASES DEFAULT llavec 
            {
              ListaTripletes RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-5)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-5)).right;
		OperacionJava e1 = (OperacionJava)((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-5)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-2)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-2)).right;
		CasePrograma e2 = (CasePrograma)((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-2)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-1)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-1)).right;
		ListaTripletes e3 = (ListaTripletes)((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-1)).value;
		RESULT = e2.agregarDefault(e1, e3);
              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("SWITCH",36, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-7)), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // SWITCH ::= switchh error OPERACION_A parc llavea CASES DEFAULT llavec 
            {
              ListaTripletes RESULT =null;
		 reportarSem("Error en switch se esperaba ( despues del switch");
                RESULT = new CasePrograma();
              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("SWITCH",36, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-7)), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // SWITCH ::= switchh para error parc llavea CASES DEFAULT llavec 
            {
              ListaTripletes RESULT =null;
		 reportarSem("Error en switch se esperaba una condicional entre los ()");
                RESULT = new CasePrograma();
              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("SWITCH",36, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-7)), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // SWITCH ::= switchh para OPERACION_A error llavea CASES DEFAULT llavec 
            {
              ListaTripletes RESULT =null;
		 reportarSem("Error en switch se esperaba ) despues de la condicional");
                RESULT = new CasePrograma();
              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("SWITCH",36, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-7)), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // NT$15 ::= 
            {
              CasePrograma RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-3)).right;
		CasePrograma e1 = (CasePrograma)((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-1)).right;
		OperacionJava e2 = (OperacionJava)((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-1)).value;
cas++;
              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("NT$15",65, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // CASES ::= CASES casee OPERACION_A dosp NT$15 STATEMENTS_METODO 
            {
              CasePrograma RESULT =null;
              // propagate RESULT from NT$15
                RESULT = (CasePrograma) ((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-1)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-5)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-5)).right;
		CasePrograma e1 = (CasePrograma)((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-5)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-3)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-3)).right;
		OperacionJava e2 = (OperacionJava)((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-3)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()).right;
		ListaTripletes e3 = (ListaTripletes)((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.peek()).value;
		cas--; if(e2!=null){RESULT  = e1.agregarCase(e2, e3);}
              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("CASES",44, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-5)), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // CASES ::= 
            {
              CasePrograma RESULT =null;
		RESULT = new CasePrograma();
              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("CASES",44, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // CASES ::= CASES casee error dosp STATEMENT_METODO 
            {
              CasePrograma RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-4)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-4)).right;
		CasePrograma e1 = (CasePrograma)((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-4)).value;
		 reportarSem("Error en case del switch, se esperaba una operacion despues del case");
        RESULT = e1;
              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("CASES",44, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-4)), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // NT$16 ::= 
            {
              ListaTripletes RESULT =null;
cas++;
              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("NT$16",66, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // DEFAULT ::= defaultt dosp NT$16 STATEMENTS_METODO 
            {
              ListaTripletes RESULT =null;
              // propagate RESULT from NT$16
                RESULT = (ListaTripletes) ((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-1)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()).right;
		ListaTripletes e1 = (ListaTripletes)((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.peek()).value;
		cas--;
                RESULT = new ListaTripletes(e1);
              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("DEFAULT",37, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // DEFAULT ::= 
            {
              ListaTripletes RESULT =null;
		RESULT = new ListaTripletes();
              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("DEFAULT",37, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // STATEMENT_LINE ::= AS_VAR_LINE puntocoma 
            {
              ListaTripletes RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-1)).right;
		ListaTripletes e1 = (ListaTripletes)((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-1)).value;
		RESULT = e1;
              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("STATEMENT_LINE",23, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // STATEMENT_LINE ::= DEF_VAR puntocoma 
            {
              ListaTripletes RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-1)).right;
		ListaTripletes e1 = (ListaTripletes)((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-1)).value;
		RESULT = e1;
              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("STATEMENT_LINE",23, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // STATEMENT_LINE ::= WRITE puntocoma 
            {
              ListaTripletes RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-1)).right;
		ListaTripletes e1 = (ListaTripletes)((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-1)).value;
		RESULT = e1;
              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("STATEMENT_LINE",23, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // STATEMENT_LINE ::= THIS LLAMADA_METODO 
            {
              ListaTripletes RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()).right;
		OperacionJava e1 = (OperacionJava)((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.peek()).value;
		RESULT = new ListaTripletes(e1.getTripletes());
              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("STATEMENT_LINE",23, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // AS_VAR_LINE ::= THIS id igual OPERACION_A 
            {
              ListaTripletes RESULT =null;
		int e0left = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-3)).left;
		int e0right = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-3)).right;
		Boolean e0 = (Boolean)((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-3)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()).right;
		OperacionJava e2 = (OperacionJava)((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.peek()).value;
		ListaTripletes tri = new ListaTripletes();
                                VariableJava num = null; if(!e0){num = tabla.existeVar(new VariableJava(e1, TablaJava.AMBITO, null));}
                        else {num = tabla.existeVarGlobal(new VariableJava(e1, TablaJava.AMBITO, null));}
                        if(num==null){
                                reportarSem("Variable con id: "+ e1 + " no ha sido declarada");
                        } else if (num.getTipo()<e2.getTipo()) {
                                reportarSem("Variable con tipo: "+ OperacionJava.obtenerTipo(num.getTipo()) 
                                + " solo acepta tipo " + OperacionJava.obtenerTipo(e2.getTipo()));
                        } else {
                                if(tabla.getVar_definidas().contains(num)){
                                        tri.addAll(e2.mostrarTripletes());
                                        Triplete ast = new AsignarTemporal(null, new Stack(new P()), "float");
                                        tri.add(ast);
                                        SumOperator sum = tabla.devolverSum(e1, true, ast);
                                        tri.add(sum);
                                        tri.add(new AsignarValor(tabla.devolverDireccionH(sum), e2.getTriplete(), null));
                                } else {
                                        tri.addAll(e2.mostrarTripletes());
                                        SumOperator sum = tabla.devolverSum(e1, false, null);
                                        tri.add(sum);
                                        tri.add(new AsignarValor(tabla.devolverDireccion(sum), e2.getTriplete(), null));
                                }
                        }RESULT = tri;
              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("AS_VAR_LINE",43, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // WRITE ::= println para STRING parc 
            {
              ListaTripletes RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-1)).right;
		ListaTripletes e1 = (ListaTripletes)((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-1)).value;
		e1.add(new Printf("\\n")); RESULT = e1;
              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("WRITE",38, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // WRITE ::= print para STRING parc 
            {
              ListaTripletes RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-1)).right;
		ListaTripletes e1 = (ListaTripletes)((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-1)).value;
		RESULT = e1;
              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("WRITE",38, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // WRITE ::= println error STRING parc 
            {
              ListaTripletes RESULT =null;
		reportarSem("error en println, se esperaba un ( antes de los valores");
       RESULT = new ListaTripletes();
              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("WRITE",38, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // WRITE ::= println para error parc 
            {
              ListaTripletes RESULT =null;
		reportarSem("error en println, se esperaban valores entre los ()");
       RESULT = new ListaTripletes();
              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("WRITE",38, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // WRITE ::= println para STRING error 
            {
              ListaTripletes RESULT =null;
		reportarSem("error en println, se esperaba un ) despues de los valores");
       RESULT = new ListaTripletes();
              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("WRITE",38, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // OP_VAR ::= THIS id masmas 
            {
              ListaTripletes RESULT =null;
		int e0left = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-2)).left;
		int e0right = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-2)).right;
		Boolean e0 = (Boolean)((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-2)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-1)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-1)).value;
		ListaTripletes tri = new ListaTripletes();
                        VariableJava num; if(e0){num = tabla.existeVarGlobal(new VariableJava(e1, TablaJava.AMBITO, null));}
                        else {num = tabla.existeVar(new VariableJava(e1, TablaJava.AMBITO, null));}
                        if(num == null){
                                reportarSem("Variable con id: "+ e1 + " no ha sido declarada");
                        }else{
                                if(tabla.getVar_definidas().contains(num)){
                                        Triplete ast = new AsignarTemporal(null, new Stack(new P()), "float");
                                        tri.add(ast);
                                        SumOperator ss1 = tabla.devolverSum(e1, true, ast);
                                        tri.add(ss1);
                                        AsignarTemporal ast1 = new AsignarTemporal(null, tabla.devolverDireccionH(ss1), "float");
                                        tri.add(ast1);
                                        SumOperator sum = new SumOperator(null, ast1, new TerminalOperator("1"), OperacionJava.obtenerTipo(num.getTipo()));
                                        tri.add(sum);
                                        Triplete ast2 = new AsignarTemporal(null, new Stack(new P()), "float");
                                        tri.add(ast2);
                                        SumOperator ss2 = tabla.devolverSum(e1, true, ast2);
                                        tri.add(ss2);
                                        tri.add(new AsignarValor(tabla.devolverDireccionH(ss2), ss2, null));
                                        RESULT = tri;
                                } else {
                                        SumOperator ss1 = tabla.devolverSum(e1, false, null);
                                        tri.add(ss1);
                                        AsignarTemporal ast = new AsignarTemporal(null, tabla.devolverDireccion(ss1), "float");
                                        tri.add(ast);
                                        SumOperator sum = new SumOperator(null, ast, new TerminalOperator("1"), OperacionJava.obtenerTipo(num.getTipo()));
                                        tri.add(sum);
                                        SumOperator ss2 = tabla.devolverSum(e1, false, null);
                                        tri.add(ss2);
                                        tri.add(new AsignarValor(tabla.devolverDireccion(ss2), sum, null));
                                        RESULT = tri;
                                }}
              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("OP_VAR",42, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // OP_VAR ::= THIS id menosmenos 
            {
              ListaTripletes RESULT =null;
		int e0left = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-2)).left;
		int e0right = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-2)).right;
		Boolean e0 = (Boolean)((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-2)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-1)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-1)).value;
		ListaTripletes tri = new ListaTripletes();
                        VariableJava num; if(e0){num = tabla.existeVarGlobal(new VariableJava(e1, TablaJava.AMBITO, null));}
                        else {num = tabla.existeVar(new VariableJava(e1, TablaJava.AMBITO, null));}
                        if(num == null){
                                reportarSem("Variable con id: "+ e1 + " no ha sido declarada");
                        } else {
                                if(tabla.getVar_definidas().contains(num)){
                                        Triplete ast = new AsignarTemporal(null, new Stack(new P()), "float");
                                        tri.add(ast);
                                        SumOperator ss1 = tabla.devolverSum(e1, true, ast);
                                        tri.add(ss1);
                                        AsignarTemporal ast1 = new AsignarTemporal(null, tabla.devolverDireccionH(ss1), "float");
                                        tri.add(ast1);
                                        SumOperator sum = new SumOperator(null, ast1, new TerminalOperator("1"), OperacionJava.obtenerTipo(num.getTipo()));
                                        tri.add(sum);
                                        Triplete ast2 = new AsignarTemporal(null, new Stack(new P()), "float");
                                        tri.add(ast2);
                                        SumOperator ss2 = tabla.devolverSum(e1, true, ast2);
                                        tri.add(ss2);
                                        tri.add(new AsignarValor(tabla.devolverDireccionH(ss2), sum, null));
                                        RESULT = tri;
                                } else {
                                        SumOperator ss1 = tabla.devolverSum(e1, false, null);
                                        tri.add(ss1);
                                        AsignarTemporal ast = new AsignarTemporal(null, tabla.devolverDireccion(ss1), "float");
                                        tri.add(ast);
                                        SumOperator sum = new SumOperator(null, ast, new TerminalOperator("1"), OperacionJava.obtenerTipo(num.getTipo()));
                                        tri.add(sum);
                                        SumOperator ss2 = tabla.devolverSum(e1, false, null);
                                        tri.add(ss2);
                                        tri.add(new AsignarValor(tabla.devolverDireccion(ss2), sum, null));
                                        RESULT = tri;
                                }}
              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("OP_VAR",42, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // OPERACION_A ::= OPERACION_A mas OPERACION_M 
            {
              OperacionJava RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-2)).right;
		OperacionJava e1 = (OperacionJava)((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()).right;
		OperacionJava e2 = (OperacionJava)((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.peek()).value;
		if(e1!=null&&e2!=null){
                        RESULT = new OperacionJava(e1, e2,
                        new SumOperator(null, e1.getTriplete(), e2.getTriplete(), OperacionJava.obtenerTipo(e1, e2)));}
              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("OPERACION_A",10, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // OPERACION_A ::= OPERACION_A menos OPERACION_M 
            {
              OperacionJava RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-2)).right;
		OperacionJava e1 = (OperacionJava)((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()).right;
		OperacionJava e2 = (OperacionJava)((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.peek()).value;
		if(e1!=null&&e2!=null){
                        RESULT = new OperacionJava(e1, e2,
                        new RestOperator(null, e1.getTriplete(), e2.getTriplete(), OperacionJava.obtenerTipo(e1, e2)));}
              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("OPERACION_A",10, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // OPERACION_A ::= OPERACION_M 
            {
              OperacionJava RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()).right;
		OperacionJava e1 = (OperacionJava)((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.peek()).value;
		RESULT = e1;
              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("OPERACION_A",10, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // OPERACION_A ::= error OPERACION_M 
            {
              OperacionJava RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()).right;
		OperacionJava e1 = (OperacionJava)((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.peek()).value;
		RESULT = e1;
              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("OPERACION_A",10, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // OPERACION_M ::= OPERACION_M por OPERACION_U 
            {
              OperacionJava RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-2)).right;
		OperacionJava e1 = (OperacionJava)((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()).right;
		OperacionJava e2 = (OperacionJava)((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.peek()).value;
		if(e1!=null&&e2!=null){
                                RESULT = new OperacionJava(e1, e2,
                                new PorOperator(null, e1.getTriplete(), e2.getTriplete(), OperacionJava.obtenerTipo(e1, e2)));}
              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("OPERACION_M",11, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // OPERACION_M ::= OPERACION_M div OPERACION_U 
            {
              OperacionJava RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-2)).right;
		OperacionJava e1 = (OperacionJava)((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()).right;
		OperacionJava e2 = (OperacionJava)((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.peek()).value;
		if(e1!=null&&e2!=null){
                                RESULT = new OperacionJava(e1, e2,
                                new DivOperator(null, e1.getTriplete(), e2.getTriplete(), OperacionJava.obtenerTipo(e1, e2)));}
              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("OPERACION_M",11, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // OPERACION_M ::= OPERACION_M mod OPERACION_U 
            {
              OperacionJava RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-2)).right;
		OperacionJava e1 = (OperacionJava)((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()).right;
		OperacionJava e2 = (OperacionJava)((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.peek()).value;
		if(e1!=null&&e2!=null){
                                RESULT = new OperacionJava(e1, e2,
                               new ModOperator(null, e1.getTriplete(), e2.getTriplete(), OperacionJava.obtenerTipo(e1, e2)));}
              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("OPERACION_M",11, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // OPERACION_M ::= OPERACION_U 
            {
              OperacionJava RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()).right;
		OperacionJava e1 = (OperacionJava)((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.peek()).value;
		RESULT = e1;
              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("OPERACION_M",11, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // OPERACION_U ::= menos OPERACION_U 
            {
              OperacionJava RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()).right;
		OperacionJava e1 = (OperacionJava)((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.peek()).value;
		RESULT = new OperacionJava(new OperacionJava(TablaJava.INT, new TerminalOperator("0")),
                        e1, new RestOperator(null, new TerminalOperator("0"), e1.getTriplete(), OperacionJava.obtenerTipo(e1)));
              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("OPERACION_U",12, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // OPERACION_U ::= mas OPERACION_U 
            {
              OperacionJava RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()).right;
		OperacionJava e1 = (OperacionJava)((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.peek()).value;
		RESULT = e1;
              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("OPERACION_U",12, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // OPERACION_U ::= ATOM 
            {
              OperacionJava RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()).right;
		OperacionJava e1 = (OperacionJava)((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.peek()).value;
		RESULT = e1;
              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("OPERACION_U",12, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // ATOM ::= THIS id PP 
            {
              OperacionJava RESULT =null;
		int e0left = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-2)).left;
		int e0right = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-2)).right;
		Boolean e0 = (Boolean)((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-2)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-1)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()).right;
		List<OperacionJava> e2 = (List<OperacionJava>)((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.peek()).value;
		if(e2==null){VariableJava num;
                        if(e0){num = tabla.existeVarGlobal(new VariableJava(e1, TablaJava.AMBITO, 
                                new TerminalOperator(e1)));}
                        else {num = tabla.existeVar(new VariableJava(e1, TablaJava.AMBITO,
                                new TerminalOperator(e1)));}
                        if(num == null){
                                reportarSem("Variable con id: "+ e1 + " no ha sido declarada");
                        } else {
                                if(tabla.getVar_definidas().contains(num)){
                                        System.out.println("CONTIENE EL VALOR");
                                        Triplete ast = new AsignarTemporal(null, new Stack(new P()), "float");
                                        SumOperator sum = tabla.devolverSum(e1, true, ast);
                                        AsignarTemporal ast1 = new AsignarTemporal(null, tabla.devolverDireccionH(sum), "float");
                                        OperacionJava op = new OperacionJava(num.getTipo(), ast1);
                                        op.getTripletes().add(ast);
                                        op.getTripletes().add(sum);
                                        RESULT = op;
                                } else {
                                        System.out.println("NO CONTIENE EL VALOR");
                                        SumOperator sum = tabla.devolverSum(e1, false, null);
                                        AsignarTemporal ast = new AsignarTemporal(null, tabla.devolverDireccion(sum), "float");
                                        OperacionJava op = new OperacionJava(num.getTipo(), ast);
                                        op.getTripletes().add(sum);
                                        RESULT = op;
                                }}}
                        else { MetodoJava met = tabla.existeMetodo(e2, e1);
                        if(met == null){
                                reportarSem("Metodo de Python no existente con id: <" + e1 + ">");
                        }else{
                                List<Triplete> tri = new ArrayList<>();
                                tri.addAll(met.verMetodo(tabla.getVariables().size(), e2));
                                SumOperator s = new SumOperator(null, new P(), new TerminalOperator(""+(tabla.getVariables().size()+3)),"int");
                                tri.add(s);
                                AsignarTemporal ast = new AsignarTemporal(null, new Stack(s), "float");
                                OperacionJava op = new OperacionJava(met.getTIPO(), ast);
                                op.getTripletes().addAll(tri);
                                RESULT = op;
                        }}
              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("ATOM",13, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // ATOM ::= entero 
            {
              OperacionJava RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.peek()).value;
		String s = ".LC" + Triplete.FLOAT;
                Triplete.FLOAT += 1;
                actual.getFl().add("\t.align 4");
                actual.getFl().add(s + ":");
                actual.getFl().add("\t.long\t"+Float.floatToIntBits(Float.parseFloat(e1)));
                RESULT = new OperacionJava(TablaJava.INT, new TerminalOperator(e1, s));
              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("ATOM",13, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // ATOM ::= decimal 
            {
              OperacionJava RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.peek()).value;
		String s = ".LC" + Triplete.FLOAT;
                Triplete.FLOAT += 1;
                actual.getFl().add("\t.align 4");
                actual.getFl().add(s + ":");
                actual.getFl().add("\t.long\t"+Float.floatToIntBits(Float.parseFloat(e1)));
                RESULT = new OperacionJava(TablaJava.FLOAT, new TerminalOperator(e1,s));
              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("ATOM",13, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // ATOM ::= character 
            {
              OperacionJava RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.peek()).value;
		String s = ".LC" + Triplete.FLOAT;
                Triplete.FLOAT += 1;
                actual.getFl().add("\t.align 4");
                actual.getFl().add(s + ":");
                actual.getFl().add("\t.long\t"+Float.floatToIntBits(Float.parseFloat(e1)));
                RESULT = new OperacionJava(TablaJava.CHAR, new TerminalOperator(e1, s));
              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("ATOM",13, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // ATOM ::= para OPERACION_A parc 
            {
              OperacionJava RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-1)).right;
		OperacionJava e1 = (OperacionJava)((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-1)).value;
		RESULT = e1;
              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("ATOM",13, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // ATOM ::= INPUT 
            {
              OperacionJava RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()).right;
		OperacionJava e1 = (OperacionJava)((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.peek()).value;
		RESULT = e1;
              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("ATOM",13, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // PP ::= para LIST_PARAM parc 
            {
              List<OperacionJava> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-1)).right;
		List<OperacionJava> e1 = (List<OperacionJava>)((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-1)).value;
		RESULT = e1;
              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("PP",48, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // PP ::= 
            {
              List<OperacionJava> RESULT =null;
		RESULT = null;
              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("PP",48, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // THIS ::= thiss punto 
            {
              Boolean RESULT =null;
		RESULT = true;
              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("THIS",7, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // THIS ::= 
            {
              Boolean RESULT =null;
		RESULT = false;
              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("THIS",7, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // CONDICION ::= CONDICION orr AND 
            {
              CondicionPrograma RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-2)).right;
		CondicionPrograma e1 = (CondicionPrograma)((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()).right;
		CondicionPrograma e2 = (CondicionPrograma)((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.peek()).value;
		RESULT = IfPrograma.OR(e1, e2);
              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("CONDICION",20, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // CONDICION ::= AND 
            {
              CondicionPrograma RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()).right;
		CondicionPrograma e1 = (CondicionPrograma)((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.peek()).value;
		RESULT = e1;
              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("CONDICION",20, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // AND ::= AND andd NOT 
            {
              CondicionPrograma RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-2)).right;
		CondicionPrograma e1 = (CondicionPrograma)((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()).right;
		CondicionPrograma e2 = (CondicionPrograma)((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.peek()).value;
		RESULT = IfPrograma.AND(e1, e2);
              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("AND",19, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // AND ::= NOT 
            {
              CondicionPrograma RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()).right;
		CondicionPrograma e1 = (CondicionPrograma)((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.peek()).value;
		RESULT = e1;
              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("AND",19, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // NOT ::= nott NOT 
            {
              CondicionPrograma RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()).right;
		CondicionPrograma e1 = (CondicionPrograma)((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.peek()).value;
		RESULT = IfPrograma.NOT(e1);
              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("NOT",18, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // NOT ::= COMPARACION 
            {
              CondicionPrograma RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()).right;
		Triplete e1 = (Triplete)((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.peek()).value;
		RESULT = new IfPrograma(new If_Operator(e1, new Etiqueta()), ((CondicionalOperator)e1).getTripletes());
              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("NOT",18, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // NOT ::= para CONDICION parc 
            {
              CondicionPrograma RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-1)).right;
		CondicionPrograma e1 = (CondicionPrograma)((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-1)).value;
		RESULT = e1;
              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("NOT",18, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // COMPARACION ::= OPERACION_A igig OPERACION_A 
            {
              Triplete RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-2)).right;
		OperacionJava e1 = (OperacionJava)((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()).right;
		OperacionJava e2 = (OperacionJava)((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.peek()).value;
		RESULT = new IgualOperator(e1.getTriplete(), e2.getTriplete(),
                e1.getTripletes(), e2.getTripletes());
              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("COMPARACION",21, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // COMPARACION ::= OPERACION_A noigual OPERACION_A 
            {
              Triplete RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-2)).right;
		OperacionJava e1 = (OperacionJava)((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()).right;
		OperacionJava e2 = (OperacionJava)((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.peek()).value;
		RESULT = new NoIgualOperator(e1.getTriplete(), e2.getTriplete(),
                e1.getTripletes(), e2.getTripletes());
              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("COMPARACION",21, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // COMPARACION ::= OPERACION_A menor OPERACION_A 
            {
              Triplete RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-2)).right;
		OperacionJava e1 = (OperacionJava)((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()).right;
		OperacionJava e2 = (OperacionJava)((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.peek()).value;
		RESULT = new MenorOperator(e1.getTriplete(), e2.getTriplete(),
                e1.getTripletes(), e2.getTripletes());
              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("COMPARACION",21, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // COMPARACION ::= OPERACION_A menorig OPERACION_A 
            {
              Triplete RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-2)).right;
		OperacionJava e1 = (OperacionJava)((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()).right;
		OperacionJava e2 = (OperacionJava)((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.peek()).value;
		RESULT = new MenorIgOperator(e1.getTriplete(), e2.getTriplete(),
                e1.getTripletes(), e2.getTripletes());
              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("COMPARACION",21, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // COMPARACION ::= OPERACION_A mayor OPERACION_A 
            {
              Triplete RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-2)).right;
		OperacionJava e1 = (OperacionJava)((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()).right;
		OperacionJava e2 = (OperacionJava)((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.peek()).value;
		RESULT = new MayorOperator(e1.getTriplete(), e2.getTriplete(),
                e1.getTripletes(), e2.getTripletes());
              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("COMPARACION",21, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // COMPARACION ::= OPERACION_A mayorig OPERACION_A 
            {
              Triplete RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-2)).right;
		OperacionJava e1 = (OperacionJava)((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()).right;
		OperacionJava e2 = (OperacionJava)((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.peek()).value;
		RESULT = new MayorIgOperator(e1.getTriplete(), e2.getTriplete(),
                e1.getTripletes(), e2.getTripletes());
              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("COMPARACION",21, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // STRING ::= STRING mas EXPR 
            {
              ListaTripletes RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-2)).right;
		ListaTripletes e1 = (ListaTripletes)((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()).right;
		OperacionJava e2 = (OperacionJava)((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.peek()).value;
		e1.addAll(e2.mostrarTripletes()); e1.add(new Printf(Input.tipoJAVA(e2), e2.getTriplete(), Input.tipoJAVAf(e2))); RESULT = e1;
              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("STRING",39, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // STRING ::= STRING mas string 
            {
              ListaTripletes RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-2)).right;
		ListaTripletes e1 = (ListaTripletes)((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.peek()).value;
		if(!e2.equals("")){e1.add(new Printf(e2));} RESULT = e1;
              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("STRING",39, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // STRING ::= EXPR 
            {
              ListaTripletes RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()).right;
		OperacionJava e1 = (OperacionJava)((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.peek()).value;
		ListaTripletes tri = new ListaTripletes(); tri.addAll(e1.mostrarTripletes());
                tri.add(new Printf(Input.tipoJAVA(e1), e1.getTriplete(), Input.tipoJAVAf(e1)));
                RESULT = tri;
              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("STRING",39, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // STRING ::= string 
            {
              ListaTripletes RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.peek()).value;
		ListaTripletes tri = new ListaTripletes(); if(!e1.equals("")){tri.add(new Printf(e1));}
                RESULT = tri;
              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("STRING",39, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // EXPR ::= INPUT 
            {
              OperacionJava RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()).right;
		OperacionJava e1 = (OperacionJava)((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.peek()).value;
		RESULT = e1;
              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("EXPR",14, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // EXPR ::= THIS id 
            {
              OperacionJava RESULT =null;
		int e0left = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-1)).left;
		int e0right = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-1)).right;
		Boolean e0 = (Boolean)((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-1)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.peek()).value;
		VariableJava num; if(e0){num = tabla.existeVarGlobal(new VariableJava(e1, TablaJava.AMBITO, null));}
                        else {num = tabla.existeVar(new VariableJava(e1, TablaJava.AMBITO, null));}
                        if(num == null){
                                reportarSem("Variable con id: "+ e1 + " no ha sido declarada");
                        }else{
                                if(tabla.getVar_definidas().contains(num)){
                                        Triplete ast = new AsignarTemporal(null, new Stack(new P()), "float");
                                        SumOperator sum = tabla.devolverSum(e1, true, ast);
                                        AsignarTemporal ast1 = new AsignarTemporal(null, tabla.devolverDireccionH(sum), "float");
                                        OperacionJava op = new OperacionJava(num.getTipo(), ast1);
                                        op.getTripletes().add(ast);
                                        op.getTripletes().add(sum);
                                        RESULT = op;
                                } else {
                                        SumOperator sum = tabla.devolverSum(e1, false, null);
                                        AsignarTemporal ast = new AsignarTemporal(null, tabla.devolverDireccion(sum), "float");
                                        OperacionJava op = new OperacionJava(num.getTipo(), ast);
                                        op.getTripletes().add(sum);
                                        RESULT = op;
                                }
                        }
              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("EXPR",14, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // EXPR ::= entero 
            {
              OperacionJava RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.peek()).value;
		String s = ".LC" + Triplete.FLOAT;
                Triplete.FLOAT += 1;
                actual.getFl().add("\t.align 4");
                actual.getFl().add(s + ":");
                actual.getFl().add("\t.long\t"+Float.floatToIntBits(Float.parseFloat(e1)));
                RESULT = new OperacionJava(TablaJava.INT, new TerminalOperator(e1,s));
              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("EXPR",14, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // EXPR ::= decimal 
            {
              OperacionJava RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.peek()).value;
		String s = ".LC" + Triplete.FLOAT;
                Triplete.FLOAT += 1;
                actual.getFl().add("\t.align 4");
                actual.getFl().add(s + ":");
                actual.getFl().add("\t.long\t"+Float.floatToIntBits(Float.parseFloat(e1)));
                RESULT = new OperacionJava(TablaJava.FLOAT, new TerminalOperator(e1,s));
              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("EXPR",14, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // EXPR ::= character 
            {
              OperacionJava RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.peek()).value;
		String s = ".LC" + Triplete.FLOAT;
                Triplete.FLOAT += 1;
                actual.getFl().add("\t.align 4");
                actual.getFl().add(s + ":");
                actual.getFl().add("\t.long\t"+Float.floatToIntBits(Float.parseFloat(e1)));
                RESULT = new OperacionJava(TablaJava.CHAR, new TerminalOperator(e1, s));
              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("EXPR",14, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // EXPR ::= para OPERACION_A parc 
            {
              OperacionJava RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-1)).right;
		OperacionJava e1 = (OperacionJava)((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-1)).value;
		RESULT = e1;
              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("EXPR",14, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // INPUT ::= charinput para string parc 
            {
              OperacionJava RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-1)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-1)).value;
		OperacionJava op = new OperacionJava(TablaJava.CHAR,
                                new Input("%c"));
                                op.getTripletes().add(new Printf(e1));
                                RESULT = op;
              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("INPUT",15, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // INPUT ::= intinput para string parc 
            {
              OperacionJava RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-1)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-1)).value;
		OperacionJava op = new OperacionJava(TablaJava.INT,
                                new Input("%d"));
                                op.getTripletes().add(new Printf(e1));
                                RESULT = op;
              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("INPUT",15, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // INPUT ::= floatinput para string parc 
            {
              OperacionJava RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-1)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-1)).value;
		OperacionJava op = new OperacionJava(TablaJava.FLOAT,
                                new Input("%f"));
                                op.getTripletes().add(new Printf(e1));
                                RESULT = op;
              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("INPUT",15, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // INPUT ::= charinput error string parc 
            {
              OperacionJava RESULT =null;
		reportarSem("error en el charinput, se esperaba un parentesis antes del string");
              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("INPUT",15, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // INPUT ::= charinput para error parc 
            {
              OperacionJava RESULT =null;
		reportarSem("error en el charinput, se esperaba un string entre los parentesis");
              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("INPUT",15, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 172: // INPUT ::= charinput para string error 
            {
              OperacionJava RESULT =null;
		reportarSem("error en el charinput, se esperaba un parentesis despues del string");
              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("INPUT",15, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 173: // INPUT ::= floatinput error string parc 
            {
              OperacionJava RESULT =null;
		reportarSem("error en el floatinput, se esperaba un parentesis antes del string");
              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("INPUT",15, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 174: // INPUT ::= floatinput para error parc 
            {
              OperacionJava RESULT =null;
		reportarSem("error en el floatinput, se esperaba un string entre los parentesis");
              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("INPUT",15, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 175: // INPUT ::= floatinput para string error 
            {
              OperacionJava RESULT =null;
		reportarSem("error en el floatinput, se esperaba un parentesis despues del string");
              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("INPUT",15, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 176: // INPUT ::= intinput error string parc 
            {
              OperacionJava RESULT =null;
		reportarSem("error en el intinput, se esperaba un parentesis antes del string");
              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("INPUT",15, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 177: // INPUT ::= intinput para error parc 
            {
              OperacionJava RESULT =null;
		reportarSem("error en el intinput, se esperaba un string entre los parentesis");
              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("INPUT",15, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 178: // INPUT ::= intinput para string error 
            {
              OperacionJava RESULT =null;
		reportarSem("error en el intinput, se esperaba un parentesis despues del string");
              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("INPUT",15, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 179: // LLAMADA_METODO ::= id para LIST_PARAM parc 
            {
              OperacionJava RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-3)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-1)).right;
		List<OperacionJava> e2 = (List<OperacionJava>)((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-1)).value;
		MetodoJava met = tabla.existeMetodo(e2, e1);
                        if(met == null){
                                reportarSem("Metodo de Python no existente con id: <" + e1 + ">");
                        }else{
                                List<Triplete> tri = new ArrayList<>();
                                tri.addAll(met.verMetodo(tabla.getVariables().size(), e2));
                                SumOperator s = new SumOperator(null, new P(), new TerminalOperator(""+(tabla.getVariables().size()+3)),"int");
                                tri.add(s);
                                AsignarTemporal ast = new AsignarTemporal(null, new Stack(s), "float");
                                OperacionJava op = new OperacionJava(met.getTIPO(), ast);
                                op.getTripletes().addAll(tri);
                                RESULT = op;
                        }
              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("LLAMADA_METODO",16, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 180: // LLAMADA_METODO ::= id error LIST_PARAM parc 
            {
              OperacionJava RESULT =null;
		reportarSem("Error en la llamada de metodo, se esperaba un ( antes de los parametros");
              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("LLAMADA_METODO",16, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 181: // LLAMADA_METODO ::= id para error parc 
            {
              OperacionJava RESULT =null;
		reportarSem("Error en la llamada de metodo, se esperaban parametros entre los ()");
              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("LLAMADA_METODO",16, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 182: // LIST_PARAM ::= LIST 
            {
              List<OperacionJava> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()).right;
		List<OperacionJava> e1 = (List<OperacionJava>)((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.peek()).value;
		RESULT = e1;
              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("LIST_PARAM",47, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 183: // LIST_PARAM ::= 
            {
              List<OperacionJava> RESULT =null;
		RESULT = new ArrayList<>();
              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("LIST_PARAM",47, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 184: // LIST ::= LIST_PARAM coma OPERACION_A 
            {
              List<OperacionJava> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-2)).right;
		List<OperacionJava> e1 = (List<OperacionJava>)((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()).right;
		OperacionJava e2 = (OperacionJava)((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.peek()).value;
		e1.add(e2); RESULT = e1;
              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("LIST",46, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 185: // LIST ::= OPERACION_A 
            {
              List<OperacionJava> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()).right;
		OperacionJava e1 = (OperacionJava)((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.peek()).value;
		List<OperacionJava> params = new ArrayList<>(); params.add(e1); RESULT = params;
              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("LIST",46, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$SintaxisJava$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$SintaxisJava$do_action(
    int                        CUP$SintaxisJava$act_num,
    java_cup.runtime.lr_parser CUP$SintaxisJava$parser,
    java.util.Stack            CUP$SintaxisJava$stack,
    int                        CUP$SintaxisJava$top)
    throws java.lang.Exception
    {
              return CUP$SintaxisJava$do_action_part00000000(
                               CUP$SintaxisJava$act_num,
                               CUP$SintaxisJava$parser,
                               CUP$SintaxisJava$stack,
                               CUP$SintaxisJava$top);
    }
}

}
