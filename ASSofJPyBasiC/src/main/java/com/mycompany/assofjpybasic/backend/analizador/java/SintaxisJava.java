
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package com.mycompany.assofjpybasic.backend.analizador.java;

import java_cup.runtime.*;
import com.mycompany.assofjpybasic.backend.semantica.java.*;
import java.util.ArrayList;
import java.util.List;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class SintaxisJava extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return SintaxisJavaSym.class;
}

  /** Default constructor. */
  @Deprecated
  public SintaxisJava() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public SintaxisJava(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public SintaxisJava(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\163\000\002\002\004\000\002\002\003\000\002\003" +
    "\004\000\002\003\002\000\002\061\002\000\002\004\011" +
    "\000\002\005\004\000\002\005\002\000\002\006\003\000" +
    "\002\006\004\000\002\062\002\000\002\007\014\000\002" +
    "\010\003\000\002\010\003\000\002\011\003\000\002\011" +
    "\003\000\002\011\003\000\002\013\005\000\002\013\002" +
    "\000\002\022\006\000\002\022\002\000\002\054\004\000" +
    "\002\054\003\000\002\054\004\000\002\054\002\000\002" +
    "\050\005\000\002\051\003\000\002\051\003\000\002\063" +
    "\002\000\002\023\005\000\002\024\005\000\002\024\003" +
    "\000\002\025\005\000\002\025\003\000\002\052\003\000" +
    "\002\052\003\000\002\052\003\000\002\052\003\000\002" +
    "\052\003\000\002\026\007\000\002\064\002\000\002\055" +
    "\006\000\002\055\003\000\002\027\013\000\002\030\004" +
    "\000\002\065\002\000\002\030\005\000\002\031\003\000" +
    "\002\031\003\000\002\032\011\000\002\057\011\000\002" +
    "\060\011\000\002\060\002\000\002\056\004\000\002\056" +
    "\002\000\002\033\012\000\002\034\004\000\002\034\002" +
    "\000\002\066\002\000\002\035\007\000\002\067\002\000" +
    "\002\036\006\000\002\036\002\000\002\053\004\000\002" +
    "\053\004\000\002\053\004\000\002\053\004\000\002\047" +
    "\006\000\002\037\006\000\002\037\006\000\002\040\005" +
    "\000\002\040\005\000\002\014\005\000\002\014\005\000" +
    "\002\014\003\000\002\015\005\000\002\015\005\000\002" +
    "\015\005\000\002\015\003\000\002\016\004\000\002\016" +
    "\004\000\002\016\003\000\002\017\004\000\002\017\003" +
    "\000\002\017\003\000\002\017\003\000\002\017\005\000" +
    "\002\012\004\000\002\012\002\000\002\042\005\000\002" +
    "\042\003\000\002\043\005\000\002\043\003\000\002\044" +
    "\004\000\002\044\003\000\002\045\005\000\002\045\005" +
    "\000\002\045\005\000\002\045\005\000\002\045\005\000" +
    "\002\045\005\000\002\045\005\000\002\046\005\000\002" +
    "\046\003\000\002\041\003\000\002\041\003\000\002\041" +
    "\003\000\002\041\003\000\002\041\003\000\002\041\005" +
    "\000\002\020\003\000\002\020\003\000\002\021\006\000" +
    "\002\021\006\000\002\021\006" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\345\000\006\002\ufffe\004\ufffe\001\002\000\004\002" +
    "\347\001\002\000\006\002\000\004\006\001\002\000\004" +
    "\005\010\001\002\000\006\002\uffff\004\uffff\001\002\000" +
    "\004\064\011\001\002\000\004\050\012\001\002\000\014" +
    "\004\ufffd\007\ufffd\010\ufffd\011\ufffd\051\ufffd\001\002\000" +
    "\014\004\ufffa\007\ufffa\010\ufffa\011\ufffa\051\ufffa\001\002" +
    "\000\014\004\025\007\015\010\021\011\022\051\020\001" +
    "\002\000\004\064\ufff3\001\002\000\014\004\ufffb\007\ufffb" +
    "\010\ufffb\011\ufffb\051\ufffb\001\002\000\004\064\uffe5\001" +
    "\002\000\006\002\ufffc\004\ufffc\001\002\000\004\064\ufff2" +
    "\001\002\000\004\064\ufff1\001\002\000\004\053\341\001" +
    "\002\000\014\004\ufff9\007\ufff9\010\ufff9\011\ufff9\051\ufff9" +
    "\001\002\000\012\006\027\007\015\010\021\011\022\001" +
    "\002\000\004\064\031\001\002\000\004\064\ufff5\001\002" +
    "\000\004\064\ufff4\001\002\000\004\046\032\001\002\000" +
    "\012\007\015\010\021\011\022\047\uffef\001\002\000\004" +
    "\047\043\001\002\000\004\064\035\001\002\000\006\047" +
    "\uffed\052\037\001\002\000\004\047\ufff0\001\002\000\010" +
    "\007\015\010\021\011\022\001\002\000\004\064\041\001" +
    "\002\000\006\047\uffed\052\037\001\002\000\004\047\uffee" +
    "\001\002\000\004\050\044\001\002\000\046\007\ufff7\010" +
    "\ufff7\011\ufff7\015\ufff7\020\ufff7\021\ufff7\022\ufff7\023\ufff7" +
    "\027\ufff7\030\ufff7\032\ufff7\051\ufff7\054\ufff7\055\ufff7\056" +
    "\ufff7\057\ufff7\060\ufff7\064\ufff7\001\002\000\046\007\015" +
    "\010\021\011\022\015\071\020\101\021\063\022\074\023" +
    "\055\027\073\030\076\032\052\051\uffe9\054\065\055\051" +
    "\056\075\057\047\060\050\064\uffa9\001\002\000\004\053" +
    "\340\001\002\000\004\046\335\001\002\000\004\046\332" +
    "\001\002\000\004\046\327\001\002\000\004\053\326\001" +
    "\002\000\004\053\325\001\002\000\052\007\uffdf\010\uffdf" +
    "\011\uffdf\015\uffdf\020\uffdf\021\uffdf\022\uffdf\023\uffdf\024" +
    "\uffdf\026\uffdf\027\uffdf\030\uffdf\032\uffdf\051\uffdf\054\uffdf" +
    "\055\uffdf\056\uffdf\057\uffdf\060\uffdf\064\uffdf\001\002\000" +
    "\004\046\304\001\002\000\010\024\uffeb\026\uffeb\051\uffeb" +
    "\001\002\000\052\007\uffdb\010\uffdb\011\uffdb\015\uffdb\020" +
    "\uffdb\021\uffdb\022\uffdb\023\uffdb\024\uffdb\026\uffdb\027\uffdb" +
    "\030\uffdb\032\uffdb\051\uffdb\054\uffdb\055\uffdb\056\uffdb\057" +
    "\uffdb\060\uffdb\064\uffdb\001\002\000\052\007\uffdc\010\uffdc" +
    "\011\uffdc\015\uffdc\020\uffdc\021\uffdc\022\uffdc\023\uffdc\024" +
    "\uffdc\026\uffdc\027\uffdc\030\uffdc\032\uffdc\051\uffdc\054\uffdc" +
    "\055\uffdc\056\uffdc\057\uffdc\060\uffdc\064\uffdc\001\002\000" +
    "\004\051\303\001\002\000\004\053\302\001\002\000\004" +
    "\046\276\001\002\000\004\064\275\001\002\000\004\046" +
    "\257\001\002\000\052\007\uffe6\010\uffe6\011\uffe6\015\uffe6" +
    "\020\uffe6\021\uffe6\022\uffe6\023\uffe6\024\uffe6\026\uffe6\027" +
    "\uffe6\030\uffe6\032\uffe6\051\uffe6\054\uffe6\055\uffe6\056\uffe6" +
    "\057\uffe6\060\uffe6\064\uffe6\001\002\000\052\007\uffe7\010" +
    "\uffe7\011\uffe7\015\uffe7\020\uffe7\021\uffe7\022\uffe7\023\uffe7" +
    "\024\uffe7\026\uffe7\027\uffe7\030\uffe7\032\uffe7\051\uffe7\054" +
    "\uffe7\055\uffe7\056\uffe7\057\uffe7\060\uffe7\064\uffe7\001\002" +
    "\000\052\007\uffdd\010\uffdd\011\uffdd\015\uffdd\020\uffdd\021" +
    "\uffdd\022\uffdd\023\uffdd\024\uffdd\026\uffdd\027\uffdd\030\uffdd" +
    "\032\uffdd\051\uffdd\054\uffdd\055\uffdd\056\uffdd\057\uffdd\060" +
    "\uffdd\064\uffdd\001\002\000\004\046\242\001\002\000\004" +
    "\053\241\001\002\000\030\030\076\041\125\042\115\046" +
    "\126\056\075\057\047\060\050\064\uffa9\065\122\066\114" +
    "\067\120\001\002\000\030\007\015\010\021\011\022\030" +
    "\076\050\177\054\065\055\051\056\075\057\047\060\050" +
    "\064\uffa9\001\002\000\004\046\226\001\002\000\004\031" +
    "\225\001\002\000\052\007\uffde\010\uffde\011\uffde\015\uffde" +
    "\020\uffde\021\uffde\022\uffde\023\uffde\024\uffde\026\uffde\027" +
    "\uffde\030\uffde\032\uffde\051\uffde\054\uffde\055\uffde\056\uffde" +
    "\057\uffde\060\uffde\064\uffde\001\002\000\052\007\015\010" +
    "\021\011\022\015\071\020\101\021\063\022\074\023\055" +
    "\024\uffe9\026\uffe9\027\073\030\076\032\052\051\uffe9\054" +
    "\065\055\051\056\075\057\047\060\050\064\uffa9\001\002" +
    "\000\004\046\102\001\002\000\014\007\015\010\021\011" +
    "\022\030\076\064\uffa9\001\002\000\004\064\223\001\002" +
    "\000\004\053\146\001\002\000\004\064\uffd4\001\002\000" +
    "\004\064\110\001\002\000\004\053\uffd3\001\002\000\010" +
    "\052\uffe0\053\uffe0\061\111\001\002\000\030\030\076\041" +
    "\125\042\115\046\126\056\075\057\047\060\050\064\uffa9" +
    "\065\122\066\114\067\120\001\002\000\012\041\130\047" +
    "\uff93\052\uff93\053\uff93\001\002\000\044\012\uffb3\013\uffb3" +
    "\025\uffb3\033\uffb3\034\uffb3\035\uffb3\036\uffb3\037\uffb3\040" +
    "\uffb3\041\uffb3\042\uffb3\043\uffb3\044\uffb3\045\uffb3\047\uffb3" +
    "\052\uffb3\053\uffb3\001\002\000\044\012\uffad\013\uffad\025" +
    "\uffad\033\uffad\034\uffad\035\uffad\036\uffad\037\uffad\040\uffad" +
    "\041\uffad\042\uffad\043\uffad\044\uffad\045\uffad\047\uffad\052" +
    "\uffad\053\uffad\001\002\000\022\030\076\041\125\042\115" +
    "\046\126\064\uffa9\065\122\066\114\067\120\001\002\000" +
    "\010\047\uff92\052\uff92\053\uff92\001\002\000\044\012\uffb0" +
    "\013\uffb0\025\uffb0\033\uffb0\034\uffb0\035\uffb0\036\uffb0\037" +
    "\uffb0\040\uffb0\041\uffb0\042\uffb0\043\uffb0\044\uffb0\045\uffb0" +
    "\047\uffb0\052\uffb0\053\uffb0\001\002\000\044\012\uffac\013" +
    "\uffac\025\uffac\033\uffac\034\uffac\035\uffac\036\uffac\037\uffac" +
    "\040\uffac\041\uffac\042\uffac\043\uffac\044\uffac\045\uffac\047" +
    "\uffac\052\uffac\053\uffac\001\002\000\044\012\uffb7\013\uffb7" +
    "\025\uffb7\033\uffb7\034\uffb7\035\uffb7\036\uffb7\037\uffb7\040" +
    "\uffb7\041\uffb7\042\143\043\133\044\135\045\134\047\uffb7" +
    "\052\uffb7\053\uffb7\001\002\000\044\012\uffae\013\uffae\025" +
    "\uffae\033\uffae\034\uffae\035\uffae\036\uffae\037\uffae\040\uffae" +
    "\041\uffae\042\uffae\043\uffae\044\uffae\045\uffae\047\uffae\052" +
    "\uffae\053\uffae\001\002\000\006\052\uffe1\053\uffe1\001\002" +
    "\000\004\064\142\001\002\000\022\030\076\041\125\042" +
    "\115\046\126\064\uffa9\065\122\066\114\067\120\001\002" +
    "\000\022\030\076\041\125\042\115\046\126\064\uffa9\065" +
    "\122\066\114\067\120\001\002\000\006\041\130\047\131" +
    "\001\002\000\022\030\076\041\125\042\115\046\126\064" +
    "\uffa9\065\122\066\114\067\120\001\002\000\044\012\uffab" +
    "\013\uffab\025\uffab\033\uffab\034\uffab\035\uffab\036\uffab\037" +
    "\uffab\040\uffab\041\uffab\042\uffab\043\uffab\044\uffab\045\uffab" +
    "\047\uffab\052\uffab\053\uffab\001\002\000\042\012\uffb9\013" +
    "\uffb9\025\uffb9\033\uffb9\034\uffb9\035\uffb9\036\uffb9\037\uffb9" +
    "\040\uffb9\041\uffb9\043\133\044\135\045\134\047\uffb9\052" +
    "\uffb9\053\uffb9\001\002\000\022\030\076\041\125\042\115" +
    "\046\126\064\uffa9\065\122\066\114\067\120\001\002\000" +
    "\022\030\076\041\125\042\115\046\126\064\uffa9\065\122" +
    "\066\114\067\120\001\002\000\022\030\076\041\125\042" +
    "\115\046\126\064\uffa9\065\122\066\114\067\120\001\002" +
    "\000\044\012\uffb5\013\uffb5\025\uffb5\033\uffb5\034\uffb5\035" +
    "\uffb5\036\uffb5\037\uffb5\040\uffb5\041\uffb5\042\uffb5\043\uffb5" +
    "\044\uffb5\045\uffb5\047\uffb5\052\uffb5\053\uffb5\001\002\000" +
    "\044\012\uffb4\013\uffb4\025\uffb4\033\uffb4\034\uffb4\035\uffb4" +
    "\036\uffb4\037\uffb4\040\uffb4\041\uffb4\042\uffb4\043\uffb4\044" +
    "\uffb4\045\uffb4\047\uffb4\052\uffb4\053\uffb4\001\002\000\044" +
    "\012\uffb6\013\uffb6\025\uffb6\033\uffb6\034\uffb6\035\uffb6\036" +
    "\uffb6\037\uffb6\040\uffb6\041\uffb6\042\uffb6\043\uffb6\044\uffb6" +
    "\045\uffb6\047\uffb6\052\uffb6\053\uffb6\001\002\000\044\012" +
    "\uffb1\013\uffb1\025\uffb1\033\uffb1\034\uffb1\035\uffb1\036\uffb1" +
    "\037\uffb1\040\uffb1\041\uffb1\042\uffb1\043\uffb1\044\uffb1\045" +
    "\uffb1\047\uffb1\052\uffb1\053\uffb1\001\002\000\044\012\uffaf" +
    "\013\uffaf\025\uffaf\033\uffaf\034\uffaf\035\uffaf\036\uffaf\037" +
    "\uffaf\040\uffaf\041\uffaf\042\uffaf\043\uffaf\044\uffaf\045\uffaf" +
    "\047\uffaf\052\uffaf\053\uffaf\001\002\000\022\030\076\041" +
    "\125\042\115\046\126\064\uffa9\065\122\066\114\067\120" +
    "\001\002\000\042\012\uffb8\013\uffb8\025\uffb8\033\uffb8\034" +
    "\uffb8\035\uffb8\036\uffb8\037\uffb8\040\uffb8\041\uffb8\043\133" +
    "\044\135\045\134\047\uffb8\052\uffb8\053\uffb8\001\002\000" +
    "\044\012\uffb2\013\uffb2\025\uffb2\033\uffb2\034\uffb2\035\uffb2" +
    "\036\uffb2\037\uffb2\040\uffb2\041\uffb2\042\uffb2\043\uffb2\044" +
    "\uffb2\045\uffb2\047\uffb2\052\uffb2\053\uffb2\001\002\000\024" +
    "\014\150\030\076\041\125\042\115\046\154\064\uffa9\065" +
    "\122\066\114\067\120\001\002\000\012\012\uffa3\013\uffa3" +
    "\047\uffa3\053\uffa3\001\002\000\024\014\150\030\076\041" +
    "\125\042\115\046\154\064\uffa9\065\122\066\114\067\120" +
    "\001\002\000\012\012\161\013\uffa7\047\uffa7\053\uffa7\001" +
    "\002\000\020\033\210\034\211\035\213\036\212\037\206" +
    "\040\207\041\130\001\002\000\012\012\uffa5\013\uffa5\047" +
    "\uffa5\053\uffa5\001\002\000\024\014\150\030\076\041\125" +
    "\042\115\046\154\064\uffa9\065\122\066\114\067\120\001" +
    "\002\000\006\013\157\053\156\001\002\000\006\030\076" +
    "\064\uffa9\001\002\000\024\014\150\030\076\041\125\042" +
    "\115\046\154\064\uffa9\065\122\066\114\067\120\001\002" +
    "\000\012\012\161\013\uffa8\047\uffa8\053\uffa8\001\002\000" +
    "\024\014\150\030\076\041\125\042\115\046\154\064\uffa9" +
    "\065\122\066\114\067\120\001\002\000\012\012\uffa6\013" +
    "\uffa6\047\uffa6\053\uffa6\001\002\000\004\047\174\001\002" +
    "\000\004\064\167\001\002\000\004\047\uffd2\001\002\000" +
    "\004\047\uffd1\001\002\000\010\061\171\062\170\063\172" +
    "\001\002\000\004\047\uffbb\001\002\000\030\030\076\041" +
    "\125\042\115\046\126\056\075\057\047\060\050\064\uffa9" +
    "\065\122\066\114\067\120\001\002\000\004\047\uffba\001" +
    "\002\000\006\047\uffbe\053\uffbe\001\002\000\030\007\015" +
    "\010\021\011\022\030\076\050\177\054\065\055\051\056" +
    "\075\057\047\060\050\064\uffa9\001\002\000\052\007\uffd6" +
    "\010\uffd6\011\uffd6\015\uffd6\020\uffd6\021\uffd6\022\uffd6\023" +
    "\uffd6\024\uffd6\026\uffd6\027\uffd6\030\uffd6\032\uffd6\051\uffd6" +
    "\054\uffd6\055\uffd6\056\uffd6\057\uffd6\060\uffd6\064\uffd6\001" +
    "\002\000\054\007\uffd7\010\uffd7\011\uffd7\015\uffd7\016\uffd7" +
    "\020\uffd7\021\uffd7\022\uffd7\023\uffd7\024\uffd7\026\uffd7\027" +
    "\uffd7\030\uffd7\032\uffd7\051\uffd7\054\uffd7\055\uffd7\056\uffd7" +
    "\057\uffd7\060\uffd7\064\uffd7\001\002\000\046\007\uffd9\010" +
    "\uffd9\011\uffd9\015\uffd9\020\uffd9\021\uffd9\022\uffd9\023\uffd9" +
    "\027\uffd9\030\uffd9\032\uffd9\051\uffd9\054\uffd9\055\uffd9\056" +
    "\uffd9\057\uffd9\060\uffd9\064\uffd9\001\002\000\046\007\015" +
    "\010\021\011\022\015\071\020\101\021\063\022\074\023" +
    "\055\027\073\030\076\032\052\051\uffe9\054\065\055\051" +
    "\056\075\057\047\060\050\064\uffa9\001\002\000\004\051" +
    "\202\001\002\000\054\007\uffd8\010\uffd8\011\uffd8\015\uffd8" +
    "\016\uffd8\020\uffd8\021\uffd8\022\uffd8\023\uffd8\024\uffd8\026" +
    "\uffd8\027\uffd8\030\uffd8\032\uffd8\051\uffd8\054\uffd8\055\uffd8" +
    "\056\uffd8\057\uffd8\060\uffd8\064\uffd8\001\002\000\022\033" +
    "\210\034\211\035\213\036\212\037\206\040\207\041\130" +
    "\047\131\001\002\000\006\013\157\047\205\001\002\000" +
    "\012\012\uff9c\013\uff9c\047\uff9c\053\uff9c\001\002\000\022" +
    "\030\076\041\125\042\115\046\126\064\uffa9\065\122\066" +
    "\114\067\120\001\002\000\022\030\076\041\125\042\115" +
    "\046\126\064\uffa9\065\122\066\114\067\120\001\002\000" +
    "\022\030\076\041\125\042\115\046\126\064\uffa9\065\122" +
    "\066\114\067\120\001\002\000\022\030\076\041\125\042" +
    "\115\046\126\064\uffa9\065\122\066\114\067\120\001\002" +
    "\000\022\030\076\041\125\042\115\046\126\064\uffa9\065" +
    "\122\066\114\067\120\001\002\000\022\030\076\041\125" +
    "\042\115\046\126\064\uffa9\065\122\066\114\067\120\001" +
    "\002\000\014\012\uff9f\013\uff9f\041\130\047\uff9f\053\uff9f" +
    "\001\002\000\014\012\uff9e\013\uff9e\041\130\047\uff9e\053" +
    "\uff9e\001\002\000\014\012\uffa0\013\uffa0\041\130\047\uffa0" +
    "\053\uffa0\001\002\000\014\012\uffa1\013\uffa1\041\130\047" +
    "\uffa1\053\uffa1\001\002\000\014\012\uffa2\013\uffa2\041\130" +
    "\047\uffa2\053\uffa2\001\002\000\014\012\uff9d\013\uff9d\041" +
    "\130\047\uff9d\053\uff9d\001\002\000\012\012\uffa4\013\uffa4" +
    "\047\uffa4\053\uffa4\001\002\000\004\053\uffd5\001\002\000" +
    "\010\024\uffec\026\uffec\051\uffec\001\002\000\004\064\uffaa" +
    "\001\002\000\004\070\227\001\002\000\004\047\230\001" +
    "\002\000\010\047\uff91\052\uff91\053\uff91\001\002\000\004" +
    "\021\232\001\002\000\004\046\233\001\002\000\024\014" +
    "\150\030\076\041\125\042\115\046\154\064\uffa9\065\122" +
    "\066\114\067\120\001\002\000\006\013\157\047\235\001" +
    "\002\000\004\053\236\001\002\000\052\007\uffd0\010\uffd0" +
    "\011\uffd0\015\uffd0\020\uffd0\021\uffd0\022\uffd0\023\uffd0\024" +
    "\uffd0\026\uffd0\027\uffd0\030\uffd0\032\uffd0\051\uffd0\054\uffd0" +
    "\055\uffd0\056\uffd0\057\uffd0\060\uffd0\064\uffd0\001\002\000" +
    "\004\053\240\001\002\000\010\024\uffe8\026\uffe8\051\uffe8" +
    "\001\002\000\054\007\uffc2\010\uffc2\011\uffc2\015\uffc2\016" +
    "\uffc2\020\uffc2\021\uffc2\022\uffc2\023\uffc2\024\uffc2\026\uffc2" +
    "\027\uffc2\030\uffc2\032\uffc2\051\uffc2\054\uffc2\055\uffc2\056" +
    "\uffc2\057\uffc2\060\uffc2\064\uffc2\001\002\000\024\014\150" +
    "\030\076\041\125\042\115\046\154\064\uffa9\065\122\066" +
    "\114\067\120\001\002\000\006\013\157\047\244\001\002" +
    "\000\030\007\015\010\021\011\022\030\076\050\177\054" +
    "\065\055\051\056\075\057\047\060\050\064\uffa9\001\002" +
    "\000\054\007\uffcd\010\uffcd\011\uffcd\015\uffcd\016\uffcd\020" +
    "\uffcd\021\uffcd\022\uffcd\023\uffcd\024\uffcd\026\uffcd\027\uffcd" +
    "\030\uffcd\032\uffcd\051\uffcd\054\uffcd\055\uffcd\056\uffcd\057" +
    "\uffcd\060\uffcd\064\uffcd\001\002\000\054\007\uffcb\010\uffcb" +
    "\011\uffcb\015\uffcb\016\250\020\uffcb\021\uffcb\022\uffcb\023" +
    "\uffcb\024\uffcb\026\uffcb\027\uffcb\030\uffcb\032\uffcb\051\uffcb" +
    "\054\uffcb\055\uffcb\056\uffcb\057\uffcb\060\uffcb\064\uffcb\001" +
    "\002\000\052\007\uffcf\010\uffcf\011\uffcf\015\uffcf\020\uffcf" +
    "\021\uffcf\022\uffcf\023\uffcf\024\uffcf\026\uffcf\027\uffcf\030" +
    "\uffcf\032\uffcf\051\uffcf\054\uffcf\055\uffcf\056\uffcf\057\uffcf" +
    "\060\uffcf\064\uffcf\001\002\000\032\007\015\010\021\011" +
    "\022\015\252\030\076\050\177\054\065\055\051\056\075" +
    "\057\047\060\050\064\uffa9\001\002\000\052\007\uffcc\010" +
    "\uffcc\011\uffcc\015\uffcc\020\uffcc\021\uffcc\022\uffcc\023\uffcc" +
    "\024\uffcc\026\uffcc\027\uffcc\030\uffcc\032\uffcc\051\uffcc\054" +
    "\uffcc\055\uffcc\056\uffcc\057\uffcc\060\uffcc\064\uffcc\001\002" +
    "\000\004\046\253\001\002\000\024\014\150\030\076\041" +
    "\125\042\115\046\154\064\uffa9\065\122\066\114\067\120" +
    "\001\002\000\006\013\157\047\255\001\002\000\030\007" +
    "\015\010\021\011\022\030\076\050\177\054\065\055\051" +
    "\056\075\057\047\060\050\064\uffa9\001\002\000\054\007" +
    "\uffce\010\uffce\011\uffce\015\uffce\016\uffce\020\uffce\021\uffce" +
    "\022\uffce\023\uffce\024\uffce\026\uffce\027\uffce\030\uffce\032" +
    "\uffce\051\uffce\054\uffce\055\uffce\056\uffce\057\uffce\060\uffce" +
    "\064\uffce\001\002\000\016\046\260\064\267\065\264\066" +
    "\261\067\266\070\265\001\002\000\022\030\076\041\125" +
    "\042\115\046\126\064\uffa9\065\122\066\114\067\120\001" +
    "\002\000\006\041\uff96\047\uff96\001\002\000\006\041\uff9a" +
    "\047\uff9a\001\002\000\006\041\270\047\271\001\002\000" +
    "\006\041\uff97\047\uff97\001\002\000\006\041\uff99\047\uff99" +
    "\001\002\000\006\041\uff98\047\uff98\001\002\000\006\041" +
    "\uff95\047\uff95\001\002\000\016\046\260\064\267\065\264" +
    "\066\261\067\266\070\265\001\002\000\004\053\uffbd\001" +
    "\002\000\006\041\uff9b\047\uff9b\001\002\000\006\041\130" +
    "\047\274\001\002\000\006\041\uff94\047\uff94\001\002\000" +
    "\004\061\171\001\002\000\024\014\150\030\076\041\125" +
    "\042\115\046\154\064\uffa9\065\122\066\114\067\120\001" +
    "\002\000\006\013\157\047\300\001\002\000\030\007\015" +
    "\010\021\011\022\030\076\050\177\054\065\055\051\056" +
    "\075\057\047\060\050\064\uffa9\001\002\000\052\007\uffda" +
    "\010\uffda\011\uffda\015\uffda\020\uffda\021\uffda\022\uffda\023" +
    "\uffda\024\uffda\026\uffda\027\uffda\030\uffda\032\uffda\051\uffda" +
    "\054\uffda\055\uffda\056\uffda\057\uffda\060\uffda\064\uffda\001" +
    "\002\000\054\007\uffc0\010\uffc0\011\uffc0\015\uffc0\016\uffc0" +
    "\020\uffc0\021\uffc0\022\uffc0\023\uffc0\024\uffc0\026\uffc0\027" +
    "\uffc0\030\uffc0\032\uffc0\051\uffc0\054\uffc0\055\uffc0\056\uffc0" +
    "\057\uffc0\060\uffc0\064\uffc0\001\002\000\014\004\ufff6\007" +
    "\ufff6\010\ufff6\011\ufff6\051\ufff6\001\002\000\030\030\076" +
    "\041\125\042\115\046\126\056\075\057\047\060\050\064" +
    "\uffa9\065\122\066\114\067\120\001\002\000\004\047\306" +
    "\001\002\000\004\050\307\001\002\000\010\024\uffc8\026" +
    "\uffc8\051\uffc8\001\002\000\010\024\314\026\312\051\uffc3" +
    "\001\002\000\004\051\324\001\002\000\004\025\321\001" +
    "\002\000\010\024\uffc9\026\uffc9\051\uffc9\001\002\000\022" +
    "\030\076\041\125\042\115\046\126\064\uffa9\065\122\066" +
    "\114\067\120\001\002\000\006\025\316\041\130\001\002" +
    "\000\052\007\uffc7\010\uffc7\011\uffc7\015\uffc7\020\uffc7\021" +
    "\uffc7\022\uffc7\023\uffc7\024\uffc7\026\uffc7\027\uffc7\030\uffc7" +
    "\032\uffc7\051\uffc7\054\uffc7\055\uffc7\056\uffc7\057\uffc7\060" +
    "\uffc7\064\uffc7\001\002\000\052\007\015\010\021\011\022" +
    "\015\071\020\101\021\063\022\074\023\055\024\uffe9\026" +
    "\uffe9\027\073\030\076\032\052\051\uffe9\054\065\055\051" +
    "\056\075\057\047\060\050\064\uffa9\001\002\000\010\024" +
    "\uffc6\026\uffc6\051\uffc6\001\002\000\046\007\uffc5\010\uffc5" +
    "\011\uffc5\015\uffc5\020\uffc5\021\uffc5\022\uffc5\023\uffc5\027" +
    "\uffc5\030\uffc5\032\uffc5\051\uffc5\054\uffc5\055\uffc5\056\uffc5" +
    "\057\uffc5\060\uffc5\064\uffc5\001\002\000\046\007\015\010" +
    "\021\011\022\015\071\020\101\021\063\022\074\023\055" +
    "\027\073\030\076\032\052\051\uffe9\054\065\055\051\056" +
    "\075\057\047\060\050\064\uffa9\001\002\000\004\051\uffc4" +
    "\001\002\000\052\007\uffca\010\uffca\011\uffca\015\uffca\020" +
    "\uffca\021\uffca\022\uffca\023\uffca\024\uffca\026\uffca\027\uffca" +
    "\030\uffca\032\uffca\051\uffca\054\uffca\055\uffca\056\uffca\057" +
    "\uffca\060\uffca\064\uffca\001\002\000\054\007\uffc1\010\uffc1" +
    "\011\uffc1\015\uffc1\016\uffc1\020\uffc1\021\uffc1\022\uffc1\023" +
    "\uffc1\024\uffc1\026\uffc1\027\uffc1\030\uffc1\032\uffc1\051\uffc1" +
    "\054\uffc1\055\uffc1\056\uffc1\057\uffc1\060\uffc1\064\uffc1\001" +
    "\002\000\010\024\uffea\026\uffea\051\uffea\001\002\000\016" +
    "\046\260\064\267\065\264\066\261\067\266\070\265\001" +
    "\002\000\006\041\270\047\331\001\002\000\004\053\uffbc" +
    "\001\002\000\004\070\333\001\002\000\004\047\334\001" +
    "\002\000\010\047\uff8f\052\uff8f\053\uff8f\001\002\000\004" +
    "\070\336\001\002\000\004\047\337\001\002\000\010\047" +
    "\uff90\052\uff90\053\uff90\001\002\000\054\007\uffbf\010\uffbf" +
    "\011\uffbf\015\uffbf\016\uffbf\020\uffbf\021\uffbf\022\uffbf\023" +
    "\uffbf\024\uffbf\026\uffbf\027\uffbf\030\uffbf\032\uffbf\051\uffbf" +
    "\054\uffbf\055\uffbf\056\uffbf\057\uffbf\060\uffbf\064\uffbf\001" +
    "\002\000\014\004\ufff8\007\ufff8\010\ufff8\011\ufff8\051\ufff8" +
    "\001\002\000\004\064\110\001\002\000\006\052\uffe2\053" +
    "\uffe2\001\002\000\006\052\345\053\uffe4\001\002\000\004" +
    "\064\110\001\002\000\006\052\uffe3\053\uffe3\001\002\000" +
    "\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\345\000\006\002\003\003\004\001\001\000\002\001" +
    "\001\000\004\004\006\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\061" +
    "\012\001\001\000\004\005\013\001\001\000\012\006\015" +
    "\007\023\011\016\023\022\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\063\341\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\010\025\011\027\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\011\033\013\032\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\022\035\001\001\000\002\001" +
    "\001\000\004\011\037\001\001\000\002\001\001\000\004" +
    "\022\041\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\062\044\001\001\000\042\011\016\012\063\021\045" +
    "\023\052\026\053\027\076\032\067\033\056\037\061\047" +
    "\071\050\055\051\077\052\066\053\065\054\060\057\057" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\020\012\123\014" +
    "\111\015\120\016\112\017\116\020\236\021\115\001\001" +
    "\000\022\011\016\012\063\021\045\023\052\037\061\047" +
    "\071\053\175\055\230\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\042\011\016\012\063\021" +
    "\045\023\052\026\053\027\076\032\067\033\056\037\061" +
    "\047\071\050\055\051\077\052\066\053\065\054\223\057" +
    "\057\001\001\000\002\001\001\000\010\011\104\012\102" +
    "\030\103\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\065\105\001\001\000\004\025\106\001\001\000\002" +
    "\001\001\000\002\001\001\000\020\012\123\014\111\015" +
    "\120\016\112\017\116\020\122\021\115\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\012" +
    "\123\016\144\017\116\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\012\123" +
    "\016\140\017\116\001\001\000\014\012\123\014\126\015" +
    "\120\016\112\017\116\001\001\000\002\001\001\000\012" +
    "\012\123\015\131\016\112\017\116\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\012\123\016\137\017\116" +
    "\001\001\000\010\012\123\016\136\017\116\001\001\000" +
    "\010\012\123\016\135\017\116\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\012\123\015\143\016\112\017\116" +
    "\001\001\000\002\001\001\000\002\001\001\000\024\012" +
    "\123\014\151\015\120\016\112\017\116\042\154\043\150" +
    "\044\152\045\146\001\001\000\002\001\001\000\020\012" +
    "\123\014\151\015\120\016\112\017\116\044\221\045\146" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\024\012\123\014\202\015\120\016\112\017\116" +
    "\042\203\043\150\044\152\045\146\001\001\000\002\001" +
    "\001\000\012\012\163\031\162\040\165\047\164\001\001" +
    "\000\022\012\123\014\151\015\120\016\112\017\116\043" +
    "\157\044\152\045\146\001\001\000\002\001\001\000\020" +
    "\012\123\014\151\015\120\016\112\017\116\044\161\045" +
    "\146\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\020\012\123\014\111\015\120" +
    "\016\112\017\116\020\172\021\115\001\001\000\002\001" +
    "\001\000\002\001\001\000\022\011\016\012\063\021\045" +
    "\023\052\037\061\047\071\053\175\055\174\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\064\177\001\001" +
    "\000\042\011\016\012\063\021\045\023\052\026\053\027" +
    "\076\032\067\033\056\037\061\047\071\050\055\051\077" +
    "\052\066\053\065\054\200\057\057\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\014\012\123\014\220\015\120\016" +
    "\112\017\116\001\001\000\014\012\123\014\217\015\120" +
    "\016\112\017\116\001\001\000\014\012\123\014\216\015" +
    "\120\016\112\017\116\001\001\000\014\012\123\014\215" +
    "\015\120\016\112\017\116\001\001\000\014\012\123\014" +
    "\214\015\120\016\112\017\116\001\001\000\014\012\123" +
    "\014\213\015\120\016\112\017\116\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\024\012\123\014\151\015\120" +
    "\016\112\017\116\042\233\043\150\044\152\045\146\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\024\012\123\014\151\015\120\016\112\017\116\042\242" +
    "\043\150\044\152\045\146\001\001\000\002\001\001\000" +
    "\022\011\016\012\063\021\045\023\052\037\061\047\071" +
    "\053\175\055\244\001\001\000\004\060\245\001\001\000" +
    "\004\056\246\001\001\000\002\001\001\000\022\011\016" +
    "\012\063\021\045\023\052\037\061\047\071\053\175\055" +
    "\250\001\001\000\002\001\001\000\002\001\001\000\024" +
    "\012\123\014\151\015\120\016\112\017\116\042\253\043" +
    "\150\044\152\045\146\001\001\000\002\001\001\000\022" +
    "\011\016\012\063\021\045\023\052\037\061\047\071\053" +
    "\175\055\255\001\001\000\002\001\001\000\006\041\261" +
    "\046\262\001\001\000\014\012\123\014\272\015\120\016" +
    "\112\017\116\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\041\271\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\024\012\123\014\151" +
    "\015\120\016\112\017\116\042\276\043\150\044\152\045" +
    "\146\001\001\000\002\001\001\000\022\011\016\012\063" +
    "\021\045\023\052\037\061\047\071\053\175\055\300\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\020\012\123\014\111\015\120\016\112\017\116\020" +
    "\304\021\115\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\034\307\001\001\000\006\035\312\036\310\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\012\123\014\314\015\120\016\112\017\116\001" +
    "\001\000\002\001\001\000\004\066\316\001\001\000\042" +
    "\011\016\012\063\021\045\023\052\026\053\027\076\032" +
    "\067\033\056\037\061\047\071\050\055\051\077\052\066" +
    "\053\065\054\317\057\057\001\001\000\002\001\001\000" +
    "\004\067\321\001\001\000\042\011\016\012\063\021\045" +
    "\023\052\026\053\027\076\032\067\033\056\037\061\047" +
    "\071\050\055\051\077\052\066\053\065\054\322\057\057" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\041\261\046\327\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\024\343\025\342\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\025\345\001\001\000\002\001" +
    "\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$SintaxisJava$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$SintaxisJava$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$SintaxisJava$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    private Symbol s;
    private JavaSemantica java = new JavaSemantica();
    private TablaJava tabla;
    private List<VariableJava> variables;
    int ret = 4;
    int cas = 0;
    
    public void syntax_error(Symbol sym){
        System.out.println("\n" + sym.value + sym.sym);
        System.out.println("Error Sintactico en la letra: " + sym.value + "   <linea>: "  + (sym.right + 1) + "    <columna>: " + (sym.left + 1) + "\n");
    }

    public void unrecovered_syntax_error(Symbol sym) throws java.lang.Exception{
        System.out.println("\n" + sym.value + sym.sym);
        System.out.println("Error Sintactico en la letra: " + sym.value + "   <linea>: "  + (sym.right + 1) + "    <columna>: " + (sym.left + 1) + "\n");
    }

    public JavaSemantica getJava() {
            return java;
    }

    public Symbol getS(){
        return this.cur_token;
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$SintaxisJava$actions {
  private final SintaxisJava parser;

  /** Constructor */
  CUP$SintaxisJava$actions(SintaxisJava parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$SintaxisJava$do_action_part00000000(
    int                        CUP$SintaxisJava$act_num,
    java_cup.runtime.lr_parser CUP$SintaxisJava$parser,
    java.util.Stack            CUP$SintaxisJava$stack,
    int                        CUP$SintaxisJava$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$SintaxisJava$result;

      /* select the action based on the action number */
      switch (CUP$SintaxisJava$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= JAVA EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-1)).value;
		RESULT = start_val;
              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$SintaxisJava$parser.done_parsing();
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // JAVA ::= CLASSES 
            {
              Object RESULT =null;

              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("JAVA",0, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // CLASSES ::= CLASSES CLASS 
            {
              Object RESULT =null;

              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("CLASSES",1, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // CLASSES ::= 
            {
              Object RESULT =null;

              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("CLASSES",1, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // NT$0 ::= 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-1)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-1)).value;
TablaJava sem = new TablaJava(e1); if(!java.agregarTabla(sem)){
                                syntax_error(getS()); }
                                tabla = sem; TablaJava.AMBITO += 1;
              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("NT$0",47, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // CLASS ::= publicc classs id llavea NT$0 STATEMENTS_CLASS llavec 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-2)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-4)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-4)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-4)).value;
		tabla.eliminarAmbito(TablaJava.AMBITO); TablaJava.AMBITO -= 1; tabla = null;
              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("CLASS",2, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-6)), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // STATEMENTS_CLASS ::= STATEMENTS_CLASS STATEMENT_CLASS 
            {
              Object RESULT =null;

              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("STATEMENTS_CLASS",3, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // STATEMENTS_CLASS ::= 
            {
              Object RESULT =null;
		
              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("STATEMENTS_CLASS",3, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // STATEMENT_CLASS ::= METODO 
            {
              Object RESULT =null;

              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("STATEMENT_CLASS",4, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // STATEMENT_CLASS ::= DEF_VAR puntocoma 
            {
              Object RESULT =null;

              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("STATEMENT_CLASS",4, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // NT$1 ::= 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-5)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-5)).right;
		Integer e1 = (Integer)((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-5)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-4)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-4)).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-4)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-2)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-2)).right;
		List<VariableJava> e3 = (List<VariableJava>)((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-2)).value;
ret = e1;
                if(!tabla.addMetodo(new MetodoJava(e2, e1, e3))){
                        syntax_error(getS());
                }
                        TablaJava.AMBITO += 1;
              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("NT$1",48, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // METODO ::= publicc TYPE_V id para LIST_PAR parc llavea NT$1 STATEMENTS_METODO llavec 
            {
              Object RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-2)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-8)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-8)).right;
		Integer e1 = (Integer)((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-8)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-7)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-7)).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-7)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-5)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-5)).right;
		List<VariableJava> e3 = (List<VariableJava>)((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-5)).value;
		int e4left = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-1)).left;
		int e4right = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-1)).right;
		StatementsJava e4 = (StatementsJava)((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-1)).value;
		tabla.eliminarAmbito(TablaJava.AMBITO); TablaJava.AMBITO -= 1;
                if(!e4.isRet() && ret!=4){syntax_error(getS());} ret = 4;
              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("METODO",5, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-9)), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // TYPE_V ::= voidd 
            {
              Integer RESULT =null;
		RESULT = TablaJava.VOID;
              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("TYPE_V",6, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // TYPE_V ::= TYPE 
            {
              Integer RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()).right;
		Integer e1 = (Integer)((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.peek()).value;
		RESULT = e1;
              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("TYPE_V",6, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // TYPE ::= intt 
            {
              Integer RESULT =null;
		RESULT = TablaJava.INT;
              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("TYPE",7, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // TYPE ::= floatt 
            {
              Integer RESULT =null;
		RESULT = TablaJava.FLOAT;
              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("TYPE",7, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // TYPE ::= charr 
            {
              Integer RESULT =null;
		RESULT = TablaJava.CHAR;
              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("TYPE",7, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // LIST_PAR ::= TYPE id LIST_PARR 
            {
              List<VariableJava> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-2)).right;
		Integer e1 = (Integer)((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-1)).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-1)).value;
		tabla.getVariables().add(0, new VariableJava(e2, e1, TablaJava.AMBITO+1));
              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("LIST_PAR",9, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // LIST_PAR ::= 
            {
              List<VariableJava> RESULT =null;

              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("LIST_PAR",9, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // LIST_PARR ::= coma TYPE id LIST_PARR 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-2)).right;
		Integer e1 = (Integer)((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-1)).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-1)).value;
		tabla.getVariables().add(0, new VariableJava(e2, e1, TablaJava.AMBITO+1));
              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("LIST_PARR",16, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // LIST_PARR ::= 
            {
              Object RESULT =null;

              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("LIST_PARR",16, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // STATEMENTS_METODO ::= STATEMENT_METODO STATEMENTS_METODO 
            {
              StatementsJava RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-1)).right;
		StatementJava e1 = (StatementJava)((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()).right;
		StatementsJava e2 = (StatementsJava)((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.peek()).value;
		if(e2 != null) {e2.add(0, e1); 
                        if(e1 instanceof ListaIf && ((ListaIf)e1).isRet() && e2.isRet()){syntax_error(getS());} RESULT = e2;}
                        else{StatementsJava states = new StatementsJava(); states.add(e1);
                        if(e1 instanceof ListaIf){states.setRet(((ListaIf)e1).isRet());} RESULT = states;}
              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("STATEMENTS_METODO",42, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // STATEMENTS_METODO ::= RETURN 
            {
              StatementsJava RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()).right;
		ReturnJava e1 = (ReturnJava)((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.peek()).value;
		StatementsJava states = new StatementsJava(); states.setRet(true); states.add(e1); RESULT = states;
              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("STATEMENTS_METODO",42, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // STATEMENTS_METODO ::= breakk puntocoma 
            {
              StatementsJava RESULT =null;
		if(cas==0){syntax_error(getS());}
              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("STATEMENTS_METODO",42, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // STATEMENTS_METODO ::= 
            {
              StatementsJava RESULT =null;
		RESULT = null;
              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("STATEMENTS_METODO",42, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // RETURN ::= returnn EXPR puntocoma 
            {
              ReturnJava RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-1)).right;
		OperacionJava e1 = (OperacionJava)((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-1)).value;
		if(e1==null || e1.getTipo() != ret){syntax_error(getS()); RESULT = null;}
                                        else{RESULT = new ReturnJava();}
              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("RETURN",38, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // STATEMENT_METODO ::= COMP_STATE 
            {
              StatementJava RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()).right;
		StatementJava e1 = (StatementJava)((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.peek()).value;
		RESULT = e1;
              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("STATEMENT_METODO",39, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // STATEMENT_METODO ::= STATEMENT_LINE 
            {
              StatementJava RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()).right;
		StatementJava e1 = (StatementJava)((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.peek()).value;
		RESULT = new StatementJava();
              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("STATEMENT_METODO",39, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // NT$2 ::= 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()).right;
		Integer e1 = (Integer)((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.peek()).value;
variables = new ArrayList<>();
              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("NT$2",49, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // DEF_VAR ::= TYPE NT$2 LIST_VAR 
            {
              Object RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-1)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-2)).right;
		Integer e1 = (Integer)((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-2)).value;
		VariableJava.agregarTipo(variables, e1);
                        if(!tabla.addListVar(variables)){syntax_error(getS());} variables = new ArrayList<>();
              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("DEF_VAR",17, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // LIST_VAR ::= LIST_VAR coma AS_VAR 
            {
              Object RESULT =null;
		
              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("LIST_VAR",18, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // LIST_VAR ::= AS_VAR 
            {
              Object RESULT =null;
		
              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("LIST_VAR",18, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // AS_VAR ::= id igual EXPR 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-2)).value;
		variables.add(new VariableJava(e1, TablaJava.AMBITO));
              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("AS_VAR",19, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // AS_VAR ::= id 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.peek()).value;
		variables.add(new VariableJava(e1, TablaJava.AMBITO));
              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("AS_VAR",19, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // COMP_STATE ::= WHILE 
            {
              StatementJava RESULT =null;
		RESULT = new StatementJava();
              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("COMP_STATE",40, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // COMP_STATE ::= FOR 
            {
              StatementJava RESULT =null;
		RESULT = new StatementJava();
              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("COMP_STATE",40, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // COMP_STATE ::= DO_WHILE 
            {
              StatementJava RESULT =null;
		RESULT = new StatementJava();
              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("COMP_STATE",40, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // COMP_STATE ::= IF_ELSE 
            {
              StatementJava RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()).right;
		ListaIf e1 = (ListaIf)((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.peek()).value;
		RESULT = e1;
              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("COMP_STATE",40, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // COMP_STATE ::= SWITCH 
            {
              StatementJava RESULT =null;
		RESULT = new StatementJava();
              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("COMP_STATE",40, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // WHILE ::= whilee para CONDICION parc BLOQUE 
            {
              Object RESULT =null;

              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("WHILE",20, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-4)), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // NT$3 ::= 
            {
              StatementsJava RESULT =null;
TablaJava.AMBITO += 1;
              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("NT$3",50, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // BLOQUE ::= llavea NT$3 STATEMENTS_METODO llavec 
            {
              StatementsJava RESULT =null;
              // propagate RESULT from NT$3
                RESULT = (StatementsJava) ((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-2)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-1)).right;
		StatementsJava e1 = (StatementsJava)((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-1)).value;
		tabla.eliminarAmbito(TablaJava.AMBITO); TablaJava.AMBITO -= 1;
                                                if(e1!=null){RESULT = e1;}else{RESULT = new StatementsJava();}
              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("BLOQUE",43, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // BLOQUE ::= STATEMENT_LINE 
            {
              StatementsJava RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()).right;
		StatementJava e1 = (StatementJava)((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.peek()).value;
		RESULT = null;
              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("BLOQUE",43, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // FOR ::= forr para INICIO puntocoma CONDICION puntocoma STEP parc BLOQUE 
            {
              Object RESULT =null;

              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("FOR",21, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-8)), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // INICIO ::= THIS id 
            {
              Object RESULT =null;
		int e0left = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-1)).left;
		int e0right = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-1)).right;
		Boolean e0 = (Boolean)((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-1)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.peek()).value;
		int num; if(e0){num = tabla.existeVarGlobal(new VariableJava(e1, TablaJava.AMBITO));}
                        else {num = tabla.existeVar(new VariableJava(e1, TablaJava.AMBITO));}
                        if(num == -1){syntax_error(getS());}else{RESULT = new OperacionJava(num);}
              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("INICIO",22, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // NT$4 ::= 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()).right;
		Integer e1 = (Integer)((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.peek()).value;
TablaJava.AMBITO += 1; variables = new ArrayList<>();
              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("NT$4",51, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // INICIO ::= TYPE NT$4 AS_VAR 
            {
              Object RESULT =null;
              // propagate RESULT from NT$4
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-1)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-2)).right;
		Integer e1 = (Integer)((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-2)).value;
		if(!tabla.addListVar(variables)){syntax_error(getS());} TablaJava.AMBITO -= 1;
              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("INICIO",22, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // STEP ::= AS_VAR_LINE 
            {
              Object RESULT =null;

              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("STEP",23, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // STEP ::= OP_VAR 
            {
              Object RESULT =null;

              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("STEP",23, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // DO_WHILE ::= doo BLOQUE whilee para CONDICION parc puntocoma 
            {
              Object RESULT =null;

              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("DO_WHILE",24, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-6)), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // IF_ELSE ::= iff para CONDICION parc BLOQUE ELSEIF ELSE 
            {
              ListaIf RESULT =null;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-2)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-2)).right;
		StatementsJava e2 = (StatementsJava)((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-2)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-1)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-1)).right;
		ListaIf e3 = (ListaIf)((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-1)).value;
		int e4left = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()).left;
		int e4right = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()).right;
		IfOperacion e4 = (IfOperacion)((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.peek()).value;
		IfOperacion op = new IfOperacion(e2); e3.getIfs().add(0, op);
                                        if(e4 != null){e3.getIfs().add(e4); e3.verRetornabilidad();}else{e3.setRet(false);} RESULT = e3;
              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("IF_ELSE",45, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-6)), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // ELSEIF ::= ELSEIF elsee iff para CONDICION parc BLOQUE 
            {
              ListaIf RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-6)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-6)).right;
		ListaIf e1 = (ListaIf)((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-6)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()).right;
		StatementsJava e3 = (StatementsJava)((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.peek()).value;
		IfOperacion op = new IfOperacion(e3);
                                e1.getIfs().add(op); RESULT = e1;
              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("ELSEIF",46, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-6)), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // ELSEIF ::= 
            {
              ListaIf RESULT =null;
		RESULT = new ListaIf();
              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("ELSEIF",46, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // ELSE ::= elsee BLOQUE 
            {
              IfOperacion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()).right;
		StatementsJava e1 = (StatementsJava)((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.peek()).value;
		IfOperacion op = new IfOperacion(e1); RESULT = op;
              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("ELSE",44, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // ELSE ::= 
            {
              IfOperacion RESULT =null;
		RESULT = null;
              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("ELSE",44, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // SWITCH ::= switchh para EXPR parc llavea CASES DEFAULT llavec 
            {
              Object RESULT =null;

              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("SWITCH",25, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-7)), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // CASES ::= CASES CASE 
            {
              Object RESULT =null;

              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("CASES",26, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // CASES ::= 
            {
              Object RESULT =null;

              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("CASES",26, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // NT$5 ::= 
            {
              Object RESULT =null;
cas++;
              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("NT$5",52, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // CASE ::= casee OPERACION_A dosp NT$5 STATEMENTS_METODO 
            {
              Object RESULT =null;
              // propagate RESULT from NT$5
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-1)).value;
		cas--;
              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("CASE",27, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-4)), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // NT$6 ::= 
            {
              Object RESULT =null;
cas++;
              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("NT$6",53, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // DEFAULT ::= defaultt dosp NT$6 STATEMENTS_METODO 
            {
              Object RESULT =null;
              // propagate RESULT from NT$6
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-1)).value;
		cas--;
              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("DEFAULT",28, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // DEFAULT ::= 
            {
              Object RESULT =null;

              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("DEFAULT",28, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // STATEMENT_LINE ::= AS_VAR_LINE puntocoma 
            {
              StatementJava RESULT =null;

              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("STATEMENT_LINE",41, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // STATEMENT_LINE ::= DEF_VAR puntocoma 
            {
              StatementJava RESULT =null;

              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("STATEMENT_LINE",41, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // STATEMENT_LINE ::= WRITE puntocoma 
            {
              StatementJava RESULT =null;

              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("STATEMENT_LINE",41, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // STATEMENT_LINE ::= INPUT puntocoma 
            {
              StatementJava RESULT =null;

              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("STATEMENT_LINE",41, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // AS_VAR_LINE ::= THIS id igual EXPR 
            {
              Object RESULT =null;
		int e0left = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-3)).left;
		int e0right = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-3)).right;
		Boolean e0 = (Boolean)((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-3)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()).right;
		OperacionJava e2 = (OperacionJava)((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.peek()).value;
		int num = tabla.existeVar(new VariableJava(e1, TablaJava.AMBITO)); 
                                        if(num==-1 || num<e2.getTipo()){syntax_error(getS());}
              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("AS_VAR_LINE",37, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // WRITE ::= println para STRING parc 
            {
              Object RESULT =null;

              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("WRITE",29, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // WRITE ::= print para STRING parc 
            {
              Object RESULT =null;

              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("WRITE",29, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // OP_VAR ::= THIS id masmas 
            {
              Object RESULT =null;
		int e0left = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-2)).left;
		int e0right = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-2)).right;
		Boolean e0 = (Boolean)((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-2)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-1)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-1)).value;
		int num; if(e0){num = tabla.existeVarGlobal(new VariableJava(e1, TablaJava.AMBITO));}
                        else {num = tabla.existeVar(new VariableJava(e1, TablaJava.AMBITO));}
                        if(num == -1){syntax_error(getS());}else{RESULT = new OperacionJava(num);}
              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("OP_VAR",30, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // OP_VAR ::= THIS id menosmenos 
            {
              Object RESULT =null;
		int e0left = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-2)).left;
		int e0right = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-2)).right;
		Boolean e0 = (Boolean)((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-2)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-1)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-1)).value;
		int num; if(e0){num = tabla.existeVarGlobal(new VariableJava(e1, TablaJava.AMBITO));}
                        else {num = tabla.existeVar(new VariableJava(e1, TablaJava.AMBITO));}
                        if(num == -1){syntax_error(getS());}else{RESULT = new OperacionJava(num);}
              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("OP_VAR",30, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // OPERACION_A ::= OPERACION_A mas OPERACION_M 
            {
              OperacionJava RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-2)).right;
		OperacionJava e1 = (OperacionJava)((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()).right;
		OperacionJava e2 = (OperacionJava)((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.peek()).value;
		if(e1!=null&&e2!=null){
                        RESULT = new OperacionJava(TablaJava.regresarTipo(e1.getTipo(), e2.getTipo()));}
              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("OPERACION_A",10, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // OPERACION_A ::= OPERACION_M menos OPERACION_M 
            {
              OperacionJava RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-2)).right;
		OperacionJava e1 = (OperacionJava)((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()).right;
		OperacionJava e2 = (OperacionJava)((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.peek()).value;
		if(e1!=null&&e2!=null){
                        RESULT = new OperacionJava(TablaJava.regresarTipo(e1.getTipo(), e2.getTipo()));}
              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("OPERACION_A",10, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // OPERACION_A ::= OPERACION_M 
            {
              OperacionJava RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()).right;
		OperacionJava e1 = (OperacionJava)((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.peek()).value;
		RESULT = e1;
              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("OPERACION_A",10, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // OPERACION_M ::= OPERACION_M por OPERACION_U 
            {
              OperacionJava RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-2)).right;
		OperacionJava e1 = (OperacionJava)((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()).right;
		OperacionJava e2 = (OperacionJava)((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.peek()).value;
		if(e1!=null&&e2!=null){
                                RESULT = new OperacionJava(TablaJava.regresarTipo(e1.getTipo(), e2.getTipo()));}
              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("OPERACION_M",11, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // OPERACION_M ::= OPERACION_M div OPERACION_U 
            {
              OperacionJava RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-2)).right;
		OperacionJava e1 = (OperacionJava)((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()).right;
		OperacionJava e2 = (OperacionJava)((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.peek()).value;
		if(e1!=null&&e2!=null){
                                RESULT = new OperacionJava(TablaJava.regresarTipo(e1.getTipo(), e2.getTipo()));}
              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("OPERACION_M",11, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // OPERACION_M ::= OPERACION_M mod OPERACION_U 
            {
              OperacionJava RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-2)).right;
		OperacionJava e1 = (OperacionJava)((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()).right;
		OperacionJava e2 = (OperacionJava)((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.peek()).value;
		if(e1!=null&&e2!=null){
                                RESULT = new OperacionJava(TablaJava.regresarTipo(e1.getTipo(), e2.getTipo()));}
              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("OPERACION_M",11, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // OPERACION_M ::= OPERACION_U 
            {
              OperacionJava RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()).right;
		OperacionJava e1 = (OperacionJava)((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.peek()).value;
		RESULT = e1;
              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("OPERACION_M",11, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // OPERACION_U ::= menos OPERACION_U 
            {
              OperacionJava RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()).right;
		OperacionJava e1 = (OperacionJava)((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.peek()).value;
		if(e1.getTipo()==1){e1.setTipo(TablaJava.INT); RESULT = e1;} RESULT = e1;
              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("OPERACION_U",12, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // OPERACION_U ::= mas OPERACION_U 
            {
              OperacionJava RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()).right;
		OperacionJava e1 = (OperacionJava)((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.peek()).value;
		RESULT = e1;
              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("OPERACION_U",12, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // OPERACION_U ::= ATOM 
            {
              OperacionJava RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()).right;
		OperacionJava e1 = (OperacionJava)((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.peek()).value;
		RESULT = e1;
              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("OPERACION_U",12, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // ATOM ::= THIS id 
            {
              OperacionJava RESULT =null;
		int e0left = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-1)).left;
		int e0right = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-1)).right;
		Boolean e0 = (Boolean)((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-1)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.peek()).value;
		int num; if(e0){num = tabla.existeVarGlobal(new VariableJava(e1, TablaJava.AMBITO));}
                        else {num = tabla.existeVar(new VariableJava(e1, TablaJava.AMBITO));}
                        if(num == -1){syntax_error(getS());}else{RESULT = new OperacionJava(num);}
              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("ATOM",13, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // ATOM ::= entero 
            {
              OperacionJava RESULT =null;
		RESULT = new OperacionJava(TablaJava.INT);
              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("ATOM",13, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // ATOM ::= decimal 
            {
              OperacionJava RESULT =null;
		RESULT = new OperacionJava(TablaJava.FLOAT);
              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("ATOM",13, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // ATOM ::= character 
            {
              OperacionJava RESULT =null;
		RESULT = new OperacionJava(TablaJava.CHAR);
              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("ATOM",13, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // ATOM ::= para OPERACION_A parc 
            {
              OperacionJava RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-1)).right;
		OperacionJava e1 = (OperacionJava)((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-1)).value;
		RESULT = e1;
              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("ATOM",13, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // THIS ::= thiss punto 
            {
              Boolean RESULT =null;
		RESULT = true;
              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("THIS",8, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // THIS ::= 
            {
              Boolean RESULT =null;
		RESULT = false;
              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("THIS",8, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // CONDICION ::= CONDICION orr AND 
            {
              Object RESULT =null;

              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("CONDICION",32, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // CONDICION ::= AND 
            {
              Object RESULT =null;

              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("CONDICION",32, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // AND ::= AND andd NOT 
            {
              Object RESULT =null;

              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("AND",33, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // AND ::= NOT 
            {
              Object RESULT =null;

              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("AND",33, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // NOT ::= nott NOT 
            {
              Object RESULT =null;

              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("NOT",34, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // NOT ::= COMPARACION 
            {
              Object RESULT =null;

              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("NOT",34, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // COMPARACION ::= OPERACION_A igig OPERACION_A 
            {
              Object RESULT =null;

              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("COMPARACION",35, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // COMPARACION ::= OPERACION_A noigual OPERACION_A 
            {
              Object RESULT =null;

              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("COMPARACION",35, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // COMPARACION ::= OPERACION_A menor OPERACION_A 
            {
              Object RESULT =null;

              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("COMPARACION",35, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // COMPARACION ::= OPERACION_A menorig OPERACION_A 
            {
              Object RESULT =null;

              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("COMPARACION",35, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // COMPARACION ::= OPERACION_A mayor OPERACION_A 
            {
              Object RESULT =null;

              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("COMPARACION",35, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // COMPARACION ::= OPERACION_A mayorig OPERACION_A 
            {
              Object RESULT =null;

              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("COMPARACION",35, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // COMPARACION ::= para CONDICION parc 
            {
              Object RESULT =null;

              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("COMPARACION",35, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // STRING ::= STRING mas EXPR_STRING 
            {
              Object RESULT =null;

              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("STRING",36, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // STRING ::= EXPR_STRING 
            {
              Object RESULT =null;

              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("STRING",36, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // EXPR_STRING ::= string 
            {
              Object RESULT =null;

              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("EXPR_STRING",31, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // EXPR_STRING ::= character 
            {
              Object RESULT =null;

              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("EXPR_STRING",31, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // EXPR_STRING ::= entero 
            {
              Object RESULT =null;

              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("EXPR_STRING",31, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // EXPR_STRING ::= decimal 
            {
              Object RESULT =null;

              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("EXPR_STRING",31, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // EXPR_STRING ::= id 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.peek()).value;
		int num = tabla.existeVar(new VariableJava(e1, TablaJava.AMBITO)); if(num == -1){syntax_error(getS());}
              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("EXPR_STRING",31, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // EXPR_STRING ::= para OPERACION_A parc 
            {
              Object RESULT =null;

              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("EXPR_STRING",31, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // EXPR ::= OPERACION_A 
            {
              OperacionJava RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()).right;
		OperacionJava e1 = (OperacionJava)((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.peek()).value;
		RESULT = e1;
              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("EXPR",14, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // EXPR ::= INPUT 
            {
              OperacionJava RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()).right;
		OperacionJava e1 = (OperacionJava)((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.peek()).value;
		RESULT = e1;
              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("EXPR",14, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // INPUT ::= charinput para string parc 
            {
              OperacionJava RESULT =null;
		RESULT = new OperacionJava(TablaJava.CHAR);
              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("INPUT",15, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // INPUT ::= intinput para string parc 
            {
              OperacionJava RESULT =null;
		RESULT = new OperacionJava(TablaJava.INT);
              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("INPUT",15, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // INPUT ::= floatinput para string parc 
            {
              OperacionJava RESULT =null;
		RESULT = new OperacionJava(TablaJava.FLOAT);
              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("INPUT",15, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$SintaxisJava$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$SintaxisJava$do_action(
    int                        CUP$SintaxisJava$act_num,
    java_cup.runtime.lr_parser CUP$SintaxisJava$parser,
    java.util.Stack            CUP$SintaxisJava$stack,
    int                        CUP$SintaxisJava$top)
    throws java.lang.Exception
    {
              return CUP$SintaxisJava$do_action_part00000000(
                               CUP$SintaxisJava$act_num,
                               CUP$SintaxisJava$parser,
                               CUP$SintaxisJava$stack,
                               CUP$SintaxisJava$top);
    }
}

}
