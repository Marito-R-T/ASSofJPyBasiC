
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package com.mycompany.assofjpybasic.backend.analizador.java;

import java_cup.runtime.*;
import com.mycompany.assofjpybasic.backend.semantica.java.*;
import com.mycompany.assofjpybasic.backend.semantica.programa.*;
import com.mycompany.assofjpybasic.backend.semantica.programa.cod3.*;
import com.mycompany.assofjpybasic.backend.semantica.python.*;
import java.util.ArrayList;
import java.util.List;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class SintaxisJava extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return SintaxisJavaSym.class;
}

  /** Default constructor. */
  @Deprecated
  public SintaxisJava() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public SintaxisJava(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public SintaxisJava(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\166\000\002\002\004\000\002\002\003\000\002\003" +
    "\004\000\002\003\002\000\002\060\002\000\002\004\011" +
    "\000\002\036\004\000\002\036\002\000\002\027\003\000" +
    "\002\027\003\000\002\027\004\000\002\061\002\000\002" +
    "\006\013\000\002\062\002\000\002\005\014\000\002\007" +
    "\003\000\002\007\003\000\002\010\003\000\002\010\003" +
    "\000\002\010\003\000\002\012\005\000\002\012\002\000" +
    "\002\013\006\000\002\013\002\000\002\040\004\000\002" +
    "\040\003\000\002\040\004\000\002\040\002\000\002\043" +
    "\005\000\002\041\003\000\002\041\003\000\002\063\002" +
    "\000\002\042\005\000\002\057\005\000\002\057\003\000" +
    "\002\056\005\000\002\056\003\000\002\044\003\000\002" +
    "\044\003\000\002\044\003\000\002\044\003\000\002\044" +
    "\003\000\002\031\007\000\002\064\002\000\002\037\006" +
    "\000\002\037\003\000\002\032\013\000\002\051\004\000" +
    "\002\065\002\000\002\051\005\000\002\052\003\000\002" +
    "\052\003\000\002\033\011\000\002\034\011\000\002\022" +
    "\011\000\002\022\002\000\002\035\004\000\002\035\002" +
    "\000\002\045\012\000\002\066\002\000\002\055\010\000" +
    "\002\055\002\000\002\067\002\000\002\046\006\000\002" +
    "\046\002\000\002\030\004\000\002\030\004\000\002\030" +
    "\004\000\002\030\004\000\002\054\006\000\002\047\006" +
    "\000\002\047\006\000\002\053\005\000\002\053\005\000" +
    "\002\014\005\000\002\014\005\000\002\014\003\000\002" +
    "\015\005\000\002\015\005\000\002\015\005\000\002\015" +
    "\003\000\002\016\004\000\002\016\004\000\002\016\003" +
    "\000\002\017\004\000\002\017\003\000\002\017\003\000" +
    "\002\017\003\000\002\017\005\000\002\017\003\000\002" +
    "\011\004\000\002\011\002\000\002\025\005\000\002\025" +
    "\003\000\002\024\005\000\002\024\003\000\002\023\004" +
    "\000\002\023\003\000\002\023\005\000\002\026\005\000" +
    "\002\026\005\000\002\026\005\000\002\026\005\000\002" +
    "\026\005\000\002\026\005\000\002\050\005\000\002\050" +
    "\005\000\002\050\003\000\002\050\003\000\002\020\003" +
    "\000\002\020\004\000\002\020\003\000\002\020\003\000" +
    "\002\020\003\000\002\020\005\000\002\021\006\000\002" +
    "\021\006\000\002\021\006" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\357\000\006\002\ufffe\004\ufffe\001\002\000\004\002" +
    "\361\001\002\000\006\002\000\004\006\001\002\000\004" +
    "\005\010\001\002\000\006\002\uffff\004\uffff\001\002\000" +
    "\004\064\011\001\002\000\004\050\012\001\002\000\014" +
    "\004\ufffd\007\ufffd\010\ufffd\011\ufffd\051\ufffd\001\002\000" +
    "\014\004\ufffa\007\ufffa\010\ufffa\011\ufffa\051\ufffa\001\002" +
    "\000\014\004\026\007\015\010\021\011\022\051\020\001" +
    "\002\000\004\064\ufff0\001\002\000\014\004\ufffb\007\ufffb" +
    "\010\ufffb\011\ufffb\051\ufffb\001\002\000\004\064\uffe2\001" +
    "\002\000\006\002\ufffc\004\ufffc\001\002\000\004\064\uffef" +
    "\001\002\000\004\064\uffee\001\002\000\004\053\353\001" +
    "\002\000\014\004\ufff9\007\ufff9\010\ufff9\011\ufff9\051\ufff9" +
    "\001\002\000\014\004\ufff8\007\ufff8\010\ufff8\011\ufff8\051" +
    "\ufff8\001\002\000\014\006\031\007\015\010\021\011\022" +
    "\064\030\001\002\000\004\064\343\001\002\000\004\046" +
    "\033\001\002\000\004\064\ufff2\001\002\000\004\064\ufff1" +
    "\001\002\000\012\007\015\010\021\011\022\047\uffec\001" +
    "\002\000\004\047\044\001\002\000\004\064\036\001\002" +
    "\000\006\047\uffea\052\040\001\002\000\004\047\uffed\001" +
    "\002\000\010\007\015\010\021\011\022\001\002\000\004" +
    "\064\042\001\002\000\006\047\uffea\052\040\001\002\000" +
    "\004\047\uffeb\001\002\000\004\050\045\001\002\000\046" +
    "\007\ufff6\010\ufff6\011\ufff6\015\ufff6\020\ufff6\021\ufff6\022" +
    "\ufff6\023\ufff6\027\ufff6\030\ufff6\032\ufff6\051\ufff6\054\ufff6" +
    "\055\ufff6\056\ufff6\057\ufff6\060\ufff6\064\ufff6\001\002\000" +
    "\046\007\015\010\021\011\022\015\072\020\102\021\064" +
    "\022\075\023\056\027\074\030\077\032\053\051\uffe6\054" +
    "\066\055\052\056\076\057\047\060\051\064\uffa6\001\002" +
    "\000\004\046\340\001\002\000\004\053\337\001\002\000" +
    "\004\046\334\001\002\000\004\046\331\001\002\000\004" +
    "\053\330\001\002\000\004\053\327\001\002\000\052\007" +
    "\uffdc\010\uffdc\011\uffdc\015\uffdc\020\uffdc\021\uffdc\022\uffdc" +
    "\023\uffdc\024\uffdc\026\uffdc\027\uffdc\030\uffdc\032\uffdc\051" +
    "\uffdc\054\uffdc\055\uffdc\056\uffdc\057\uffdc\060\uffdc\064\uffdc" +
    "\001\002\000\004\046\307\001\002\000\010\024\uffe8\026" +
    "\uffe8\051\uffe8\001\002\000\052\007\uffd8\010\uffd8\011\uffd8" +
    "\015\uffd8\020\uffd8\021\uffd8\022\uffd8\023\uffd8\024\uffd8\026" +
    "\uffd8\027\uffd8\030\uffd8\032\uffd8\051\uffd8\054\uffd8\055\uffd8" +
    "\056\uffd8\057\uffd8\060\uffd8\064\uffd8\001\002\000\004\051" +
    "\306\001\002\000\004\053\305\001\002\000\052\007\uffd9" +
    "\010\uffd9\011\uffd9\015\uffd9\020\uffd9\021\uffd9\022\uffd9\023" +
    "\uffd9\024\uffd9\026\uffd9\027\uffd9\030\uffd9\032\uffd9\051\uffd9" +
    "\054\uffd9\055\uffd9\056\uffd9\057\uffd9\060\uffd9\064\uffd9\001" +
    "\002\000\004\046\301\001\002\000\004\064\300\001\002" +
    "\000\004\046\257\001\002\000\052\007\uffe4\010\uffe4\011" +
    "\uffe4\015\uffe4\020\uffe4\021\uffe4\022\uffe4\023\uffe4\024\uffe4" +
    "\026\uffe4\027\uffe4\030\uffe4\032\uffe4\051\uffe4\054\uffe4\055" +
    "\uffe4\056\uffe4\057\uffe4\060\uffe4\064\uffe4\001\002\000\052" +
    "\007\uffe3\010\uffe3\011\uffe3\015\uffe3\020\uffe3\021\uffe3\022" +
    "\uffe3\023\uffe3\024\uffe3\026\uffe3\027\uffe3\030\uffe3\032\uffe3" +
    "\051\uffe3\054\uffe3\055\uffe3\056\uffe3\057\uffe3\060\uffe3\064" +
    "\uffe3\001\002\000\052\007\uffda\010\uffda\011\uffda\015\uffda" +
    "\020\uffda\021\uffda\022\uffda\023\uffda\024\uffda\026\uffda\027" +
    "\uffda\030\uffda\032\uffda\051\uffda\054\uffda\055\uffda\056\uffda" +
    "\057\uffda\060\uffda\064\uffda\001\002\000\004\046\242\001" +
    "\002\000\004\053\241\001\002\000\030\030\077\041\125" +
    "\042\117\046\126\056\076\057\047\060\051\064\uffa6\065" +
    "\123\066\115\067\121\001\002\000\030\007\015\010\021" +
    "\011\022\030\077\050\177\054\066\055\052\056\076\057" +
    "\047\060\051\064\uffa6\001\002\000\004\046\226\001\002" +
    "\000\004\031\225\001\002\000\052\007\uffdb\010\uffdb\011" +
    "\uffdb\015\uffdb\020\uffdb\021\uffdb\022\uffdb\023\uffdb\024\uffdb" +
    "\026\uffdb\027\uffdb\030\uffdb\032\uffdb\051\uffdb\054\uffdb\055" +
    "\uffdb\056\uffdb\057\uffdb\060\uffdb\064\uffdb\001\002\000\052" +
    "\007\015\010\021\011\022\015\072\020\102\021\064\022" +
    "\075\023\056\024\uffe6\026\uffe6\027\074\030\077\032\053" +
    "\051\uffe6\054\066\055\052\056\076\057\047\060\051\064" +
    "\uffa6\001\002\000\004\046\103\001\002\000\014\007\015" +
    "\010\021\011\022\030\077\064\uffa6\001\002\000\004\064" +
    "\223\001\002\000\004\053\146\001\002\000\004\064\uffd1" +
    "\001\002\000\004\064\111\001\002\000\004\053\uffd0\001" +
    "\002\000\010\052\uffdd\053\uffdd\061\112\001\002\000\030" +
    "\030\077\041\125\042\117\046\126\056\076\057\047\060" +
    "\051\064\uffa6\065\123\066\115\067\121\001\002\000\010" +
    "\041\130\052\uffde\053\uffde\001\002\000\044\012\uffb1\013" +
    "\uffb1\025\uffb1\033\uffb1\034\uffb1\035\uffb1\036\uffb1\037\uffb1" +
    "\040\uffb1\041\uffb1\042\uffb1\043\uffb1\044\uffb1\045\uffb1\047" +
    "\uffb1\052\uffb1\053\uffb1\001\002\000\044\012\uffab\013\uffab" +
    "\025\uffab\033\uffab\034\uffab\035\uffab\036\uffab\037\uffab\040" +
    "\uffab\041\uffab\042\uffab\043\uffab\044\uffab\045\uffab\047\uffab" +
    "\052\uffab\053\uffab\001\002\000\044\012\uffa8\013\uffa8\025" +
    "\uffa8\033\uffa8\034\uffa8\035\uffa8\036\uffa8\037\uffa8\040\uffa8" +
    "\041\uffa8\042\uffa8\043\uffa8\044\uffa8\045\uffa8\047\uffa8\052" +
    "\uffa8\053\uffa8\001\002\000\030\030\077\041\125\042\117" +
    "\046\126\056\076\057\047\060\051\064\uffa6\065\123\066" +
    "\115\067\121\001\002\000\044\012\uffae\013\uffae\025\uffae" +
    "\033\uffae\034\uffae\035\uffae\036\uffae\037\uffae\040\uffae\041" +
    "\uffae\042\uffae\043\uffae\044\uffae\045\uffae\047\uffae\052\uffae" +
    "\053\uffae\001\002\000\044\012\uffaa\013\uffaa\025\uffaa\033" +
    "\uffaa\034\uffaa\035\uffaa\036\uffaa\037\uffaa\040\uffaa\041\uffaa" +
    "\042\uffaa\043\uffaa\044\uffaa\045\uffaa\047\uffaa\052\uffaa\053" +
    "\uffaa\001\002\000\044\012\uffb5\013\uffb5\025\uffb5\033\uffb5" +
    "\034\uffb5\035\uffb5\036\uffb5\037\uffb5\040\uffb5\041\uffb5\042" +
    "\143\043\133\044\135\045\134\047\uffb5\052\uffb5\053\uffb5" +
    "\001\002\000\044\012\uffac\013\uffac\025\uffac\033\uffac\034" +
    "\uffac\035\uffac\036\uffac\037\uffac\040\uffac\041\uffac\042\uffac" +
    "\043\uffac\044\uffac\045\uffac\047\uffac\052\uffac\053\uffac\001" +
    "\002\000\004\064\142\001\002\000\030\030\077\041\125" +
    "\042\117\046\126\056\076\057\047\060\051\064\uffa6\065" +
    "\123\066\115\067\121\001\002\000\030\030\077\041\125" +
    "\042\117\046\126\056\076\057\047\060\051\064\uffa6\065" +
    "\123\066\115\067\121\001\002\000\006\041\130\047\131" +
    "\001\002\000\030\030\077\041\125\042\117\046\126\056" +
    "\076\057\047\060\051\064\uffa6\065\123\066\115\067\121" +
    "\001\002\000\044\012\uffa9\013\uffa9\025\uffa9\033\uffa9\034" +
    "\uffa9\035\uffa9\036\uffa9\037\uffa9\040\uffa9\041\uffa9\042\uffa9" +
    "\043\uffa9\044\uffa9\045\uffa9\047\uffa9\052\uffa9\053\uffa9\001" +
    "\002\000\042\012\uffb7\013\uffb7\025\uffb7\033\uffb7\034\uffb7" +
    "\035\uffb7\036\uffb7\037\uffb7\040\uffb7\041\uffb7\043\133\044" +
    "\135\045\134\047\uffb7\052\uffb7\053\uffb7\001\002\000\030" +
    "\030\077\041\125\042\117\046\126\056\076\057\047\060" +
    "\051\064\uffa6\065\123\066\115\067\121\001\002\000\030" +
    "\030\077\041\125\042\117\046\126\056\076\057\047\060" +
    "\051\064\uffa6\065\123\066\115\067\121\001\002\000\030" +
    "\030\077\041\125\042\117\046\126\056\076\057\047\060" +
    "\051\064\uffa6\065\123\066\115\067\121\001\002\000\044" +
    "\012\uffb3\013\uffb3\025\uffb3\033\uffb3\034\uffb3\035\uffb3\036" +
    "\uffb3\037\uffb3\040\uffb3\041\uffb3\042\uffb3\043\uffb3\044\uffb3" +
    "\045\uffb3\047\uffb3\052\uffb3\053\uffb3\001\002\000\044\012" +
    "\uffb2\013\uffb2\025\uffb2\033\uffb2\034\uffb2\035\uffb2\036\uffb2" +
    "\037\uffb2\040\uffb2\041\uffb2\042\uffb2\043\uffb2\044\uffb2\045" +
    "\uffb2\047\uffb2\052\uffb2\053\uffb2\001\002\000\044\012\uffb4" +
    "\013\uffb4\025\uffb4\033\uffb4\034\uffb4\035\uffb4\036\uffb4\037" +
    "\uffb4\040\uffb4\041\uffb4\042\uffb4\043\uffb4\044\uffb4\045\uffb4" +
    "\047\uffb4\052\uffb4\053\uffb4\001\002\000\044\012\uffaf\013" +
    "\uffaf\025\uffaf\033\uffaf\034\uffaf\035\uffaf\036\uffaf\037\uffaf" +
    "\040\uffaf\041\uffaf\042\uffaf\043\uffaf\044\uffaf\045\uffaf\047" +
    "\uffaf\052\uffaf\053\uffaf\001\002\000\044\012\uffad\013\uffad" +
    "\025\uffad\033\uffad\034\uffad\035\uffad\036\uffad\037\uffad\040" +
    "\uffad\041\uffad\042\uffad\043\uffad\044\uffad\045\uffad\047\uffad" +
    "\052\uffad\053\uffad\001\002\000\030\030\077\041\125\042" +
    "\117\046\126\056\076\057\047\060\051\064\uffa6\065\123" +
    "\066\115\067\121\001\002\000\042\012\uffb6\013\uffb6\025" +
    "\uffb6\033\uffb6\034\uffb6\035\uffb6\036\uffb6\037\uffb6\040\uffb6" +
    "\041\uffb6\043\133\044\135\045\134\047\uffb6\052\uffb6\053" +
    "\uffb6\001\002\000\044\012\uffb0\013\uffb0\025\uffb0\033\uffb0" +
    "\034\uffb0\035\uffb0\036\uffb0\037\uffb0\040\uffb0\041\uffb0\042" +
    "\uffb0\043\uffb0\044\uffb0\045\uffb0\047\uffb0\052\uffb0\053\uffb0" +
    "\001\002\000\032\014\154\030\077\041\125\042\117\046" +
    "\150\056\076\057\047\060\051\064\uffa6\065\123\066\115" +
    "\067\121\001\002\000\012\012\161\013\uffa4\047\uffa4\053" +
    "\uffa4\001\002\000\032\014\154\030\077\041\125\042\117" +
    "\046\150\056\076\057\047\060\051\064\uffa6\065\123\066" +
    "\115\067\121\001\002\000\012\012\uffa2\013\uffa2\047\uffa2" +
    "\053\uffa2\001\002\000\012\012\uffa0\013\uffa0\047\uffa0\053" +
    "\uffa0\001\002\000\020\033\206\034\207\035\211\036\210" +
    "\037\204\040\205\041\130\001\002\000\032\014\154\030" +
    "\077\041\125\042\117\046\150\056\076\057\047\060\051" +
    "\064\uffa6\065\123\066\115\067\121\001\002\000\006\013" +
    "\157\053\156\001\002\000\006\030\077\064\uffa6\001\002" +
    "\000\032\014\154\030\077\041\125\042\117\046\150\056" +
    "\076\057\047\060\051\064\uffa6\065\123\066\115\067\121" +
    "\001\002\000\012\012\161\013\uffa5\047\uffa5\053\uffa5\001" +
    "\002\000\032\014\154\030\077\041\125\042\117\046\150" +
    "\056\076\057\047\060\051\064\uffa6\065\123\066\115\067" +
    "\121\001\002\000\012\012\uffa3\013\uffa3\047\uffa3\053\uffa3" +
    "\001\002\000\004\047\174\001\002\000\004\064\167\001" +
    "\002\000\004\047\uffcf\001\002\000\004\047\uffce\001\002" +
    "\000\010\061\171\062\170\063\172\001\002\000\004\047" +
    "\uffb9\001\002\000\030\030\077\041\125\042\117\046\126" +
    "\056\076\057\047\060\051\064\uffa6\065\123\066\115\067" +
    "\121\001\002\000\004\047\uffb8\001\002\000\010\041\130" +
    "\047\uffbc\053\uffbc\001\002\000\030\007\015\010\021\011" +
    "\022\030\077\050\177\054\066\055\052\056\076\057\047" +
    "\060\051\064\uffa6\001\002\000\052\007\uffd3\010\uffd3\011" +
    "\uffd3\015\uffd3\020\uffd3\021\uffd3\022\uffd3\023\uffd3\024\uffd3" +
    "\026\uffd3\027\uffd3\030\uffd3\032\uffd3\051\uffd3\054\uffd3\055" +
    "\uffd3\056\uffd3\057\uffd3\060\uffd3\064\uffd3\001\002\000\054" +
    "\007\uffd4\010\uffd4\011\uffd4\015\uffd4\016\uffd4\020\uffd4\021" +
    "\uffd4\022\uffd4\023\uffd4\024\uffd4\026\uffd4\027\uffd4\030\uffd4" +
    "\032\uffd4\051\uffd4\054\uffd4\055\uffd4\056\uffd4\057\uffd4\060" +
    "\uffd4\064\uffd4\001\002\000\046\007\uffd6\010\uffd6\011\uffd6" +
    "\015\uffd6\020\uffd6\021\uffd6\022\uffd6\023\uffd6\027\uffd6\030" +
    "\uffd6\032\uffd6\051\uffd6\054\uffd6\055\uffd6\056\uffd6\057\uffd6" +
    "\060\uffd6\064\uffd6\001\002\000\046\007\015\010\021\011" +
    "\022\015\072\020\102\021\064\022\075\023\056\027\074" +
    "\030\077\032\053\051\uffe6\054\066\055\052\056\076\057" +
    "\047\060\051\064\uffa6\001\002\000\004\051\202\001\002" +
    "\000\054\007\uffd5\010\uffd5\011\uffd5\015\uffd5\016\uffd5\020" +
    "\uffd5\021\uffd5\022\uffd5\023\uffd5\024\uffd5\026\uffd5\027\uffd5" +
    "\030\uffd5\032\uffd5\051\uffd5\054\uffd5\055\uffd5\056\uffd5\057" +
    "\uffd5\060\uffd5\064\uffd5\001\002\000\012\012\uffa1\013\uffa1" +
    "\047\uffa1\053\uffa1\001\002\000\030\030\077\041\125\042" +
    "\117\046\126\056\076\057\047\060\051\064\uffa6\065\123" +
    "\066\115\067\121\001\002\000\030\030\077\041\125\042" +
    "\117\046\126\056\076\057\047\060\051\064\uffa6\065\123" +
    "\066\115\067\121\001\002\000\030\030\077\041\125\042" +
    "\117\046\126\056\076\057\047\060\051\064\uffa6\065\123" +
    "\066\115\067\121\001\002\000\030\030\077\041\125\042" +
    "\117\046\126\056\076\057\047\060\051\064\uffa6\065\123" +
    "\066\115\067\121\001\002\000\030\030\077\041\125\042" +
    "\117\046\126\056\076\057\047\060\051\064\uffa6\065\123" +
    "\066\115\067\121\001\002\000\030\030\077\041\125\042" +
    "\117\046\126\056\076\057\047\060\051\064\uffa6\065\123" +
    "\066\115\067\121\001\002\000\014\012\uff9b\013\uff9b\041" +
    "\130\047\uff9b\053\uff9b\001\002\000\014\012\uff9a\013\uff9a" +
    "\041\130\047\uff9a\053\uff9a\001\002\000\014\012\uff9c\013" +
    "\uff9c\041\130\047\uff9c\053\uff9c\001\002\000\014\012\uff9d" +
    "\013\uff9d\041\130\047\uff9d\053\uff9d\001\002\000\014\012" +
    "\uff9e\013\uff9e\041\130\047\uff9e\053\uff9e\001\002\000\014" +
    "\012\uff99\013\uff99\041\130\047\uff99\053\uff99\001\002\000" +
    "\022\033\206\034\207\035\211\036\210\037\204\040\205" +
    "\041\130\047\131\001\002\000\006\013\157\047\222\001" +
    "\002\000\012\012\uff9f\013\uff9f\047\uff9f\053\uff9f\001\002" +
    "\000\004\053\uffd2\001\002\000\010\024\uffe9\026\uffe9\051" +
    "\uffe9\001\002\000\004\064\uffa7\001\002\000\004\070\227" +
    "\001\002\000\004\047\230\001\002\000\044\012\uff8e\013" +
    "\uff8e\025\uff8e\033\uff8e\034\uff8e\035\uff8e\036\uff8e\037\uff8e" +
    "\040\uff8e\041\uff8e\042\uff8e\043\uff8e\044\uff8e\045\uff8e\047" +
    "\uff8e\052\uff8e\053\uff8e\001\002\000\004\021\232\001\002" +
    "\000\004\046\233\001\002\000\032\014\154\030\077\041" +
    "\125\042\117\046\150\056\076\057\047\060\051\064\uffa6" +
    "\065\123\066\115\067\121\001\002\000\006\013\157\047" +
    "\235\001\002\000\004\053\236\001\002\000\052\007\uffcd" +
    "\010\uffcd\011\uffcd\015\uffcd\020\uffcd\021\uffcd\022\uffcd\023" +
    "\uffcd\024\uffcd\026\uffcd\027\uffcd\030\uffcd\032\uffcd\051\uffcd" +
    "\054\uffcd\055\uffcd\056\uffcd\057\uffcd\060\uffcd\064\uffcd\001" +
    "\002\000\006\041\130\053\240\001\002\000\010\024\uffe5" +
    "\026\uffe5\051\uffe5\001\002\000\054\007\uffc0\010\uffc0\011" +
    "\uffc0\015\uffc0\016\uffc0\020\uffc0\021\uffc0\022\uffc0\023\uffc0" +
    "\024\uffc0\026\uffc0\027\uffc0\030\uffc0\032\uffc0\051\uffc0\054" +
    "\uffc0\055\uffc0\056\uffc0\057\uffc0\060\uffc0\064\uffc0\001\002" +
    "\000\032\014\154\030\077\041\125\042\117\046\150\056" +
    "\076\057\047\060\051\064\uffa6\065\123\066\115\067\121" +
    "\001\002\000\006\013\157\047\244\001\002\000\030\007" +
    "\015\010\021\011\022\030\077\050\177\054\066\055\052" +
    "\056\076\057\047\060\051\064\uffa6\001\002\000\054\007" +
    "\uffca\010\uffca\011\uffca\015\uffca\016\uffca\020\uffca\021\uffca" +
    "\022\uffca\023\uffca\024\uffca\026\uffca\027\uffca\030\uffca\032" +
    "\uffca\051\uffca\054\uffca\055\uffca\056\uffca\057\uffca\060\uffca" +
    "\064\uffca\001\002\000\054\007\uffc8\010\uffc8\011\uffc8\015" +
    "\uffc8\016\250\020\uffc8\021\uffc8\022\uffc8\023\uffc8\024\uffc8" +
    "\026\uffc8\027\uffc8\030\uffc8\032\uffc8\051\uffc8\054\uffc8\055" +
    "\uffc8\056\uffc8\057\uffc8\060\uffc8\064\uffc8\001\002\000\052" +
    "\007\uffcc\010\uffcc\011\uffcc\015\uffcc\020\uffcc\021\uffcc\022" +
    "\uffcc\023\uffcc\024\uffcc\026\uffcc\027\uffcc\030\uffcc\032\uffcc" +
    "\051\uffcc\054\uffcc\055\uffcc\056\uffcc\057\uffcc\060\uffcc\064" +
    "\uffcc\001\002\000\032\007\015\010\021\011\022\015\252" +
    "\030\077\050\177\054\066\055\052\056\076\057\047\060" +
    "\051\064\uffa6\001\002\000\052\007\uffc9\010\uffc9\011\uffc9" +
    "\015\uffc9\020\uffc9\021\uffc9\022\uffc9\023\uffc9\024\uffc9\026" +
    "\uffc9\027\uffc9\030\uffc9\032\uffc9\051\uffc9\054\uffc9\055\uffc9" +
    "\056\uffc9\057\uffc9\060\uffc9\064\uffc9\001\002\000\004\046" +
    "\253\001\002\000\032\014\154\030\077\041\125\042\117" +
    "\046\150\056\076\057\047\060\051\064\uffa6\065\123\066" +
    "\115\067\121\001\002\000\006\013\157\047\255\001\002" +
    "\000\030\007\015\010\021\011\022\030\077\050\177\054" +
    "\066\055\052\056\076\057\047\060\051\064\uffa6\001\002" +
    "\000\054\007\uffcb\010\uffcb\011\uffcb\015\uffcb\016\uffcb\020" +
    "\uffcb\021\uffcb\022\uffcb\023\uffcb\024\uffcb\026\uffcb\027\uffcb" +
    "\030\uffcb\032\uffcb\051\uffcb\054\uffcb\055\uffcb\056\uffcb\057" +
    "\uffcb\060\uffcb\064\uffcb\001\002\000\026\030\077\046\270" +
    "\056\076\057\047\060\051\064\uffa6\065\265\066\260\067" +
    "\264\070\263\001\002\000\006\041\uff91\047\uff91\001\002" +
    "\000\006\041\uff94\047\uff94\001\002\000\006\041\274\047" +
    "\275\001\002\000\006\041\uff95\047\uff95\001\002\000\006" +
    "\041\uff90\047\uff90\001\002\000\006\041\uff92\047\uff92\001" +
    "\002\000\006\041\uff96\047\uff96\001\002\000\004\064\273" +
    "\001\002\000\030\030\077\041\125\042\117\046\126\056" +
    "\076\057\047\060\051\064\uffa6\065\123\066\115\067\121" +
    "\001\002\000\006\041\130\047\272\001\002\000\006\041" +
    "\uff8f\047\uff8f\001\002\000\006\041\uff93\047\uff93\001\002" +
    "\000\026\030\077\046\270\056\076\057\047\060\051\064" +
    "\uffa6\065\265\066\260\067\264\070\276\001\002\000\004" +
    "\053\uffbb\001\002\000\006\041\uff97\047\uff97\001\002\000" +
    "\006\041\uff98\047\uff98\001\002\000\004\061\171\001\002" +
    "\000\032\014\154\030\077\041\125\042\117\046\150\056" +
    "\076\057\047\060\051\064\uffa6\065\123\066\115\067\121" +
    "\001\002\000\006\013\157\047\303\001\002\000\030\007" +
    "\015\010\021\011\022\030\077\050\177\054\066\055\052" +
    "\056\076\057\047\060\051\064\uffa6\001\002\000\052\007" +
    "\uffd7\010\uffd7\011\uffd7\015\uffd7\020\uffd7\021\uffd7\022\uffd7" +
    "\023\uffd7\024\uffd7\026\uffd7\027\uffd7\030\uffd7\032\uffd7\051" +
    "\uffd7\054\uffd7\055\uffd7\056\uffd7\057\uffd7\060\uffd7\064\uffd7" +
    "\001\002\000\054\007\uffbe\010\uffbe\011\uffbe\015\uffbe\016" +
    "\uffbe\020\uffbe\021\uffbe\022\uffbe\023\uffbe\024\uffbe\026\uffbe" +
    "\027\uffbe\030\uffbe\032\uffbe\051\uffbe\054\uffbe\055\uffbe\056" +
    "\uffbe\057\uffbe\060\uffbe\064\uffbe\001\002\000\014\004\ufff5" +
    "\007\ufff5\010\ufff5\011\ufff5\051\ufff5\001\002\000\030\030" +
    "\077\041\125\042\117\046\126\056\076\057\047\060\051" +
    "\064\uffa6\065\123\066\115\067\121\001\002\000\006\041" +
    "\130\047\311\001\002\000\004\050\312\001\002\000\010" +
    "\024\uffc4\026\uffc4\051\uffc4\001\002\000\010\024\316\026" +
    "\315\051\uffc1\001\002\000\004\051\326\001\002\000\004" +
    "\025\323\001\002\000\030\030\077\041\125\042\117\046" +
    "\126\056\076\057\047\060\051\064\uffa6\065\123\066\115" +
    "\067\121\001\002\000\006\025\320\041\130\001\002\000" +
    "\052\007\uffc6\010\uffc6\011\uffc6\015\uffc6\020\uffc6\021\uffc6" +
    "\022\uffc6\023\uffc6\024\uffc6\026\uffc6\027\uffc6\030\uffc6\032" +
    "\uffc6\051\uffc6\054\uffc6\055\uffc6\056\uffc6\057\uffc6\060\uffc6" +
    "\064\uffc6\001\002\000\052\007\015\010\021\011\022\015" +
    "\072\020\102\021\064\022\075\023\056\024\uffe6\026\uffe6" +
    "\027\074\030\077\032\053\051\uffe6\054\066\055\052\056" +
    "\076\057\047\060\051\064\uffa6\001\002\000\010\024\uffc5" +
    "\026\uffc5\051\uffc5\001\002\000\046\007\uffc3\010\uffc3\011" +
    "\uffc3\015\uffc3\020\uffc3\021\uffc3\022\uffc3\023\uffc3\027\uffc3" +
    "\030\uffc3\032\uffc3\051\uffc3\054\uffc3\055\uffc3\056\uffc3\057" +
    "\uffc3\060\uffc3\064\uffc3\001\002\000\046\007\015\010\021" +
    "\011\022\015\072\020\102\021\064\022\075\023\056\027" +
    "\074\030\077\032\053\051\uffe6\054\066\055\052\056\076" +
    "\057\047\060\051\064\uffa6\001\002\000\004\051\uffc2\001" +
    "\002\000\052\007\uffc7\010\uffc7\011\uffc7\015\uffc7\020\uffc7" +
    "\021\uffc7\022\uffc7\023\uffc7\024\uffc7\026\uffc7\027\uffc7\030" +
    "\uffc7\032\uffc7\051\uffc7\054\uffc7\055\uffc7\056\uffc7\057\uffc7" +
    "\060\uffc7\064\uffc7\001\002\000\054\007\uffbf\010\uffbf\011" +
    "\uffbf\015\uffbf\016\uffbf\020\uffbf\021\uffbf\022\uffbf\023\uffbf" +
    "\024\uffbf\026\uffbf\027\uffbf\030\uffbf\032\uffbf\051\uffbf\054" +
    "\uffbf\055\uffbf\056\uffbf\057\uffbf\060\uffbf\064\uffbf\001\002" +
    "\000\010\024\uffe7\026\uffe7\051\uffe7\001\002\000\026\030" +
    "\077\046\270\056\076\057\047\060\051\064\uffa6\065\265" +
    "\066\260\067\264\070\263\001\002\000\006\041\274\047" +
    "\333\001\002\000\004\053\uffba\001\002\000\004\070\335" +
    "\001\002\000\004\047\336\001\002\000\044\012\uff8c\013" +
    "\uff8c\025\uff8c\033\uff8c\034\uff8c\035\uff8c\036\uff8c\037\uff8c" +
    "\040\uff8c\041\uff8c\042\uff8c\043\uff8c\044\uff8c\045\uff8c\047" +
    "\uff8c\052\uff8c\053\uff8c\001\002\000\054\007\uffbd\010\uffbd" +
    "\011\uffbd\015\uffbd\016\uffbd\020\uffbd\021\uffbd\022\uffbd\023" +
    "\uffbd\024\uffbd\026\uffbd\027\uffbd\030\uffbd\032\uffbd\051\uffbd" +
    "\054\uffbd\055\uffbd\056\uffbd\057\uffbd\060\uffbd\064\uffbd\001" +
    "\002\000\004\070\341\001\002\000\004\047\342\001\002" +
    "\000\044\012\uff8d\013\uff8d\025\uff8d\033\uff8d\034\uff8d\035" +
    "\uff8d\036\uff8d\037\uff8d\040\uff8d\041\uff8d\042\uff8d\043\uff8d" +
    "\044\uff8d\045\uff8d\047\uff8d\052\uff8d\053\uff8d\001\002\000" +
    "\004\046\344\001\002\000\012\007\015\010\021\011\022" +
    "\047\uffec\001\002\000\004\047\346\001\002\000\004\050" +
    "\347\001\002\000\046\007\ufff4\010\ufff4\011\ufff4\015\ufff4" +
    "\020\ufff4\021\ufff4\022\ufff4\023\ufff4\027\ufff4\030\ufff4\032" +
    "\ufff4\051\ufff4\054\ufff4\055\ufff4\056\ufff4\057\ufff4\060\ufff4" +
    "\064\ufff4\001\002\000\046\007\015\010\021\011\022\015" +
    "\072\020\102\021\064\022\075\023\056\027\074\030\077" +
    "\032\053\051\uffe6\054\066\055\052\056\076\057\047\060" +
    "\051\064\uffa6\001\002\000\004\051\352\001\002\000\014" +
    "\004\ufff3\007\ufff3\010\ufff3\011\ufff3\051\ufff3\001\002\000" +
    "\014\004\ufff7\007\ufff7\010\ufff7\011\ufff7\051\ufff7\001\002" +
    "\000\004\064\111\001\002\000\006\052\uffdf\053\uffdf\001" +
    "\002\000\006\052\357\053\uffe1\001\002\000\004\064\111" +
    "\001\002\000\006\052\uffe0\053\uffe0\001\002\000\004\002" +
    "\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\357\000\006\002\003\003\004\001\001\000\002\001" +
    "\001\000\004\004\006\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\060" +
    "\012\001\001\000\004\036\013\001\001\000\014\005\023" +
    "\006\024\010\016\027\015\042\022\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\063\353\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\007\026" +
    "\010\031\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\010\034\012\033" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\013" +
    "\036\001\001\000\002\001\001\000\004\010\040\001\001" +
    "\000\002\001\001\000\004\013\042\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\061\045\001\001\000\042" +
    "\010\016\011\064\021\047\030\067\031\054\032\077\033" +
    "\070\034\062\040\060\041\100\042\053\043\056\044\066" +
    "\045\057\047\061\054\072\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\016\011\123\014\236\015\121\016\113\017\117" +
    "\021\115\001\001\000\022\010\016\011\064\021\047\030" +
    "\175\037\230\042\053\047\061\054\072\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\042\010" +
    "\016\011\064\021\047\030\067\031\054\032\077\033\070" +
    "\034\062\040\223\041\100\042\053\043\056\044\066\045" +
    "\057\047\061\054\072\001\001\000\002\001\001\000\010" +
    "\010\105\011\103\051\104\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\065\106\001\001\000\004\056\107" +
    "\001\001\000\002\001\001\000\002\001\001\000\016\011" +
    "\123\014\112\015\121\016\113\017\117\021\115\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\011\123\016\144\017\117\021\115" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\011\123" +
    "\016\140\017\117\021\115\001\001\000\016\011\123\014" +
    "\126\015\121\016\113\017\117\021\115\001\001\000\002" +
    "\001\001\000\014\011\123\015\131\016\113\017\117\021" +
    "\115\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\011\123\016\137\017\117\021\115\001\001\000\012\011" +
    "\123\016\136\017\117\021\115\001\001\000\012\011\123" +
    "\016\135\017\117\021\115\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\014\011\123\015\143\016\113\017\117\021" +
    "\115\001\001\000\002\001\001\000\002\001\001\000\026" +
    "\011\123\014\152\015\121\016\113\017\117\021\115\023" +
    "\150\024\146\025\154\026\151\001\001\000\002\001\001" +
    "\000\026\011\123\014\217\015\121\016\113\017\117\021" +
    "\115\023\150\024\146\025\220\026\151\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\022\011" +
    "\123\014\152\015\121\016\113\017\117\021\115\023\202" +
    "\026\151\001\001\000\002\001\001\000\012\011\163\052" +
    "\162\053\165\054\164\001\001\000\024\011\123\014\152" +
    "\015\121\016\113\017\117\021\115\023\150\024\157\026" +
    "\151\001\001\000\002\001\001\000\022\011\123\014\152" +
    "\015\121\016\113\017\117\021\115\023\161\026\151\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\016\011\123\014\172\015\121\016\113" +
    "\017\117\021\115\001\001\000\002\001\001\000\002\001" +
    "\001\000\022\010\016\011\064\021\047\030\175\037\174" +
    "\042\053\047\061\054\072\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\064\177\001\001\000\042\010\016" +
    "\011\064\021\047\030\067\031\054\032\077\033\070\034" +
    "\062\040\200\041\100\042\053\043\056\044\066\045\057" +
    "\047\061\054\072\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\016\011\123\014\216\015\121" +
    "\016\113\017\117\021\115\001\001\000\016\011\123\014" +
    "\215\015\121\016\113\017\117\021\115\001\001\000\016" +
    "\011\123\014\214\015\121\016\113\017\117\021\115\001" +
    "\001\000\016\011\123\014\213\015\121\016\113\017\117" +
    "\021\115\001\001\000\016\011\123\014\212\015\121\016" +
    "\113\017\117\021\115\001\001\000\016\011\123\014\211" +
    "\015\121\016\113\017\117\021\115\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\026\011\123\014\152\015\121\016\113\017\117\021" +
    "\115\023\150\024\146\025\233\026\151\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\026\011\123" +
    "\014\152\015\121\016\113\017\117\021\115\023\150\024" +
    "\146\025\242\026\151\001\001\000\002\001\001\000\022" +
    "\010\016\011\064\021\047\030\175\037\244\042\053\047" +
    "\061\054\072\001\001\000\004\022\245\001\001\000\004" +
    "\035\246\001\001\000\002\001\001\000\022\010\016\011" +
    "\064\021\047\030\175\037\250\042\053\047\061\054\072" +
    "\001\001\000\002\001\001\000\002\001\001\000\026\011" +
    "\123\014\152\015\121\016\113\017\117\021\115\023\150" +
    "\024\146\025\253\026\151\001\001\000\002\001\001\000" +
    "\022\010\016\011\064\021\047\030\175\037\255\042\053" +
    "\047\061\054\072\001\001\000\002\001\001\000\012\011" +
    "\266\020\265\021\260\050\261\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\016\011\123\014\270\015\121\016\113\017" +
    "\117\021\115\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\011\266\020\276\021\260\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\026\011\123\014\152\015\121\016" +
    "\113\017\117\021\115\023\150\024\146\025\301\026\151" +
    "\001\001\000\002\001\001\000\022\010\016\011\064\021" +
    "\047\030\175\037\303\042\053\047\061\054\072\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\016\011\123\014\307\015\121\016\113\017\117\021\115" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\055" +
    "\312\001\001\000\004\046\313\001\001\000\002\001\001" +
    "\000\002\001\001\000\016\011\123\014\316\015\121\016" +
    "\113\017\117\021\115\001\001\000\002\001\001\000\004" +
    "\066\320\001\001\000\042\010\016\011\064\021\047\030" +
    "\067\031\054\032\077\033\070\034\062\040\321\041\100" +
    "\042\053\043\056\044\066\045\057\047\061\054\072\001" +
    "\001\000\002\001\001\000\004\067\323\001\001\000\042" +
    "\010\016\011\064\021\047\030\067\031\054\032\077\033" +
    "\070\034\062\040\324\041\100\042\053\043\056\044\066" +
    "\045\057\047\061\054\072\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\011\266\020\265\021\260\050\331\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\010\034\012\344\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\062\347\001\001\000\042\010\016\011\064" +
    "\021\047\030\067\031\054\032\077\033\070\034\062\040" +
    "\350\041\100\042\053\043\056\044\066\045\057\047\061" +
    "\054\072\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\056\354\057\355\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\056\357\001\001\000" +
    "\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$SintaxisJava$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$SintaxisJava$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$SintaxisJava$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    private Symbol s;
    private JavaSemantica java = new JavaSemantica();
    private TablaJava tabla;
    private List<VariableJava> variables;
    private MetodoJava actual;
    int ret = 4;
    int cas = 0;
    
    public void syntax_error(Symbol sym){
        System.out.println("\n" + sym.value + sym.sym);
        System.out.println("Error Sintactico en la letra: " + sym.value + "   <linea>: "  + (sym.right + 1) + "    <columna>: " + (sym.left + 1) + "\n");
    }

    public void unrecovered_syntax_error(Symbol sym) throws java.lang.Exception{
        System.out.println("\n" + sym.value + sym.sym);
        System.out.println("Error Sintactico en la letra: " + sym.value + "   <linea>: "  + (sym.right + 1) + "    <columna>: " + (sym.left + 1) + "\n");
    }

    public JavaSemantica getJava() {
            return java;
    }

    public Symbol getS(){
        return this.cur_token;
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$SintaxisJava$actions {
  private final SintaxisJava parser;

  /** Constructor */
  CUP$SintaxisJava$actions(SintaxisJava parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$SintaxisJava$do_action_part00000000(
    int                        CUP$SintaxisJava$act_num,
    java_cup.runtime.lr_parser CUP$SintaxisJava$parser,
    java.util.Stack            CUP$SintaxisJava$stack,
    int                        CUP$SintaxisJava$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$SintaxisJava$result;

      /* select the action based on the action number */
      switch (CUP$SintaxisJava$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= JAVA EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-1)).value;
		RESULT = start_val;
              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$SintaxisJava$parser.done_parsing();
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // JAVA ::= CLASSES 
            {
              Object RESULT =null;
		java.mostrarClases();
              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("JAVA",0, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // CLASSES ::= CLASSES CLASS 
            {
              Object RESULT =null;

              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("CLASSES",1, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // CLASSES ::= 
            {
              Object RESULT =null;

              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("CLASSES",1, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // NT$0 ::= 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-1)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-1)).value;
TablaJava sem = new TablaJava(e1); if(!java.agregarTabla(sem)){
                                syntax_error(getS()); }
                                tabla = sem; TablaJava.AMBITO += 1;
              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("NT$0",46, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // CLASS ::= publicc classs id llavea NT$0 STATEMENTS_CLASS llavec 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-2)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-4)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-4)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-4)).value;
		tabla.eliminarAmbito(TablaJava.AMBITO); TablaJava.AMBITO -= 1; 
                tabla.verificarConstructores(); tabla = null;
              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("CLASS",2, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-6)), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // STATEMENTS_CLASS ::= STATEMENTS_CLASS STATEMENT_CLASS 
            {
              List<Triplete> RESULT =null;

              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("STATEMENTS_CLASS",28, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // STATEMENTS_CLASS ::= 
            {
              List<Triplete> RESULT =null;
		
              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("STATEMENTS_CLASS",28, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // STATEMENT_CLASS ::= METODO 
            {
              List<Triplete> RESULT =null;

              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("STATEMENT_CLASS",21, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // STATEMENT_CLASS ::= CONSTRUCTOR 
            {
              List<Triplete> RESULT =null;

              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("STATEMENT_CLASS",21, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // STATEMENT_CLASS ::= DEF_VAR puntocoma 
            {
              List<Triplete> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-1)).right;
		List<Triplete> e1 = (List<Triplete>)((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-1)).value;
		tabla.getPrincipales().addAll(e1);
              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("STATEMENT_CLASS",21, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // NT$1 ::= 
            {
              Object RESULT =null;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-4)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-4)).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-4)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-2)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-2)).right;
		List<VariableJava> e3 = (List<VariableJava>)((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-2)).value;

                MetodoJava met = new MetodoJava(e2, 5, e3);
                actual = met;
                if(!tabla.addConstructor(met)){
                        syntax_error(getS());
                }
                        TablaJava.AMBITO += 1;
              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("NT$1",47, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // CONSTRUCTOR ::= publicc id para LIST_PAR parc llavea NT$1 STATEMENTS_METODO llavec 
            {
              Object RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-7)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-7)).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-7)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-5)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-5)).right;
		List<VariableJava> e3 = (List<VariableJava>)((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-5)).value;
		int e4left = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-1)).left;
		int e4right = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-1)).right;
		List<Triplete> e4 = (List<Triplete>)((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-1)).value;
		tabla.eliminarAmbito(TablaJava.AMBITO); TablaJava.AMBITO -= 1;
                actual.getTripletes().addAll(e4);
                actual = null;
                
              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("CONSTRUCTOR",4, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-8)), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // NT$2 ::= 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-5)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-5)).right;
		Integer e1 = (Integer)((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-5)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-4)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-4)).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-4)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-2)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-2)).right;
		List<VariableJava> e3 = (List<VariableJava>)((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-2)).value;
ret = e1;
                MetodoJava met = new MetodoJava(e2, e1, e3);
                actual = met;
                if(!tabla.addMetodo(met)){
                        syntax_error(getS());
                }
                        TablaJava.AMBITO += 1;
              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("NT$2",48, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // METODO ::= publicc TYPE_V id para LIST_PAR parc llavea NT$2 STATEMENTS_METODO llavec 
            {
              Object RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-2)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-8)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-8)).right;
		Integer e1 = (Integer)((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-8)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-7)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-7)).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-7)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-5)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-5)).right;
		List<VariableJava> e3 = (List<VariableJava>)((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-5)).value;
		int e4left = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-1)).left;
		int e4right = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-1)).right;
		List<Triplete> e4 = (List<Triplete>)((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-1)).value;
		tabla.eliminarAmbito(TablaJava.AMBITO); TablaJava.AMBITO -= 1;
                actual.getTripletes().addAll(e4);
                actual = null;
                
              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("METODO",3, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-9)), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // TYPE_V ::= voidd 
            {
              Integer RESULT =null;
		RESULT = TablaJava.VOID;
              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("TYPE_V",5, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // TYPE_V ::= TYPE 
            {
              Integer RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()).right;
		Integer e1 = (Integer)((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.peek()).value;
		RESULT = e1;
              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("TYPE_V",5, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // TYPE ::= intt 
            {
              Integer RESULT =null;
		RESULT = TablaJava.INT;
              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("TYPE",6, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // TYPE ::= floatt 
            {
              Integer RESULT =null;
		RESULT = TablaJava.FLOAT;
              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("TYPE",6, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // TYPE ::= charr 
            {
              Integer RESULT =null;
		RESULT = TablaJava.CHAR;
              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("TYPE",6, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // LIST_PAR ::= TYPE id LIST_PARR 
            {
              List<VariableJava> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-2)).right;
		Integer e1 = (Integer)((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-1)).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-1)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()).right;
		List<VariableJava> e3 = (List<VariableJava>)((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.peek()).value;
		tabla.getVariables().add(0, new VariableJava(e2, e1, TablaJava.AMBITO+1, null));
                e3.add(0, new VariableJava(e2, e1, TablaJava.AMBITO + 1, null)); RESULT = e3;
              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("LIST_PAR",8, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // LIST_PAR ::= 
            {
              List<VariableJava> RESULT =null;
		RESULT = new ArrayList<>();
              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("LIST_PAR",8, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // LIST_PARR ::= coma TYPE id LIST_PARR 
            {
              List<VariableJava> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-2)).right;
		Integer e1 = (Integer)((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-1)).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-1)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()).right;
		List<VariableJava> e3 = (List<VariableJava>)((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.peek()).value;
		tabla.getVariables().add(0, new VariableJava(e2, e1, TablaJava.AMBITO+1, null));
                e3.add(0, new VariableJava(e2, e1, TablaJava.AMBITO + 1, null)); RESULT = e3;
              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("LIST_PARR",9, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // LIST_PARR ::= 
            {
              List<VariableJava> RESULT =null;
		RESULT = new ArrayList<>();
              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("LIST_PARR",9, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // STATEMENTS_METODO ::= STATEMENT_METODO STATEMENTS_METODO 
            {
              List<Triplete> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-1)).right;
		List<Triplete> e1 = (List<Triplete>)((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()).right;
		List<Triplete> e2 = (List<Triplete>)((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.peek()).value;
		e1.addAll(e2); RESULT = e1;
              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("STATEMENTS_METODO",30, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // STATEMENTS_METODO ::= RETURN 
            {
              List<Triplete> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()).right;
		List<Triplete> e1 = (List<Triplete>)((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.peek()).value;
		RESULT = e1;
              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("STATEMENTS_METODO",30, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // STATEMENTS_METODO ::= breakk puntocoma 
            {
              List<Triplete> RESULT =null;
		if(cas==0){syntax_error(getS());} RESULT = new ArrayList<>();
              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("STATEMENTS_METODO",30, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // STATEMENTS_METODO ::= 
            {
              List<Triplete> RESULT =null;
		RESULT = new ArrayList<>();
              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("STATEMENTS_METODO",30, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // RETURN ::= returnn OPERACION_A puntocoma 
            {
              List<Triplete> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-1)).right;
		OperacionJava e1 = (OperacionJava)((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-1)).value;
		List<Triplete> tri = new ArrayList<>();
                        if(e1==null || e1.getTipo() != ret){syntax_error(getS()); RESULT = tri;}
                        else{tri.addAll(e1.mostrarTripletes()); tri.add(new Return(e1.getTriplete()));
                        RESULT = tri;}
              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("RETURN",33, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // STATEMENT_METODO ::= COMP_STATE 
            {
              List<Triplete> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()).right;
		List<Triplete> e1 = (List<Triplete>)((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.peek()).value;
		RESULT = e1;
              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("STATEMENT_METODO",31, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // STATEMENT_METODO ::= STATEMENT_LINE 
            {
              List<Triplete> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()).right;
		List<Triplete> e1 = (List<Triplete>)((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.peek()).value;
		RESULT = e1;
              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("STATEMENT_METODO",31, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // NT$3 ::= 
            {
              List<Triplete> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()).right;
		Integer e1 = (Integer)((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.peek()).value;
variables = new ArrayList<>();
              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("NT$3",49, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // DEF_VAR ::= TYPE NT$3 LIST_VAR 
            {
              List<Triplete> RESULT =null;
              // propagate RESULT from NT$3
                RESULT = (List<Triplete>) ((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-1)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-2)).right;
		Integer e1 = (Integer)((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()).right;
		List<VariableJava> e2 = (List<VariableJava>)((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.peek()).value;
		VariableJava.agregarTipo(variables, e1);
                        if(!tabla.addListVar(variables)){syntax_error(getS());} variables = new ArrayList<>();
                        RESULT = VariableJava.obtenerTripletes(e2, e1);
              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("DEF_VAR",32, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // LIST_VAR ::= LIST_VAR coma AS_VAR 
            {
              List<VariableJava> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-2)).right;
		List<VariableJava> e1 = (List<VariableJava>)((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()).right;
		VariableJava e2 = (VariableJava)((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.peek()).value;
		e1.add(e2); RESULT = e1;
              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("LIST_VAR",45, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // LIST_VAR ::= AS_VAR 
            {
              List<VariableJava> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()).right;
		VariableJava e1 = (VariableJava)((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.peek()).value;
		List<VariableJava> var = new ArrayList<>(); var.add(e1); RESULT = var;
              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("LIST_VAR",45, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // AS_VAR ::= id igual OPERACION_A 
            {
              VariableJava RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()).right;
		OperacionJava e2 = (OperacionJava)((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.peek()).value;
		variables.add(new VariableJava(e1, TablaJava.AMBITO, null));
        VariableJava var = new VariableJava(e1, TablaJava.AMBITO, new AsignarValor(new TerminalOperator(e1), e2.getTriplete(),null));
        var.getTripletes().addAll(e2.mostrarTripletes()); RESULT = var;
              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("AS_VAR",44, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // AS_VAR ::= id 
            {
              VariableJava RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.peek()).value;
		variables.add(new VariableJava(e1, TablaJava.AMBITO, null));
        RESULT = new VariableJava(e1, TablaJava.AMBITO, new AsignarValor(new TerminalOperator(e1), null, null));
              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("AS_VAR",44, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // COMP_STATE ::= WHILE 
            {
              List<Triplete> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()).right;
		List<Triplete> e1 = (List<Triplete>)((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.peek()).value;
		RESULT = e1;
              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("COMP_STATE",34, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // COMP_STATE ::= FOR 
            {
              List<Triplete> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()).right;
		List<Triplete> e1 = (List<Triplete>)((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.peek()).value;
		RESULT = e1;
              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("COMP_STATE",34, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // COMP_STATE ::= DO_WHILE 
            {
              List<Triplete> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()).right;
		List<Triplete> e1 = (List<Triplete>)((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.peek()).value;
		RESULT = e1;
              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("COMP_STATE",34, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // COMP_STATE ::= IF_ELSE 
            {
              List<Triplete> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()).right;
		List<Triplete> e1 = (List<Triplete>)((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.peek()).value;
		RESULT = e1;
              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("COMP_STATE",34, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // COMP_STATE ::= SWITCH 
            {
              List<Triplete> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()).right;
		List<Triplete> e1 = (List<Triplete>)((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.peek()).value;
		RESULT = e1;
              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("COMP_STATE",34, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // WHILE ::= whilee para CONDICION parc BLOQUE 
            {
              List<Triplete> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-2)).right;
		CondicionPrograma e1 = (CondicionPrograma)((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()).right;
		List<Triplete> e2 = (List<Triplete>)((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.peek()).value;
		RESULT = Else_Operator.WHILE(e1, e2);
              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("WHILE",23, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-4)), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // NT$4 ::= 
            {
              List<Triplete> RESULT =null;
TablaJava.AMBITO += 1;
              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("NT$4",50, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // BLOQUE ::= llavea NT$4 STATEMENTS_METODO llavec 
            {
              List<Triplete> RESULT =null;
              // propagate RESULT from NT$4
                RESULT = (List<Triplete>) ((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-2)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-1)).right;
		List<Triplete> e1 = (List<Triplete>)((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-1)).value;
		tabla.eliminarAmbito(TablaJava.AMBITO); TablaJava.AMBITO -= 1;
                                                RESULT = e1;
              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("BLOQUE",29, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // BLOQUE ::= STATEMENT_LINE 
            {
              List<Triplete> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()).right;
		List<Triplete> e1 = (List<Triplete>)((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.peek()).value;
		RESULT = e1;
              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("BLOQUE",29, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // FOR ::= forr para INICIO puntocoma CONDICION puntocoma STEP parc BLOQUE 
            {
              List<Triplete> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-6)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-6)).right;
		List<Triplete> e1 = (List<Triplete>)((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-6)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-4)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-4)).right;
		CondicionPrograma e2 = (CondicionPrograma)((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-4)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-2)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-2)).right;
		List<Triplete> e3 = (List<Triplete>)((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-2)).value;
		int e4left = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()).left;
		int e4right = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()).right;
		List<Triplete> e4 = (List<Triplete>)((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.peek()).value;
		RESULT = Else_Operator.FOR(e1, e3, e2, e4);
              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("FOR",24, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-8)), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // INICIO ::= THIS id 
            {
              List<Triplete> RESULT =null;
		int e0left = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-1)).left;
		int e0right = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-1)).right;
		Boolean e0 = (Boolean)((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-1)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.peek()).value;
		List<Triplete> tri = new ArrayList<>();
                        int num; if(e0){num = tabla.existeVarGlobal(new VariableJava(e1, TablaJava.AMBITO, null));}
                        else {num = tabla.existeVar(new VariableJava(e1, TablaJava.AMBITO, null));}
                        if(num == -1){syntax_error(getS());}
                        RESULT = new ArrayList<>();
              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("INICIO",39, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // NT$5 ::= 
            {
              List<Triplete> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()).right;
		Integer e1 = (Integer)((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.peek()).value;
TablaJava.AMBITO += 1; variables = new ArrayList<>();
              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("NT$5",51, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // INICIO ::= TYPE NT$5 AS_VAR 
            {
              List<Triplete> RESULT =null;
              // propagate RESULT from NT$5
                RESULT = (List<Triplete>) ((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-1)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-2)).right;
		Integer e1 = (Integer)((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()).right;
		VariableJava e2 = (VariableJava)((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.peek()).value;
		 List<Triplete> tri = new ArrayList<>();
                if(!tabla.addListVar(variables)){syntax_error(getS());} TablaJava.AMBITO -= 1;
                ((AsignarValor) e2.getTriplete()).setTipo(OperacionJava.obtenerTipo(e1));
                tri.addAll(e2.mostrarTripletes()); RESULT = tri;
              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("INICIO",39, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // STEP ::= AS_VAR_LINE 
            {
              List<Triplete> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()).right;
		List<Triplete> e1 = (List<Triplete>)((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.peek()).value;
		RESULT = e1;
              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("STEP",40, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // STEP ::= OP_VAR 
            {
              List<Triplete> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()).right;
		List<Triplete> e1 = (List<Triplete>)((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.peek()).value;
		RESULT = e1;
              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("STEP",40, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // DO_WHILE ::= doo BLOQUE whilee para CONDICION parc puntocoma 
            {
              List<Triplete> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-5)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-5)).right;
		List<Triplete> e1 = (List<Triplete>)((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-5)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-2)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-2)).right;
		CondicionPrograma e2 = (CondicionPrograma)((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-2)).value;
		RESULT = Else_Operator.DOWHILE(e2, e1);
              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("DO_WHILE",25, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-6)), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // IF_ELSE ::= iff para CONDICION parc BLOQUE ELSEIF ELSE 
            {
              List<Triplete> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-4)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-4)).right;
		CondicionPrograma e1 = (CondicionPrograma)((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-4)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-2)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-2)).right;
		List<Triplete> e2 = (List<Triplete>)((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-2)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-1)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-1)).right;
		Else_Operator e3 = (Else_Operator)((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-1)).value;
		int e4left = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()).left;
		int e4right = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()).right;
		List<Triplete> e4 = (List<Triplete>)((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.peek()).value;
		e3.agregarIf(e1, e2); RESULT = e3.juntarTripletes(e4);
              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("IF_ELSE",26, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-6)), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // ELSEIF ::= ELSEIF elsee iff para CONDICION parc BLOQUE 
            {
              Else_Operator RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-6)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-6)).right;
		Else_Operator e1 = (Else_Operator)((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-6)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-2)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-2)).right;
		CondicionPrograma e2 = (CondicionPrograma)((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-2)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()).right;
		List<Triplete> e3 = (List<Triplete>)((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.peek()).value;
		RESULT = e1.agregarElseIf(e2, e3);
              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("ELSEIF",16, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-6)), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // ELSEIF ::= 
            {
              Else_Operator RESULT =null;
		RESULT = new Else_Operator();
              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("ELSEIF",16, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // ELSE ::= elsee BLOQUE 
            {
              List<Triplete> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()).right;
		List<Triplete> e1 = (List<Triplete>)((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.peek()).value;
		RESULT = e1;
              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("ELSE",27, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // ELSE ::= 
            {
              List<Triplete> RESULT =null;
		RESULT = null;
              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("ELSE",27, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // SWITCH ::= switchh para OPERACION_A parc llavea CASES DEFAULT llavec 
            {
              List<Triplete> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-5)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-5)).right;
		OperacionJava e1 = (OperacionJava)((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-5)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-2)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-2)).right;
		CasePrograma e2 = (CasePrograma)((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-2)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-1)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-1)).right;
		List<Triplete> e3 = (List<Triplete>)((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-1)).value;
		RESULT = e2.agregarDefault(e1, e3);
              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("SWITCH",35, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-7)), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // NT$6 ::= 
            {
              CasePrograma RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-3)).right;
		CasePrograma e1 = (CasePrograma)((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-1)).right;
		OperacionJava e2 = (OperacionJava)((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-1)).value;
cas++;
              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("NT$6",52, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // CASES ::= CASES casee OPERACION_A dosp NT$6 STATEMENTS_METODO 
            {
              CasePrograma RESULT =null;
              // propagate RESULT from NT$6
                RESULT = (CasePrograma) ((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-1)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-6)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-6)).right;
		CasePrograma e1 = (CasePrograma)((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-6)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-4)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-4)).right;
		OperacionJava e2 = (OperacionJava)((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-4)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-1)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-1)).right;
		List<Triplete> e3 = (List<Triplete>)((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-1)).value;
		cas--;if(e2!=null){RESULT  = e1.agregarCase(e2, e3);}
              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("CASES",43, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-5)), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // CASES ::= 
            {
              CasePrograma RESULT =null;
		RESULT = new CasePrograma();
              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("CASES",43, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // NT$7 ::= 
            {
              List<Triplete> RESULT =null;
cas++;
              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("NT$7",53, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // DEFAULT ::= defaultt dosp NT$7 STATEMENTS_METODO 
            {
              List<Triplete> RESULT =null;
              // propagate RESULT from NT$7
                RESULT = (List<Triplete>) ((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-1)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()).right;
		List<Triplete> e1 = (List<Triplete>)((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.peek()).value;
		cas--;
                RESULT = e1;
              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("DEFAULT",36, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // DEFAULT ::= 
            {
              List<Triplete> RESULT =null;
		RESULT = new ArrayList<>();
              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("DEFAULT",36, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // STATEMENT_LINE ::= AS_VAR_LINE puntocoma 
            {
              List<Triplete> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-1)).right;
		List<Triplete> e1 = (List<Triplete>)((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-1)).value;
		RESULT = e1;
              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("STATEMENT_LINE",22, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // STATEMENT_LINE ::= DEF_VAR puntocoma 
            {
              List<Triplete> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-1)).right;
		List<Triplete> e1 = (List<Triplete>)((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-1)).value;
		RESULT = e1;
              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("STATEMENT_LINE",22, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // STATEMENT_LINE ::= WRITE puntocoma 
            {
              List<Triplete> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-1)).right;
		List<Triplete> e1 = (List<Triplete>)((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-1)).value;
		RESULT = e1;
              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("STATEMENT_LINE",22, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // STATEMENT_LINE ::= INPUT puntocoma 
            {
              List<Triplete> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-1)).right;
		OperacionJava e1 = (OperacionJava)((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-1)).value;
		AsignarValor vl = new AsignarValor(new AsignarTemporal(null, null, OperacionJava.obtenerTipo(e1)),null
                ,OperacionJava.obtenerTipo(e1)); 
                List<Triplete> tri = new ArrayList<>(); tri.add(vl); 
                tri.add(new AsignarValor(vl.getOperando1(), e1.getTriplete(), null)); RESULT = tri;
              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("STATEMENT_LINE",22, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // AS_VAR_LINE ::= THIS id igual OPERACION_A 
            {
              List<Triplete> RESULT =null;
		int e0left = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-3)).left;
		int e0right = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-3)).right;
		Boolean e0 = (Boolean)((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-3)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()).right;
		OperacionJava e2 = (OperacionJava)((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.peek()).value;
		 List<Triplete> tri = new ArrayList<>();
                        int num = tabla.existeVar(new VariableJava(e1, TablaJava.AMBITO, null)); 
                        if(num==-1 || num<e2.getTipo()){syntax_error(getS());}
                        else{tri.addAll(e2.mostrarTripletes());
                        tri.add(new AsignarValor(new TerminalOperator(e1), e2.getTriplete(), null));}
                        RESULT = tri;
              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("AS_VAR_LINE",42, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // WRITE ::= println para STRING parc 
            {
              List<Triplete> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-1)).right;
		List<Triplete> e1 = (List<Triplete>)((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-1)).value;
		e1.add(new Printf("\\n")); RESULT = e1;
              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("WRITE",37, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // WRITE ::= print para STRING parc 
            {
              List<Triplete> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-1)).right;
		List<Triplete> e1 = (List<Triplete>)((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-1)).value;
		RESULT = e1;
              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("WRITE",37, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // OP_VAR ::= THIS id masmas 
            {
              List<Triplete> RESULT =null;
		int e0left = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-2)).left;
		int e0right = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-2)).right;
		Boolean e0 = (Boolean)((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-2)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-1)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-1)).value;
		 List<Triplete> tri = new ArrayList<>();
                        int num; if(e0){num = tabla.existeVarGlobal(new VariableJava(e1, TablaJava.AMBITO, null));}
                        else {num = tabla.existeVar(new VariableJava(e1, TablaJava.AMBITO, null));}
                        if(num == -1){syntax_error(getS());}else{
                                SumOperator sum = new SumOperator(null, new TerminalOperator(e1), new TerminalOperator("1"), OperacionJava.obtenerTipo(num));
                                tri.add(sum); tri.add(new AsignarValor(new TerminalOperator(e1), sum, null));}
                                RESULT = tri;
              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("OP_VAR",41, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // OP_VAR ::= THIS id menosmenos 
            {
              List<Triplete> RESULT =null;
		int e0left = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-2)).left;
		int e0right = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-2)).right;
		Boolean e0 = (Boolean)((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-2)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-1)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-1)).value;
		 List<Triplete> tri = new ArrayList<>();
                        int num; if(e0){num = tabla.existeVarGlobal(new VariableJava(e1, TablaJava.AMBITO, null));}
                        else {num = tabla.existeVar(new VariableJava(e1, TablaJava.AMBITO, null));}
                        if(num == -1){syntax_error(getS());}else{
                                RestOperator rest = new RestOperator(null, new TerminalOperator(e1), new TerminalOperator("1"), OperacionJava.obtenerTipo(num));
                                tri.add(rest); tri.add(new AsignarValor(new TerminalOperator(e1), rest, null));}
                                RESULT = tri;
              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("OP_VAR",41, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // OPERACION_A ::= OPERACION_A mas OPERACION_M 
            {
              OperacionJava RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-2)).right;
		OperacionJava e1 = (OperacionJava)((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()).right;
		OperacionJava e2 = (OperacionJava)((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.peek()).value;
		if(e1!=null&&e2!=null){
                        RESULT = new OperacionJava(e1, e2,
                        new SumOperator(null, e1.getTriplete(), e2.getTriplete(), OperacionJava.obtenerTipo(e1, e2)));}
              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("OPERACION_A",10, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // OPERACION_A ::= OPERACION_M menos OPERACION_M 
            {
              OperacionJava RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-2)).right;
		OperacionJava e1 = (OperacionJava)((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()).right;
		OperacionJava e2 = (OperacionJava)((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.peek()).value;
		if(e1!=null&&e2!=null){
                        RESULT = new OperacionJava(e1, e2,
                        new RestOperator(null, e1.getTriplete(), e2.getTriplete(), OperacionJava.obtenerTipo(e1, e2)));}
              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("OPERACION_A",10, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // OPERACION_A ::= OPERACION_M 
            {
              OperacionJava RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()).right;
		OperacionJava e1 = (OperacionJava)((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.peek()).value;
		RESULT = e1;
              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("OPERACION_A",10, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // OPERACION_M ::= OPERACION_M por OPERACION_U 
            {
              OperacionJava RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-2)).right;
		OperacionJava e1 = (OperacionJava)((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()).right;
		OperacionJava e2 = (OperacionJava)((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.peek()).value;
		if(e1!=null&&e2!=null){
                                RESULT = new OperacionJava(e1, e2,
                                new PorOperator(null, e1.getTriplete(), e2.getTriplete(), OperacionJava.obtenerTipo(e1, e2)));}
              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("OPERACION_M",11, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // OPERACION_M ::= OPERACION_M div OPERACION_U 
            {
              OperacionJava RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-2)).right;
		OperacionJava e1 = (OperacionJava)((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()).right;
		OperacionJava e2 = (OperacionJava)((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.peek()).value;
		if(e1!=null&&e2!=null){
                                RESULT = new OperacionJava(e1, e2,
                                new DivOperator(null, e1.getTriplete(), e2.getTriplete(), OperacionJava.obtenerTipo(e1, e2)));}
              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("OPERACION_M",11, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // OPERACION_M ::= OPERACION_M mod OPERACION_U 
            {
              OperacionJava RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-2)).right;
		OperacionJava e1 = (OperacionJava)((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()).right;
		OperacionJava e2 = (OperacionJava)((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.peek()).value;
		if(e1!=null&&e2!=null){
                                RESULT = new OperacionJava(e1, e2,
                               new ModOperator(null, e1.getTriplete(), e2.getTriplete(), OperacionJava.obtenerTipo(e1, e2)));}
              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("OPERACION_M",11, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // OPERACION_M ::= OPERACION_U 
            {
              OperacionJava RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()).right;
		OperacionJava e1 = (OperacionJava)((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.peek()).value;
		RESULT = e1;
              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("OPERACION_M",11, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // OPERACION_U ::= menos OPERACION_U 
            {
              OperacionJava RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()).right;
		OperacionJava e1 = (OperacionJava)((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.peek()).value;
		RESULT = new OperacionJava(new OperacionJava(TablaJava.INT, new TerminalOperator("0")),
                        e1, new RestOperator(null, new TerminalOperator("0"), e1.getTriplete(), OperacionJava.obtenerTipo(e1)));
              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("OPERACION_U",12, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // OPERACION_U ::= mas OPERACION_U 
            {
              OperacionJava RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()).right;
		OperacionJava e1 = (OperacionJava)((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.peek()).value;
		RESULT = e1;
              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("OPERACION_U",12, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // OPERACION_U ::= ATOM 
            {
              OperacionJava RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()).right;
		OperacionJava e1 = (OperacionJava)((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.peek()).value;
		RESULT = e1;
              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("OPERACION_U",12, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // ATOM ::= THIS id 
            {
              OperacionJava RESULT =null;
		int e0left = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-1)).left;
		int e0right = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-1)).right;
		Boolean e0 = (Boolean)((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-1)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.peek()).value;
		int num; if(e0){num = tabla.existeVarGlobal(new VariableJava(e1, TablaJava.AMBITO, null));}
                        else {num = tabla.existeVar(new VariableJava(e1, TablaJava.AMBITO, null));}
                        if(num == -1){syntax_error(getS());}else{RESULT = new OperacionJava(num, new TerminalOperator(e1));}
              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("ATOM",13, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // ATOM ::= entero 
            {
              OperacionJava RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.peek()).value;
		RESULT = new OperacionJava(TablaJava.INT, new TerminalOperator(e1));
              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("ATOM",13, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // ATOM ::= decimal 
            {
              OperacionJava RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.peek()).value;
		RESULT = new OperacionJava(TablaJava.FLOAT, new TerminalOperator(e1));
              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("ATOM",13, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // ATOM ::= character 
            {
              OperacionJava RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.peek()).value;
		RESULT = new OperacionJava(TablaJava.CHAR, new TerminalOperator(e1));
              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("ATOM",13, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // ATOM ::= para OPERACION_A parc 
            {
              OperacionJava RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-1)).right;
		OperacionJava e1 = (OperacionJava)((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-1)).value;
		RESULT = e1;
              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("ATOM",13, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // ATOM ::= INPUT 
            {
              OperacionJava RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()).right;
		OperacionJava e1 = (OperacionJava)((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.peek()).value;
		RESULT = e1;
              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("ATOM",13, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // THIS ::= thiss punto 
            {
              Boolean RESULT =null;
		RESULT = true;
              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("THIS",7, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // THIS ::= 
            {
              Boolean RESULT =null;
		RESULT = false;
              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("THIS",7, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // CONDICION ::= CONDICION orr AND 
            {
              CondicionPrograma RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-2)).right;
		CondicionPrograma e1 = (CondicionPrograma)((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()).right;
		CondicionPrograma e2 = (CondicionPrograma)((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.peek()).value;
		RESULT = IfPrograma.OR(e1, e2);
              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("CONDICION",19, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // CONDICION ::= AND 
            {
              CondicionPrograma RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()).right;
		CondicionPrograma e1 = (CondicionPrograma)((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.peek()).value;
		RESULT = e1;
              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("CONDICION",19, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // AND ::= AND andd NOT 
            {
              CondicionPrograma RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-2)).right;
		CondicionPrograma e1 = (CondicionPrograma)((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()).right;
		CondicionPrograma e2 = (CondicionPrograma)((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.peek()).value;
		RESULT = IfPrograma.AND(e1, e2);
              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("AND",18, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // AND ::= NOT 
            {
              CondicionPrograma RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()).right;
		CondicionPrograma e1 = (CondicionPrograma)((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.peek()).value;
		RESULT = e1;
              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("AND",18, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // NOT ::= nott NOT 
            {
              CondicionPrograma RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()).right;
		CondicionPrograma e1 = (CondicionPrograma)((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.peek()).value;
		RESULT = IfPrograma.NOT(e1);
              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("NOT",17, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // NOT ::= COMPARACION 
            {
              CondicionPrograma RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()).right;
		Triplete e1 = (Triplete)((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.peek()).value;
		RESULT = new IfPrograma(new If_Operator(e1, new Etiqueta()), ((CondicionalOperator)e1).getTripletes());
              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("NOT",17, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // NOT ::= para CONDICION parc 
            {
              CondicionPrograma RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-1)).right;
		CondicionPrograma e1 = (CondicionPrograma)((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-1)).value;
		RESULT = e1;
              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("NOT",17, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // COMPARACION ::= OPERACION_A igig OPERACION_A 
            {
              Triplete RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-2)).right;
		OperacionJava e1 = (OperacionJava)((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()).right;
		OperacionJava e2 = (OperacionJava)((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.peek()).value;
		RESULT = new IgualOperator(e1.getTriplete(), e2.getTriplete(),
                e1.getTripletes(), e2.getTripletes());
              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("COMPARACION",20, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // COMPARACION ::= OPERACION_A noigual OPERACION_A 
            {
              Triplete RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-2)).right;
		OperacionJava e1 = (OperacionJava)((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()).right;
		OperacionJava e2 = (OperacionJava)((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.peek()).value;
		RESULT = new NoIgualOperator(e1.getTriplete(), e2.getTriplete(),
                e1.getTripletes(), e2.getTripletes());
              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("COMPARACION",20, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // COMPARACION ::= OPERACION_A menor OPERACION_A 
            {
              Triplete RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-2)).right;
		OperacionJava e1 = (OperacionJava)((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()).right;
		OperacionJava e2 = (OperacionJava)((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.peek()).value;
		RESULT = new MenorOperator(e1.getTriplete(), e2.getTriplete(),
                e1.getTripletes(), e2.getTripletes());
              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("COMPARACION",20, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // COMPARACION ::= OPERACION_A menorig OPERACION_A 
            {
              Triplete RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-2)).right;
		OperacionJava e1 = (OperacionJava)((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()).right;
		OperacionJava e2 = (OperacionJava)((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.peek()).value;
		RESULT = new MenorIgOperator(e1.getTriplete(), e2.getTriplete(),
                e1.getTripletes(), e2.getTripletes());
              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("COMPARACION",20, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // COMPARACION ::= OPERACION_A mayor OPERACION_A 
            {
              Triplete RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-2)).right;
		OperacionJava e1 = (OperacionJava)((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()).right;
		OperacionJava e2 = (OperacionJava)((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.peek()).value;
		RESULT = new MayorOperator(e1.getTriplete(), e2.getTriplete(),
                e1.getTripletes(), e2.getTripletes());
              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("COMPARACION",20, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // COMPARACION ::= OPERACION_A mayorig OPERACION_A 
            {
              Triplete RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-2)).right;
		OperacionJava e1 = (OperacionJava)((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()).right;
		OperacionJava e2 = (OperacionJava)((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.peek()).value;
		RESULT = new MayorIgOperator(e1.getTriplete(), e2.getTriplete(),
                e1.getTripletes(), e2.getTripletes());
              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("COMPARACION",20, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // STRING ::= STRING mas EXPR 
            {
              List<Triplete> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-2)).right;
		List<Triplete> e1 = (List<Triplete>)((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()).right;
		OperacionJava e2 = (OperacionJava)((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.peek()).value;
		e1.addAll(e2.getTripletes()); e1.add(new Printf(Input.tipoJAVA(e2), e2.getTriplete())); RESULT = e1;
              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("STRING",38, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // STRING ::= STRING mas string 
            {
              List<Triplete> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-2)).right;
		List<Triplete> e1 = (List<Triplete>)((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.peek()).value;
		e1.add(new Printf(e2)); RESULT = e1;
              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("STRING",38, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // STRING ::= EXPR 
            {
              List<Triplete> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()).right;
		OperacionJava e1 = (OperacionJava)((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.peek()).value;
		List<Triplete> tri = new ArrayList<>(); tri.addAll(e1.getTripletes());
                tri.add(new Printf(Input.tipoJAVA(e1), e1.getTriplete()));
                RESULT = tri;
              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("STRING",38, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // STRING ::= string 
            {
              List<Triplete> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.peek()).value;
		List<Triplete> tri = new ArrayList<>(); tri.add(new Printf(e1));
                RESULT = tri;
              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("STRING",38, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // EXPR ::= INPUT 
            {
              OperacionJava RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()).right;
		OperacionJava e1 = (OperacionJava)((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.peek()).value;
		RESULT = e1;
              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("EXPR",14, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // EXPR ::= THIS id 
            {
              OperacionJava RESULT =null;
		int e0left = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-1)).left;
		int e0right = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-1)).right;
		Boolean e0 = (Boolean)((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-1)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.peek()).value;
		int num; if(e0){num = tabla.existeVarGlobal(new VariableJava(e1, TablaJava.AMBITO, null));}
                        else {num = tabla.existeVar(new VariableJava(e1, TablaJava.AMBITO, null));}
                        if(num == -1){syntax_error(getS());}else{RESULT = new OperacionJava(num, new TerminalOperator(e1));}
              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("EXPR",14, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // EXPR ::= entero 
            {
              OperacionJava RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.peek()).value;
		RESULT = new OperacionJava(TablaJava.INT, new TerminalOperator(e1));
              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("EXPR",14, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // EXPR ::= decimal 
            {
              OperacionJava RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.peek()).value;
		RESULT = new OperacionJava(TablaJava.FLOAT, new TerminalOperator(e1));
              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("EXPR",14, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // EXPR ::= character 
            {
              OperacionJava RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.peek()).value;
		RESULT = new OperacionJava(TablaJava.CHAR, new TerminalOperator(e1));
              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("EXPR",14, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // EXPR ::= para OPERACION_A parc 
            {
              OperacionJava RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-1)).right;
		OperacionJava e1 = (OperacionJava)((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-1)).value;
		RESULT = e1;
              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("EXPR",14, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // INPUT ::= charinput para string parc 
            {
              OperacionJava RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-1)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-1)).value;
		OperacionJava op = new OperacionJava(TablaJava.CHAR,
                                new Input("%c"));
                                op.getTripletes().add(new Printf(e1));
                                RESULT = op;
              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("INPUT",15, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // INPUT ::= intinput para string parc 
            {
              OperacionJava RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-1)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-1)).value;
		OperacionJava op = new OperacionJava(TablaJava.INT,
                                new Input("%d"));
                                op.getTripletes().add(new Printf(e1));
                                RESULT = op;
              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("INPUT",15, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // INPUT ::= floatinput para string parc 
            {
              OperacionJava RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-1)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-1)).value;
		OperacionJava op = new OperacionJava(TablaJava.FLOAT,
                                new Input("%f"));
                                op.getTripletes().add(new Printf(e1));
                                RESULT = op;
              CUP$SintaxisJava$result = parser.getSymbolFactory().newSymbol("INPUT",15, ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.elementAt(CUP$SintaxisJava$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxisJava$stack.peek()), RESULT);
            }
          return CUP$SintaxisJava$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$SintaxisJava$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$SintaxisJava$do_action(
    int                        CUP$SintaxisJava$act_num,
    java_cup.runtime.lr_parser CUP$SintaxisJava$parser,
    java.util.Stack            CUP$SintaxisJava$stack,
    int                        CUP$SintaxisJava$top)
    throws java.lang.Exception
    {
              return CUP$SintaxisJava$do_action_part00000000(
                               CUP$SintaxisJava$act_num,
                               CUP$SintaxisJava$parser,
                               CUP$SintaxisJava$stack,
                               CUP$SintaxisJava$top);
    }
}

}
