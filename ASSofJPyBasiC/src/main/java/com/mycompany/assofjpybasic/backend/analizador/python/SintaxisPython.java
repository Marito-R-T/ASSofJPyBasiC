
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package com.mycompany.assofjpybasic.backend.analizador.python;

import java_cup.runtime.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class SintaxisPython extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return SintaxisPythonSym.class;
}

  /** Default constructor. */
  @Deprecated
  public SintaxisPython() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public SintaxisPython(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public SintaxisPython(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\136\000\002\002\004\000\002\002\004\000\002\002" +
    "\003\000\002\003\003\000\002\003\002\000\002\004\004" +
    "\000\002\004\003\000\002\043\011\000\002\043\010\000" +
    "\002\044\005\000\002\044\003\000\002\045\005\000\002" +
    "\045\005\000\002\045\003\000\002\005\004\000\002\005" +
    "\006\000\002\006\005\000\002\006\004\000\002\007\003" +
    "\000\002\007\002\000\002\010\003\000\002\010\003\000" +
    "\002\010\003\000\002\011\007\000\002\011\005\000\002" +
    "\012\005\000\002\012\003\000\002\013\005\000\002\013" +
    "\003\000\002\014\003\000\002\014\003\000\002\014\003" +
    "\000\002\015\006\000\002\016\003\000\002\016\003\000" +
    "\002\016\003\000\002\017\005\000\002\017\005\000\002" +
    "\017\005\000\002\017\005\000\002\017\005\000\002\017" +
    "\005\000\002\017\005\000\002\020\004\000\002\020\003" +
    "\000\002\040\003\000\002\040\003\000\002\040\003\000" +
    "\002\040\004\000\002\021\010\000\002\022\007\000\002" +
    "\022\002\000\002\023\005\000\002\023\002\000\002\024" +
    "\007\000\002\025\003\000\002\025\002\000\002\026\012" +
    "\000\002\027\006\000\002\027\010\000\002\027\012\000" +
    "\002\030\005\000\002\030\005\000\002\030\003\000\002" +
    "\031\005\000\002\031\005\000\002\031\005\000\002\031" +
    "\005\000\002\031\003\000\002\032\004\000\002\032\004" +
    "\000\002\032\003\000\002\033\005\000\002\033\003\000" +
    "\002\034\003\000\002\034\003\000\002\034\003\000\002" +
    "\035\005\000\002\035\003\000\002\036\005\000\002\036" +
    "\003\000\002\037\004\000\002\037\003\000\002\041\005" +
    "\000\002\041\005\000\002\041\005\000\002\041\005\000" +
    "\002\041\005\000\002\041\005\000\002\041\003\000\002" +
    "\042\005\000\002\042\005\000\002\042\003\000\002\042" +
    "\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\253\000\010\002\ufffd\004\ufffd\070\004\001\002\000" +
    "\006\002\ufffe\004\ufffe\001\002\000\004\002\255\001\002" +
    "\000\006\002\uffff\004\007\001\002\000\004\061\013\001" +
    "\002\000\006\002\ufffb\004\ufffb\001\002\000\006\002\000" +
    "\004\007\001\002\000\006\002\ufffc\004\ufffc\001\002\000" +
    "\004\037\014\001\002\000\006\040\016\061\020\001\002" +
    "\000\006\040\251\041\250\001\002\000\004\042\055\001" +
    "\002\000\006\040\ufff7\041\ufff7\001\002\000\010\040\ufff4" +
    "\041\ufff4\047\021\001\002\000\016\030\034\031\026\061" +
    "\022\062\032\063\025\064\030\001\002\000\052\007\uffb7" +
    "\010\uffb7\022\uffb7\023\uffb7\024\uffb7\025\uffb7\026\uffb7\030" +
    "\uffb7\031\uffb7\032\uffb7\033\uffb7\034\uffb7\035\uffb7\036\uffb7" +
    "\040\uffb7\041\uffb7\042\uffb7\047\uffb7\057\uffb7\070\uffb7\001" +
    "\002\000\010\030\053\040\ufff6\041\ufff6\001\002\000\050" +
    "\007\uffbd\010\uffbd\022\uffbd\023\uffbd\024\uffbd\025\uffbd\026" +
    "\uffbd\030\uffbd\031\uffbd\032\uffbd\033\uffbd\034\uffbd\035\uffbd" +
    "\040\uffbd\041\uffbd\042\uffbd\047\uffbd\057\uffbd\070\uffbd\001" +
    "\002\000\052\007\uffb5\010\uffb5\022\uffb5\023\uffb5\024\uffb5" +
    "\025\uffb5\026\uffb5\030\uffb5\031\uffb5\032\uffb5\033\uffb5\034" +
    "\uffb5\035\uffb5\036\uffb5\040\uffb5\041\uffb5\042\uffb5\047\uffb5" +
    "\057\uffb5\070\uffb5\001\002\000\014\030\034\031\026\061" +
    "\022\062\032\063\025\001\002\000\052\007\uffb8\010\uffb8" +
    "\022\uffb8\023\uffb8\024\uffb8\025\uffb8\026\uffb8\030\uffb8\031" +
    "\uffb8\032\uffb8\033\uffb8\034\uffb8\035\uffb8\036\050\040\uffb8" +
    "\041\uffb8\042\uffb8\047\uffb8\057\uffb8\070\uffb8\001\002\000" +
    "\006\040\ufff5\041\ufff5\001\002\000\050\007\uffc2\010\uffc2" +
    "\022\uffc2\023\uffc2\024\uffc2\025\uffc2\026\uffc2\030\uffc2\031" +
    "\041\032\036\033\042\034\037\035\040\040\uffc2\041\uffc2" +
    "\042\uffc2\047\uffc2\057\uffc2\070\uffc2\001\002\000\052\007" +
    "\uffb6\010\uffb6\022\uffb6\023\uffb6\024\uffb6\025\uffb6\026\uffb6" +
    "\030\uffb6\031\uffb6\032\uffb6\033\uffb6\034\uffb6\035\uffb6\036" +
    "\uffb6\040\uffb6\041\uffb6\042\uffb6\047\uffb6\057\uffb6\070\uffb6" +
    "\001\002\000\050\007\uffba\010\uffba\022\uffba\023\uffba\024" +
    "\uffba\025\uffba\026\uffba\030\uffba\031\uffba\032\uffba\033\uffba" +
    "\034\uffba\035\uffba\040\uffba\041\uffba\042\uffba\047\uffba\057" +
    "\uffba\070\uffba\001\002\000\014\030\034\031\026\061\022" +
    "\062\032\063\025\001\002\000\050\007\uffbb\010\uffbb\022" +
    "\uffbb\023\uffbb\024\uffbb\025\uffbb\026\uffbb\030\uffbb\031\uffbb" +
    "\032\uffbb\033\uffbb\034\uffbb\035\uffbb\040\uffbb\041\uffbb\042" +
    "\uffbb\047\uffbb\057\uffbb\070\uffbb\001\002\000\014\030\034" +
    "\031\026\061\022\062\032\063\025\001\002\000\014\030" +
    "\034\031\026\061\022\062\032\063\025\001\002\000\014" +
    "\030\034\031\026\061\022\062\032\063\025\001\002\000" +
    "\014\030\034\031\026\061\022\062\032\063\025\001\002" +
    "\000\014\030\034\031\026\061\022\062\032\063\025\001" +
    "\002\000\050\007\uffc0\010\uffc0\022\uffc0\023\uffc0\024\uffc0" +
    "\025\uffc0\026\uffc0\030\uffc0\031\uffc0\032\uffc0\033\uffc0\034" +
    "\uffc0\035\uffc0\040\uffc0\041\uffc0\042\uffc0\047\uffc0\057\uffc0" +
    "\070\uffc0\001\002\000\046\007\uffc3\010\uffc3\022\uffc3\023" +
    "\uffc3\024\uffc3\025\uffc3\026\uffc3\030\uffc3\032\036\033\042" +
    "\034\037\035\040\040\uffc3\041\uffc3\042\uffc3\047\uffc3\057" +
    "\uffc3\070\uffc3\001\002\000\050\007\uffbf\010\uffbf\022\uffbf" +
    "\023\uffbf\024\uffbf\025\uffbf\026\uffbf\030\uffbf\031\uffbf\032" +
    "\uffbf\033\uffbf\034\uffbf\035\uffbf\040\uffbf\041\uffbf\042\uffbf" +
    "\047\uffbf\057\uffbf\070\uffbf\001\002\000\050\007\uffbe\010" +
    "\uffbe\022\uffbe\023\uffbe\024\uffbe\025\uffbe\026\uffbe\030\uffbe" +
    "\031\uffbe\032\uffbe\033\uffbe\034\uffbe\035\uffbe\040\uffbe\041" +
    "\uffbe\042\uffbe\047\uffbe\057\uffbe\070\uffbe\001\002\000\050" +
    "\007\uffc1\010\uffc1\022\uffc1\023\uffc1\024\uffc1\025\uffc1\026" +
    "\uffc1\030\uffc1\031\uffc1\032\uffc1\033\uffc1\034\uffc1\035\uffc1" +
    "\040\uffc1\041\uffc1\042\uffc1\047\uffc1\057\uffc1\070\uffc1\001" +
    "\002\000\014\030\034\031\026\061\022\062\032\063\025" +
    "\001\002\000\050\007\uffb9\010\uffb9\022\uffb9\023\uffb9\024" +
    "\uffb9\025\uffb9\026\uffb9\030\uffb9\031\uffb9\032\uffb9\033\uffb9" +
    "\034\uffb9\035\uffb9\040\uffb9\041\uffb9\042\uffb9\047\uffb9\057" +
    "\uffb9\070\uffb9\001\002\000\050\007\uffbc\010\uffbc\022\uffbc" +
    "\023\uffbc\024\uffbc\025\uffbc\026\uffbc\030\uffbc\031\uffbc\032" +
    "\uffbc\033\uffbc\034\uffbc\035\uffbc\040\uffbc\041\uffbc\042\uffbc" +
    "\047\uffbc\057\uffbc\070\uffbc\001\002\000\014\030\034\031" +
    "\026\061\022\062\032\063\025\001\002\000\046\007\uffc4" +
    "\010\uffc4\022\uffc4\023\uffc4\024\uffc4\025\uffc4\026\uffc4\030" +
    "\uffc4\032\036\033\042\034\037\035\040\040\uffc4\041\uffc4" +
    "\042\uffc4\047\uffc4\057\uffc4\070\uffc4\001\002\000\010\043" +
    "\056\061\060\070\061\001\002\000\004\037\240\001\002" +
    "\000\006\057\uffeb\070\uffeb\001\002\000\024\041\uffe7\047" +
    "\uffe7\050\230\051\226\052\223\053\227\054\222\055\224" +
    "\056\225\001\002\000\004\066\114\001\002\000\006\002" +
    "\ufff9\004\ufff9\001\002\000\006\057\uffed\070\uffed\001\002" +
    "\000\006\057\111\070\uffee\001\002\000\004\070\110\001" +
    "\002\000\006\057\uffec\070\uffec\001\002\000\006\041\071" +
    "\047\070\001\002\000\024\030\034\031\026\044\100\045" +
    "\077\046\103\061\022\062\032\063\025\064\102\001\002" +
    "\000\006\047\072\061\073\001\002\000\024\030\034\031" +
    "\026\044\100\045\077\046\103\061\022\062\032\063\025" +
    "\064\102\001\002\000\010\015\uffe8\041\uffe8\047\uffe8\001" +
    "\002\000\010\041\uffe5\057\uffe5\070\uffe5\001\002\000\014" +
    "\030\053\040\uffe3\041\uffe3\057\uffe3\070\uffe3\001\002\000" +
    "\004\041\104\001\002\000\012\040\uffe0\041\uffe0\057\uffe0" +
    "\070\uffe0\001\002\000\012\040\uffdf\041\uffdf\057\uffdf\070" +
    "\uffdf\001\002\000\012\040\uffe2\041\uffe2\057\uffe2\070\uffe2" +
    "\001\002\000\012\040\uffe4\041\uffe4\057\uffe4\070\uffe4\001" +
    "\002\000\012\040\uffde\041\uffde\057\uffde\070\uffde\001\002" +
    "\000\030\030\034\031\026\044\100\045\077\046\103\057" +
    "\uffea\061\022\062\032\063\025\064\102\070\uffea\001\002" +
    "\000\010\041\uffe6\057\uffe6\070\uffe6\001\002\000\010\041" +
    "\107\057\uffe9\070\uffe9\001\002\000\024\030\034\031\026" +
    "\044\100\045\077\046\103\061\022\062\032\063\025\064" +
    "\102\001\002\000\026\002\ufff3\004\ufff3\011\ufff3\012\ufff3" +
    "\013\ufff3\014\ufff3\017\ufff3\043\ufff3\061\ufff3\067\ufff3\001" +
    "\002\000\010\043\056\061\060\070\uffef\001\002\000\004" +
    "\070\ufff0\001\002\000\004\070\ufff1\001\002\000\014\011" +
    "\121\014\122\017\123\043\056\061\060\001\002\000\016" +
    "\011\uffd2\014\uffd2\017\uffd2\043\uffd2\061\uffd2\067\uffd2\001" +
    "\002\000\016\011\uffd3\014\uffd3\017\uffd3\043\uffd3\061\uffd3" +
    "\067\uffd3\001\002\000\016\011\uffd4\014\uffd4\017\uffd4\043" +
    "\uffd4\061\uffd4\067\uffd4\001\002\000\004\070\221\001\002" +
    "\000\016\006\130\030\034\031\026\061\022\062\032\063" +
    "\025\001\002\000\004\061\166\001\002\000\016\006\130" +
    "\030\034\031\026\061\022\062\032\063\025\001\002\000" +
    "\016\011\uffd5\014\uffd5\017\uffd5\043\uffd5\061\uffd5\067\uffd5" +
    "\001\002\000\016\011\121\014\122\017\123\043\056\061" +
    "\060\067\126\001\002\000\026\002\ufff2\004\ufff2\011\ufff2" +
    "\012\ufff2\013\ufff2\014\ufff2\017\ufff2\043\ufff2\061\ufff2\067" +
    "\ufff2\001\002\000\016\011\uffd6\014\uffd6\017\uffd6\043\uffd6" +
    "\061\uffd6\067\uffd6\001\002\000\016\006\130\030\034\031" +
    "\026\061\022\062\032\063\025\001\002\000\010\007\141" +
    "\010\uffb3\042\uffb3\001\002\000\010\007\uffaf\010\uffaf\042" +
    "\uffaf\001\002\000\026\007\uffa8\010\uffa8\022\153\023\152" +
    "\024\155\025\154\026\150\030\053\042\uffa8\047\151\001" +
    "\002\000\010\007\uffb1\010\uffb1\042\uffb1\001\002\000\006" +
    "\010\137\042\136\001\002\000\010\043\056\061\060\070" +
    "\061\001\002\000\016\006\130\030\034\031\026\061\022" +
    "\062\032\063\025\001\002\000\010\007\141\010\uffb4\042" +
    "\uffb4\001\002\000\016\006\130\030\034\031\026\061\022" +
    "\062\032\063\025\001\002\000\010\007\uffb2\010\uffb2\042" +
    "\uffb2\001\002\000\020\011\uffcc\013\145\014\uffcc\017\uffcc" +
    "\043\uffcc\061\uffcc\067\uffcc\001\002\000\016\011\uffcb\014" +
    "\uffcb\017\uffcb\043\uffcb\061\uffcb\067\uffcb\001\002\000\004" +
    "\042\146\001\002\000\010\043\056\061\060\070\061\001" +
    "\002\000\016\011\uffcd\014\uffcd\017\uffcd\043\uffcd\061\uffcd" +
    "\067\uffcd\001\002\000\014\030\034\031\026\061\022\062" +
    "\032\063\025\001\002\000\014\030\034\031\026\061\022" +
    "\062\032\063\025\001\002\000\014\030\034\031\026\061" +
    "\022\062\032\063\025\001\002\000\014\030\034\031\026" +
    "\061\022\062\032\063\025\001\002\000\014\030\034\031" +
    "\026\061\022\062\032\063\025\001\002\000\014\030\034" +
    "\031\026\061\022\062\032\063\025\001\002\000\012\007" +
    "\uffab\010\uffab\030\053\042\uffab\001\002\000\012\007\uffaa" +
    "\010\uffaa\030\053\042\uffaa\001\002\000\012\007\uffad\010" +
    "\uffad\030\053\042\uffad\001\002\000\012\007\uffac\010\uffac" +
    "\030\053\042\uffac\001\002\000\012\007\uffae\010\uffae\030" +
    "\053\042\uffae\001\002\000\012\007\uffa9\010\uffa9\030\053" +
    "\042\uffa9\001\002\000\010\007\uffb0\010\uffb0\042\uffb0\001" +
    "\002\000\006\015\uffc9\041\170\001\002\000\006\015\uffe7" +
    "\041\uffe7\001\002\000\004\015\171\001\002\000\006\015" +
    "\uffca\061\073\001\002\000\004\016\173\001\002\000\004" +
    "\042\205\001\002\000\004\037\174\001\002\000\014\030" +
    "\034\031\026\061\022\062\032\063\025\001\002\000\010" +
    "\030\053\040\177\041\176\001\002\000\014\030\034\031" +
    "\026\061\022\062\032\063\025\001\002\000\004\042\uffc7" +
    "\001\002\000\010\030\053\040\202\041\201\001\002\000" +
    "\014\030\034\031\026\061\022\062\032\063\025\001\002" +
    "\000\004\042\uffc6\001\002\000\006\030\053\040\204\001" +
    "\002\000\004\042\uffc5\001\002\000\010\043\056\061\060" +
    "\070\061\001\002\000\020\011\uffcc\013\145\014\uffcc\017" +
    "\uffcc\043\uffcc\061\uffcc\067\uffcc\001\002\000\016\011\uffc8" +
    "\014\uffc8\017\uffc8\043\uffc8\061\uffc8\067\uffc8\001\002\000" +
    "\006\010\137\042\211\001\002\000\010\043\056\061\060" +
    "\070\061\001\002\000\022\011\uffce\012\uffce\013\uffce\014" +
    "\uffce\017\uffce\043\uffce\061\uffce\067\uffce\001\002\000\022" +
    "\011\uffcc\012\215\013\145\014\uffcc\017\uffcc\043\uffcc\061" +
    "\uffcc\067\uffcc\001\002\000\016\011\uffd0\014\uffd0\017\uffd0" +
    "\043\uffd0\061\uffd0\067\uffd0\001\002\000\016\006\130\030" +
    "\034\031\026\061\022\062\032\063\025\001\002\000\006" +
    "\010\137\042\217\001\002\000\010\043\056\061\060\070" +
    "\061\001\002\000\022\011\uffcf\012\uffcf\013\uffcf\014\uffcf" +
    "\017\uffcf\043\uffcf\061\uffcf\067\uffcf\001\002\000\016\011" +
    "\uffd1\014\uffd1\017\uffd1\043\uffd1\061\uffd1\067\uffd1\001\002" +
    "\000\014\030\034\031\026\061\022\062\032\063\025\001" +
    "\002\000\014\030\034\031\026\061\022\062\032\063\025" +
    "\001\002\000\014\030\034\031\026\061\022\062\032\063" +
    "\025\001\002\000\014\030\034\031\026\061\022\062\032" +
    "\063\025\001\002\000\014\030\034\031\026\061\022\062" +
    "\032\063\025\001\002\000\014\030\034\031\026\061\022" +
    "\062\032\063\025\001\002\000\014\030\034\031\026\061" +
    "\022\062\032\063\025\001\002\000\010\030\053\057\uffdd" +
    "\070\uffdd\001\002\000\010\030\053\057\uffda\070\uffda\001" +
    "\002\000\010\030\053\057\uffdc\070\uffdc\001\002\000\010" +
    "\030\053\057\uffd7\070\uffd7\001\002\000\010\030\053\057" +
    "\uffd8\070\uffd8\001\002\000\010\030\053\057\uffdb\070\uffdb" +
    "\001\002\000\010\030\053\057\uffd9\070\uffd9\001\002\000" +
    "\026\030\034\031\026\044\100\045\077\046\103\061\022" +
    "\062\032\063\025\064\102\065\241\001\002\000\006\040" +
    "\uffa4\041\uffa4\001\002\000\006\040\245\041\244\001\002" +
    "\000\006\040\uffa5\041\uffa5\001\002\000\026\030\034\031" +
    "\026\044\100\045\077\046\103\061\022\062\032\063\025" +
    "\064\102\065\247\001\002\000\006\057\uffe1\070\uffe1\001" +
    "\002\000\006\040\uffa7\041\uffa7\001\002\000\006\040\uffa6" +
    "\041\uffa6\001\002\000\004\061\020\001\002\000\004\042" +
    "\252\001\002\000\010\043\056\061\060\070\061\001\002" +
    "\000\006\002\ufffa\004\ufffa\001\002\000\006\040\ufff8\041" +
    "\ufff8\001\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\253\000\006\002\004\003\005\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\004\010\043\007\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\043\011\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\044\014" +
    "\045\016\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\014\030\022\031\030" +
    "\032\023\033\032\034\026\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\032\051\033\032\034\026\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\032\034\033\032\034\026\001\001\000" +
    "\002\001\001\000\010\032\046\033\032\034\026\001\001" +
    "\000\010\032\045\033\032\034\026\001\001\000\010\032" +
    "\044\033\032\034\026\001\001\000\012\031\043\032\023" +
    "\033\032\034\026\001\001\000\010\032\042\033\032\034" +
    "\026\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\032" +
    "\050\033\032\034\026\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\031\053\032\023\033\032\034\026\001" +
    "\001\000\002\001\001\000\020\005\061\006\064\010\063" +
    "\011\062\012\066\015\065\017\056\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\007\111\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\022\013\105\014\073\016\100\030\074\031\030\032" +
    "\023\033\032\034\026\001\001\000\002\001\001\000\022" +
    "\013\075\014\073\016\100\030\074\031\030\032\023\033" +
    "\032\034\026\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\020\014\104\016\100\030\074\031\030\032" +
    "\023\033\032\034\026\001\001\000\002\001\001\000\002" +
    "\001\001\000\020\014\104\016\100\030\074\031\030\032" +
    "\023\033\032\034\026\001\001\000\002\001\001\000\016" +
    "\006\112\010\063\011\062\012\066\015\065\017\056\001" +
    "\001\000\002\001\001\000\002\001\001\000\030\006\117" +
    "\010\063\011\062\012\066\015\065\017\056\020\124\021" +
    "\116\024\114\026\115\040\123\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\024\030\132\031\030\032\023\033\032\034\026\035\207" +
    "\036\130\037\133\041\131\001\001\000\004\012\164\001" +
    "\001\000\024\030\132\031\030\032\023\033\032\034\026" +
    "\035\134\036\130\037\133\041\131\001\001\000\002\001" +
    "\001\000\026\006\117\010\063\011\062\012\066\015\065" +
    "\017\056\021\116\024\114\026\115\040\126\001\001\000" +
    "\002\001\001\000\002\001\001\000\020\030\132\031\030" +
    "\032\023\033\032\034\026\037\163\041\131\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\020\005\142\006\064\010" +
    "\063\011\062\012\066\015\065\017\056\001\001\000\022" +
    "\030\132\031\030\032\023\033\032\034\026\036\137\037" +
    "\133\041\131\001\001\000\002\001\001\000\020\030\132" +
    "\031\030\032\023\033\032\034\026\037\141\041\131\001" +
    "\001\000\002\001\001\000\004\023\143\001\001\000\002" +
    "\001\001\000\002\001\001\000\020\005\146\006\064\010" +
    "\063\011\062\012\066\015\065\017\056\001\001\000\002" +
    "\001\001\000\014\030\162\031\030\032\023\033\032\034" +
    "\026\001\001\000\014\030\161\031\030\032\023\033\032" +
    "\034\026\001\001\000\014\030\160\031\030\032\023\033" +
    "\032\034\026\001\001\000\014\030\157\031\030\032\023" +
    "\033\032\034\026\001\001\000\014\030\156\031\030\032" +
    "\023\033\032\034\026\001\001\000\014\030\155\031\030" +
    "\032\023\033\032\034\026\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\025" +
    "\166\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\027\171\001\001\000\002\001\001\000" +
    "\002\001\001\000\014\030\174\031\030\032\023\033\032" +
    "\034\026\001\001\000\002\001\001\000\014\030\177\031" +
    "\030\032\023\033\032\034\026\001\001\000\002\001\001" +
    "\000\002\001\001\000\014\030\202\031\030\032\023\033" +
    "\032\034\026\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\020\005\205\006\064\010\063\011" +
    "\062\012\066\015\065\017\056\001\001\000\004\023\206" +
    "\001\001\000\002\001\001\000\002\001\001\000\020\005" +
    "\211\006\064\010\063\011\062\012\066\015\065\017\056" +
    "\001\001\000\004\022\212\001\001\000\004\023\213\001" +
    "\001\000\002\001\001\000\024\030\132\031\030\032\023" +
    "\033\032\034\026\035\215\036\130\037\133\041\131\001" +
    "\001\000\002\001\001\000\020\005\217\006\064\010\063" +
    "\011\062\012\066\015\065\017\056\001\001\000\002\001" +
    "\001\000\002\001\001\000\014\030\236\031\030\032\023" +
    "\033\032\034\026\001\001\000\014\030\235\031\030\032" +
    "\023\033\032\034\026\001\001\000\014\030\234\031\030" +
    "\032\023\033\032\034\026\001\001\000\014\030\233\031" +
    "\030\032\023\033\032\034\026\001\001\000\014\030\232" +
    "\031\030\032\023\033\032\034\026\001\001\000\014\030" +
    "\231\031\030\032\023\033\032\034\026\001\001\000\014" +
    "\030\230\031\030\032\023\033\032\034\026\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\022\014\242\016\100\030\074\031\030\032\023" +
    "\033\032\034\026\042\241\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\020\014\245\016\100" +
    "\030\074\031\030\032\023\033\032\034\026\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\045\253\001\001\000\002\001\001\000\020\005\252\006" +
    "\064\010\063\011\062\012\066\015\065\017\056\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$SintaxisPython$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$SintaxisPython$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$SintaxisPython$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    private Symbol s;
    
    public void syntax_error(Symbol sym){
        System.out.println("\n" + sym.value + sym.sym);
        System.out.println("Error Sintactico en la letra: " + sym.value + "   <linea>: "  + (sym.right + 1) + "    <columna>: " + (sym.left + 1) + "\n");
    }

    public void unrecovered_syntax_error(Symbol sym) throws java.lang.Exception{
        System.out.println("\n" + sym.value + sym.sym);
        System.out.println("Error Sintactico en la letra: " + sym.value + "   <linea>: "  + (sym.right + 1) + "    <columna>: " + (sym.left + 1) + "\n");
    }

    public Symbol getS(){
        System.out.println(this.s.value);
        System.out.print(this.s.value);
        return this.s;
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$SintaxisPython$actions {
  private final SintaxisPython parser;

  /** Constructor */
  CUP$SintaxisPython$actions(SintaxisPython parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$SintaxisPython$do_action_part00000000(
    int                        CUP$SintaxisPython$act_num,
    java_cup.runtime.lr_parser CUP$SintaxisPython$parser,
    java.util.Stack            CUP$SintaxisPython$stack,
    int                        CUP$SintaxisPython$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$SintaxisPython$result;

      /* select the action based on the action number */
      switch (CUP$SintaxisPython$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= PYTHON EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-1)).value;
		RESULT = start_val;
              CUP$SintaxisPython$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$SintaxisPython$parser.done_parsing();
          return CUP$SintaxisPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // PYTHON ::= ESP DEFS 
            {
              Object RESULT =null;

              CUP$SintaxisPython$result = parser.getSymbolFactory().newSymbol("PYTHON",0, ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), RESULT);
            }
          return CUP$SintaxisPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // PYTHON ::= ESP 
            {
              Object RESULT =null;

              CUP$SintaxisPython$result = parser.getSymbolFactory().newSymbol("PYTHON",0, ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), RESULT);
            }
          return CUP$SintaxisPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // ESP ::= newline 
            {
              Object RESULT =null;

              CUP$SintaxisPython$result = parser.getSymbolFactory().newSymbol("ESP",1, ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), RESULT);
            }
          return CUP$SintaxisPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // ESP ::= 
            {
              Object RESULT =null;

              CUP$SintaxisPython$result = parser.getSymbolFactory().newSymbol("ESP",1, ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), RESULT);
            }
          return CUP$SintaxisPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // DEFS ::= DEFS DEF 
            {
              Object RESULT =null;

              CUP$SintaxisPython$result = parser.getSymbolFactory().newSymbol("DEFS",2, ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), RESULT);
            }
          return CUP$SintaxisPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // DEFS ::= DEF 
            {
              Object RESULT =null;

              CUP$SintaxisPython$result = parser.getSymbolFactory().newSymbol("DEFS",2, ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), RESULT);
            }
          return CUP$SintaxisPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // DEF ::= deff id para PAR_LIST parc dosp SUITE 
            {
              Object RESULT =null;

              CUP$SintaxisPython$result = parser.getSymbolFactory().newSymbol("DEF",33, ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-6)), ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), RESULT);
            }
          return CUP$SintaxisPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // DEF ::= deff id para parc dosp SUITE 
            {
              Object RESULT =null;

              CUP$SintaxisPython$result = parser.getSymbolFactory().newSymbol("DEF",33, ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-5)), ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), RESULT);
            }
          return CUP$SintaxisPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // PAR_LIST ::= PAR_LIST coma DEFPARAM 
            {
              Object RESULT =null;

              CUP$SintaxisPython$result = parser.getSymbolFactory().newSymbol("PAR_LIST",34, ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), RESULT);
            }
          return CUP$SintaxisPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // PAR_LIST ::= DEFPARAM 
            {
              Object RESULT =null;

              CUP$SintaxisPython$result = parser.getSymbolFactory().newSymbol("PAR_LIST",34, ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), RESULT);
            }
          return CUP$SintaxisPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // DEFPARAM ::= id igual OPERACION_A 
            {
              Object RESULT =null;

              CUP$SintaxisPython$result = parser.getSymbolFactory().newSymbol("DEFPARAM",35, ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), RESULT);
            }
          return CUP$SintaxisPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // DEFPARAM ::= id igual character 
            {
              Object RESULT =null;

              CUP$SintaxisPython$result = parser.getSymbolFactory().newSymbol("DEFPARAM",35, ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), RESULT);
            }
          return CUP$SintaxisPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // DEFPARAM ::= id 
            {
              Object RESULT =null;

              CUP$SintaxisPython$result = parser.getSymbolFactory().newSymbol("DEFPARAM",35, ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), RESULT);
            }
          return CUP$SintaxisPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // SUITE ::= STMT_LIST newline 
            {
              Object RESULT =null;

              CUP$SintaxisPython$result = parser.getSymbolFactory().newSymbol("SUITE",3, ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), RESULT);
            }
          return CUP$SintaxisPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // SUITE ::= newline indent STATEMENTS dedent 
            {
              Object RESULT =null;

              CUP$SintaxisPython$result = parser.getSymbolFactory().newSymbol("SUITE",3, ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), RESULT);
            }
          return CUP$SintaxisPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // STMT_LIST ::= STATEMENTLINE puntocoma STMT_LIST 
            {
              Object RESULT =null;

              CUP$SintaxisPython$result = parser.getSymbolFactory().newSymbol("STMT_LIST",4, ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), RESULT);
            }
          return CUP$SintaxisPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // STMT_LIST ::= STATEMENTLINE PC 
            {
              Object RESULT =null;

              CUP$SintaxisPython$result = parser.getSymbolFactory().newSymbol("STMT_LIST",4, ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), RESULT);
            }
          return CUP$SintaxisPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // PC ::= puntocoma 
            {
              Object RESULT =null;

              CUP$SintaxisPython$result = parser.getSymbolFactory().newSymbol("PC",5, ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), RESULT);
            }
          return CUP$SintaxisPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // PC ::= 
            {
              Object RESULT =null;

              CUP$SintaxisPython$result = parser.getSymbolFactory().newSymbol("PC",5, ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), RESULT);
            }
          return CUP$SintaxisPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // STATEMENTLINE ::= AS_VAR 
            {
              Object RESULT =null;

              CUP$SintaxisPython$result = parser.getSymbolFactory().newSymbol("STATEMENTLINE",6, ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), RESULT);
            }
          return CUP$SintaxisPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // STATEMENTLINE ::= WRITE 
            {
              Object RESULT =null;

              CUP$SintaxisPython$result = parser.getSymbolFactory().newSymbol("STATEMENTLINE",6, ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), RESULT);
            }
          return CUP$SintaxisPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // STATEMENTLINE ::= OP_VAR 
            {
              Object RESULT =null;

              CUP$SintaxisPython$result = parser.getSymbolFactory().newSymbol("STATEMENTLINE",6, ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), RESULT);
            }
          return CUP$SintaxisPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // AS_VAR ::= LISTVAR coma igual LISTDEF coma 
            {
              Object RESULT =null;

              CUP$SintaxisPython$result = parser.getSymbolFactory().newSymbol("AS_VAR",7, ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-4)), ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), RESULT);
            }
          return CUP$SintaxisPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // AS_VAR ::= LISTVAR igual LISTDEF 
            {
              Object RESULT =null;

              CUP$SintaxisPython$result = parser.getSymbolFactory().newSymbol("AS_VAR",7, ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), RESULT);
            }
          return CUP$SintaxisPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // LISTVAR ::= LISTVAR coma id 
            {
              Object RESULT =null;

              CUP$SintaxisPython$result = parser.getSymbolFactory().newSymbol("LISTVAR",8, ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), RESULT);
            }
          return CUP$SintaxisPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // LISTVAR ::= id 
            {
              Object RESULT =null;

              CUP$SintaxisPython$result = parser.getSymbolFactory().newSymbol("LISTVAR",8, ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), RESULT);
            }
          return CUP$SintaxisPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // LISTDEF ::= LISTDEF coma D 
            {
              Object RESULT =null;

              CUP$SintaxisPython$result = parser.getSymbolFactory().newSymbol("LISTDEF",9, ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), RESULT);
            }
          return CUP$SintaxisPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // LISTDEF ::= D 
            {
              Object RESULT =null;

              CUP$SintaxisPython$result = parser.getSymbolFactory().newSymbol("LISTDEF",9, ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), RESULT);
            }
          return CUP$SintaxisPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // D ::= character 
            {
              Object RESULT =null;

              CUP$SintaxisPython$result = parser.getSymbolFactory().newSymbol("D",10, ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), RESULT);
            }
          return CUP$SintaxisPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // D ::= OPERACION_A 
            {
              Object RESULT =null;

              CUP$SintaxisPython$result = parser.getSymbolFactory().newSymbol("D",10, ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), RESULT);
            }
          return CUP$SintaxisPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // D ::= INPUT 
            {
              Object RESULT =null;

              CUP$SintaxisPython$result = parser.getSymbolFactory().newSymbol("D",10, ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), RESULT);
            }
          return CUP$SintaxisPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // WRITE ::= print para STRING parc 
            {
              Object RESULT =null;

              CUP$SintaxisPython$result = parser.getSymbolFactory().newSymbol("WRITE",11, ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), RESULT);
            }
          return CUP$SintaxisPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // INPUT ::= intinput 
            {
              Object RESULT =null;

              CUP$SintaxisPython$result = parser.getSymbolFactory().newSymbol("INPUT",12, ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), RESULT);
            }
          return CUP$SintaxisPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // INPUT ::= charinput 
            {
              Object RESULT =null;

              CUP$SintaxisPython$result = parser.getSymbolFactory().newSymbol("INPUT",12, ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), RESULT);
            }
          return CUP$SintaxisPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // INPUT ::= floatinput 
            {
              Object RESULT =null;

              CUP$SintaxisPython$result = parser.getSymbolFactory().newSymbol("INPUT",12, ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), RESULT);
            }
          return CUP$SintaxisPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // OP_VAR ::= id masig OPERACION_A 
            {
              Object RESULT =null;

              CUP$SintaxisPython$result = parser.getSymbolFactory().newSymbol("OP_VAR",13, ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), RESULT);
            }
          return CUP$SintaxisPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // OP_VAR ::= id menosig OPERACION_A 
            {
              Object RESULT =null;

              CUP$SintaxisPython$result = parser.getSymbolFactory().newSymbol("OP_VAR",13, ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), RESULT);
            }
          return CUP$SintaxisPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // OP_VAR ::= id porig OPERACION_A 
            {
              Object RESULT =null;

              CUP$SintaxisPython$result = parser.getSymbolFactory().newSymbol("OP_VAR",13, ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), RESULT);
            }
          return CUP$SintaxisPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // OP_VAR ::= id divig OPERACION_A 
            {
              Object RESULT =null;

              CUP$SintaxisPython$result = parser.getSymbolFactory().newSymbol("OP_VAR",13, ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), RESULT);
            }
          return CUP$SintaxisPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // OP_VAR ::= id floorig OPERACION_A 
            {
              Object RESULT =null;

              CUP$SintaxisPython$result = parser.getSymbolFactory().newSymbol("OP_VAR",13, ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), RESULT);
            }
          return CUP$SintaxisPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // OP_VAR ::= id potig OPERACION_A 
            {
              Object RESULT =null;

              CUP$SintaxisPython$result = parser.getSymbolFactory().newSymbol("OP_VAR",13, ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), RESULT);
            }
          return CUP$SintaxisPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // OP_VAR ::= id modig OPERACION_A 
            {
              Object RESULT =null;

              CUP$SintaxisPython$result = parser.getSymbolFactory().newSymbol("OP_VAR",13, ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), RESULT);
            }
          return CUP$SintaxisPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // STATEMENTS ::= STATEMENTS STATEMENT 
            {
              Object RESULT =null;

              CUP$SintaxisPython$result = parser.getSymbolFactory().newSymbol("STATEMENTS",14, ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), RESULT);
            }
          return CUP$SintaxisPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // STATEMENTS ::= STATEMENT 
            {
              Object RESULT =null;

              CUP$SintaxisPython$result = parser.getSymbolFactory().newSymbol("STATEMENTS",14, ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), RESULT);
            }
          return CUP$SintaxisPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // STATEMENT ::= IF 
            {
              Object RESULT =null;

              CUP$SintaxisPython$result = parser.getSymbolFactory().newSymbol("STATEMENT",30, ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), RESULT);
            }
          return CUP$SintaxisPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // STATEMENT ::= FOR 
            {
              Object RESULT =null;

              CUP$SintaxisPython$result = parser.getSymbolFactory().newSymbol("STATEMENT",30, ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), RESULT);
            }
          return CUP$SintaxisPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // STATEMENT ::= WHILE 
            {
              Object RESULT =null;

              CUP$SintaxisPython$result = parser.getSymbolFactory().newSymbol("STATEMENT",30, ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), RESULT);
            }
          return CUP$SintaxisPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // STATEMENT ::= STMT_LIST newline 
            {
              Object RESULT =null;

              CUP$SintaxisPython$result = parser.getSymbolFactory().newSymbol("STATEMENT",30, ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), RESULT);
            }
          return CUP$SintaxisPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // IF ::= iff CONDICION dosp SUITE ELSEIF ELSE 
            {
              Object RESULT =null;

              CUP$SintaxisPython$result = parser.getSymbolFactory().newSymbol("IF",15, ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-5)), ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), RESULT);
            }
          return CUP$SintaxisPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // ELSEIF ::= ELSEIF elseiff CONDICION dosp SUITE 
            {
              Object RESULT =null;

              CUP$SintaxisPython$result = parser.getSymbolFactory().newSymbol("ELSEIF",16, ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-4)), ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), RESULT);
            }
          return CUP$SintaxisPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // ELSEIF ::= 
            {
              Object RESULT =null;

              CUP$SintaxisPython$result = parser.getSymbolFactory().newSymbol("ELSEIF",16, ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), RESULT);
            }
          return CUP$SintaxisPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // ELSE ::= elsee dosp SUITE 
            {
              Object RESULT =null;

              CUP$SintaxisPython$result = parser.getSymbolFactory().newSymbol("ELSE",17, ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), RESULT);
            }
          return CUP$SintaxisPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // ELSE ::= 
            {
              Object RESULT =null;

              CUP$SintaxisPython$result = parser.getSymbolFactory().newSymbol("ELSE",17, ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), RESULT);
            }
          return CUP$SintaxisPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // WHILE ::= whilee CONDICION dosp SUITE ELSE 
            {
              Object RESULT =null;

              CUP$SintaxisPython$result = parser.getSymbolFactory().newSymbol("WHILE",18, ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-4)), ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), RESULT);
            }
          return CUP$SintaxisPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // COMA ::= coma 
            {
              Object RESULT =null;

              CUP$SintaxisPython$result = parser.getSymbolFactory().newSymbol("COMA",19, ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), RESULT);
            }
          return CUP$SintaxisPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // COMA ::= 
            {
              Object RESULT =null;

              CUP$SintaxisPython$result = parser.getSymbolFactory().newSymbol("COMA",19, ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), RESULT);
            }
          return CUP$SintaxisPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // FOR ::= forr LISTVAR COMA inn RANGE dosp SUITE ELSE 
            {
              Object RESULT =null;

              CUP$SintaxisPython$result = parser.getSymbolFactory().newSymbol("FOR",20, ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-7)), ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), RESULT);
            }
          return CUP$SintaxisPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // RANGE ::= range para OPERACION_A parc 
            {
              Object RESULT =null;

              CUP$SintaxisPython$result = parser.getSymbolFactory().newSymbol("RANGE",21, ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), RESULT);
            }
          return CUP$SintaxisPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // RANGE ::= range para OPERACION_A coma OPERACION_A parc 
            {
              Object RESULT =null;

              CUP$SintaxisPython$result = parser.getSymbolFactory().newSymbol("RANGE",21, ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-5)), ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), RESULT);
            }
          return CUP$SintaxisPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // RANGE ::= range para OPERACION_A coma OPERACION_A coma OPERACION_A parc 
            {
              Object RESULT =null;

              CUP$SintaxisPython$result = parser.getSymbolFactory().newSymbol("RANGE",21, ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-7)), ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), RESULT);
            }
          return CUP$SintaxisPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // OPERACION_A ::= OPERACION_A mas OPERACION_M 
            {
              Object RESULT =null;

              CUP$SintaxisPython$result = parser.getSymbolFactory().newSymbol("OPERACION_A",22, ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), RESULT);
            }
          return CUP$SintaxisPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // OPERACION_A ::= OPERACION_M menos OPERACION_M 
            {
              Object RESULT =null;

              CUP$SintaxisPython$result = parser.getSymbolFactory().newSymbol("OPERACION_A",22, ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), RESULT);
            }
          return CUP$SintaxisPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // OPERACION_A ::= OPERACION_M 
            {
              Object RESULT =null;

              CUP$SintaxisPython$result = parser.getSymbolFactory().newSymbol("OPERACION_A",22, ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), RESULT);
            }
          return CUP$SintaxisPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // OPERACION_M ::= OPERACION_M por OPERACION_U 
            {
              Object RESULT =null;

              CUP$SintaxisPython$result = parser.getSymbolFactory().newSymbol("OPERACION_M",23, ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), RESULT);
            }
          return CUP$SintaxisPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // OPERACION_M ::= OPERACION_M div OPERACION_U 
            {
              Object RESULT =null;

              CUP$SintaxisPython$result = parser.getSymbolFactory().newSymbol("OPERACION_M",23, ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), RESULT);
            }
          return CUP$SintaxisPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // OPERACION_M ::= OPERACION_M floor OPERACION_U 
            {
              Object RESULT =null;

              CUP$SintaxisPython$result = parser.getSymbolFactory().newSymbol("OPERACION_M",23, ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), RESULT);
            }
          return CUP$SintaxisPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // OPERACION_M ::= OPERACION_M mod OPERACION_U 
            {
              Object RESULT =null;

              CUP$SintaxisPython$result = parser.getSymbolFactory().newSymbol("OPERACION_M",23, ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), RESULT);
            }
          return CUP$SintaxisPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // OPERACION_M ::= OPERACION_U 
            {
              Object RESULT =null;

              CUP$SintaxisPython$result = parser.getSymbolFactory().newSymbol("OPERACION_M",23, ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), RESULT);
            }
          return CUP$SintaxisPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // OPERACION_U ::= menos OPERACION_U 
            {
              Object RESULT =null;

              CUP$SintaxisPython$result = parser.getSymbolFactory().newSymbol("OPERACION_U",24, ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), RESULT);
            }
          return CUP$SintaxisPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // OPERACION_U ::= mas OPERACION_U 
            {
              Object RESULT =null;

              CUP$SintaxisPython$result = parser.getSymbolFactory().newSymbol("OPERACION_U",24, ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), RESULT);
            }
          return CUP$SintaxisPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // OPERACION_U ::= POWER 
            {
              Object RESULT =null;

              CUP$SintaxisPython$result = parser.getSymbolFactory().newSymbol("OPERACION_U",24, ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), RESULT);
            }
          return CUP$SintaxisPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // POWER ::= ATOM pot OPERACION_U 
            {
              Object RESULT =null;

              CUP$SintaxisPython$result = parser.getSymbolFactory().newSymbol("POWER",25, ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), RESULT);
            }
          return CUP$SintaxisPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // POWER ::= ATOM 
            {
              Object RESULT =null;

              CUP$SintaxisPython$result = parser.getSymbolFactory().newSymbol("POWER",25, ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), RESULT);
            }
          return CUP$SintaxisPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // ATOM ::= id 
            {
              Object RESULT =null;

              CUP$SintaxisPython$result = parser.getSymbolFactory().newSymbol("ATOM",26, ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), RESULT);
            }
          return CUP$SintaxisPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // ATOM ::= entero 
            {
              Object RESULT =null;

              CUP$SintaxisPython$result = parser.getSymbolFactory().newSymbol("ATOM",26, ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), RESULT);
            }
          return CUP$SintaxisPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // ATOM ::= decimal 
            {
              Object RESULT =null;

              CUP$SintaxisPython$result = parser.getSymbolFactory().newSymbol("ATOM",26, ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), RESULT);
            }
          return CUP$SintaxisPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // CONDICION ::= CONDICION orr AND 
            {
              Object RESULT =null;

              CUP$SintaxisPython$result = parser.getSymbolFactory().newSymbol("CONDICION",27, ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), RESULT);
            }
          return CUP$SintaxisPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // CONDICION ::= AND 
            {
              Object RESULT =null;

              CUP$SintaxisPython$result = parser.getSymbolFactory().newSymbol("CONDICION",27, ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), RESULT);
            }
          return CUP$SintaxisPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // AND ::= AND andd NOT 
            {
              Object RESULT =null;

              CUP$SintaxisPython$result = parser.getSymbolFactory().newSymbol("AND",28, ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), RESULT);
            }
          return CUP$SintaxisPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // AND ::= NOT 
            {
              Object RESULT =null;

              CUP$SintaxisPython$result = parser.getSymbolFactory().newSymbol("AND",28, ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), RESULT);
            }
          return CUP$SintaxisPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // NOT ::= nott NOT 
            {
              Object RESULT =null;

              CUP$SintaxisPython$result = parser.getSymbolFactory().newSymbol("NOT",29, ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), RESULT);
            }
          return CUP$SintaxisPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // NOT ::= COMPARACION 
            {
              Object RESULT =null;

              CUP$SintaxisPython$result = parser.getSymbolFactory().newSymbol("NOT",29, ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), RESULT);
            }
          return CUP$SintaxisPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // COMPARACION ::= OPERACION_A igual OPERACION_A 
            {
              Object RESULT =null;

              CUP$SintaxisPython$result = parser.getSymbolFactory().newSymbol("COMPARACION",31, ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), RESULT);
            }
          return CUP$SintaxisPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // COMPARACION ::= OPERACION_A noigual OPERACION_A 
            {
              Object RESULT =null;

              CUP$SintaxisPython$result = parser.getSymbolFactory().newSymbol("COMPARACION",31, ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), RESULT);
            }
          return CUP$SintaxisPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // COMPARACION ::= OPERACION_A menor OPERACION_A 
            {
              Object RESULT =null;

              CUP$SintaxisPython$result = parser.getSymbolFactory().newSymbol("COMPARACION",31, ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), RESULT);
            }
          return CUP$SintaxisPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // COMPARACION ::= OPERACION_A menorig OPERACION_A 
            {
              Object RESULT =null;

              CUP$SintaxisPython$result = parser.getSymbolFactory().newSymbol("COMPARACION",31, ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), RESULT);
            }
          return CUP$SintaxisPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // COMPARACION ::= OPERACION_A mayor OPERACION_A 
            {
              Object RESULT =null;

              CUP$SintaxisPython$result = parser.getSymbolFactory().newSymbol("COMPARACION",31, ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), RESULT);
            }
          return CUP$SintaxisPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // COMPARACION ::= OPERACION_A mayorig OPERACION_A 
            {
              Object RESULT =null;

              CUP$SintaxisPython$result = parser.getSymbolFactory().newSymbol("COMPARACION",31, ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), RESULT);
            }
          return CUP$SintaxisPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // COMPARACION ::= OPERACION_A 
            {
              Object RESULT =null;

              CUP$SintaxisPython$result = parser.getSymbolFactory().newSymbol("COMPARACION",31, ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), RESULT);
            }
          return CUP$SintaxisPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // STRING ::= STRING coma D 
            {
              Object RESULT =null;

              CUP$SintaxisPython$result = parser.getSymbolFactory().newSymbol("STRING",32, ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), RESULT);
            }
          return CUP$SintaxisPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // STRING ::= STRING coma string 
            {
              Object RESULT =null;

              CUP$SintaxisPython$result = parser.getSymbolFactory().newSymbol("STRING",32, ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), RESULT);
            }
          return CUP$SintaxisPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // STRING ::= D 
            {
              Object RESULT =null;

              CUP$SintaxisPython$result = parser.getSymbolFactory().newSymbol("STRING",32, ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), RESULT);
            }
          return CUP$SintaxisPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // STRING ::= string 
            {
              Object RESULT =null;

              CUP$SintaxisPython$result = parser.getSymbolFactory().newSymbol("STRING",32, ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), RESULT);
            }
          return CUP$SintaxisPython$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$SintaxisPython$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$SintaxisPython$do_action(
    int                        CUP$SintaxisPython$act_num,
    java_cup.runtime.lr_parser CUP$SintaxisPython$parser,
    java.util.Stack            CUP$SintaxisPython$stack,
    int                        CUP$SintaxisPython$top)
    throws java.lang.Exception
    {
              return CUP$SintaxisPython$do_action_part00000000(
                               CUP$SintaxisPython$act_num,
                               CUP$SintaxisPython$parser,
                               CUP$SintaxisPython$stack,
                               CUP$SintaxisPython$top);
    }
}

}
