
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package com.mycompany.assofjpybasic.backend.analizador.python;

import java_cup.runtime.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class SintaxisPython extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return SintaxisPythonSym.class;
}

  /** Default constructor. */
  @Deprecated
  public SintaxisPython() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public SintaxisPython(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public SintaxisPython(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\127\000\002\002\004\000\002\002\004\000\002\002" +
    "\003\000\002\003\003\000\002\003\002\000\002\004\004" +
    "\000\002\004\003\000\002\041\011\000\002\041\010\000" +
    "\002\041\004\000\002\042\005\000\002\042\003\000\002" +
    "\043\005\000\002\043\005\000\002\043\003\000\002\005" +
    "\004\000\002\005\006\000\002\006\005\000\002\006\004" +
    "\000\002\007\003\000\002\007\002\000\002\010\003\000" +
    "\002\010\003\000\002\010\003\000\002\011\007\000\002" +
    "\011\005\000\002\012\005\000\002\012\003\000\002\013" +
    "\005\000\002\013\003\000\002\014\003\000\002\014\003" +
    "\000\002\014\003\000\002\015\006\000\002\016\006\000" +
    "\002\016\006\000\002\016\006\000\002\017\004\000\002" +
    "\017\003\000\002\036\003\000\002\036\003\000\002\036" +
    "\003\000\002\036\004\000\002\020\010\000\002\021\007" +
    "\000\002\021\002\000\002\022\005\000\002\022\002\000" +
    "\002\023\006\000\002\024\003\000\002\024\002\000\002" +
    "\025\011\000\002\026\006\000\002\026\010\000\002\026" +
    "\012\000\002\027\005\000\002\027\005\000\002\027\003" +
    "\000\002\030\005\000\002\030\005\000\002\030\005\000" +
    "\002\030\005\000\002\030\003\000\002\031\004\000\002" +
    "\031\004\000\002\031\003\000\002\032\003\000\002\032" +
    "\003\000\002\032\003\000\002\032\005\000\002\033\005" +
    "\000\002\033\003\000\002\034\005\000\002\034\003\000" +
    "\002\035\004\000\002\035\003\000\002\037\005\000\002" +
    "\037\005\000\002\037\005\000\002\037\005\000\002\037" +
    "\005\000\002\037\005\000\002\037\005\000\002\040\005" +
    "\000\002\040\005\000\002\040\003\000\002\040\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\251\000\012\002\ufffd\004\ufffd\047\ufffd\056\004\001" +
    "\002\000\010\002\ufffe\004\ufffe\047\ufffe\001\002\000\004" +
    "\002\253\001\002\000\010\002\uffff\004\007\047\014\001" +
    "\002\000\004\047\101\001\002\000\010\002\ufffb\004\ufffb" +
    "\047\ufffb\001\002\000\006\035\020\043\017\001\002\000" +
    "\004\056\016\001\002\000\010\002\000\004\007\047\014" +
    "\001\002\000\010\014\uffe6\035\uffe6\043\uffe6\001\002\000" +
    "\010\002\ufffc\004\ufffc\047\ufffc\001\002\000\010\002\ufff8" +
    "\004\ufff8\047\ufff8\001\002\000\026\025\042\026\033\033" +
    "\043\040\034\041\027\042\041\047\024\050\040\051\031" +
    "\052\036\001\002\000\006\043\021\047\022\001\002\000" +
    "\026\025\042\026\033\033\043\040\034\041\027\042\041" +
    "\047\024\050\040\051\031\052\036\001\002\000\010\014" +
    "\uffe7\035\uffe7\043\uffe7\001\002\000\010\035\uffe4\044\uffe4" +
    "\056\uffe4\001\002\000\050\006\uffbf\007\uffbf\017\uffbf\020" +
    "\uffbf\021\uffbf\022\uffbf\023\uffbf\024\uffbf\025\uffbf\026\uffbf" +
    "\027\uffbf\030\uffbf\031\uffbf\032\uffbf\034\uffbf\035\uffbf\036" +
    "\uffbf\044\uffbf\056\uffbf\001\002\000\014\025\045\034\uffe2" +
    "\035\uffe2\044\uffe2\056\uffe2\001\002\000\004\035\075\001" +
    "\002\000\004\033\072\001\002\000\050\006\uffc3\007\uffc3" +
    "\017\uffc3\020\uffc3\021\uffc3\022\uffc3\023\uffc3\024\uffc3\025" +
    "\uffc3\026\uffc3\027\uffc3\030\uffc3\031\uffc3\032\uffc3\034\uffc3" +
    "\035\uffc3\036\uffc3\044\uffc3\056\uffc3\001\002\000\050\006" +
    "\uffbd\007\uffbd\017\uffbd\020\uffbd\021\uffbd\022\uffbd\023\uffbd" +
    "\024\uffbd\025\uffbd\026\uffbd\027\uffbd\030\uffbd\031\uffbd\032" +
    "\uffbd\034\uffbd\035\uffbd\036\uffbd\044\uffbd\056\uffbd\001\002" +
    "\000\012\034\uffe1\035\uffe1\044\uffe1\056\uffe1\001\002\000" +
    "\016\025\042\026\033\033\043\047\024\050\040\051\031" +
    "\001\002\000\004\033\066\001\002\000\050\006\uffc0\007" +
    "\uffc0\017\uffc0\020\uffc0\021\uffc0\022\uffc0\023\uffc0\024\uffc0" +
    "\025\uffc0\026\uffc0\027\uffc0\030\uffc0\031\uffc0\032\uffc0\034" +
    "\uffc0\035\uffc0\036\uffc0\044\uffc0\056\uffc0\001\002\000\012" +
    "\034\uffe3\035\uffe3\044\uffe3\056\uffe3\001\002\000\050\006" +
    "\uffc8\007\uffc8\017\uffc8\020\uffc8\021\uffc8\022\uffc8\023\uffc8" +
    "\024\uffc8\025\uffc8\026\064\027\050\030\053\031\051\032" +
    "\052\034\uffc8\035\uffc8\036\uffc8\044\uffc8\056\uffc8\001\002" +
    "\000\050\006\uffbe\007\uffbe\017\uffbe\020\uffbe\021\uffbe\022" +
    "\uffbe\023\uffbe\024\uffbe\025\uffbe\026\uffbe\027\uffbe\030\uffbe" +
    "\031\uffbe\032\uffbe\034\uffbe\035\uffbe\036\uffbe\044\uffbe\056" +
    "\uffbe\001\002\000\004\033\061\001\002\000\016\025\042" +
    "\026\033\033\043\047\024\050\040\051\031\001\002\000" +
    "\016\025\042\026\033\033\043\047\024\050\040\051\031" +
    "\001\002\000\006\025\045\034\046\001\002\000\016\025" +
    "\042\026\033\033\043\047\024\050\040\051\031\001\002" +
    "\000\050\006\uffbc\007\uffbc\017\uffbc\020\uffbc\021\uffbc\022" +
    "\uffbc\023\uffbc\024\uffbc\025\uffbc\026\uffbc\027\uffbc\030\uffbc" +
    "\031\uffbc\032\uffbc\034\uffbc\035\uffbc\036\uffbc\044\uffbc\056" +
    "\uffbc\001\002\000\046\006\uffca\007\uffca\017\uffca\020\uffca" +
    "\021\uffca\022\uffca\023\uffca\024\uffca\025\uffca\027\050\030" +
    "\053\031\051\032\052\034\uffca\035\uffca\036\uffca\044\uffca" +
    "\056\uffca\001\002\000\016\025\042\026\033\033\043\047" +
    "\024\050\040\051\031\001\002\000\016\025\042\026\033" +
    "\033\043\047\024\050\040\051\031\001\002\000\016\025" +
    "\042\026\033\033\043\047\024\050\040\051\031\001\002" +
    "\000\016\025\042\026\033\033\043\047\024\050\040\051" +
    "\031\001\002\000\050\006\uffc6\007\uffc6\017\uffc6\020\uffc6" +
    "\021\uffc6\022\uffc6\023\uffc6\024\uffc6\025\uffc6\026\uffc6\027" +
    "\uffc6\030\uffc6\031\uffc6\032\uffc6\034\uffc6\035\uffc6\036\uffc6" +
    "\044\uffc6\056\uffc6\001\002\000\050\006\uffc5\007\uffc5\017" +
    "\uffc5\020\uffc5\021\uffc5\022\uffc5\023\uffc5\024\uffc5\025\uffc5" +
    "\026\uffc5\027\uffc5\030\uffc5\031\uffc5\032\uffc5\034\uffc5\035" +
    "\uffc5\036\uffc5\044\uffc5\056\uffc5\001\002\000\050\006\uffc4" +
    "\007\uffc4\017\uffc4\020\uffc4\021\uffc4\022\uffc4\023\uffc4\024" +
    "\uffc4\025\uffc4\026\uffc4\027\uffc4\030\uffc4\031\uffc4\032\uffc4" +
    "\034\uffc4\035\uffc4\036\uffc4\044\uffc4\056\uffc4\001\002\000" +
    "\050\006\uffc7\007\uffc7\017\uffc7\020\uffc7\021\uffc7\022\uffc7" +
    "\023\uffc7\024\uffc7\025\uffc7\026\uffc7\027\uffc7\030\uffc7\031" +
    "\uffc7\032\uffc7\034\uffc7\035\uffc7\036\uffc7\044\uffc7\056\uffc7" +
    "\001\002\000\050\006\uffc1\007\uffc1\017\uffc1\020\uffc1\021" +
    "\uffc1\022\uffc1\023\uffc1\024\uffc1\025\uffc1\026\uffc1\027\uffc1" +
    "\030\uffc1\031\uffc1\032\uffc1\034\uffc1\035\uffc1\036\uffc1\044" +
    "\uffc1\056\uffc1\001\002\000\004\053\062\001\002\000\004" +
    "\034\063\001\002\000\012\034\uffdd\035\uffdd\044\uffdd\056" +
    "\uffdd\001\002\000\016\025\042\026\033\033\043\047\024" +
    "\050\040\051\031\001\002\000\046\006\uffc9\007\uffc9\017" +
    "\uffc9\020\uffc9\021\uffc9\022\uffc9\023\uffc9\024\uffc9\025\uffc9" +
    "\027\050\030\053\031\051\032\052\034\uffc9\035\uffc9\036" +
    "\uffc9\044\uffc9\056\uffc9\001\002\000\004\053\067\001\002" +
    "\000\004\034\070\001\002\000\012\034\uffde\035\uffde\044" +
    "\uffde\056\uffde\001\002\000\050\006\uffc2\007\uffc2\017\uffc2" +
    "\020\uffc2\021\uffc2\022\uffc2\023\uffc2\024\uffc2\025\uffc2\026" +
    "\uffc2\027\uffc2\030\uffc2\031\uffc2\032\uffc2\034\uffc2\035\uffc2" +
    "\036\uffc2\044\uffc2\056\uffc2\001\002\000\004\053\073\001" +
    "\002\000\004\034\074\001\002\000\012\034\uffdf\035\uffdf" +
    "\044\uffdf\056\uffdf\001\002\000\032\025\042\026\033\033" +
    "\043\040\034\041\027\042\041\044\uffe9\047\024\050\040" +
    "\051\031\052\036\056\uffe9\001\002\000\010\035\uffe5\044" +
    "\uffe5\056\uffe5\001\002\000\010\035\100\044\uffe8\056\uffe8" +
    "\001\002\000\026\025\042\026\033\033\043\040\034\041" +
    "\027\042\041\047\024\050\040\051\031\052\036\001\002" +
    "\000\004\033\102\001\002\000\006\034\104\047\106\001" +
    "\002\000\006\034\247\035\246\001\002\000\004\036\112" +
    "\001\002\000\006\034\ufff6\035\ufff6\001\002\000\010\034" +
    "\ufff3\035\ufff3\043\107\001\002\000\020\025\042\026\033" +
    "\033\043\047\024\050\040\051\031\052\111\001\002\000" +
    "\010\025\045\034\ufff5\035\ufff5\001\002\000\006\034\ufff4" +
    "\035\ufff4\001\002\000\016\037\113\040\034\041\027\042" +
    "\041\047\014\056\114\001\002\000\004\033\236\001\002" +
    "\000\004\054\127\001\002\000\010\002\ufff9\004\ufff9\047" +
    "\ufff9\001\002\000\006\044\uffec\056\uffec\001\002\000\006" +
    "\044\uffea\056\uffea\001\002\000\006\044\124\056\uffed\001" +
    "\002\000\004\056\123\001\002\000\006\044\uffeb\056\uffeb" +
    "\001\002\000\034\002\ufff2\004\ufff2\010\ufff2\011\ufff2\012" +
    "\ufff2\013\ufff2\016\ufff2\037\ufff2\040\ufff2\041\ufff2\042\ufff2" +
    "\047\ufff2\055\ufff2\001\002\000\016\037\113\040\034\041" +
    "\027\042\041\047\014\056\uffee\001\002\000\004\056\uffef" +
    "\001\002\000\004\056\ufff0\001\002\000\022\010\135\013" +
    "\140\016\133\037\113\040\034\041\027\042\041\047\014" +
    "\001\002\000\024\010\uffd8\013\uffd8\016\uffd8\037\uffd8\040" +
    "\uffd8\041\uffd8\042\uffd8\047\uffd8\055\uffd8\001\002\000\004" +
    "\056\235\001\002\000\024\010\uffda\013\uffda\016\uffda\037" +
    "\uffda\040\uffda\041\uffda\042\uffda\047\uffda\055\uffda\001\002" +
    "\000\020\005\162\025\042\026\033\033\170\047\024\050" +
    "\040\051\031\001\002\000\024\010\135\013\140\016\133" +
    "\037\113\040\034\041\027\042\041\047\014\055\230\001" +
    "\002\000\020\005\162\025\042\026\033\033\170\047\024" +
    "\050\040\051\031\001\002\000\024\010\uffdb\013\uffdb\016" +
    "\uffdb\037\uffdb\040\uffdb\041\uffdb\042\uffdb\047\uffdb\055\uffdb" +
    "\001\002\000\024\010\uffd9\013\uffd9\016\uffd9\037\uffd9\040" +
    "\uffd9\041\uffd9\042\uffd9\047\uffd9\055\uffd9\001\002\000\004" +
    "\047\014\001\002\000\006\014\uffcf\035\143\001\002\000" +
    "\004\014\144\001\002\000\006\014\uffd0\047\022\001\002" +
    "\000\004\015\146\001\002\000\004\036\160\001\002\000" +
    "\004\033\147\001\002\000\016\025\042\026\033\033\043" +
    "\047\024\050\040\051\031\001\002\000\010\025\045\034" +
    "\152\035\151\001\002\000\016\025\042\026\033\033\043" +
    "\047\024\050\040\051\031\001\002\000\004\036\uffcd\001" +
    "\002\000\010\025\045\034\155\035\154\001\002\000\016" +
    "\025\042\026\033\033\043\047\024\050\040\051\031\001" +
    "\002\000\004\036\uffcc\001\002\000\006\025\045\034\157" +
    "\001\002\000\004\036\uffcb\001\002\000\016\037\113\040" +
    "\034\041\027\042\041\047\014\056\114\001\002\000\024" +
    "\010\uffce\013\uffce\016\uffce\037\uffce\040\uffce\041\uffce\042" +
    "\uffce\047\uffce\055\uffce\001\002\000\020\005\162\025\042" +
    "\026\033\033\170\047\024\050\040\051\031\001\002\000" +
    "\010\006\uffb6\007\uffb6\036\uffb6\001\002\000\010\006\213" +
    "\007\uffba\036\uffba\001\002\000\020\017\175\020\176\021" +
    "\200\022\177\023\173\024\174\025\045\001\002\000\010" +
    "\006\uffb8\007\uffb8\036\uffb8\001\002\000\006\007\211\036" +
    "\210\001\002\000\016\025\042\026\033\033\170\047\024" +
    "\050\040\051\031\001\002\000\004\034\207\001\002\000" +
    "\022\017\175\020\176\021\200\022\177\023\173\024\174" +
    "\025\045\034\046\001\002\000\016\025\042\026\033\033" +
    "\043\047\024\050\040\051\031\001\002\000\016\025\042" +
    "\026\033\033\043\047\024\050\040\051\031\001\002\000" +
    "\016\025\042\026\033\033\043\047\024\050\040\051\031" +
    "\001\002\000\016\025\042\026\033\033\043\047\024\050" +
    "\040\051\031\001\002\000\016\025\042\026\033\033\043" +
    "\047\024\050\040\051\031\001\002\000\016\025\042\026" +
    "\033\033\043\047\024\050\040\051\031\001\002\000\014" +
    "\006\uffb2\007\uffb2\025\045\034\uffb2\036\uffb2\001\002\000" +
    "\014\006\uffb1\007\uffb1\025\045\034\uffb1\036\uffb1\001\002" +
    "\000\014\006\uffb3\007\uffb3\025\045\034\uffb3\036\uffb3\001" +
    "\002\000\014\006\uffb4\007\uffb4\025\045\034\uffb4\036\uffb4" +
    "\001\002\000\014\006\uffb5\007\uffb5\025\045\034\uffb5\036" +
    "\uffb5\001\002\000\014\006\uffb0\007\uffb0\025\045\034\uffb0" +
    "\036\uffb0\001\002\000\012\006\uffaf\007\uffaf\034\uffaf\036" +
    "\uffaf\001\002\000\016\037\113\040\034\041\027\042\041" +
    "\047\014\056\114\001\002\000\020\005\162\025\042\026" +
    "\033\033\170\047\024\050\040\051\031\001\002\000\010" +
    "\006\213\007\uffbb\036\uffbb\001\002\000\020\005\162\025" +
    "\042\026\033\033\170\047\024\050\040\051\031\001\002" +
    "\000\010\006\uffb9\007\uffb9\036\uffb9\001\002\000\030\010" +
    "\uffd4\011\uffd4\012\uffd4\013\uffd4\016\uffd4\037\uffd4\040\uffd4" +
    "\041\uffd4\042\uffd4\047\uffd4\055\uffd4\001\002\000\030\010" +
    "\uffd2\011\220\012\221\013\uffd2\016\uffd2\037\uffd2\040\uffd2" +
    "\041\uffd2\042\uffd2\047\uffd2\055\uffd2\001\002\000\024\010" +
    "\uffd6\013\uffd6\016\uffd6\037\uffd6\040\uffd6\041\uffd6\042\uffd6" +
    "\047\uffd6\055\uffd6\001\002\000\020\005\162\025\042\026" +
    "\033\033\170\047\024\050\040\051\031\001\002\000\004" +
    "\036\222\001\002\000\016\037\113\040\034\041\027\042" +
    "\041\047\014\056\114\001\002\000\024\010\uffd3\013\uffd3" +
    "\016\uffd3\037\uffd3\040\uffd3\041\uffd3\042\uffd3\047\uffd3\055" +
    "\uffd3\001\002\000\006\007\211\036\225\001\002\000\016" +
    "\037\113\040\034\041\027\042\041\047\014\056\114\001" +
    "\002\000\030\010\uffd5\011\uffd5\012\uffd5\013\uffd5\016\uffd5" +
    "\037\uffd5\040\uffd5\041\uffd5\042\uffd5\047\uffd5\055\uffd5\001" +
    "\002\000\010\006\uffb7\007\uffb7\036\uffb7\001\002\000\034" +
    "\002\ufff1\004\ufff1\010\ufff1\011\ufff1\012\ufff1\013\ufff1\016" +
    "\ufff1\037\ufff1\040\ufff1\041\ufff1\042\ufff1\047\ufff1\055\ufff1" +
    "\001\002\000\024\010\uffdc\013\uffdc\016\uffdc\037\uffdc\040" +
    "\uffdc\041\uffdc\042\uffdc\047\uffdc\055\uffdc\001\002\000\006" +
    "\007\211\036\233\001\002\000\016\037\113\040\034\041" +
    "\027\042\041\047\014\056\114\001\002\000\024\010\uffd1" +
    "\013\uffd1\016\uffd1\037\uffd1\040\uffd1\041\uffd1\042\uffd1\047" +
    "\uffd1\055\uffd1\001\002\000\024\010\uffd7\013\uffd7\016\uffd7" +
    "\037\uffd7\040\uffd7\041\uffd7\042\uffd7\047\uffd7\055\uffd7\001" +
    "\002\000\030\025\042\026\033\033\043\040\034\041\027" +
    "\042\041\047\024\050\040\051\031\052\036\053\237\001" +
    "\002\000\006\034\uffab\035\uffab\001\002\000\006\034\243" +
    "\035\242\001\002\000\006\034\uffac\035\uffac\001\002\000" +
    "\030\025\042\026\033\033\043\040\034\041\027\042\041" +
    "\047\024\050\040\051\031\052\036\053\245\001\002\000" +
    "\006\044\uffe0\056\uffe0\001\002\000\006\034\uffae\035\uffae" +
    "\001\002\000\006\034\uffad\035\uffad\001\002\000\004\047" +
    "\106\001\002\000\004\036\250\001\002\000\016\037\113" +
    "\040\034\041\027\042\041\047\014\056\114\001\002\000" +
    "\010\002\ufffa\004\ufffa\047\ufffa\001\002\000\006\034\ufff7" +
    "\035\ufff7\001\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\251\000\006\002\004\003\005\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\004\012\011\011\012\010" +
    "\041\007\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\011\011\012\010" +
    "\041\014\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\020\013\076\014\022\016\031\027\024" +
    "\030\036\031\027\032\034\001\001\000\002\001\001\000" +
    "\020\013\025\014\022\016\031\027\024\030\036\031\027" +
    "\032\034\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\031\070\032\034\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\031\057\032\034" +
    "\001\001\000\012\027\043\030\036\031\027\032\034\001" +
    "\001\000\002\001\001\000\010\030\046\031\027\032\034" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\031" +
    "\056\032\034\001\001\000\006\031\055\032\034\001\001" +
    "\000\006\031\054\032\034\001\001\000\006\031\053\032" +
    "\034\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\030\064" +
    "\031\027\032\034\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\016\014\075\016\031\027\024\030\036\031\027\032\034" +
    "\001\001\000\002\001\001\000\002\001\001\000\016\014" +
    "\075\016\031\027\024\030\036\031\027\032\034\001\001" +
    "\000\002\001\001\000\006\042\102\043\104\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\027\107\030\036\031\027\032\034\001" +
    "\001\000\002\001\001\000\002\001\001\000\020\005\114" +
    "\006\120\010\117\011\115\012\010\015\121\016\116\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\007\124\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\016\006\125\010\117\011\115\012\010\015\121\016" +
    "\116\001\001\000\002\001\001\000\002\001\001\000\030" +
    "\006\130\010\117\011\115\012\010\015\121\016\116\017" +
    "\133\020\131\023\127\025\136\036\135\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\022\027" +
    "\164\030\036\031\027\032\034\033\231\034\163\035\165" +
    "\037\162\001\001\000\026\006\130\010\117\011\115\012" +
    "\010\015\121\016\116\020\131\023\127\025\136\036\230" +
    "\001\001\000\022\027\164\030\036\031\027\032\034\033" +
    "\166\034\163\035\165\037\162\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\012\140\001\001\000\004\024" +
    "\141\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\026\144\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\027\147\030\036\031\027\032\034\001\001\000\002" +
    "\001\001\000\012\027\152\030\036\031\027\032\034\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\027\155" +
    "\030\036\031\027\032\034\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\020\005\160\006\120" +
    "\010\117\011\115\012\010\015\121\016\116\001\001\000" +
    "\002\001\001\000\016\027\164\030\036\031\027\032\034" +
    "\035\226\037\162\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\027\171\030\036\031\027\032\034\037\170\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\027\205" +
    "\030\036\031\027\032\034\001\001\000\012\027\204\030" +
    "\036\031\027\032\034\001\001\000\012\027\203\030\036" +
    "\031\027\032\034\001\001\000\012\027\202\030\036\031" +
    "\027\032\034\001\001\000\012\027\201\030\036\031\027" +
    "\032\034\001\001\000\012\027\200\030\036\031\027\032" +
    "\034\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\020\005\214\006\120\010\117" +
    "\011\115\012\010\015\121\016\116\001\001\000\020\027" +
    "\164\030\036\031\027\032\034\034\211\035\165\037\162" +
    "\001\001\000\002\001\001\000\016\027\164\030\036\031" +
    "\027\032\034\035\213\037\162\001\001\000\002\001\001" +
    "\000\004\021\215\001\001\000\004\022\216\001\001\000" +
    "\002\001\001\000\022\027\164\030\036\031\027\032\034" +
    "\033\223\034\163\035\165\037\162\001\001\000\002\001" +
    "\001\000\020\005\222\006\120\010\117\011\115\012\010" +
    "\015\121\016\116\001\001\000\002\001\001\000\002\001" +
    "\001\000\020\005\225\006\120\010\117\011\115\012\010" +
    "\015\121\016\116\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\020\005\233\006\120\010\117\011\115\012\010\015" +
    "\121\016\116\001\001\000\002\001\001\000\002\001\001" +
    "\000\020\014\240\016\031\027\024\030\036\031\027\032" +
    "\034\040\237\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\016\014\243\016\031\027\024\030" +
    "\036\031\027\032\034\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\043\251\001\001\000" +
    "\002\001\001\000\020\005\250\006\120\010\117\011\115" +
    "\012\010\015\121\016\116\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$SintaxisPython$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$SintaxisPython$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$SintaxisPython$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    private Symbol s;
    
    public void syntax_error(Symbol sym){
        System.out.println("\n" + sym.value + sym.sym);
        System.out.println("Error Sintactico en la letra: " + sym.value + "   <linea>: "  + (sym.right + 1) + "    <columna>: " + (sym.left + 1) + "\n");
    }

    public void unrecovered_syntax_error(Symbol sym) throws java.lang.Exception{
        System.out.println("\n" + sym.value + sym.sym);
        System.out.println("Error Sintactico en la letra: " + sym.value + "   <linea>: "  + (sym.right + 1) + "    <columna>: " + (sym.left + 1) + "\n");
    }

    public Symbol getS(){
        System.out.println(this.s.value);
        System.out.print(this.s.value);
        return this.s;
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$SintaxisPython$actions {
  private final SintaxisPython parser;

  /** Constructor */
  CUP$SintaxisPython$actions(SintaxisPython parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$SintaxisPython$do_action_part00000000(
    int                        CUP$SintaxisPython$act_num,
    java_cup.runtime.lr_parser CUP$SintaxisPython$parser,
    java.util.Stack            CUP$SintaxisPython$stack,
    int                        CUP$SintaxisPython$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$SintaxisPython$result;

      /* select the action based on the action number */
      switch (CUP$SintaxisPython$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= PYTHON EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-1)).value;
		RESULT = start_val;
              CUP$SintaxisPython$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$SintaxisPython$parser.done_parsing();
          return CUP$SintaxisPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // PYTHON ::= ESP DEFS 
            {
              Object RESULT =null;

              CUP$SintaxisPython$result = parser.getSymbolFactory().newSymbol("PYTHON",0, ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), RESULT);
            }
          return CUP$SintaxisPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // PYTHON ::= ESP 
            {
              Object RESULT =null;

              CUP$SintaxisPython$result = parser.getSymbolFactory().newSymbol("PYTHON",0, ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), RESULT);
            }
          return CUP$SintaxisPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // ESP ::= newline 
            {
              Object RESULT =null;

              CUP$SintaxisPython$result = parser.getSymbolFactory().newSymbol("ESP",1, ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), RESULT);
            }
          return CUP$SintaxisPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // ESP ::= 
            {
              Object RESULT =null;

              CUP$SintaxisPython$result = parser.getSymbolFactory().newSymbol("ESP",1, ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), RESULT);
            }
          return CUP$SintaxisPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // DEFS ::= DEFS DEF 
            {
              Object RESULT =null;

              CUP$SintaxisPython$result = parser.getSymbolFactory().newSymbol("DEFS",2, ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), RESULT);
            }
          return CUP$SintaxisPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // DEFS ::= DEF 
            {
              Object RESULT =null;

              CUP$SintaxisPython$result = parser.getSymbolFactory().newSymbol("DEFS",2, ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), RESULT);
            }
          return CUP$SintaxisPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // DEF ::= deff id para PAR_LIST parc dosp SUITE 
            {
              Object RESULT =null;

              CUP$SintaxisPython$result = parser.getSymbolFactory().newSymbol("DEF",31, ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-6)), ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), RESULT);
            }
          return CUP$SintaxisPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // DEF ::= deff id para parc dosp SUITE 
            {
              Object RESULT =null;

              CUP$SintaxisPython$result = parser.getSymbolFactory().newSymbol("DEF",31, ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-5)), ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), RESULT);
            }
          return CUP$SintaxisPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // DEF ::= AS_VAR newline 
            {
              Object RESULT =null;

              CUP$SintaxisPython$result = parser.getSymbolFactory().newSymbol("DEF",31, ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), RESULT);
            }
          return CUP$SintaxisPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // PAR_LIST ::= PAR_LIST coma DEFPARAM 
            {
              Object RESULT =null;

              CUP$SintaxisPython$result = parser.getSymbolFactory().newSymbol("PAR_LIST",32, ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), RESULT);
            }
          return CUP$SintaxisPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // PAR_LIST ::= DEFPARAM 
            {
              Object RESULT =null;

              CUP$SintaxisPython$result = parser.getSymbolFactory().newSymbol("PAR_LIST",32, ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), RESULT);
            }
          return CUP$SintaxisPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // DEFPARAM ::= id igual OPERACION_A 
            {
              Object RESULT =null;

              CUP$SintaxisPython$result = parser.getSymbolFactory().newSymbol("DEFPARAM",33, ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), RESULT);
            }
          return CUP$SintaxisPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // DEFPARAM ::= id igual character 
            {
              Object RESULT =null;

              CUP$SintaxisPython$result = parser.getSymbolFactory().newSymbol("DEFPARAM",33, ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), RESULT);
            }
          return CUP$SintaxisPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // DEFPARAM ::= id 
            {
              Object RESULT =null;

              CUP$SintaxisPython$result = parser.getSymbolFactory().newSymbol("DEFPARAM",33, ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), RESULT);
            }
          return CUP$SintaxisPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // SUITE ::= STMT_LIST newline 
            {
              Object RESULT =null;

              CUP$SintaxisPython$result = parser.getSymbolFactory().newSymbol("SUITE",3, ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), RESULT);
            }
          return CUP$SintaxisPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // SUITE ::= newline indent STATEMENTS dedent 
            {
              Object RESULT =null;

              CUP$SintaxisPython$result = parser.getSymbolFactory().newSymbol("SUITE",3, ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), RESULT);
            }
          return CUP$SintaxisPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // STMT_LIST ::= STATEMENTLINE puntocoma STMT_LIST 
            {
              Object RESULT =null;

              CUP$SintaxisPython$result = parser.getSymbolFactory().newSymbol("STMT_LIST",4, ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), RESULT);
            }
          return CUP$SintaxisPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // STMT_LIST ::= STATEMENTLINE PC 
            {
              Object RESULT =null;

              CUP$SintaxisPython$result = parser.getSymbolFactory().newSymbol("STMT_LIST",4, ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), RESULT);
            }
          return CUP$SintaxisPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // PC ::= puntocoma 
            {
              Object RESULT =null;

              CUP$SintaxisPython$result = parser.getSymbolFactory().newSymbol("PC",5, ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), RESULT);
            }
          return CUP$SintaxisPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // PC ::= 
            {
              Object RESULT =null;

              CUP$SintaxisPython$result = parser.getSymbolFactory().newSymbol("PC",5, ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), RESULT);
            }
          return CUP$SintaxisPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // STATEMENTLINE ::= AS_VAR 
            {
              Object RESULT =null;

              CUP$SintaxisPython$result = parser.getSymbolFactory().newSymbol("STATEMENTLINE",6, ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), RESULT);
            }
          return CUP$SintaxisPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // STATEMENTLINE ::= WRITE 
            {
              Object RESULT =null;

              CUP$SintaxisPython$result = parser.getSymbolFactory().newSymbol("STATEMENTLINE",6, ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), RESULT);
            }
          return CUP$SintaxisPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // STATEMENTLINE ::= INPUT 
            {
              Object RESULT =null;

              CUP$SintaxisPython$result = parser.getSymbolFactory().newSymbol("STATEMENTLINE",6, ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), RESULT);
            }
          return CUP$SintaxisPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // AS_VAR ::= LISTVAR coma igual LISTDEF coma 
            {
              Object RESULT =null;

              CUP$SintaxisPython$result = parser.getSymbolFactory().newSymbol("AS_VAR",7, ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-4)), ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), RESULT);
            }
          return CUP$SintaxisPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // AS_VAR ::= LISTVAR igual LISTDEF 
            {
              Object RESULT =null;

              CUP$SintaxisPython$result = parser.getSymbolFactory().newSymbol("AS_VAR",7, ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), RESULT);
            }
          return CUP$SintaxisPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // LISTVAR ::= LISTVAR coma id 
            {
              Object RESULT =null;

              CUP$SintaxisPython$result = parser.getSymbolFactory().newSymbol("LISTVAR",8, ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), RESULT);
            }
          return CUP$SintaxisPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // LISTVAR ::= id 
            {
              Object RESULT =null;

              CUP$SintaxisPython$result = parser.getSymbolFactory().newSymbol("LISTVAR",8, ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), RESULT);
            }
          return CUP$SintaxisPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // LISTDEF ::= LISTDEF coma D 
            {
              Object RESULT =null;

              CUP$SintaxisPython$result = parser.getSymbolFactory().newSymbol("LISTDEF",9, ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), RESULT);
            }
          return CUP$SintaxisPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // LISTDEF ::= D 
            {
              Object RESULT =null;

              CUP$SintaxisPython$result = parser.getSymbolFactory().newSymbol("LISTDEF",9, ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), RESULT);
            }
          return CUP$SintaxisPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // D ::= character 
            {
              Object RESULT =null;

              CUP$SintaxisPython$result = parser.getSymbolFactory().newSymbol("D",10, ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), RESULT);
            }
          return CUP$SintaxisPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // D ::= OPERACION_A 
            {
              Object RESULT =null;

              CUP$SintaxisPython$result = parser.getSymbolFactory().newSymbol("D",10, ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), RESULT);
            }
          return CUP$SintaxisPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // D ::= INPUT 
            {
              Object RESULT =null;

              CUP$SintaxisPython$result = parser.getSymbolFactory().newSymbol("D",10, ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), RESULT);
            }
          return CUP$SintaxisPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // WRITE ::= print para STRING parc 
            {
              Object RESULT =null;

              CUP$SintaxisPython$result = parser.getSymbolFactory().newSymbol("WRITE",11, ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), RESULT);
            }
          return CUP$SintaxisPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // INPUT ::= intinput para string parc 
            {
              Object RESULT =null;

              CUP$SintaxisPython$result = parser.getSymbolFactory().newSymbol("INPUT",12, ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), RESULT);
            }
          return CUP$SintaxisPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // INPUT ::= charinput para string parc 
            {
              Object RESULT =null;

              CUP$SintaxisPython$result = parser.getSymbolFactory().newSymbol("INPUT",12, ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), RESULT);
            }
          return CUP$SintaxisPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // INPUT ::= floatinput para string parc 
            {
              Object RESULT =null;

              CUP$SintaxisPython$result = parser.getSymbolFactory().newSymbol("INPUT",12, ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), RESULT);
            }
          return CUP$SintaxisPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // STATEMENTS ::= STATEMENTS STATEMENT 
            {
              Object RESULT =null;

              CUP$SintaxisPython$result = parser.getSymbolFactory().newSymbol("STATEMENTS",13, ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), RESULT);
            }
          return CUP$SintaxisPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // STATEMENTS ::= STATEMENT 
            {
              Object RESULT =null;

              CUP$SintaxisPython$result = parser.getSymbolFactory().newSymbol("STATEMENTS",13, ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), RESULT);
            }
          return CUP$SintaxisPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // STATEMENT ::= IF 
            {
              Object RESULT =null;

              CUP$SintaxisPython$result = parser.getSymbolFactory().newSymbol("STATEMENT",28, ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), RESULT);
            }
          return CUP$SintaxisPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // STATEMENT ::= FOR 
            {
              Object RESULT =null;

              CUP$SintaxisPython$result = parser.getSymbolFactory().newSymbol("STATEMENT",28, ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), RESULT);
            }
          return CUP$SintaxisPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // STATEMENT ::= WHILE 
            {
              Object RESULT =null;

              CUP$SintaxisPython$result = parser.getSymbolFactory().newSymbol("STATEMENT",28, ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), RESULT);
            }
          return CUP$SintaxisPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // STATEMENT ::= STMT_LIST newline 
            {
              Object RESULT =null;

              CUP$SintaxisPython$result = parser.getSymbolFactory().newSymbol("STATEMENT",28, ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), RESULT);
            }
          return CUP$SintaxisPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // IF ::= iff CONDICION dosp SUITE ELSEIF ELSE 
            {
              Object RESULT =null;

              CUP$SintaxisPython$result = parser.getSymbolFactory().newSymbol("IF",14, ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-5)), ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), RESULT);
            }
          return CUP$SintaxisPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // ELSEIF ::= ELSEIF elseiff CONDICION dosp SUITE 
            {
              Object RESULT =null;

              CUP$SintaxisPython$result = parser.getSymbolFactory().newSymbol("ELSEIF",15, ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-4)), ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), RESULT);
            }
          return CUP$SintaxisPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // ELSEIF ::= 
            {
              Object RESULT =null;

              CUP$SintaxisPython$result = parser.getSymbolFactory().newSymbol("ELSEIF",15, ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), RESULT);
            }
          return CUP$SintaxisPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // ELSE ::= elsee dosp SUITE 
            {
              Object RESULT =null;

              CUP$SintaxisPython$result = parser.getSymbolFactory().newSymbol("ELSE",16, ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), RESULT);
            }
          return CUP$SintaxisPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // ELSE ::= 
            {
              Object RESULT =null;

              CUP$SintaxisPython$result = parser.getSymbolFactory().newSymbol("ELSE",16, ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), RESULT);
            }
          return CUP$SintaxisPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // WHILE ::= whilee CONDICION dosp SUITE 
            {
              Object RESULT =null;

              CUP$SintaxisPython$result = parser.getSymbolFactory().newSymbol("WHILE",17, ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), RESULT);
            }
          return CUP$SintaxisPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // COMA ::= coma 
            {
              Object RESULT =null;

              CUP$SintaxisPython$result = parser.getSymbolFactory().newSymbol("COMA",18, ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), RESULT);
            }
          return CUP$SintaxisPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // COMA ::= 
            {
              Object RESULT =null;

              CUP$SintaxisPython$result = parser.getSymbolFactory().newSymbol("COMA",18, ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), RESULT);
            }
          return CUP$SintaxisPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // FOR ::= forr LISTVAR COMA inn RANGE dosp SUITE 
            {
              Object RESULT =null;

              CUP$SintaxisPython$result = parser.getSymbolFactory().newSymbol("FOR",19, ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-6)), ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), RESULT);
            }
          return CUP$SintaxisPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // RANGE ::= range para OPERACION_A parc 
            {
              Object RESULT =null;

              CUP$SintaxisPython$result = parser.getSymbolFactory().newSymbol("RANGE",20, ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), RESULT);
            }
          return CUP$SintaxisPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // RANGE ::= range para OPERACION_A coma OPERACION_A parc 
            {
              Object RESULT =null;

              CUP$SintaxisPython$result = parser.getSymbolFactory().newSymbol("RANGE",20, ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-5)), ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), RESULT);
            }
          return CUP$SintaxisPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // RANGE ::= range para OPERACION_A coma OPERACION_A coma OPERACION_A parc 
            {
              Object RESULT =null;

              CUP$SintaxisPython$result = parser.getSymbolFactory().newSymbol("RANGE",20, ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-7)), ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), RESULT);
            }
          return CUP$SintaxisPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // OPERACION_A ::= OPERACION_A mas OPERACION_M 
            {
              Object RESULT =null;

              CUP$SintaxisPython$result = parser.getSymbolFactory().newSymbol("OPERACION_A",21, ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), RESULT);
            }
          return CUP$SintaxisPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // OPERACION_A ::= OPERACION_M menos OPERACION_M 
            {
              Object RESULT =null;

              CUP$SintaxisPython$result = parser.getSymbolFactory().newSymbol("OPERACION_A",21, ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), RESULT);
            }
          return CUP$SintaxisPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // OPERACION_A ::= OPERACION_M 
            {
              Object RESULT =null;

              CUP$SintaxisPython$result = parser.getSymbolFactory().newSymbol("OPERACION_A",21, ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), RESULT);
            }
          return CUP$SintaxisPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // OPERACION_M ::= OPERACION_M por OPERACION_U 
            {
              Object RESULT =null;

              CUP$SintaxisPython$result = parser.getSymbolFactory().newSymbol("OPERACION_M",22, ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), RESULT);
            }
          return CUP$SintaxisPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // OPERACION_M ::= OPERACION_M div OPERACION_U 
            {
              Object RESULT =null;

              CUP$SintaxisPython$result = parser.getSymbolFactory().newSymbol("OPERACION_M",22, ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), RESULT);
            }
          return CUP$SintaxisPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // OPERACION_M ::= OPERACION_M floor OPERACION_U 
            {
              Object RESULT =null;

              CUP$SintaxisPython$result = parser.getSymbolFactory().newSymbol("OPERACION_M",22, ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), RESULT);
            }
          return CUP$SintaxisPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // OPERACION_M ::= OPERACION_M mod OPERACION_U 
            {
              Object RESULT =null;

              CUP$SintaxisPython$result = parser.getSymbolFactory().newSymbol("OPERACION_M",22, ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), RESULT);
            }
          return CUP$SintaxisPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // OPERACION_M ::= OPERACION_U 
            {
              Object RESULT =null;

              CUP$SintaxisPython$result = parser.getSymbolFactory().newSymbol("OPERACION_M",22, ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), RESULT);
            }
          return CUP$SintaxisPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // OPERACION_U ::= menos OPERACION_U 
            {
              Object RESULT =null;

              CUP$SintaxisPython$result = parser.getSymbolFactory().newSymbol("OPERACION_U",23, ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), RESULT);
            }
          return CUP$SintaxisPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // OPERACION_U ::= mas OPERACION_U 
            {
              Object RESULT =null;

              CUP$SintaxisPython$result = parser.getSymbolFactory().newSymbol("OPERACION_U",23, ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), RESULT);
            }
          return CUP$SintaxisPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // OPERACION_U ::= ATOM 
            {
              Object RESULT =null;

              CUP$SintaxisPython$result = parser.getSymbolFactory().newSymbol("OPERACION_U",23, ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), RESULT);
            }
          return CUP$SintaxisPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // ATOM ::= id 
            {
              Object RESULT =null;

              CUP$SintaxisPython$result = parser.getSymbolFactory().newSymbol("ATOM",24, ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), RESULT);
            }
          return CUP$SintaxisPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // ATOM ::= entero 
            {
              Object RESULT =null;

              CUP$SintaxisPython$result = parser.getSymbolFactory().newSymbol("ATOM",24, ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), RESULT);
            }
          return CUP$SintaxisPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // ATOM ::= decimal 
            {
              Object RESULT =null;

              CUP$SintaxisPython$result = parser.getSymbolFactory().newSymbol("ATOM",24, ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), RESULT);
            }
          return CUP$SintaxisPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // ATOM ::= para OPERACION_A parc 
            {
              Object RESULT =null;

              CUP$SintaxisPython$result = parser.getSymbolFactory().newSymbol("ATOM",24, ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), RESULT);
            }
          return CUP$SintaxisPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // CONDICION ::= CONDICION orr AND 
            {
              Object RESULT =null;

              CUP$SintaxisPython$result = parser.getSymbolFactory().newSymbol("CONDICION",25, ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), RESULT);
            }
          return CUP$SintaxisPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // CONDICION ::= AND 
            {
              Object RESULT =null;

              CUP$SintaxisPython$result = parser.getSymbolFactory().newSymbol("CONDICION",25, ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), RESULT);
            }
          return CUP$SintaxisPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // AND ::= AND andd NOT 
            {
              Object RESULT =null;

              CUP$SintaxisPython$result = parser.getSymbolFactory().newSymbol("AND",26, ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), RESULT);
            }
          return CUP$SintaxisPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // AND ::= NOT 
            {
              Object RESULT =null;

              CUP$SintaxisPython$result = parser.getSymbolFactory().newSymbol("AND",26, ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), RESULT);
            }
          return CUP$SintaxisPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // NOT ::= nott NOT 
            {
              Object RESULT =null;

              CUP$SintaxisPython$result = parser.getSymbolFactory().newSymbol("NOT",27, ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), RESULT);
            }
          return CUP$SintaxisPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // NOT ::= COMPARACION 
            {
              Object RESULT =null;

              CUP$SintaxisPython$result = parser.getSymbolFactory().newSymbol("NOT",27, ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), RESULT);
            }
          return CUP$SintaxisPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // COMPARACION ::= OPERACION_A igig OPERACION_A 
            {
              Object RESULT =null;

              CUP$SintaxisPython$result = parser.getSymbolFactory().newSymbol("COMPARACION",29, ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), RESULT);
            }
          return CUP$SintaxisPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // COMPARACION ::= OPERACION_A noigual OPERACION_A 
            {
              Object RESULT =null;

              CUP$SintaxisPython$result = parser.getSymbolFactory().newSymbol("COMPARACION",29, ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), RESULT);
            }
          return CUP$SintaxisPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // COMPARACION ::= OPERACION_A menor OPERACION_A 
            {
              Object RESULT =null;

              CUP$SintaxisPython$result = parser.getSymbolFactory().newSymbol("COMPARACION",29, ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), RESULT);
            }
          return CUP$SintaxisPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // COMPARACION ::= OPERACION_A menorig OPERACION_A 
            {
              Object RESULT =null;

              CUP$SintaxisPython$result = parser.getSymbolFactory().newSymbol("COMPARACION",29, ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), RESULT);
            }
          return CUP$SintaxisPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // COMPARACION ::= OPERACION_A mayor OPERACION_A 
            {
              Object RESULT =null;

              CUP$SintaxisPython$result = parser.getSymbolFactory().newSymbol("COMPARACION",29, ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), RESULT);
            }
          return CUP$SintaxisPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // COMPARACION ::= OPERACION_A mayorig OPERACION_A 
            {
              Object RESULT =null;

              CUP$SintaxisPython$result = parser.getSymbolFactory().newSymbol("COMPARACION",29, ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), RESULT);
            }
          return CUP$SintaxisPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // COMPARACION ::= para COMPARACION parc 
            {
              Object RESULT =null;

              CUP$SintaxisPython$result = parser.getSymbolFactory().newSymbol("COMPARACION",29, ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), RESULT);
            }
          return CUP$SintaxisPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // STRING ::= STRING coma D 
            {
              Object RESULT =null;

              CUP$SintaxisPython$result = parser.getSymbolFactory().newSymbol("STRING",30, ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), RESULT);
            }
          return CUP$SintaxisPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // STRING ::= STRING coma string 
            {
              Object RESULT =null;

              CUP$SintaxisPython$result = parser.getSymbolFactory().newSymbol("STRING",30, ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), RESULT);
            }
          return CUP$SintaxisPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // STRING ::= D 
            {
              Object RESULT =null;

              CUP$SintaxisPython$result = parser.getSymbolFactory().newSymbol("STRING",30, ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), RESULT);
            }
          return CUP$SintaxisPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // STRING ::= string 
            {
              Object RESULT =null;

              CUP$SintaxisPython$result = parser.getSymbolFactory().newSymbol("STRING",30, ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), RESULT);
            }
          return CUP$SintaxisPython$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$SintaxisPython$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$SintaxisPython$do_action(
    int                        CUP$SintaxisPython$act_num,
    java_cup.runtime.lr_parser CUP$SintaxisPython$parser,
    java.util.Stack            CUP$SintaxisPython$stack,
    int                        CUP$SintaxisPython$top)
    throws java.lang.Exception
    {
              return CUP$SintaxisPython$do_action_part00000000(
                               CUP$SintaxisPython$act_num,
                               CUP$SintaxisPython$parser,
                               CUP$SintaxisPython$stack,
                               CUP$SintaxisPython$top);
    }
}

}
