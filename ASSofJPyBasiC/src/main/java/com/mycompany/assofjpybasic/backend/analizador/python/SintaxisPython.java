
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package com.mycompany.assofjpybasic.backend.analizador.python;

import java_cup.runtime.*;
import com.mycompany.assofjpybasic.backend.semantica.python.*;
import com.mycompany.assofjpybasic.backend.semantica.programa.*;
import com.mycompany.assofjpybasic.backend.semantica.programa.cod3.*;
import com.mycompany.assofjpybasic.backend.error.Errores;
import java.util.ArrayList;
import java.util.List;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class SintaxisPython extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return SintaxisPythonSym.class;
}

  /** Default constructor. */
  @Deprecated
  public SintaxisPython() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public SintaxisPython(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public SintaxisPython(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\133\000\002\002\004\000\002\002\004\000\002\002" +
    "\003\000\002\003\003\000\002\003\002\000\002\004\004" +
    "\000\002\004\003\000\002\043\002\000\002\013\012\000" +
    "\002\044\002\000\002\013\011\000\002\013\004\000\002" +
    "\015\005\000\002\015\003\000\002\045\002\000\002\026" +
    "\005\000\002\046\002\000\002\026\007\000\002\026\004" +
    "\000\002\032\005\000\002\032\004\000\002\005\003\000" +
    "\002\005\002\000\002\030\003\000\002\030\003\000\002" +
    "\030\003\000\002\030\004\000\002\041\007\000\002\041" +
    "\005\000\002\014\005\000\002\014\003\000\002\016\005" +
    "\000\002\016\003\000\002\022\003\000\002\022\003\000" +
    "\002\022\003\000\002\040\006\000\002\020\006\000\002" +
    "\020\006\000\002\020\006\000\002\027\004\000\002\027" +
    "\003\000\002\031\003\000\002\031\003\000\002\031\003" +
    "\000\002\031\004\000\002\031\003\000\002\033\010\000" +
    "\002\042\007\000\002\042\002\000\002\036\005\000\002" +
    "\036\002\000\002\035\006\000\002\006\003\000\002\006" +
    "\002\000\002\034\011\000\002\017\006\000\002\017\010" +
    "\000\002\017\012\000\002\021\005\000\002\021\005\000" +
    "\002\021\003\000\002\021\004\000\002\023\005\000\002" +
    "\023\005\000\002\023\005\000\002\023\003\000\002\024" +
    "\004\000\002\024\004\000\002\024\003\000\002\025\003" +
    "\000\002\025\003\000\002\025\003\000\002\025\005\000" +
    "\002\011\005\000\002\011\003\000\002\010\005\000\002" +
    "\010\003\000\002\007\004\000\002\007\003\000\002\007" +
    "\005\000\002\012\005\000\002\012\005\000\002\012\005" +
    "\000\002\012\005\000\002\012\005\000\002\012\005\000" +
    "\002\037\005\000\002\037\005\000\002\037\003\000\002" +
    "\037\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\256\000\012\002\ufffd\003\ufffd\004\ufffd\054\004\001" +
    "\002\000\010\002\ufffe\003\ufffe\004\ufffe\001\002\000\004" +
    "\002\260\001\002\000\010\002\uffff\003\010\004\007\001" +
    "\002\000\004\045\015\001\002\000\006\003\010\004\007" +
    "\001\002\000\010\002\ufffb\003\ufffb\004\ufffb\001\002\000" +
    "\010\002\000\003\010\004\007\001\002\000\010\002\ufffc" +
    "\003\ufffc\004\ufffc\001\002\000\010\002\ufff6\003\ufff6\004" +
    "\ufff6\001\002\000\004\032\016\001\002\000\006\033\020" +
    "\045\021\001\002\000\006\033\253\034\252\001\002\000" +
    "\004\035\022\001\002\000\006\033\ufff4\034\ufff4\001\002" +
    "\000\022\003\ufff8\036\ufff8\037\ufff8\040\ufff8\041\ufff8\044" +
    "\ufff8\045\ufff8\054\ufff8\001\002\000\022\003\026\036\ufff3" +
    "\037\ufff3\040\ufff3\041\ufff3\044\ufff3\045\ufff3\054\ufff1\001" +
    "\002\000\004\054\141\001\002\000\016\036\031\037\035" +
    "\040\033\041\041\044\043\045\032\001\002\000\004\053" +
    "\030\001\002\000\010\002\ufff7\003\ufff7\004\ufff7\001\002" +
    "\000\040\002\uffef\003\uffef\004\uffef\010\uffef\011\uffef\012" +
    "\uffef\013\uffef\016\uffef\036\uffef\037\uffef\040\uffef\041\uffef" +
    "\044\uffef\045\uffef\053\uffef\001\002\000\004\032\131\001" +
    "\002\000\006\034\uffe3\042\uffe3\001\002\000\004\032\126" +
    "\001\002\000\006\043\uffea\054\uffea\001\002\000\004\032" +
    "\123\001\002\000\006\043\uffe8\054\uffe8\001\002\000\006" +
    "\043\120\054\uffeb\001\002\000\004\054\117\001\002\000" +
    "\004\032\114\001\002\000\006\043\uffe9\054\uffe9\001\002" +
    "\000\030\003\064\025\067\026\060\032\053\037\035\040" +
    "\033\041\041\045\063\046\066\047\054\050\051\001\002" +
    "\000\006\034\046\042\045\001\002\000\030\003\064\025" +
    "\067\026\060\032\053\037\035\040\033\041\041\045\063" +
    "\046\066\047\054\050\051\001\002\000\006\042\047\045" +
    "\050\001\002\000\030\003\064\025\067\026\060\032\053" +
    "\037\035\040\033\041\041\045\063\046\066\047\054\050" +
    "\051\001\002\000\006\034\uffe4\042\uffe4\001\002\000\012" +
    "\033\uffe0\034\uffe0\043\uffe0\054\uffe0\001\002\000\012\033" +
    "\uffde\034\uffde\043\uffde\054\uffde\001\002\000\020\003\064" +
    "\025\067\026\060\032\053\045\063\046\066\047\054\001" +
    "\002\000\046\006\uffb9\007\uffb9\017\uffb9\020\uffb9\021\uffb9" +
    "\022\uffb9\023\uffb9\024\uffb9\025\uffb9\026\uffb9\027\uffb9\030" +
    "\uffb9\031\uffb9\033\uffb9\034\uffb9\035\uffb9\043\uffb9\054\uffb9" +
    "\001\002\000\046\006\uffbf\007\uffbf\017\uffbf\020\uffbf\021" +
    "\uffbf\022\uffbf\023\uffbf\024\uffbf\025\uffbf\026\uffbf\027\uffbf" +
    "\030\uffbf\031\uffbf\033\uffbf\034\uffbf\035\uffbf\043\uffbf\054" +
    "\uffbf\001\002\000\046\006\uffc4\007\uffc4\017\uffc4\020\uffc4" +
    "\021\uffc4\022\uffc4\023\uffc4\024\uffc4\025\uffc4\026\uffc4\027" +
    "\074\030\076\031\075\033\uffc4\034\uffc4\035\uffc4\043\uffc4" +
    "\054\uffc4\001\002\000\046\006\uffbc\007\uffbc\017\uffbc\020" +
    "\uffbc\021\uffbc\022\uffbc\023\uffbc\024\uffbc\025\uffbc\026\uffbc" +
    "\027\uffbc\030\uffbc\031\uffbc\033\uffbc\034\uffbc\035\uffbc\043" +
    "\uffbc\054\uffbc\001\002\000\016\025\067\026\060\032\053" +
    "\045\063\046\066\047\054\001\002\000\010\034\uffe1\043" +
    "\uffe1\054\uffe1\001\002\000\016\025\102\026\103\033\uffdf" +
    "\034\uffdf\043\uffdf\054\uffdf\001\002\000\046\006\uffbb\007" +
    "\uffbb\017\uffbb\020\uffbb\021\uffbb\022\uffbb\023\uffbb\024\uffbb" +
    "\025\uffbb\026\uffbb\027\uffbb\030\uffbb\031\uffbb\033\uffbb\034" +
    "\uffbb\035\uffbb\043\uffbb\054\uffbb\001\002\000\016\025\067" +
    "\026\060\032\053\045\063\046\066\047\054\001\002\000" +
    "\004\034\071\001\002\000\046\006\uffba\007\uffba\017\uffba" +
    "\020\uffba\021\uffba\022\uffba\023\uffba\024\uffba\025\uffba\026" +
    "\uffba\027\uffba\030\uffba\031\uffba\033\uffba\034\uffba\035\uffba" +
    "\043\uffba\054\uffba\001\002\000\016\025\067\026\060\032" +
    "\053\045\063\046\066\047\054\001\002\000\046\006\uffbd" +
    "\007\uffbd\017\uffbd\020\uffbd\021\uffbd\022\uffbd\023\uffbd\024" +
    "\uffbd\025\uffbd\026\uffbd\027\uffbd\030\uffbd\031\uffbd\033\uffbd" +
    "\034\uffbd\035\uffbd\043\uffbd\054\uffbd\001\002\000\034\003" +
    "\064\025\067\026\060\032\053\037\035\040\033\041\041" +
    "\043\uffe6\045\063\046\066\047\054\050\051\054\uffe6\001" +
    "\002\000\010\034\uffe2\043\uffe2\054\uffe2\001\002\000\046" +
    "\006\uffc3\007\uffc3\017\uffc3\020\uffc3\021\uffc3\022\uffc3\023" +
    "\uffc3\024\uffc3\025\uffc3\026\uffc3\027\074\030\076\031\075" +
    "\033\uffc3\034\uffc3\035\uffc3\043\uffc3\054\uffc3\001\002\000" +
    "\016\025\067\026\060\032\053\045\063\046\066\047\054" +
    "\001\002\000\016\025\067\026\060\032\053\045\063\046" +
    "\066\047\054\001\002\000\016\025\067\026\060\032\053" +
    "\045\063\046\066\047\054\001\002\000\046\006\uffc1\007" +
    "\uffc1\017\uffc1\020\uffc1\021\uffc1\022\uffc1\023\uffc1\024\uffc1" +
    "\025\uffc1\026\uffc1\027\uffc1\030\uffc1\031\uffc1\033\uffc1\034" +
    "\uffc1\035\uffc1\043\uffc1\054\uffc1\001\002\000\046\006\uffc0" +
    "\007\uffc0\017\uffc0\020\uffc0\021\uffc0\022\uffc0\023\uffc0\024" +
    "\uffc0\025\uffc0\026\uffc0\027\uffc0\030\uffc0\031\uffc0\033\uffc0" +
    "\034\uffc0\035\uffc0\043\uffc0\054\uffc0\001\002\000\046\006" +
    "\uffc2\007\uffc2\017\uffc2\020\uffc2\021\uffc2\022\uffc2\023\uffc2" +
    "\024\uffc2\025\uffc2\026\uffc2\027\uffc2\030\uffc2\031\uffc2\033" +
    "\uffc2\034\uffc2\035\uffc2\043\uffc2\054\uffc2\001\002\000\016" +
    "\025\067\026\060\032\053\045\063\046\066\047\054\001" +
    "\002\000\016\025\067\026\060\032\053\045\063\046\066" +
    "\047\054\001\002\000\046\006\uffc5\007\uffc5\017\uffc5\020" +
    "\uffc5\021\uffc5\022\uffc5\023\uffc5\024\uffc5\025\uffc5\026\uffc5" +
    "\027\074\030\076\031\075\033\uffc5\034\uffc5\035\uffc5\043" +
    "\uffc5\054\uffc5\001\002\000\046\006\uffc6\007\uffc6\017\uffc6" +
    "\020\uffc6\021\uffc6\022\uffc6\023\uffc6\024\uffc6\025\uffc6\026" +
    "\uffc6\027\074\030\076\031\075\033\uffc6\034\uffc6\035\uffc6" +
    "\043\uffc6\054\uffc6\001\002\000\046\006\uffbe\007\uffbe\017" +
    "\uffbe\020\uffbe\021\uffbe\022\uffbe\023\uffbe\024\uffbe\025\uffbe" +
    "\026\uffbe\027\uffbe\030\uffbe\031\uffbe\033\uffbe\034\uffbe\035" +
    "\uffbe\043\uffbe\054\uffbe\001\002\000\010\025\102\026\103" +
    "\033\110\001\002\000\046\006\uffb8\007\uffb8\017\uffb8\020" +
    "\uffb8\021\uffb8\022\uffb8\023\uffb8\024\uffb8\025\uffb8\026\uffb8" +
    "\027\uffb8\030\uffb8\031\uffb8\033\uffb8\034\uffb8\035\uffb8\043" +
    "\uffb8\054\uffb8\001\002\000\010\034\112\043\uffe5\054\uffe5" +
    "\001\002\000\030\003\064\025\067\026\060\032\053\037" +
    "\035\040\033\041\041\045\063\046\066\047\054\050\051" +
    "\001\002\000\006\043\uffe7\054\uffe7\001\002\000\004\051" +
    "\115\001\002\000\004\033\116\001\002\000\012\033\uffda" +
    "\034\uffda\043\uffda\054\uffda\001\002\000\040\002\ufff2\003" +
    "\ufff2\004\ufff2\010\ufff2\011\ufff2\012\ufff2\013\ufff2\016\ufff2" +
    "\036\ufff2\037\ufff2\040\ufff2\041\ufff2\044\ufff2\045\ufff2\053" +
    "\ufff2\001\002\000\020\036\031\037\035\040\033\041\041" +
    "\044\043\045\032\054\uffec\001\002\000\004\054\uffed\001" +
    "\002\000\004\054\uffee\001\002\000\004\051\124\001\002" +
    "\000\004\033\125\001\002\000\012\033\uffdb\034\uffdb\043" +
    "\uffdb\054\uffdb\001\002\000\004\051\127\001\002\000\004" +
    "\033\130\001\002\000\012\033\uffdc\034\uffdc\043\uffdc\054" +
    "\uffdc\001\002\000\032\003\064\025\067\026\060\032\053" +
    "\037\035\040\033\041\041\045\063\046\066\047\054\050" +
    "\051\051\132\001\002\000\006\033\uffa7\034\uffa7\001\002" +
    "\000\006\033\136\034\135\001\002\000\006\033\uffa8\034" +
    "\uffa8\001\002\000\032\003\064\025\067\026\060\032\053" +
    "\037\035\040\033\041\041\045\063\046\066\047\054\050" +
    "\051\051\137\001\002\000\006\043\uffdd\054\uffdd\001\002" +
    "\000\006\033\uffa9\034\uffa9\001\002\000\006\033\uffaa\034" +
    "\uffaa\001\002\000\004\052\142\001\002\000\026\003\151" +
    "\010\150\013\154\016\147\036\031\037\035\040\033\041" +
    "\041\044\043\045\032\001\002\000\030\003\uffd5\010\uffd5" +
    "\013\uffd5\016\uffd5\036\uffd5\037\uffd5\040\uffd5\041\uffd5\044" +
    "\uffd5\045\uffd5\053\uffd5\001\002\000\030\003\uffd7\010\uffd7" +
    "\013\uffd7\016\uffd7\036\uffd7\037\uffd7\040\uffd7\041\uffd7\044" +
    "\uffd7\045\uffd7\053\uffd7\001\002\000\004\054\251\001\002" +
    "\000\004\053\250\001\002\000\022\003\064\005\200\025" +
    "\067\026\060\032\205\045\063\046\066\047\054\001\002" +
    "\000\022\003\064\005\200\025\067\026\060\032\205\045" +
    "\063\046\066\047\054\001\002\000\030\003\uffd3\010\uffd3" +
    "\013\uffd3\016\uffd3\036\uffd3\037\uffd3\040\uffd3\041\uffd3\044" +
    "\uffd3\045\uffd3\053\uffd3\001\002\000\030\003\151\010\150" +
    "\013\154\016\147\036\031\037\035\040\033\041\041\044" +
    "\043\045\032\053\uffd8\001\002\000\030\003\uffd6\010\uffd6" +
    "\013\uffd6\016\uffd6\036\uffd6\037\uffd6\040\uffd6\041\uffd6\044" +
    "\uffd6\045\uffd6\053\uffd6\001\002\000\004\045\155\001\002" +
    "\000\006\014\uffcb\034\157\001\002\000\004\014\160\001" +
    "\002\000\004\014\uffcc\001\002\000\004\015\162\001\002" +
    "\000\004\035\174\001\002\000\004\032\163\001\002\000" +
    "\020\003\064\025\067\026\060\032\053\045\063\046\066" +
    "\047\054\001\002\000\012\025\102\026\103\033\166\034" +
    "\165\001\002\000\020\003\064\025\067\026\060\032\053" +
    "\045\063\046\066\047\054\001\002\000\004\035\uffc9\001" +
    "\002\000\012\025\102\026\103\033\171\034\170\001\002" +
    "\000\020\003\064\025\067\026\060\032\053\045\063\046" +
    "\066\047\054\001\002\000\004\035\uffc8\001\002\000\010" +
    "\025\102\026\103\033\173\001\002\000\004\035\uffc7\001" +
    "\002\000\022\003\026\036\ufff3\037\ufff3\040\ufff3\041\ufff3" +
    "\044\ufff3\045\ufff3\054\ufff1\001\002\000\030\003\uffca\010" +
    "\uffca\013\uffca\016\uffca\036\uffca\037\uffca\040\uffca\041\uffca" +
    "\044\uffca\045\uffca\053\uffca\001\002\000\004\053\uffd9\001" +
    "\002\000\012\006\uffb2\007\uffb2\033\uffb2\035\uffb2\001\002" +
    "\000\022\003\064\005\200\025\067\026\060\032\205\045" +
    "\063\046\066\047\054\001\002\000\012\006\213\007\uffb6" +
    "\033\uffb6\035\uffb6\001\002\000\022\017\220\020\217\021" +
    "\216\022\221\023\215\024\222\025\102\026\103\001\002" +
    "\000\012\006\uffb4\007\uffb4\033\uffb4\035\uffb4\001\002\000" +
    "\006\007\211\035\231\001\002\000\022\003\064\005\200" +
    "\025\067\026\060\032\205\045\063\046\066\047\054\001" +
    "\002\000\024\017\220\020\217\021\216\022\221\023\215" +
    "\024\222\025\102\026\103\033\110\001\002\000\006\007" +
    "\211\033\210\001\002\000\012\006\uffb1\007\uffb1\033\uffb1" +
    "\035\uffb1\001\002\000\022\003\064\005\200\025\067\026" +
    "\060\032\205\045\063\046\066\047\054\001\002\000\012" +
    "\006\213\007\uffb7\033\uffb7\035\uffb7\001\002\000\022\003" +
    "\064\005\200\025\067\026\060\032\205\045\063\046\066" +
    "\047\054\001\002\000\012\006\uffb5\007\uffb5\033\uffb5\035" +
    "\uffb5\001\002\000\020\003\064\025\067\026\060\032\053" +
    "\045\063\046\066\047\054\001\002\000\020\003\064\025" +
    "\067\026\060\032\053\045\063\046\066\047\054\001\002" +
    "\000\020\003\064\025\067\026\060\032\053\045\063\046" +
    "\066\047\054\001\002\000\020\003\064\025\067\026\060" +
    "\032\053\045\063\046\066\047\054\001\002\000\020\003" +
    "\064\025\067\026\060\032\053\045\063\046\066\047\054" +
    "\001\002\000\020\003\064\025\067\026\060\032\053\045" +
    "\063\046\066\047\054\001\002\000\016\006\uffb0\007\uffb0" +
    "\025\102\026\103\033\uffb0\035\uffb0\001\002\000\016\006" +
    "\uffac\007\uffac\025\102\026\103\033\uffac\035\uffac\001\002" +
    "\000\016\006\uffaf\007\uffaf\025\102\026\103\033\uffaf\035" +
    "\uffaf\001\002\000\016\006\uffae\007\uffae\025\102\026\103" +
    "\033\uffae\035\uffae\001\002\000\016\006\uffad\007\uffad\025" +
    "\102\026\103\033\uffad\035\uffad\001\002\000\016\006\uffab" +
    "\007\uffab\025\102\026\103\033\uffab\035\uffab\001\002\000" +
    "\022\003\026\036\ufff3\037\ufff3\040\ufff3\041\ufff3\044\ufff3" +
    "\045\ufff3\054\ufff1\001\002\000\034\003\uffd0\010\uffd0\011" +
    "\uffd0\012\uffd0\013\uffd0\016\uffd0\036\uffd0\037\uffd0\040\uffd0" +
    "\041\uffd0\044\uffd0\045\uffd0\053\uffd0\001\002\000\034\003" +
    "\uffce\010\uffce\011\235\012\236\013\uffce\016\uffce\036\uffce" +
    "\037\uffce\040\uffce\041\uffce\044\uffce\045\uffce\053\uffce\001" +
    "\002\000\030\003\uffd2\010\uffd2\013\uffd2\016\uffd2\036\uffd2" +
    "\037\uffd2\040\uffd2\041\uffd2\044\uffd2\045\uffd2\053\uffd2\001" +
    "\002\000\022\003\064\005\200\025\067\026\060\032\205" +
    "\045\063\046\066\047\054\001\002\000\004\035\237\001" +
    "\002\000\022\003\026\036\ufff3\037\ufff3\040\ufff3\041\ufff3" +
    "\044\ufff3\045\ufff3\054\ufff1\001\002\000\030\003\uffcf\010" +
    "\uffcf\013\uffcf\016\uffcf\036\uffcf\037\uffcf\040\uffcf\041\uffcf" +
    "\044\uffcf\045\uffcf\053\uffcf\001\002\000\006\007\211\035" +
    "\242\001\002\000\022\003\026\036\ufff3\037\ufff3\040\ufff3" +
    "\041\ufff3\044\ufff3\045\ufff3\054\ufff1\001\002\000\034\003" +
    "\uffd1\010\uffd1\011\uffd1\012\uffd1\013\uffd1\016\uffd1\036\uffd1" +
    "\037\uffd1\040\uffd1\041\uffd1\044\uffd1\045\uffd1\053\uffd1\001" +
    "\002\000\012\006\uffb3\007\uffb3\033\uffb3\035\uffb3\001\002" +
    "\000\006\007\211\035\246\001\002\000\022\003\026\036" +
    "\ufff3\037\ufff3\040\ufff3\041\ufff3\044\ufff3\045\ufff3\054\ufff1" +
    "\001\002\000\030\003\uffcd\010\uffcd\013\uffcd\016\uffcd\036" +
    "\uffcd\037\uffcd\040\uffcd\041\uffcd\044\uffcd\045\uffcd\053\uffcd" +
    "\001\002\000\040\002\ufff0\003\ufff0\004\ufff0\010\ufff0\011" +
    "\ufff0\012\ufff0\013\ufff0\016\ufff0\036\ufff0\037\ufff0\040\ufff0" +
    "\041\ufff0\044\ufff0\045\ufff0\053\ufff0\001\002\000\030\003" +
    "\uffd4\010\uffd4\013\uffd4\016\uffd4\036\uffd4\037\uffd4\040\uffd4" +
    "\041\uffd4\044\uffd4\045\uffd4\053\uffd4\001\002\000\004\045" +
    "\257\001\002\000\004\035\254\001\002\000\022\003\ufffa" +
    "\036\ufffa\037\ufffa\040\ufffa\041\ufffa\044\ufffa\045\ufffa\054" +
    "\ufffa\001\002\000\022\003\026\036\ufff3\037\ufff3\040\ufff3" +
    "\041\ufff3\044\ufff3\045\ufff3\054\ufff1\001\002\000\010\002" +
    "\ufff9\003\ufff9\004\ufff9\001\002\000\006\033\ufff5\034\ufff5" +
    "\001\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\256\000\006\002\004\003\005\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\004\011\013\010\001\001" +
    "\000\002\001\001\000\004\013\013\001\001\000\002\001" +
    "\001\000\004\013\012\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\015\016\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\044\022\001\001\000\010\026\026\045\024\046\023\001" +
    "\001\000\002\001\001\000\016\014\043\020\035\030\036" +
    "\032\037\040\041\041\033\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\005\120\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\016\020" +
    "\051\021\061\022\112\023\055\024\054\025\056\001\001" +
    "\000\002\001\001\000\020\016\110\020\051\021\061\022" +
    "\060\023\055\024\054\025\056\001\001\000\002\001\001" +
    "\000\020\016\064\020\051\021\061\022\060\023\055\024" +
    "\054\025\056\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\021\106\023\055\024\054\025" +
    "\056\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\024\105\025\056\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\023\072\024\054\025\056\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\024\067\025\056\001\001" +
    "\000\002\001\001\000\016\020\051\021\061\022\071\023" +
    "\055\024\054\025\056\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\024\100\025\056\001\001\000\006\024" +
    "\077\025\056\001\001\000\006\024\076\025\056\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\023\104\024\054\025\056\001\001\000\010\023\103" +
    "\024\054\025\056\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\016\020\051\021\061\022\071\023" +
    "\055\024\054\025\056\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\016\014\043\020\035\030\036\032\121\040\041" +
    "\041\033\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\020\020" +
    "\051\021\061\022\133\023\055\024\054\025\056\037\132" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\016\020\051\021\061\022\137\023\055\024\054" +
    "\025\056\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\030\014\043\020\035" +
    "\027\145\030\036\031\151\032\144\033\143\034\152\035" +
    "\142\040\041\041\033\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\022\007" +
    "\202\010\200\011\244\012\176\021\201\023\055\024\054" +
    "\025\056\001\001\000\022\007\202\010\200\011\203\012" +
    "\176\021\201\023\055\024\054\025\056\001\001\000\002" +
    "\001\001\000\030\014\043\020\035\027\175\030\036\031" +
    "\151\032\144\033\143\034\152\035\142\040\041\041\033" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\006" +
    "\155\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\017\160\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\021\163\023\055\024\054\025\056\001\001\000\002" +
    "\001\001\000\012\021\166\023\055\024\054\025\056\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\021\171" +
    "\023\055\024\054\025\056\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\026\174\045\024" +
    "\046\023\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\016\007\243\012\176\021\201\023\055" +
    "\024\054\025\056\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\022\007\202" +
    "\010\200\011\206\012\176\021\205\023\055\024\054\025" +
    "\056\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\020\007\202\010\211\012\176\021\201\023" +
    "\055\024\054\025\056\001\001\000\002\001\001\000\016" +
    "\007\213\012\176\021\201\023\055\024\054\025\056\001" +
    "\001\000\002\001\001\000\012\021\227\023\055\024\054" +
    "\025\056\001\001\000\012\021\226\023\055\024\054\025" +
    "\056\001\001\000\012\021\225\023\055\024\054\025\056" +
    "\001\001\000\012\021\224\023\055\024\054\025\056\001" +
    "\001\000\012\021\223\023\055\024\054\025\056\001\001" +
    "\000\012\021\222\023\055\024\054\025\056\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\026" +
    "\231\045\024\046\023\001\001\000\004\042\232\001\001" +
    "\000\004\036\233\001\001\000\002\001\001\000\022\007" +
    "\202\010\200\011\240\012\176\021\201\023\055\024\054" +
    "\025\056\001\001\000\002\001\001\000\010\026\237\045" +
    "\024\046\023\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\026\242\045\024\046\023\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\026\246" +
    "\045\024\046\023\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\043\254\001\001\000\010\026\255\045\024\046" +
    "\023\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$SintaxisPython$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$SintaxisPython$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$SintaxisPython$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    private Symbol s;
    private PythonSemantica sem = new PythonSemantica();
    private MetodoPython actual;
    private Errores errores = new Errores();
    private int linea;

    public void setLinea(int line){
            this.linea = line;
    }
    
    public void syntax_error(Symbol sym){
            errores.errorSintactico(sym, linea); 
    }

    public void unrecovered_syntax_error(Symbol sym) throws java.lang.Exception{
            errores.errorSintactico(sym, this.linea); 
    }

    public PythonSemantica getPython(){
            return sem;
    }
    
    public void reportarSem(String texto){
            errores.errorSemantico(getS(), texto, this.linea);
    }

    public Symbol getS(){
        return this.cur_token;
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$SintaxisPython$actions {
  private final SintaxisPython parser;

  /** Constructor */
  CUP$SintaxisPython$actions(SintaxisPython parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$SintaxisPython$do_action_part00000000(
    int                        CUP$SintaxisPython$act_num,
    java_cup.runtime.lr_parser CUP$SintaxisPython$parser,
    java.util.Stack            CUP$SintaxisPython$stack,
    int                        CUP$SintaxisPython$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$SintaxisPython$result;

      /* select the action based on the action number */
      switch (CUP$SintaxisPython$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= PYTHON EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-1)).value;
		RESULT = start_val;
              CUP$SintaxisPython$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$SintaxisPython$parser.done_parsing();
          return CUP$SintaxisPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // PYTHON ::= ESP DEFS 
            {
              Object RESULT =null;
		for(MetodoPython me : sem.getMetodos()) {System.out.println(me.getId() + " METODO\n");
                        for(Triplete trip : me.getTrip()){
                                System.out.println(trip.devolverString());
                        }}
              CUP$SintaxisPython$result = parser.getSymbolFactory().newSymbol("PYTHON",0, ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), RESULT);
            }
          return CUP$SintaxisPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // PYTHON ::= ESP 
            {
              Object RESULT =null;

              CUP$SintaxisPython$result = parser.getSymbolFactory().newSymbol("PYTHON",0, ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), RESULT);
            }
          return CUP$SintaxisPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // ESP ::= newline 
            {
              Object RESULT =null;

              CUP$SintaxisPython$result = parser.getSymbolFactory().newSymbol("ESP",1, ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), RESULT);
            }
          return CUP$SintaxisPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // ESP ::= 
            {
              Object RESULT =null;

              CUP$SintaxisPython$result = parser.getSymbolFactory().newSymbol("ESP",1, ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), RESULT);
            }
          return CUP$SintaxisPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // DEFS ::= DEFS DEF 
            {
              Object RESULT =null;

              CUP$SintaxisPython$result = parser.getSymbolFactory().newSymbol("DEFS",2, ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), RESULT);
            }
          return CUP$SintaxisPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // DEFS ::= DEF 
            {
              Object RESULT =null;

              CUP$SintaxisPython$result = parser.getSymbolFactory().newSymbol("DEFS",2, ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), RESULT);
            }
          return CUP$SintaxisPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // NT$0 ::= 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-4)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-4)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-4)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-2)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-2)).right;
		List<VariablePython> e2 = (List<VariablePython>)((java_cup.runtime.Symbol) CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-2)).value;
MetodoPython met = new MetodoPython(e1, e2);
                                actual = met;
                                sem.addVar(e2);
                                if(!sem.addMetodo(met)){
                                        reportarSem("Metodo ya existente con id: <"+e1+"> con mismos parametros");
                                }
              CUP$SintaxisPython$result = parser.getSymbolFactory().newSymbol("NT$0",33, ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), RESULT);
            }
          return CUP$SintaxisPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // DEF ::= deff id para PAR_LIST parc dosp NT$0 SUITE 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-1)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-6)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-6)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-6)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-4)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-4)).right;
		List<VariablePython> e2 = (List<VariablePython>)((java_cup.runtime.Symbol) CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-4)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()).right;
		List<Triplete> e3 = (List<Triplete>)((java_cup.runtime.Symbol) CUP$SintaxisPython$stack.peek()).value;
		if(actual.getTIPO() == null){
                                        actual.setTIPO(PythonSemantica.VOID);
                                }
                                actual.setParams();
                                actual.getTrip().addAll(e3);
              CUP$SintaxisPython$result = parser.getSymbolFactory().newSymbol("DEF",9, ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-7)), ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), RESULT);
            }
          return CUP$SintaxisPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // NT$1 ::= 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-3)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-3)).value;
MetodoPython met = new MetodoPython(e1, new ArrayList<>());
                                actual = met;
                                if(!sem.addMetodo(met)){
                                        reportarSem("Metodo ya existente con id: <"+e1+"> con mismos parametros");
                                }
              CUP$SintaxisPython$result = parser.getSymbolFactory().newSymbol("NT$1",34, ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), RESULT);
            }
          return CUP$SintaxisPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // DEF ::= deff id para parc dosp NT$1 SUITE 
            {
              Object RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-1)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-5)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-5)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-5)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()).right;
		List<Triplete> e2 = (List<Triplete>)((java_cup.runtime.Symbol) CUP$SintaxisPython$stack.peek()).value;
		if(actual.getTIPO() == null){
                                        actual.setTIPO(PythonSemantica.VOID);
                                } actual.getTrip().addAll(e2);
              CUP$SintaxisPython$result = parser.getSymbolFactory().newSymbol("DEF",9, ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-6)), ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), RESULT);
            }
          return CUP$SintaxisPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // DEF ::= error DEF 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$SintaxisPython$stack.peek()).value;
		RESULT = e1;
              CUP$SintaxisPython$result = parser.getSymbolFactory().newSymbol("DEF",9, ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), RESULT);
            }
          return CUP$SintaxisPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // PAR_LIST ::= PAR_LIST coma id 
            {
              List<VariablePython> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-2)).right;
		List<VariablePython> e1 = (List<VariablePython>)((java_cup.runtime.Symbol) CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$SintaxisPython$stack.peek()).value;
		e1.add(new VariablePython(e2, 1)); RESULT = e1;
              CUP$SintaxisPython$result = parser.getSymbolFactory().newSymbol("PAR_LIST",11, ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), RESULT);
            }
          return CUP$SintaxisPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // PAR_LIST ::= id 
            {
              List<VariablePython> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$SintaxisPython$stack.peek()).value;
		List<VariablePython> var = new ArrayList<>(); var.add(new VariablePython(e1, 1)); RESULT = var;
              CUP$SintaxisPython$result = parser.getSymbolFactory().newSymbol("PAR_LIST",11, ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), RESULT);
            }
          return CUP$SintaxisPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // NT$2 ::= 
            {
              List<Triplete> RESULT =null;
PythonSemantica.AMBITO += 1;
              CUP$SintaxisPython$result = parser.getSymbolFactory().newSymbol("NT$2",35, ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), RESULT);
            }
          return CUP$SintaxisPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // SUITE ::= NT$2 STMT_LIST newline 
            {
              List<Triplete> RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (List<Triplete>) ((java_cup.runtime.Symbol) CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-2)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-1)).right;
		List<Triplete> e1 = (List<Triplete>)((java_cup.runtime.Symbol) CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-1)).value;
		sem.eliminarAmbito(PythonSemantica.AMBITO);
                                                PythonSemantica.AMBITO -= 1;
                                                RESULT = e1;
              CUP$SintaxisPython$result = parser.getSymbolFactory().newSymbol("SUITE",20, ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), RESULT);
            }
          return CUP$SintaxisPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // NT$3 ::= 
            {
              List<Triplete> RESULT =null;
PythonSemantica.AMBITO += 1;
              CUP$SintaxisPython$result = parser.getSymbolFactory().newSymbol("NT$3",36, ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), RESULT);
            }
          return CUP$SintaxisPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // SUITE ::= NT$3 newline indent STATEMENTS dedent 
            {
              List<Triplete> RESULT =null;
              // propagate RESULT from NT$3
                RESULT = (List<Triplete>) ((java_cup.runtime.Symbol) CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-4)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-1)).right;
		List<Triplete> e1 = (List<Triplete>)((java_cup.runtime.Symbol) CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-1)).value;
		sem.eliminarAmbito(PythonSemantica.AMBITO);
                                                PythonSemantica.AMBITO -= 1;
                                                RESULT = e1;
              CUP$SintaxisPython$result = parser.getSymbolFactory().newSymbol("SUITE",20, ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-4)), ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), RESULT);
            }
          return CUP$SintaxisPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // SUITE ::= error dedent 
            {
              List<Triplete> RESULT =null;
		sem.eliminarAmbito(PythonSemantica.AMBITO); PythonSemantica.AMBITO -= 1;
              CUP$SintaxisPython$result = parser.getSymbolFactory().newSymbol("SUITE",20, ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), RESULT);
            }
          return CUP$SintaxisPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // STMT_LIST ::= STATEMENTLINE puntocoma STMT_LIST 
            {
              List<Triplete> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-2)).right;
		List<Triplete> e1 = (List<Triplete>)((java_cup.runtime.Symbol) CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()).right;
		List<Triplete> e2 = (List<Triplete>)((java_cup.runtime.Symbol) CUP$SintaxisPython$stack.peek()).value;
		e1.addAll(e2); RESULT = e1;
              CUP$SintaxisPython$result = parser.getSymbolFactory().newSymbol("STMT_LIST",24, ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), RESULT);
            }
          return CUP$SintaxisPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // STMT_LIST ::= STATEMENTLINE PC 
            {
              List<Triplete> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-1)).right;
		List<Triplete> e1 = (List<Triplete>)((java_cup.runtime.Symbol) CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-1)).value;
		RESULT = e1;
              CUP$SintaxisPython$result = parser.getSymbolFactory().newSymbol("STMT_LIST",24, ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), RESULT);
            }
          return CUP$SintaxisPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // PC ::= puntocoma 
            {
              Object RESULT =null;

              CUP$SintaxisPython$result = parser.getSymbolFactory().newSymbol("PC",3, ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), RESULT);
            }
          return CUP$SintaxisPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // PC ::= 
            {
              Object RESULT =null;

              CUP$SintaxisPython$result = parser.getSymbolFactory().newSymbol("PC",3, ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), RESULT);
            }
          return CUP$SintaxisPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // STATEMENTLINE ::= AS_VAR 
            {
              List<Triplete> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()).right;
		List<Triplete> e1 = (List<Triplete>)((java_cup.runtime.Symbol) CUP$SintaxisPython$stack.peek()).value;
		RESULT = e1;
              CUP$SintaxisPython$result = parser.getSymbolFactory().newSymbol("STATEMENTLINE",22, ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), RESULT);
            }
          return CUP$SintaxisPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // STATEMENTLINE ::= WRITE 
            {
              List<Triplete> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()).right;
		List<Triplete> e1 = (List<Triplete>)((java_cup.runtime.Symbol) CUP$SintaxisPython$stack.peek()).value;
		RESULT = e1;
              CUP$SintaxisPython$result = parser.getSymbolFactory().newSymbol("STATEMENTLINE",22, ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), RESULT);
            }
          return CUP$SintaxisPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // STATEMENTLINE ::= INPUT 
            {
              List<Triplete> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()).right;
		OperacionPython e1 = (OperacionPython)((java_cup.runtime.Symbol) CUP$SintaxisPython$stack.peek()).value;
		AsignarValor vl = new AsignarValor(new AsignarTemporal(null, null, e1.getTipo()),null
                ,OperacionPython.obtenerTipo(e1));
                List<Triplete> tri = new ArrayList<>(); tri.add(vl); 
                tri.add(new AsignarValor(vl.getOperando1(), e1.getTriplete(), null)); RESULT = tri;
              CUP$SintaxisPython$result = parser.getSymbolFactory().newSymbol("STATEMENTLINE",22, ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), RESULT);
            }
          return CUP$SintaxisPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // STATEMENTLINE ::= returnn D 
            {
              List<Triplete> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()).right;
		OperacionPython e1 = (OperacionPython)((java_cup.runtime.Symbol) CUP$SintaxisPython$stack.peek()).value;
		List<Triplete> tri = new ArrayList<>();
        if(actual.getTIPO() == null || actual.getTIPO().equals(PythonSemantica.VAR)){
                actual.setTIPO(e1.getTipo()); tri.addAll(e1.mostrarTripletes());
                tri.add(new Return(e1.getTriplete()));
        } else if(!actual.getTIPO().contains(e1.getTipo())){
                reportarSem("No coincide el tipo del return con el tipo de la función con id: " + actual.getId());
        } else {
                actual.setTIPO(e1.getTipo()); tri.addAll(e1.mostrarTripletes());
                tri.add(new Return(e1.getTriplete()));
        } RESULT = tri;
              CUP$SintaxisPython$result = parser.getSymbolFactory().newSymbol("STATEMENTLINE",22, ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), RESULT);
            }
          return CUP$SintaxisPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // AS_VAR ::= LISTVAR coma igual LISTDEF coma 
            {
              List<Triplete> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-4)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-4)).right;
		List<VariablePython> e1 = (List<VariablePython>)((java_cup.runtime.Symbol) CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-4)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-1)).right;
		List<OperacionPython> e2 = (List<OperacionPython>)((java_cup.runtime.Symbol) CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-1)).value;
		if(!sem.addVar(e1, e2)){
        reportarSem("Una de las variables ya habia sido asignada a otro tipo diferente");
        RESULT  = new ArrayList<>();} 
        else{RESULT = PythonSemantica.devolverAsig(e1, e2);}
              CUP$SintaxisPython$result = parser.getSymbolFactory().newSymbol("AS_VAR",31, ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-4)), ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), RESULT);
            }
          return CUP$SintaxisPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // AS_VAR ::= LISTVAR igual LISTDEF 
            {
              List<Triplete> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-2)).right;
		List<VariablePython> e1 = (List<VariablePython>)((java_cup.runtime.Symbol) CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()).right;
		List<OperacionPython> e2 = (List<OperacionPython>)((java_cup.runtime.Symbol) CUP$SintaxisPython$stack.peek()).value;
		if(!sem.addVar(e1, e2)){
        reportarSem("Una de las variables ya habia sido asignada a otro tipo diferente");
                RESULT  = new ArrayList<>();} 
        else{RESULT = PythonSemantica.devolverAsig(e1, e2);}
              CUP$SintaxisPython$result = parser.getSymbolFactory().newSymbol("AS_VAR",31, ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), RESULT);
            }
          return CUP$SintaxisPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // LISTVAR ::= LISTVAR coma id 
            {
              List<VariablePython> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-2)).right;
		List<VariablePython> e1 = (List<VariablePython>)((java_cup.runtime.Symbol) CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$SintaxisPython$stack.peek()).value;
		e1.add(new VariablePython(e2, PythonSemantica.AMBITO)); RESULT = e1;
              CUP$SintaxisPython$result = parser.getSymbolFactory().newSymbol("LISTVAR",10, ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), RESULT);
            }
          return CUP$SintaxisPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // LISTVAR ::= id 
            {
              List<VariablePython> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$SintaxisPython$stack.peek()).value;
		List<VariablePython> var = new ArrayList<>();
                var.add(new VariablePython(e1, PythonSemantica.AMBITO)); RESULT = var;
              CUP$SintaxisPython$result = parser.getSymbolFactory().newSymbol("LISTVAR",10, ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), RESULT);
            }
          return CUP$SintaxisPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // LISTDEF ::= LISTDEF coma D 
            {
              List<OperacionPython> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-2)).right;
		List<OperacionPython> e1 = (List<OperacionPython>)((java_cup.runtime.Symbol) CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()).right;
		OperacionPython e2 = (OperacionPython)((java_cup.runtime.Symbol) CUP$SintaxisPython$stack.peek()).value;
		e1.add(e2); RESULT = e1;
              CUP$SintaxisPython$result = parser.getSymbolFactory().newSymbol("LISTDEF",12, ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), RESULT);
            }
          return CUP$SintaxisPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // LISTDEF ::= D 
            {
              List<OperacionPython> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()).right;
		OperacionPython e1 = (OperacionPython)((java_cup.runtime.Symbol) CUP$SintaxisPython$stack.peek()).value;
		List<OperacionPython> op = new ArrayList<>(); op.add(e1); RESULT = op;
              CUP$SintaxisPython$result = parser.getSymbolFactory().newSymbol("LISTDEF",12, ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), RESULT);
            }
          return CUP$SintaxisPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // D ::= character 
            {
              OperacionPython RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$SintaxisPython$stack.peek()).value;
		RESULT = new OperacionPython(PythonSemantica.CHAR, new TerminalOperator(e1));
              CUP$SintaxisPython$result = parser.getSymbolFactory().newSymbol("D",16, ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), RESULT);
            }
          return CUP$SintaxisPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // D ::= OPERACION_A 
            {
              OperacionPython RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()).right;
		OperacionPython e1 = (OperacionPython)((java_cup.runtime.Symbol) CUP$SintaxisPython$stack.peek()).value;
		RESULT = e1;
              CUP$SintaxisPython$result = parser.getSymbolFactory().newSymbol("D",16, ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), RESULT);
            }
          return CUP$SintaxisPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // D ::= INPUT 
            {
              OperacionPython RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()).right;
		OperacionPython e1 = (OperacionPython)((java_cup.runtime.Symbol) CUP$SintaxisPython$stack.peek()).value;
		RESULT = e1;
              CUP$SintaxisPython$result = parser.getSymbolFactory().newSymbol("D",16, ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), RESULT);
            }
          return CUP$SintaxisPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // WRITE ::= print para STRING parc 
            {
              List<Triplete> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-1)).right;
		List<Triplete> e1 = (List<Triplete>)((java_cup.runtime.Symbol) CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-1)).value;
		e1.add(new Printf("\n")); RESULT = e1;
              CUP$SintaxisPython$result = parser.getSymbolFactory().newSymbol("WRITE",30, ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), RESULT);
            }
          return CUP$SintaxisPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // INPUT ::= intinput para string parc 
            {
              OperacionPython RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-1)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-1)).value;
		OperacionPython op = new OperacionPython(PythonSemantica.INT,
                                new Input("%d"));
                                op.getTripletes().add(new Printf(e1));
                                RESULT = op;
              CUP$SintaxisPython$result = parser.getSymbolFactory().newSymbol("INPUT",14, ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), RESULT);
            }
          return CUP$SintaxisPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // INPUT ::= charinput para string parc 
            {
              OperacionPython RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-1)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-1)).value;
		OperacionPython op = new OperacionPython(PythonSemantica.CHAR,
                                new Input("%c"));
                                op.getTripletes().add(new Printf(e1));
                                RESULT = op;
              CUP$SintaxisPython$result = parser.getSymbolFactory().newSymbol("INPUT",14, ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), RESULT);
            }
          return CUP$SintaxisPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // INPUT ::= floatinput para string parc 
            {
              OperacionPython RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-1)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-1)).value;
		OperacionPython op = new OperacionPython(PythonSemantica.FLOAT,
                                new Input("%f"));
                                op.getTripletes().add(new Printf(e1));
                                RESULT = op;
              CUP$SintaxisPython$result = parser.getSymbolFactory().newSymbol("INPUT",14, ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), RESULT);
            }
          return CUP$SintaxisPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // STATEMENTS ::= STATEMENT STATEMENTS 
            {
              List<Triplete> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-1)).right;
		List<Triplete> e1 = (List<Triplete>)((java_cup.runtime.Symbol) CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()).right;
		List<Triplete> e2 = (List<Triplete>)((java_cup.runtime.Symbol) CUP$SintaxisPython$stack.peek()).value;
		e1.addAll(e2); RESULT = e1;
              CUP$SintaxisPython$result = parser.getSymbolFactory().newSymbol("STATEMENTS",21, ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), RESULT);
            }
          return CUP$SintaxisPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // STATEMENTS ::= STATEMENT 
            {
              List<Triplete> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()).right;
		List<Triplete> e1 = (List<Triplete>)((java_cup.runtime.Symbol) CUP$SintaxisPython$stack.peek()).value;
		RESULT = e1;
              CUP$SintaxisPython$result = parser.getSymbolFactory().newSymbol("STATEMENTS",21, ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), RESULT);
            }
          return CUP$SintaxisPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // STATEMENT ::= IF 
            {
              List<Triplete> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()).right;
		List<Triplete> e1 = (List<Triplete>)((java_cup.runtime.Symbol) CUP$SintaxisPython$stack.peek()).value;
		RESULT = e1;
              CUP$SintaxisPython$result = parser.getSymbolFactory().newSymbol("STATEMENT",23, ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), RESULT);
            }
          return CUP$SintaxisPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // STATEMENT ::= FOR 
            {
              List<Triplete> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()).right;
		List<Triplete> e1 = (List<Triplete>)((java_cup.runtime.Symbol) CUP$SintaxisPython$stack.peek()).value;
		RESULT = e1;
              CUP$SintaxisPython$result = parser.getSymbolFactory().newSymbol("STATEMENT",23, ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), RESULT);
            }
          return CUP$SintaxisPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // STATEMENT ::= WHILE 
            {
              List<Triplete> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()).right;
		List<Triplete> e1 = (List<Triplete>)((java_cup.runtime.Symbol) CUP$SintaxisPython$stack.peek()).value;
		RESULT = e1;
              CUP$SintaxisPython$result = parser.getSymbolFactory().newSymbol("STATEMENT",23, ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), RESULT);
            }
          return CUP$SintaxisPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // STATEMENT ::= STMT_LIST newline 
            {
              List<Triplete> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-1)).right;
		List<Triplete> e1 = (List<Triplete>)((java_cup.runtime.Symbol) CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-1)).value;
		RESULT = e1;
              CUP$SintaxisPython$result = parser.getSymbolFactory().newSymbol("STATEMENT",23, ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), RESULT);
            }
          return CUP$SintaxisPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // STATEMENT ::= error 
            {
              List<Triplete> RESULT =null;
		RESULT = new ArrayList<>();
              CUP$SintaxisPython$result = parser.getSymbolFactory().newSymbol("STATEMENT",23, ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), RESULT);
            }
          return CUP$SintaxisPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // IF ::= iff CONDICION dosp SUITE ELSEIF ELSE 
            {
              List<Triplete> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-4)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-4)).right;
		CondicionPrograma e1 = (CondicionPrograma)((java_cup.runtime.Symbol) CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-4)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-2)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-2)).right;
		List<Triplete> e2 = (List<Triplete>)((java_cup.runtime.Symbol) CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-2)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-1)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-1)).right;
		Else_Operator e3 = (Else_Operator)((java_cup.runtime.Symbol) CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-1)).value;
		int e4left = ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()).left;
		int e4right = ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()).right;
		List<Triplete> e4 = (List<Triplete>)((java_cup.runtime.Symbol) CUP$SintaxisPython$stack.peek()).value;
		e3.agregarIf(e1, e2); RESULT = e3.juntarTripletes(e4);
              CUP$SintaxisPython$result = parser.getSymbolFactory().newSymbol("IF",25, ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-5)), ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), RESULT);
            }
          return CUP$SintaxisPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // ELSEIF ::= ELSEIF elseiff CONDICION dosp SUITE 
            {
              Else_Operator RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-4)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-4)).right;
		Else_Operator e1 = (Else_Operator)((java_cup.runtime.Symbol) CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-4)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-2)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-2)).right;
		CondicionPrograma e2 = (CondicionPrograma)((java_cup.runtime.Symbol) CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-2)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()).right;
		List<Triplete> e3 = (List<Triplete>)((java_cup.runtime.Symbol) CUP$SintaxisPython$stack.peek()).value;
		RESULT = e1.agregarElseIf(e2, e3);
              CUP$SintaxisPython$result = parser.getSymbolFactory().newSymbol("ELSEIF",32, ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-4)), ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), RESULT);
            }
          return CUP$SintaxisPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // ELSEIF ::= 
            {
              Else_Operator RESULT =null;
		RESULT = new Else_Operator();
              CUP$SintaxisPython$result = parser.getSymbolFactory().newSymbol("ELSEIF",32, ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), RESULT);
            }
          return CUP$SintaxisPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // ELSE ::= elsee dosp SUITE 
            {
              List<Triplete> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()).right;
		List<Triplete> e1 = (List<Triplete>)((java_cup.runtime.Symbol) CUP$SintaxisPython$stack.peek()).value;
		RESULT = e1;
              CUP$SintaxisPython$result = parser.getSymbolFactory().newSymbol("ELSE",28, ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), RESULT);
            }
          return CUP$SintaxisPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // ELSE ::= 
            {
              List<Triplete> RESULT =null;
		RESULT = new ArrayList<>();
              CUP$SintaxisPython$result = parser.getSymbolFactory().newSymbol("ELSE",28, ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), RESULT);
            }
          return CUP$SintaxisPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // WHILE ::= whilee CONDICION dosp SUITE 
            {
              List<Triplete> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-2)).right;
		CondicionPrograma e1 = (CondicionPrograma)((java_cup.runtime.Symbol) CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()).right;
		List<Triplete> e2 = (List<Triplete>)((java_cup.runtime.Symbol) CUP$SintaxisPython$stack.peek()).value;
		RESULT = Else_Operator.WHILE(e1, e2);
              CUP$SintaxisPython$result = parser.getSymbolFactory().newSymbol("WHILE",27, ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), RESULT);
            }
          return CUP$SintaxisPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // COMA ::= coma 
            {
              Object RESULT =null;

              CUP$SintaxisPython$result = parser.getSymbolFactory().newSymbol("COMA",4, ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), RESULT);
            }
          return CUP$SintaxisPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // COMA ::= 
            {
              Object RESULT =null;

              CUP$SintaxisPython$result = parser.getSymbolFactory().newSymbol("COMA",4, ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), RESULT);
            }
          return CUP$SintaxisPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // FOR ::= forr id COMA inn RANGE dosp SUITE 
            {
              List<Triplete> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-5)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-5)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-5)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-2)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-2)).right;
		List<OperacionPython> e2 = (List<OperacionPython>)((java_cup.runtime.Symbol) CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-2)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()).right;
		List<Triplete> e3 = (List<Triplete>)((java_cup.runtime.Symbol) CUP$SintaxisPython$stack.peek()).value;
		RESULT = Else_Operator.FORP(e1, e2, e3);
              CUP$SintaxisPython$result = parser.getSymbolFactory().newSymbol("FOR",26, ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-6)), ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), RESULT);
            }
          return CUP$SintaxisPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // RANGE ::= range para OPERACION_A parc 
            {
              List<OperacionPython> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-1)).right;
		OperacionPython e1 = (OperacionPython)((java_cup.runtime.Symbol) CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-1)).value;
		List<OperacionPython> op = new ArrayList<>();
                        op.add(e1); RESULT = op;
              CUP$SintaxisPython$result = parser.getSymbolFactory().newSymbol("RANGE",13, ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), RESULT);
            }
          return CUP$SintaxisPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // RANGE ::= range para OPERACION_A coma OPERACION_A parc 
            {
              List<OperacionPython> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-3)).right;
		OperacionPython e1 = (OperacionPython)((java_cup.runtime.Symbol) CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-1)).right;
		OperacionPython e2 = (OperacionPython)((java_cup.runtime.Symbol) CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-1)).value;
		List<OperacionPython> op = new ArrayList<>();
                        op.add(e1); op.add(e2); RESULT = op;
              CUP$SintaxisPython$result = parser.getSymbolFactory().newSymbol("RANGE",13, ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-5)), ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), RESULT);
            }
          return CUP$SintaxisPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // RANGE ::= range para OPERACION_A coma OPERACION_A coma OPERACION_A parc 
            {
              List<OperacionPython> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-5)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-5)).right;
		OperacionPython e1 = (OperacionPython)((java_cup.runtime.Symbol) CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-5)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-3)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-3)).right;
		OperacionPython e2 = (OperacionPython)((java_cup.runtime.Symbol) CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-3)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-1)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-1)).right;
		OperacionPython e3 = (OperacionPython)((java_cup.runtime.Symbol) CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-1)).value;
		List<OperacionPython> op = new ArrayList<>();
                        op.add(e1); op.add(e2); op.add(e3); RESULT = op;
              CUP$SintaxisPython$result = parser.getSymbolFactory().newSymbol("RANGE",13, ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-7)), ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), RESULT);
            }
          return CUP$SintaxisPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // OPERACION_A ::= OPERACION_A mas OPERACION_M 
            {
              OperacionPython RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-2)).right;
		OperacionPython e1 = (OperacionPython)((java_cup.runtime.Symbol) CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()).right;
		OperacionPython e2 = (OperacionPython)((java_cup.runtime.Symbol) CUP$SintaxisPython$stack.peek()).value;
		RESULT = new OperacionPython(e1, e2,
                        new SumOperator(null, e1.getTriplete(), e2.getTriplete(), OperacionPython.obtenerTipo(e1, e2)));
              CUP$SintaxisPython$result = parser.getSymbolFactory().newSymbol("OPERACION_A",15, ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), RESULT);
            }
          return CUP$SintaxisPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // OPERACION_A ::= OPERACION_A menos OPERACION_M 
            {
              OperacionPython RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-2)).right;
		OperacionPython e1 = (OperacionPython)((java_cup.runtime.Symbol) CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()).right;
		OperacionPython e2 = (OperacionPython)((java_cup.runtime.Symbol) CUP$SintaxisPython$stack.peek()).value;
		RESULT = new OperacionPython(e1, e2,
                        new RestOperator(null, e1.getTriplete(), e2.getTriplete(), OperacionPython.obtenerTipo(e1, e2)));
              CUP$SintaxisPython$result = parser.getSymbolFactory().newSymbol("OPERACION_A",15, ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), RESULT);
            }
          return CUP$SintaxisPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // OPERACION_A ::= OPERACION_M 
            {
              OperacionPython RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()).right;
		OperacionPython e1 = (OperacionPython)((java_cup.runtime.Symbol) CUP$SintaxisPython$stack.peek()).value;
		RESULT = e1;
              CUP$SintaxisPython$result = parser.getSymbolFactory().newSymbol("OPERACION_A",15, ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), RESULT);
            }
          return CUP$SintaxisPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // OPERACION_A ::= error OPERACION_M 
            {
              OperacionPython RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()).right;
		OperacionPython e1 = (OperacionPython)((java_cup.runtime.Symbol) CUP$SintaxisPython$stack.peek()).value;
		RESULT = e1;
              CUP$SintaxisPython$result = parser.getSymbolFactory().newSymbol("OPERACION_A",15, ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), RESULT);
            }
          return CUP$SintaxisPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // OPERACION_M ::= OPERACION_M por OPERACION_U 
            {
              OperacionPython RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-2)).right;
		OperacionPython e1 = (OperacionPython)((java_cup.runtime.Symbol) CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()).right;
		OperacionPython e2 = (OperacionPython)((java_cup.runtime.Symbol) CUP$SintaxisPython$stack.peek()).value;
		RESULT = new OperacionPython(e1, e2,
                        new PorOperator(null, e1.getTriplete(), e2.getTriplete(), OperacionPython.obtenerTipo(e1, e2)));
              CUP$SintaxisPython$result = parser.getSymbolFactory().newSymbol("OPERACION_M",17, ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), RESULT);
            }
          return CUP$SintaxisPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // OPERACION_M ::= OPERACION_M div OPERACION_U 
            {
              OperacionPython RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-2)).right;
		OperacionPython e1 = (OperacionPython)((java_cup.runtime.Symbol) CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()).right;
		OperacionPython e2 = (OperacionPython)((java_cup.runtime.Symbol) CUP$SintaxisPython$stack.peek()).value;
		RESULT = new OperacionPython(e1, e2,
                        new DivOperator(null, e1.getTriplete(), e2.getTriplete(), OperacionPython.obtenerTipo(e1, e2)));
              CUP$SintaxisPython$result = parser.getSymbolFactory().newSymbol("OPERACION_M",17, ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), RESULT);
            }
          return CUP$SintaxisPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // OPERACION_M ::= OPERACION_M mod OPERACION_U 
            {
              OperacionPython RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-2)).right;
		OperacionPython e1 = (OperacionPython)((java_cup.runtime.Symbol) CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()).right;
		OperacionPython e2 = (OperacionPython)((java_cup.runtime.Symbol) CUP$SintaxisPython$stack.peek()).value;
		RESULT = new OperacionPython(e1, e2,
                        new ModOperator(null, e1.getTriplete(), e2.getTriplete(), OperacionPython.obtenerTipo(e1, e2)));
              CUP$SintaxisPython$result = parser.getSymbolFactory().newSymbol("OPERACION_M",17, ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), RESULT);
            }
          return CUP$SintaxisPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // OPERACION_M ::= OPERACION_U 
            {
              OperacionPython RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()).right;
		OperacionPython e1 = (OperacionPython)((java_cup.runtime.Symbol) CUP$SintaxisPython$stack.peek()).value;
		RESULT = e1;
              CUP$SintaxisPython$result = parser.getSymbolFactory().newSymbol("OPERACION_M",17, ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), RESULT);
            }
          return CUP$SintaxisPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // OPERACION_U ::= menos OPERACION_U 
            {
              OperacionPython RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()).right;
		OperacionPython e1 = (OperacionPython)((java_cup.runtime.Symbol) CUP$SintaxisPython$stack.peek()).value;
		RESULT = new OperacionPython(new OperacionPython(PythonSemantica.INT, new TerminalOperator("0")),
                        e1, new RestOperator(null, new TerminalOperator("0"), e1.getTriplete(), OperacionPython.obtenerTipo(e1)));
              CUP$SintaxisPython$result = parser.getSymbolFactory().newSymbol("OPERACION_U",18, ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), RESULT);
            }
          return CUP$SintaxisPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // OPERACION_U ::= mas OPERACION_U 
            {
              OperacionPython RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()).right;
		OperacionPython e1 = (OperacionPython)((java_cup.runtime.Symbol) CUP$SintaxisPython$stack.peek()).value;
		RESULT  = e1;
              CUP$SintaxisPython$result = parser.getSymbolFactory().newSymbol("OPERACION_U",18, ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), RESULT);
            }
          return CUP$SintaxisPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // OPERACION_U ::= ATOM 
            {
              OperacionPython RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()).right;
		OperacionPython e1 = (OperacionPython)((java_cup.runtime.Symbol) CUP$SintaxisPython$stack.peek()).value;
		RESULT = e1;
              CUP$SintaxisPython$result = parser.getSymbolFactory().newSymbol("OPERACION_U",18, ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), RESULT);
            }
          return CUP$SintaxisPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // ATOM ::= id 
            {
              OperacionPython RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$SintaxisPython$stack.peek()).value;
		VariablePython tipo = sem.existeVar(new VariablePython(e1, PythonSemantica.AMBITO));
                if(tipo==null){
                        reportarSem("La variable con id: " + e1 + " no existe");
                } else {RESULT = new OperacionPython(tipo.getTipo(),
                 new TerminalOperator(e1));}
              CUP$SintaxisPython$result = parser.getSymbolFactory().newSymbol("ATOM",19, ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), RESULT);
            }
          return CUP$SintaxisPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // ATOM ::= entero 
            {
              OperacionPython RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$SintaxisPython$stack.peek()).value;
		RESULT = new OperacionPython(PythonSemantica.INT, new TerminalOperator(e1));
              CUP$SintaxisPython$result = parser.getSymbolFactory().newSymbol("ATOM",19, ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), RESULT);
            }
          return CUP$SintaxisPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // ATOM ::= decimal 
            {
              OperacionPython RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$SintaxisPython$stack.peek()).value;
		RESULT  = new OperacionPython(PythonSemantica.FLOAT, new TerminalOperator(e1));
              CUP$SintaxisPython$result = parser.getSymbolFactory().newSymbol("ATOM",19, ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), RESULT);
            }
          return CUP$SintaxisPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // ATOM ::= para OPERACION_A parc 
            {
              OperacionPython RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-1)).right;
		OperacionPython e1 = (OperacionPython)((java_cup.runtime.Symbol) CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-1)).value;
		RESULT = e1;
              CUP$SintaxisPython$result = parser.getSymbolFactory().newSymbol("ATOM",19, ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), RESULT);
            }
          return CUP$SintaxisPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // CONDICION ::= CONDICION orr AND 
            {
              CondicionPrograma RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-2)).right;
		CondicionPrograma e1 = (CondicionPrograma)((java_cup.runtime.Symbol) CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()).right;
		CondicionPrograma e2 = (CondicionPrograma)((java_cup.runtime.Symbol) CUP$SintaxisPython$stack.peek()).value;
		RESULT = IfPrograma.OR(e1, e2);
              CUP$SintaxisPython$result = parser.getSymbolFactory().newSymbol("CONDICION",7, ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), RESULT);
            }
          return CUP$SintaxisPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // CONDICION ::= AND 
            {
              CondicionPrograma RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()).right;
		CondicionPrograma e1 = (CondicionPrograma)((java_cup.runtime.Symbol) CUP$SintaxisPython$stack.peek()).value;
		RESULT = e1;
              CUP$SintaxisPython$result = parser.getSymbolFactory().newSymbol("CONDICION",7, ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), RESULT);
            }
          return CUP$SintaxisPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // AND ::= AND andd NOT 
            {
              CondicionPrograma RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-2)).right;
		CondicionPrograma e1 = (CondicionPrograma)((java_cup.runtime.Symbol) CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()).right;
		CondicionPrograma e2 = (CondicionPrograma)((java_cup.runtime.Symbol) CUP$SintaxisPython$stack.peek()).value;
		RESULT = IfPrograma.AND(e1, e2);
              CUP$SintaxisPython$result = parser.getSymbolFactory().newSymbol("AND",6, ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), RESULT);
            }
          return CUP$SintaxisPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // AND ::= NOT 
            {
              CondicionPrograma RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()).right;
		CondicionPrograma e1 = (CondicionPrograma)((java_cup.runtime.Symbol) CUP$SintaxisPython$stack.peek()).value;
		RESULT = e1;
              CUP$SintaxisPython$result = parser.getSymbolFactory().newSymbol("AND",6, ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), RESULT);
            }
          return CUP$SintaxisPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // NOT ::= nott NOT 
            {
              CondicionPrograma RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()).right;
		CondicionPrograma e1 = (CondicionPrograma)((java_cup.runtime.Symbol) CUP$SintaxisPython$stack.peek()).value;
		RESULT = IfPrograma.NOT(e1);
              CUP$SintaxisPython$result = parser.getSymbolFactory().newSymbol("NOT",5, ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), RESULT);
            }
          return CUP$SintaxisPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // NOT ::= COMPARACION 
            {
              CondicionPrograma RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()).right;
		Triplete e1 = (Triplete)((java_cup.runtime.Symbol) CUP$SintaxisPython$stack.peek()).value;
		RESULT = new IfPrograma(new If_Operator(e1, new Etiqueta()), ((CondicionalOperator)e1).getTripletes());
              CUP$SintaxisPython$result = parser.getSymbolFactory().newSymbol("NOT",5, ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), RESULT);
            }
          return CUP$SintaxisPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // NOT ::= para CONDICION parc 
            {
              CondicionPrograma RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-1)).right;
		CondicionPrograma e1 = (CondicionPrograma)((java_cup.runtime.Symbol) CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-1)).value;
		RESULT = e1;
              CUP$SintaxisPython$result = parser.getSymbolFactory().newSymbol("NOT",5, ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), RESULT);
            }
          return CUP$SintaxisPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // COMPARACION ::= OPERACION_A igig OPERACION_A 
            {
              Triplete RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-2)).right;
		OperacionPython e1 = (OperacionPython)((java_cup.runtime.Symbol) CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()).right;
		OperacionPython e2 = (OperacionPython)((java_cup.runtime.Symbol) CUP$SintaxisPython$stack.peek()).value;
		RESULT = new IgualOperator(e1.getTriplete(), e2.getTriplete(),
                e1.getTripletes(), e2.getTripletes());
              CUP$SintaxisPython$result = parser.getSymbolFactory().newSymbol("COMPARACION",8, ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), RESULT);
            }
          return CUP$SintaxisPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // COMPARACION ::= OPERACION_A noigual OPERACION_A 
            {
              Triplete RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-2)).right;
		OperacionPython e1 = (OperacionPython)((java_cup.runtime.Symbol) CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()).right;
		OperacionPython e2 = (OperacionPython)((java_cup.runtime.Symbol) CUP$SintaxisPython$stack.peek()).value;
		RESULT = new NoIgualOperator(e1.getTriplete(), e2.getTriplete(),
                e1.getTripletes(), e2.getTripletes());
              CUP$SintaxisPython$result = parser.getSymbolFactory().newSymbol("COMPARACION",8, ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), RESULT);
            }
          return CUP$SintaxisPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // COMPARACION ::= OPERACION_A menor OPERACION_A 
            {
              Triplete RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-2)).right;
		OperacionPython e1 = (OperacionPython)((java_cup.runtime.Symbol) CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()).right;
		OperacionPython e2 = (OperacionPython)((java_cup.runtime.Symbol) CUP$SintaxisPython$stack.peek()).value;
		RESULT = new MenorOperator(e1.getTriplete(), e2.getTriplete(),
                e1.getTripletes(), e2.getTripletes());
              CUP$SintaxisPython$result = parser.getSymbolFactory().newSymbol("COMPARACION",8, ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), RESULT);
            }
          return CUP$SintaxisPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // COMPARACION ::= OPERACION_A menorig OPERACION_A 
            {
              Triplete RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-2)).right;
		OperacionPython e1 = (OperacionPython)((java_cup.runtime.Symbol) CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()).right;
		OperacionPython e2 = (OperacionPython)((java_cup.runtime.Symbol) CUP$SintaxisPython$stack.peek()).value;
		RESULT = new MenorIgOperator(e1.getTriplete(), e2.getTriplete(),
                e1.getTripletes(), e2.getTripletes());
              CUP$SintaxisPython$result = parser.getSymbolFactory().newSymbol("COMPARACION",8, ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), RESULT);
            }
          return CUP$SintaxisPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // COMPARACION ::= OPERACION_A mayor OPERACION_A 
            {
              Triplete RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-2)).right;
		OperacionPython e1 = (OperacionPython)((java_cup.runtime.Symbol) CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()).right;
		OperacionPython e2 = (OperacionPython)((java_cup.runtime.Symbol) CUP$SintaxisPython$stack.peek()).value;
		RESULT = new MayorOperator(e1.getTriplete(), e2.getTriplete(),
                e1.getTripletes(), e2.getTripletes());
              CUP$SintaxisPython$result = parser.getSymbolFactory().newSymbol("COMPARACION",8, ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), RESULT);
            }
          return CUP$SintaxisPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // COMPARACION ::= OPERACION_A mayorig OPERACION_A 
            {
              Triplete RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-2)).right;
		OperacionPython e1 = (OperacionPython)((java_cup.runtime.Symbol) CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()).right;
		OperacionPython e2 = (OperacionPython)((java_cup.runtime.Symbol) CUP$SintaxisPython$stack.peek()).value;
		RESULT = new MayorIgOperator(e1.getTriplete(), e2.getTriplete(),
                e1.getTripletes(), e2.getTripletes());
              CUP$SintaxisPython$result = parser.getSymbolFactory().newSymbol("COMPARACION",8, ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), RESULT);
            }
          return CUP$SintaxisPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // STRING ::= STRING coma D 
            {
              List<Triplete> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-2)).right;
		List<Triplete> e1 = (List<Triplete>)((java_cup.runtime.Symbol) CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()).right;
		OperacionPython e2 = (OperacionPython)((java_cup.runtime.Symbol) CUP$SintaxisPython$stack.peek()).value;
		e1.addAll(e2.getTripletes()); e1.add(new Printf(Input.tipoPython(e2), e2.getTriplete())); RESULT = e1;
              CUP$SintaxisPython$result = parser.getSymbolFactory().newSymbol("STRING",29, ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), RESULT);
            }
          return CUP$SintaxisPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // STRING ::= STRING coma string 
            {
              List<Triplete> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-2)).right;
		List<Triplete> e1 = (List<Triplete>)((java_cup.runtime.Symbol) CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$SintaxisPython$stack.peek()).value;
		e1.add(new Printf(e2)); RESULT = e1;
              CUP$SintaxisPython$result = parser.getSymbolFactory().newSymbol("STRING",29, ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), RESULT);
            }
          return CUP$SintaxisPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // STRING ::= D 
            {
              List<Triplete> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()).right;
		OperacionPython e1 = (OperacionPython)((java_cup.runtime.Symbol) CUP$SintaxisPython$stack.peek()).value;
		List<Triplete> tri = new ArrayList<>(); tri.addAll(e1.getTripletes());
                tri.add(new Printf(Input.tipoPython(e1), e1.getTriplete()));
                RESULT = tri;
              CUP$SintaxisPython$result = parser.getSymbolFactory().newSymbol("STRING",29, ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), RESULT);
            }
          return CUP$SintaxisPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // STRING ::= string 
            {
              List<Triplete> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$SintaxisPython$stack.peek()).value;
		List<Triplete> tri = new ArrayList<>(); tri.add(new Printf(e1));
                RESULT = tri;
              CUP$SintaxisPython$result = parser.getSymbolFactory().newSymbol("STRING",29, ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), RESULT);
            }
          return CUP$SintaxisPython$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$SintaxisPython$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$SintaxisPython$do_action(
    int                        CUP$SintaxisPython$act_num,
    java_cup.runtime.lr_parser CUP$SintaxisPython$parser,
    java.util.Stack            CUP$SintaxisPython$stack,
    int                        CUP$SintaxisPython$top)
    throws java.lang.Exception
    {
              return CUP$SintaxisPython$do_action_part00000000(
                               CUP$SintaxisPython$act_num,
                               CUP$SintaxisPython$parser,
                               CUP$SintaxisPython$stack,
                               CUP$SintaxisPython$top);
    }
}

}
