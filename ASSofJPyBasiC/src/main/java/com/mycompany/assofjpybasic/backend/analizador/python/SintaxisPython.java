
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package com.mycompany.assofjpybasic.backend.analizador.python;

import java_cup.runtime.*;
import com.mycompany.assofjpybasic.backend.semantica.python.*;
import java.util.ArrayList;
import java.util.List;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class SintaxisPython extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return SintaxisPythonSym.class;
}

  /** Default constructor. */
  @Deprecated
  public SintaxisPython() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public SintaxisPython(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public SintaxisPython(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\130\000\002\002\004\000\002\002\004\000\002\002" +
    "\003\000\002\003\003\000\002\003\002\000\002\004\004" +
    "\000\002\004\003\000\002\044\002\000\002\032\012\000" +
    "\002\045\002\000\002\032\011\000\002\034\005\000\002" +
    "\034\003\000\002\046\002\000\002\005\005\000\002\047" +
    "\002\000\002\005\007\000\002\006\005\000\002\006\004" +
    "\000\002\007\003\000\002\007\002\000\002\010\003\000" +
    "\002\010\003\000\002\010\003\000\002\010\004\000\002" +
    "\011\007\000\002\011\005\000\002\033\005\000\002\033" +
    "\003\000\002\035\005\000\002\035\003\000\002\040\003" +
    "\000\002\040\003\000\002\040\003\000\002\012\006\000" +
    "\002\036\006\000\002\036\006\000\002\036\006\000\002" +
    "\013\004\000\002\013\003\000\002\026\003\000\002\026" +
    "\003\000\002\026\003\000\002\026\004\000\002\014\010" +
    "\000\002\015\007\000\002\015\002\000\002\016\005\000" +
    "\002\016\002\000\002\017\006\000\002\020\003\000\002" +
    "\020\002\000\002\021\011\000\002\022\006\000\002\022" +
    "\010\000\002\022\012\000\002\037\005\000\002\037\005" +
    "\000\002\037\003\000\002\041\005\000\002\041\005\000" +
    "\002\041\005\000\002\041\005\000\002\041\003\000\002" +
    "\042\004\000\002\042\004\000\002\042\003\000\002\043" +
    "\003\000\002\043\003\000\002\043\003\000\002\043\005" +
    "\000\002\023\005\000\002\023\003\000\002\024\005\000" +
    "\002\024\003\000\002\025\004\000\002\025\003\000\002" +
    "\030\005\000\002\030\005\000\002\030\005\000\002\030" +
    "\005\000\002\030\005\000\002\030\005\000\002\030\005" +
    "\000\002\031\005\000\002\031\005\000\002\031\003\000" +
    "\002\031\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\251\000\010\002\ufffd\004\ufffd\056\004\001\002\000" +
    "\006\002\ufffe\004\ufffe\001\002\000\004\002\253\001\002" +
    "\000\006\002\uffff\004\007\001\002\000\004\047\013\001" +
    "\002\000\006\002\ufffb\004\ufffb\001\002\000\006\002\000" +
    "\004\007\001\002\000\006\002\ufffc\004\ufffc\001\002\000" +
    "\004\033\014\001\002\000\006\034\016\047\017\001\002" +
    "\000\006\034\246\035\245\001\002\000\004\036\020\001" +
    "\002\000\006\034\ufff5\035\ufff5\001\002\000\020\037\ufff8" +
    "\040\ufff8\041\ufff8\042\ufff8\045\ufff8\047\ufff8\056\ufff8\001" +
    "\002\000\020\037\ufff4\040\ufff4\041\ufff4\042\ufff4\045\ufff4" +
    "\047\ufff4\056\ufff2\001\002\000\004\056\135\001\002\000" +
    "\016\037\025\040\032\041\027\042\035\045\037\047\026" +
    "\001\002\000\006\002\ufff7\004\ufff7\001\002\000\004\033" +
    "\125\001\002\000\010\014\uffe5\035\uffe5\043\uffe5\001\002" +
    "\000\004\033\122\001\002\000\006\044\uffec\056\uffec\001" +
    "\002\000\006\044\uffea\056\uffea\001\002\000\004\033\117" +
    "\001\002\000\006\044\114\056\uffed\001\002\000\004\056" +
    "\113\001\002\000\004\033\110\001\002\000\006\044\uffeb" +
    "\056\uffeb\001\002\000\026\025\061\026\053\033\062\040" +
    "\032\041\027\042\035\047\047\050\060\051\052\052\056" +
    "\001\002\000\006\035\042\043\041\001\002\000\026\025" +
    "\061\026\053\033\062\040\032\041\027\042\035\047\047" +
    "\050\060\051\052\052\056\001\002\000\006\043\043\047" +
    "\044\001\002\000\026\025\061\026\053\033\062\040\032" +
    "\041\027\042\035\047\047\050\060\051\052\052\056\001" +
    "\002\000\010\014\uffe6\035\uffe6\043\uffe6\001\002\000\010" +
    "\035\uffe3\044\uffe3\056\uffe3\001\002\000\014\025\064\034" +
    "\uffe1\035\uffe1\044\uffe1\056\uffe1\001\002\000\050\006\uffbe" +
    "\007\uffbe\017\uffbe\020\uffbe\021\uffbe\022\uffbe\023\uffbe\024" +
    "\uffbe\025\uffbe\026\uffbe\027\uffbe\030\uffbe\031\uffbe\032\uffbe" +
    "\034\uffbe\035\uffbe\036\uffbe\044\uffbe\056\uffbe\001\002\000" +
    "\004\035\103\001\002\000\050\006\uffc2\007\uffc2\017\uffc2" +
    "\020\uffc2\021\uffc2\022\uffc2\023\uffc2\024\uffc2\025\uffc2\026" +
    "\uffc2\027\uffc2\030\uffc2\031\uffc2\032\uffc2\034\uffc2\035\uffc2" +
    "\036\uffc2\044\uffc2\056\uffc2\001\002\000\050\006\uffbc\007" +
    "\uffbc\017\uffbc\020\uffbc\021\uffbc\022\uffbc\023\uffbc\024\uffbc" +
    "\025\uffbc\026\uffbc\027\uffbc\030\uffbc\031\uffbc\032\uffbc\034" +
    "\uffbc\035\uffbc\036\uffbc\044\uffbc\056\uffbc\001\002\000\016" +
    "\025\061\026\053\033\062\047\047\050\060\051\052\001" +
    "\002\000\050\006\uffbf\007\uffbf\017\uffbf\020\uffbf\021\uffbf" +
    "\022\uffbf\023\uffbf\024\uffbf\025\uffbf\026\uffbf\027\uffbf\030" +
    "\uffbf\031\uffbf\032\uffbf\034\uffbf\035\uffbf\036\uffbf\044\uffbf" +
    "\056\uffbf\001\002\000\012\034\uffe0\035\uffe0\044\uffe0\056" +
    "\uffe0\001\002\000\012\034\uffe2\035\uffe2\044\uffe2\056\uffe2" +
    "\001\002\000\050\006\uffc7\007\uffc7\017\uffc7\020\uffc7\021" +
    "\uffc7\022\uffc7\023\uffc7\024\uffc7\025\uffc7\026\100\027\067" +
    "\030\072\031\070\032\071\034\uffc7\035\uffc7\036\uffc7\044" +
    "\uffc7\056\uffc7\001\002\000\050\006\uffbd\007\uffbd\017\uffbd" +
    "\020\uffbd\021\uffbd\022\uffbd\023\uffbd\024\uffbd\025\uffbd\026" +
    "\uffbd\027\uffbd\030\uffbd\031\uffbd\032\uffbd\034\uffbd\035\uffbd" +
    "\036\uffbd\044\uffbd\056\uffbd\001\002\000\016\025\061\026" +
    "\053\033\062\047\047\050\060\051\052\001\002\000\016" +
    "\025\061\026\053\033\062\047\047\050\060\051\052\001" +
    "\002\000\006\025\064\034\065\001\002\000\016\025\061" +
    "\026\053\033\062\047\047\050\060\051\052\001\002\000" +
    "\050\006\uffbb\007\uffbb\017\uffbb\020\uffbb\021\uffbb\022\uffbb" +
    "\023\uffbb\024\uffbb\025\uffbb\026\uffbb\027\uffbb\030\uffbb\031" +
    "\uffbb\032\uffbb\034\uffbb\035\uffbb\036\uffbb\044\uffbb\056\uffbb" +
    "\001\002\000\046\006\uffc9\007\uffc9\017\uffc9\020\uffc9\021" +
    "\uffc9\022\uffc9\023\uffc9\024\uffc9\025\uffc9\027\067\030\072" +
    "\031\070\032\071\034\uffc9\035\uffc9\036\uffc9\044\uffc9\056" +
    "\uffc9\001\002\000\016\025\061\026\053\033\062\047\047" +
    "\050\060\051\052\001\002\000\016\025\061\026\053\033" +
    "\062\047\047\050\060\051\052\001\002\000\016\025\061" +
    "\026\053\033\062\047\047\050\060\051\052\001\002\000" +
    "\016\025\061\026\053\033\062\047\047\050\060\051\052" +
    "\001\002\000\050\006\uffc5\007\uffc5\017\uffc5\020\uffc5\021" +
    "\uffc5\022\uffc5\023\uffc5\024\uffc5\025\uffc5\026\uffc5\027\uffc5" +
    "\030\uffc5\031\uffc5\032\uffc5\034\uffc5\035\uffc5\036\uffc5\044" +
    "\uffc5\056\uffc5\001\002\000\050\006\uffc4\007\uffc4\017\uffc4" +
    "\020\uffc4\021\uffc4\022\uffc4\023\uffc4\024\uffc4\025\uffc4\026" +
    "\uffc4\027\uffc4\030\uffc4\031\uffc4\032\uffc4\034\uffc4\035\uffc4" +
    "\036\uffc4\044\uffc4\056\uffc4\001\002\000\050\006\uffc3\007" +
    "\uffc3\017\uffc3\020\uffc3\021\uffc3\022\uffc3\023\uffc3\024\uffc3" +
    "\025\uffc3\026\uffc3\027\uffc3\030\uffc3\031\uffc3\032\uffc3\034" +
    "\uffc3\035\uffc3\036\uffc3\044\uffc3\056\uffc3\001\002\000\050" +
    "\006\uffc6\007\uffc6\017\uffc6\020\uffc6\021\uffc6\022\uffc6\023" +
    "\uffc6\024\uffc6\025\uffc6\026\uffc6\027\uffc6\030\uffc6\031\uffc6" +
    "\032\uffc6\034\uffc6\035\uffc6\036\uffc6\044\uffc6\056\uffc6\001" +
    "\002\000\050\006\uffc0\007\uffc0\017\uffc0\020\uffc0\021\uffc0" +
    "\022\uffc0\023\uffc0\024\uffc0\025\uffc0\026\uffc0\027\uffc0\030" +
    "\uffc0\031\uffc0\032\uffc0\034\uffc0\035\uffc0\036\uffc0\044\uffc0" +
    "\056\uffc0\001\002\000\016\025\061\026\053\033\062\047" +
    "\047\050\060\051\052\001\002\000\046\006\uffc8\007\uffc8" +
    "\017\uffc8\020\uffc8\021\uffc8\022\uffc8\023\uffc8\024\uffc8\025" +
    "\uffc8\027\067\030\072\031\070\032\071\034\uffc8\035\uffc8" +
    "\036\uffc8\044\uffc8\056\uffc8\001\002\000\050\006\uffc1\007" +
    "\uffc1\017\uffc1\020\uffc1\021\uffc1\022\uffc1\023\uffc1\024\uffc1" +
    "\025\uffc1\026\uffc1\027\uffc1\030\uffc1\031\uffc1\032\uffc1\034" +
    "\uffc1\035\uffc1\036\uffc1\044\uffc1\056\uffc1\001\002\000\032" +
    "\025\061\026\053\033\062\040\032\041\027\042\035\044" +
    "\uffe8\047\047\050\060\051\052\052\056\056\uffe8\001\002" +
    "\000\010\035\uffe4\044\uffe4\056\uffe4\001\002\000\010\035" +
    "\106\044\uffe7\056\uffe7\001\002\000\026\025\061\026\053" +
    "\033\062\040\032\041\027\042\035\047\047\050\060\051" +
    "\052\052\056\001\002\000\006\044\uffe9\056\uffe9\001\002" +
    "\000\004\053\111\001\002\000\004\034\112\001\002\000" +
    "\012\034\uffdc\035\uffdc\044\uffdc\056\uffdc\001\002\000\036" +
    "\002\ufff3\004\ufff3\010\ufff3\011\ufff3\012\ufff3\013\ufff3\016" +
    "\ufff3\037\ufff3\040\ufff3\041\ufff3\042\ufff3\045\ufff3\047\ufff3" +
    "\055\ufff3\001\002\000\020\037\025\040\032\041\027\042" +
    "\035\045\037\047\026\056\uffee\001\002\000\004\056\uffef" +
    "\001\002\000\004\056\ufff0\001\002\000\004\053\120\001" +
    "\002\000\004\034\121\001\002\000\012\034\uffdd\035\uffdd" +
    "\044\uffdd\056\uffdd\001\002\000\004\053\123\001\002\000" +
    "\004\034\124\001\002\000\012\034\uffde\035\uffde\044\uffde" +
    "\056\uffde\001\002\000\030\025\061\026\053\033\062\040" +
    "\032\041\027\042\035\047\047\050\060\051\052\052\056" +
    "\053\126\001\002\000\006\034\uffaa\035\uffaa\001\002\000" +
    "\006\034\132\035\131\001\002\000\006\034\uffab\035\uffab" +
    "\001\002\000\030\025\061\026\053\033\062\040\032\041" +
    "\027\042\035\047\047\050\060\051\052\052\056\053\134" +
    "\001\002\000\006\044\uffdf\056\uffdf\001\002\000\006\034" +
    "\uffad\035\uffad\001\002\000\006\034\uffac\035\uffac\001\002" +
    "\000\004\054\136\001\002\000\024\010\144\013\147\016" +
    "\143\037\025\040\032\041\027\042\035\045\037\047\026" +
    "\001\002\000\026\010\uffd7\013\uffd7\016\uffd7\037\uffd7\040" +
    "\uffd7\041\uffd7\042\uffd7\045\uffd7\047\uffd7\055\uffd7\001\002" +
    "\000\004\056\244\001\002\000\026\010\uffd9\013\uffd9\016" +
    "\uffd9\037\uffd9\040\uffd9\041\uffd9\042\uffd9\045\uffd9\047\uffd9" +
    "\055\uffd9\001\002\000\004\055\243\001\002\000\020\005" +
    "\174\025\061\026\053\033\200\047\047\050\060\051\052" +
    "\001\002\000\020\005\174\025\061\026\053\033\200\047" +
    "\047\050\060\051\052\001\002\000\026\010\144\013\147" +
    "\016\143\037\025\040\032\041\027\042\035\045\037\047" +
    "\026\055\uffda\001\002\000\026\010\uffd8\013\uffd8\016\uffd8" +
    "\037\uffd8\040\uffd8\041\uffd8\042\uffd8\045\uffd8\047\uffd8\055" +
    "\uffd8\001\002\000\004\047\026\001\002\000\006\014\uffce" +
    "\035\152\001\002\000\004\014\153\001\002\000\006\014" +
    "\uffcf\047\044\001\002\000\004\015\155\001\002\000\004" +
    "\036\167\001\002\000\004\033\156\001\002\000\016\025" +
    "\061\026\053\033\062\047\047\050\060\051\052\001\002" +
    "\000\010\025\064\034\161\035\160\001\002\000\016\025" +
    "\061\026\053\033\062\047\047\050\060\051\052\001\002" +
    "\000\004\036\uffcc\001\002\000\010\025\064\034\164\035" +
    "\163\001\002\000\016\025\061\026\053\033\062\047\047" +
    "\050\060\051\052\001\002\000\004\036\uffcb\001\002\000" +
    "\006\025\064\034\166\001\002\000\004\036\uffca\001\002" +
    "\000\020\037\ufff4\040\ufff4\041\ufff4\042\ufff4\045\ufff4\047" +
    "\ufff4\056\ufff2\001\002\000\026\010\uffcd\013\uffcd\016\uffcd" +
    "\037\uffcd\040\uffcd\041\uffcd\042\uffcd\045\uffcd\047\uffcd\055" +
    "\uffcd\001\002\000\004\055\uffdb\001\002\000\010\006\uffb5" +
    "\007\uffb5\036\uffb5\001\002\000\010\006\223\007\uffb9\036" +
    "\uffb9\001\002\000\020\005\174\025\061\026\053\033\200" +
    "\047\047\050\060\051\052\001\002\000\020\017\205\020" +
    "\206\021\210\022\207\023\203\024\204\025\064\001\002" +
    "\000\010\006\uffb7\007\uffb7\036\uffb7\001\002\000\006\007" +
    "\221\036\220\001\002\000\016\025\061\026\053\033\200" +
    "\047\047\050\060\051\052\001\002\000\004\034\217\001" +
    "\002\000\022\017\205\020\206\021\210\022\207\023\203" +
    "\024\204\025\064\034\065\001\002\000\016\025\061\026" +
    "\053\033\062\047\047\050\060\051\052\001\002\000\016" +
    "\025\061\026\053\033\062\047\047\050\060\051\052\001" +
    "\002\000\016\025\061\026\053\033\062\047\047\050\060" +
    "\051\052\001\002\000\016\025\061\026\053\033\062\047" +
    "\047\050\060\051\052\001\002\000\016\025\061\026\053" +
    "\033\062\047\047\050\060\051\052\001\002\000\016\025" +
    "\061\026\053\033\062\047\047\050\060\051\052\001\002" +
    "\000\014\006\uffb1\007\uffb1\025\064\034\uffb1\036\uffb1\001" +
    "\002\000\014\006\uffb0\007\uffb0\025\064\034\uffb0\036\uffb0" +
    "\001\002\000\014\006\uffb2\007\uffb2\025\064\034\uffb2\036" +
    "\uffb2\001\002\000\014\006\uffb3\007\uffb3\025\064\034\uffb3" +
    "\036\uffb3\001\002\000\014\006\uffb4\007\uffb4\025\064\034" +
    "\uffb4\036\uffb4\001\002\000\014\006\uffaf\007\uffaf\025\064" +
    "\034\uffaf\036\uffaf\001\002\000\012\006\uffae\007\uffae\034" +
    "\uffae\036\uffae\001\002\000\020\037\ufff4\040\ufff4\041\ufff4" +
    "\042\ufff4\045\ufff4\047\ufff4\056\ufff2\001\002\000\020\005" +
    "\174\025\061\026\053\033\200\047\047\050\060\051\052" +
    "\001\002\000\010\006\223\007\uffba\036\uffba\001\002\000" +
    "\020\005\174\025\061\026\053\033\200\047\047\050\060" +
    "\051\052\001\002\000\010\006\uffb8\007\uffb8\036\uffb8\001" +
    "\002\000\032\010\uffd3\011\uffd3\012\uffd3\013\uffd3\016\uffd3" +
    "\037\uffd3\040\uffd3\041\uffd3\042\uffd3\045\uffd3\047\uffd3\055" +
    "\uffd3\001\002\000\032\010\uffd1\011\230\012\231\013\uffd1" +
    "\016\uffd1\037\uffd1\040\uffd1\041\uffd1\042\uffd1\045\uffd1\047" +
    "\uffd1\055\uffd1\001\002\000\026\010\uffd5\013\uffd5\016\uffd5" +
    "\037\uffd5\040\uffd5\041\uffd5\042\uffd5\045\uffd5\047\uffd5\055" +
    "\uffd5\001\002\000\020\005\174\025\061\026\053\033\200" +
    "\047\047\050\060\051\052\001\002\000\004\036\232\001" +
    "\002\000\020\037\ufff4\040\ufff4\041\ufff4\042\ufff4\045\ufff4" +
    "\047\ufff4\056\ufff2\001\002\000\026\010\uffd2\013\uffd2\016" +
    "\uffd2\037\uffd2\040\uffd2\041\uffd2\042\uffd2\045\uffd2\047\uffd2" +
    "\055\uffd2\001\002\000\006\007\221\036\235\001\002\000" +
    "\020\037\ufff4\040\ufff4\041\ufff4\042\ufff4\045\ufff4\047\ufff4" +
    "\056\ufff2\001\002\000\032\010\uffd4\011\uffd4\012\uffd4\013" +
    "\uffd4\016\uffd4\037\uffd4\040\uffd4\041\uffd4\042\uffd4\045\uffd4" +
    "\047\uffd4\055\uffd4\001\002\000\010\006\uffb6\007\uffb6\036" +
    "\uffb6\001\002\000\006\007\221\036\241\001\002\000\020" +
    "\037\ufff4\040\ufff4\041\ufff4\042\ufff4\045\ufff4\047\ufff4\056" +
    "\ufff2\001\002\000\026\010\uffd0\013\uffd0\016\uffd0\037\uffd0" +
    "\040\uffd0\041\uffd0\042\uffd0\045\uffd0\047\uffd0\055\uffd0\001" +
    "\002\000\036\002\ufff1\004\ufff1\010\ufff1\011\ufff1\012\ufff1" +
    "\013\ufff1\016\ufff1\037\ufff1\040\ufff1\041\ufff1\042\ufff1\045" +
    "\ufff1\047\ufff1\055\ufff1\001\002\000\026\010\uffd6\013\uffd6" +
    "\016\uffd6\037\uffd6\040\uffd6\041\uffd6\042\uffd6\045\uffd6\047" +
    "\uffd6\055\uffd6\001\002\000\004\047\252\001\002\000\004" +
    "\036\247\001\002\000\020\037\ufffa\040\ufffa\041\ufffa\042" +
    "\ufffa\045\ufffa\047\ufffa\056\ufffa\001\002\000\020\037\ufff4" +
    "\040\ufff4\041\ufff4\042\ufff4\045\ufff4\047\ufff4\056\ufff2\001" +
    "\002\000\006\002\ufff9\004\ufff9\001\002\000\006\034\ufff6" +
    "\035\ufff6\001\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\251\000\006\002\004\003\005\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\004\010\032\007\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\032\011\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\034\014" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\045\020\001\001\000\010\005\023\046\022" +
    "\047\021\001\001\000\002\001\001\000\016\006\033\010" +
    "\032\011\027\012\035\033\037\036\030\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\007\114\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\016\036\054\037\045\040\106" +
    "\041\056\042\050\043\053\001\001\000\002\001\001\000" +
    "\020\035\104\036\054\037\045\040\044\041\056\042\050" +
    "\043\053\001\001\000\002\001\001\000\020\035\047\036" +
    "\054\037\045\040\044\041\056\042\050\043\053\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\042\101\043\053\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\042\076\043\053\001\001\000" +
    "\012\037\062\041\056\042\050\043\053\001\001\000\002" +
    "\001\001\000\010\041\065\042\050\043\053\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\042\075\043\053" +
    "\001\001\000\006\042\074\043\053\001\001\000\006\042" +
    "\073\043\053\001\001\000\006\042\072\043\053\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\041\100\042\050" +
    "\043\053\001\001\000\002\001\001\000\002\001\001\000" +
    "\016\036\054\037\045\040\103\041\056\042\050\043\053" +
    "\001\001\000\002\001\001\000\002\001\001\000\016\036" +
    "\054\037\045\040\103\041\056\042\050\043\053\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\016\006\115\010\032" +
    "\011\027\012\035\033\037\036\030\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\020\031\126\036\054\037\045\040\127" +
    "\041\056\042\050\043\053\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\016\036\054\037\045" +
    "\040\132\041\056\042\050\043\053\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\030\006\137\010\032\011\027\012\035\013\141\014" +
    "\140\017\136\021\145\026\144\033\037\036\030\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\022\023\237\024\172\025\175\030\171" +
    "\037\174\041\056\042\050\043\053\001\001\000\022\023" +
    "\176\024\172\025\175\030\171\037\174\041\056\042\050" +
    "\043\053\001\001\000\030\006\137\010\032\011\027\012" +
    "\035\013\170\014\140\017\136\021\145\026\144\033\037" +
    "\036\030\001\001\000\002\001\001\000\004\033\147\001" +
    "\001\000\004\020\150\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\022\153\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\037\156\041\056\042\050\043\053" +
    "\001\001\000\002\001\001\000\012\037\161\041\056\042" +
    "\050\043\053\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\037\164\041\056\042\050\043\053\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\005\167\046\022\047\021\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\016" +
    "\025\236\030\171\037\174\041\056\042\050\043\053\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\030\200\037\201\041\056\042\050\043\053\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\037\215" +
    "\041\056\042\050\043\053\001\001\000\012\037\214\041" +
    "\056\042\050\043\053\001\001\000\012\037\213\041\056" +
    "\042\050\043\053\001\001\000\012\037\212\041\056\042" +
    "\050\043\053\001\001\000\012\037\211\041\056\042\050" +
    "\043\053\001\001\000\012\037\210\041\056\042\050\043" +
    "\053\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\005\224\046\022\047\021" +
    "\001\001\000\020\024\221\025\175\030\171\037\174\041" +
    "\056\042\050\043\053\001\001\000\002\001\001\000\016" +
    "\025\223\030\171\037\174\041\056\042\050\043\053\001" +
    "\001\000\002\001\001\000\004\015\225\001\001\000\004" +
    "\016\226\001\001\000\002\001\001\000\022\023\233\024" +
    "\172\025\175\030\171\037\174\041\056\042\050\043\053" +
    "\001\001\000\002\001\001\000\010\005\232\046\022\047" +
    "\021\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\005\235\046\022\047\021\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\005\241\046\022" +
    "\047\021\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\044\247\001\001\000\010\005\250\046\022\047\021\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$SintaxisPython$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$SintaxisPython$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$SintaxisPython$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    private Symbol s;
    private PythonSemantica sem = new PythonSemantica();
    private MetodoPython actual;
    
    public void syntax_error(Symbol sym){
        System.out.println("\n" + sym.value + sym.sym);
        System.out.println("Error Sintactico en la letra: " + sym.value + "   <linea>: "  + (sym.right + 1) + "    <columna>: " + (sym.left + 1) + "\n");
    }

    public void unrecovered_syntax_error(Symbol sym) throws java.lang.Exception{
        System.out.println("\n" + sym.value + sym.sym);
        System.out.println("Error Sintactico en la letra: " + sym.value + "   <linea>: "  + (sym.right + 1) + "    <columna>: " + (sym.left + 1) + "\n");
    }

    public PythonSemantica getPython(){
            return sem;
    }

    public Symbol getS(){
        return this.cur_token;
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$SintaxisPython$actions {
  private final SintaxisPython parser;

  /** Constructor */
  CUP$SintaxisPython$actions(SintaxisPython parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$SintaxisPython$do_action_part00000000(
    int                        CUP$SintaxisPython$act_num,
    java_cup.runtime.lr_parser CUP$SintaxisPython$parser,
    java.util.Stack            CUP$SintaxisPython$stack,
    int                        CUP$SintaxisPython$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$SintaxisPython$result;

      /* select the action based on the action number */
      switch (CUP$SintaxisPython$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= PYTHON EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-1)).value;
		RESULT = start_val;
              CUP$SintaxisPython$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$SintaxisPython$parser.done_parsing();
          return CUP$SintaxisPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // PYTHON ::= ESP DEFS 
            {
              Object RESULT =null;

              CUP$SintaxisPython$result = parser.getSymbolFactory().newSymbol("PYTHON",0, ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), RESULT);
            }
          return CUP$SintaxisPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // PYTHON ::= ESP 
            {
              Object RESULT =null;

              CUP$SintaxisPython$result = parser.getSymbolFactory().newSymbol("PYTHON",0, ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), RESULT);
            }
          return CUP$SintaxisPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // ESP ::= newline 
            {
              Object RESULT =null;

              CUP$SintaxisPython$result = parser.getSymbolFactory().newSymbol("ESP",1, ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), RESULT);
            }
          return CUP$SintaxisPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // ESP ::= 
            {
              Object RESULT =null;

              CUP$SintaxisPython$result = parser.getSymbolFactory().newSymbol("ESP",1, ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), RESULT);
            }
          return CUP$SintaxisPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // DEFS ::= DEFS DEF 
            {
              Object RESULT =null;

              CUP$SintaxisPython$result = parser.getSymbolFactory().newSymbol("DEFS",2, ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), RESULT);
            }
          return CUP$SintaxisPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // DEFS ::= DEF 
            {
              Object RESULT =null;

              CUP$SintaxisPython$result = parser.getSymbolFactory().newSymbol("DEFS",2, ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), RESULT);
            }
          return CUP$SintaxisPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // NT$0 ::= 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-4)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-4)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-4)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-2)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-2)).right;
		List<VariablePython> e2 = (List<VariablePython>)((java_cup.runtime.Symbol) CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-2)).value;
MetodoPython met = new MetodoPython(e1, e2);
                                actual = met;
                                sem.addVar(e2);
                                if(!sem.addMetodo(met)){
                                        syntax_error(getS());
                                }
              CUP$SintaxisPython$result = parser.getSymbolFactory().newSymbol("NT$0",34, ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), RESULT);
            }
          return CUP$SintaxisPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // DEF ::= deff id para PAR_LIST parc dosp NT$0 SUITE 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-1)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-6)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-6)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-6)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-4)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-4)).right;
		List<VariablePython> e2 = (List<VariablePython>)((java_cup.runtime.Symbol) CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-4)).value;
		if(actual.getTIPO() == null){
                                        actual.setTIPO(PythonSemantica.VOID);
                                }
              CUP$SintaxisPython$result = parser.getSymbolFactory().newSymbol("DEF",24, ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-7)), ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), RESULT);
            }
          return CUP$SintaxisPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // NT$1 ::= 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-3)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-3)).value;
MetodoPython met = new MetodoPython(e1, new ArrayList<>());
                                actual = met;
                                if(!sem.addMetodo(met)){
                                        syntax_error(getS());
                                }
              CUP$SintaxisPython$result = parser.getSymbolFactory().newSymbol("NT$1",35, ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), RESULT);
            }
          return CUP$SintaxisPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // DEF ::= deff id para parc dosp NT$1 SUITE 
            {
              Object RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-1)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-5)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-5)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-5)).value;
		if(actual.getTIPO() == null){
                                        actual.setTIPO(PythonSemantica.VOID);
                                }
              CUP$SintaxisPython$result = parser.getSymbolFactory().newSymbol("DEF",24, ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-6)), ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), RESULT);
            }
          return CUP$SintaxisPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // PAR_LIST ::= PAR_LIST coma id 
            {
              List<VariablePython> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-2)).right;
		List<VariablePython> e1 = (List<VariablePython>)((java_cup.runtime.Symbol) CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$SintaxisPython$stack.peek()).value;
		e1.add(new VariablePython(e2, 1)); RESULT = e1;
              CUP$SintaxisPython$result = parser.getSymbolFactory().newSymbol("PAR_LIST",26, ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), RESULT);
            }
          return CUP$SintaxisPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // PAR_LIST ::= id 
            {
              List<VariablePython> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$SintaxisPython$stack.peek()).value;
		List<VariablePython> var = new ArrayList<>(); var.add(new VariablePython(e1, 1)); RESULT = var;
              CUP$SintaxisPython$result = parser.getSymbolFactory().newSymbol("PAR_LIST",26, ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), RESULT);
            }
          return CUP$SintaxisPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // NT$2 ::= 
            {
              Object RESULT =null;
PythonSemantica.AMBITO += 1;
              CUP$SintaxisPython$result = parser.getSymbolFactory().newSymbol("NT$2",36, ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), RESULT);
            }
          return CUP$SintaxisPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // SUITE ::= NT$2 STMT_LIST newline 
            {
              Object RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-2)).value;
		sem.eliminarAmbito(PythonSemantica.AMBITO);
                                                PythonSemantica.AMBITO -= 1;
              CUP$SintaxisPython$result = parser.getSymbolFactory().newSymbol("SUITE",3, ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), RESULT);
            }
          return CUP$SintaxisPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // NT$3 ::= 
            {
              Object RESULT =null;
PythonSemantica.AMBITO += 1;
              CUP$SintaxisPython$result = parser.getSymbolFactory().newSymbol("NT$3",37, ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), RESULT);
            }
          return CUP$SintaxisPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // SUITE ::= NT$3 newline indent STATEMENTS dedent 
            {
              Object RESULT =null;
              // propagate RESULT from NT$3
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-4)).value;
		sem.eliminarAmbito(PythonSemantica.AMBITO);
                                                PythonSemantica.AMBITO -= 1;
              CUP$SintaxisPython$result = parser.getSymbolFactory().newSymbol("SUITE",3, ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-4)), ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), RESULT);
            }
          return CUP$SintaxisPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // STMT_LIST ::= STATEMENTLINE puntocoma STMT_LIST 
            {
              Object RESULT =null;

              CUP$SintaxisPython$result = parser.getSymbolFactory().newSymbol("STMT_LIST",4, ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), RESULT);
            }
          return CUP$SintaxisPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // STMT_LIST ::= STATEMENTLINE PC 
            {
              Object RESULT =null;

              CUP$SintaxisPython$result = parser.getSymbolFactory().newSymbol("STMT_LIST",4, ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), RESULT);
            }
          return CUP$SintaxisPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // PC ::= puntocoma 
            {
              Object RESULT =null;

              CUP$SintaxisPython$result = parser.getSymbolFactory().newSymbol("PC",5, ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), RESULT);
            }
          return CUP$SintaxisPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // PC ::= 
            {
              Object RESULT =null;

              CUP$SintaxisPython$result = parser.getSymbolFactory().newSymbol("PC",5, ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), RESULT);
            }
          return CUP$SintaxisPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // STATEMENTLINE ::= AS_VAR 
            {
              Object RESULT =null;
		
              CUP$SintaxisPython$result = parser.getSymbolFactory().newSymbol("STATEMENTLINE",6, ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), RESULT);
            }
          return CUP$SintaxisPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // STATEMENTLINE ::= WRITE 
            {
              Object RESULT =null;

              CUP$SintaxisPython$result = parser.getSymbolFactory().newSymbol("STATEMENTLINE",6, ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), RESULT);
            }
          return CUP$SintaxisPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // STATEMENTLINE ::= INPUT 
            {
              Object RESULT =null;

              CUP$SintaxisPython$result = parser.getSymbolFactory().newSymbol("STATEMENTLINE",6, ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), RESULT);
            }
          return CUP$SintaxisPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // STATEMENTLINE ::= returnn D 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()).right;
		OperacionPython e1 = (OperacionPython)((java_cup.runtime.Symbol) CUP$SintaxisPython$stack.peek()).value;
		if(actual.getTIPO() == null || actual.getTIPO().equals(PythonSemantica.VAR)){
                actual.setTIPO(e1.getTipo());
        } else if(!actual.getTIPO().contains(e1.getTipo())){
                syntax_error(getS());
        }
              CUP$SintaxisPython$result = parser.getSymbolFactory().newSymbol("STATEMENTLINE",6, ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), RESULT);
            }
          return CUP$SintaxisPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // AS_VAR ::= LISTVAR coma igual LISTDEF coma 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-4)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-4)).right;
		List<VariablePython> e1 = (List<VariablePython>)((java_cup.runtime.Symbol) CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-4)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-1)).right;
		List<OperacionPython> e2 = (List<OperacionPython>)((java_cup.runtime.Symbol) CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-1)).value;
		if(!sem.addVar(e1, e2)){syntax_error(getS());}
              CUP$SintaxisPython$result = parser.getSymbolFactory().newSymbol("AS_VAR",7, ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-4)), ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), RESULT);
            }
          return CUP$SintaxisPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // AS_VAR ::= LISTVAR igual LISTDEF 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-2)).right;
		List<VariablePython> e1 = (List<VariablePython>)((java_cup.runtime.Symbol) CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()).right;
		List<OperacionPython> e2 = (List<OperacionPython>)((java_cup.runtime.Symbol) CUP$SintaxisPython$stack.peek()).value;
		if(!sem.addVar(e1, e2)){syntax_error(getS());}
              CUP$SintaxisPython$result = parser.getSymbolFactory().newSymbol("AS_VAR",7, ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), RESULT);
            }
          return CUP$SintaxisPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // LISTVAR ::= LISTVAR coma id 
            {
              List<VariablePython> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-2)).right;
		List<VariablePython> e1 = (List<VariablePython>)((java_cup.runtime.Symbol) CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$SintaxisPython$stack.peek()).value;
		e1.add(new VariablePython(e2, PythonSemantica.AMBITO)); RESULT = e1;
              CUP$SintaxisPython$result = parser.getSymbolFactory().newSymbol("LISTVAR",25, ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), RESULT);
            }
          return CUP$SintaxisPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // LISTVAR ::= id 
            {
              List<VariablePython> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$SintaxisPython$stack.peek()).value;
		List<VariablePython> var = new ArrayList<>();
                var.add(new VariablePython(e1, PythonSemantica.AMBITO)); RESULT = var;
              CUP$SintaxisPython$result = parser.getSymbolFactory().newSymbol("LISTVAR",25, ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), RESULT);
            }
          return CUP$SintaxisPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // LISTDEF ::= LISTDEF coma D 
            {
              List<OperacionPython> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-2)).right;
		List<OperacionPython> e1 = (List<OperacionPython>)((java_cup.runtime.Symbol) CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()).right;
		OperacionPython e2 = (OperacionPython)((java_cup.runtime.Symbol) CUP$SintaxisPython$stack.peek()).value;
		e1.add(e2); RESULT = e1;
              CUP$SintaxisPython$result = parser.getSymbolFactory().newSymbol("LISTDEF",27, ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), RESULT);
            }
          return CUP$SintaxisPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // LISTDEF ::= D 
            {
              List<OperacionPython> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()).right;
		OperacionPython e1 = (OperacionPython)((java_cup.runtime.Symbol) CUP$SintaxisPython$stack.peek()).value;
		List<OperacionPython> op = new ArrayList<>(); op.add(e1); RESULT = op;
              CUP$SintaxisPython$result = parser.getSymbolFactory().newSymbol("LISTDEF",27, ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), RESULT);
            }
          return CUP$SintaxisPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // D ::= character 
            {
              OperacionPython RESULT =null;
		RESULT = new OperacionPython(PythonSemantica.CHAR);
              CUP$SintaxisPython$result = parser.getSymbolFactory().newSymbol("D",30, ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), RESULT);
            }
          return CUP$SintaxisPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // D ::= OPERACION_A 
            {
              OperacionPython RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()).right;
		OperacionPython e1 = (OperacionPython)((java_cup.runtime.Symbol) CUP$SintaxisPython$stack.peek()).value;
		RESULT = e1;
              CUP$SintaxisPython$result = parser.getSymbolFactory().newSymbol("D",30, ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), RESULT);
            }
          return CUP$SintaxisPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // D ::= INPUT 
            {
              OperacionPython RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()).right;
		OperacionPython e1 = (OperacionPython)((java_cup.runtime.Symbol) CUP$SintaxisPython$stack.peek()).value;
		RESULT = e1;
              CUP$SintaxisPython$result = parser.getSymbolFactory().newSymbol("D",30, ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), RESULT);
            }
          return CUP$SintaxisPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // WRITE ::= print para STRING parc 
            {
              Object RESULT =null;

              CUP$SintaxisPython$result = parser.getSymbolFactory().newSymbol("WRITE",8, ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), RESULT);
            }
          return CUP$SintaxisPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // INPUT ::= intinput para string parc 
            {
              OperacionPython RESULT =null;
		RESULT = new OperacionPython(PythonSemantica.INT);
              CUP$SintaxisPython$result = parser.getSymbolFactory().newSymbol("INPUT",28, ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), RESULT);
            }
          return CUP$SintaxisPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // INPUT ::= charinput para string parc 
            {
              OperacionPython RESULT =null;
		RESULT = new OperacionPython(PythonSemantica.CHAR);
              CUP$SintaxisPython$result = parser.getSymbolFactory().newSymbol("INPUT",28, ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), RESULT);
            }
          return CUP$SintaxisPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // INPUT ::= floatinput para string parc 
            {
              OperacionPython RESULT =null;
		RESULT = new OperacionPython(PythonSemantica.FLOAT);
              CUP$SintaxisPython$result = parser.getSymbolFactory().newSymbol("INPUT",28, ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), RESULT);
            }
          return CUP$SintaxisPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // STATEMENTS ::= STATEMENT STATEMENTS 
            {
              Object RESULT =null;

              CUP$SintaxisPython$result = parser.getSymbolFactory().newSymbol("STATEMENTS",9, ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), RESULT);
            }
          return CUP$SintaxisPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // STATEMENTS ::= STATEMENT 
            {
              Object RESULT =null;

              CUP$SintaxisPython$result = parser.getSymbolFactory().newSymbol("STATEMENTS",9, ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), RESULT);
            }
          return CUP$SintaxisPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // STATEMENT ::= IF 
            {
              Object RESULT =null;

              CUP$SintaxisPython$result = parser.getSymbolFactory().newSymbol("STATEMENT",20, ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), RESULT);
            }
          return CUP$SintaxisPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // STATEMENT ::= FOR 
            {
              Object RESULT =null;

              CUP$SintaxisPython$result = parser.getSymbolFactory().newSymbol("STATEMENT",20, ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), RESULT);
            }
          return CUP$SintaxisPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // STATEMENT ::= WHILE 
            {
              Object RESULT =null;

              CUP$SintaxisPython$result = parser.getSymbolFactory().newSymbol("STATEMENT",20, ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), RESULT);
            }
          return CUP$SintaxisPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // STATEMENT ::= STMT_LIST newline 
            {
              Object RESULT =null;

              CUP$SintaxisPython$result = parser.getSymbolFactory().newSymbol("STATEMENT",20, ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), RESULT);
            }
          return CUP$SintaxisPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // IF ::= iff CONDICION dosp SUITE ELSEIF ELSE 
            {
              Object RESULT =null;

              CUP$SintaxisPython$result = parser.getSymbolFactory().newSymbol("IF",10, ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-5)), ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), RESULT);
            }
          return CUP$SintaxisPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // ELSEIF ::= ELSEIF elseiff CONDICION dosp SUITE 
            {
              Object RESULT =null;

              CUP$SintaxisPython$result = parser.getSymbolFactory().newSymbol("ELSEIF",11, ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-4)), ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), RESULT);
            }
          return CUP$SintaxisPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // ELSEIF ::= 
            {
              Object RESULT =null;

              CUP$SintaxisPython$result = parser.getSymbolFactory().newSymbol("ELSEIF",11, ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), RESULT);
            }
          return CUP$SintaxisPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // ELSE ::= elsee dosp SUITE 
            {
              Object RESULT =null;

              CUP$SintaxisPython$result = parser.getSymbolFactory().newSymbol("ELSE",12, ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), RESULT);
            }
          return CUP$SintaxisPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // ELSE ::= 
            {
              Object RESULT =null;

              CUP$SintaxisPython$result = parser.getSymbolFactory().newSymbol("ELSE",12, ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), RESULT);
            }
          return CUP$SintaxisPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // WHILE ::= whilee CONDICION dosp SUITE 
            {
              Object RESULT =null;

              CUP$SintaxisPython$result = parser.getSymbolFactory().newSymbol("WHILE",13, ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), RESULT);
            }
          return CUP$SintaxisPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // COMA ::= coma 
            {
              Object RESULT =null;

              CUP$SintaxisPython$result = parser.getSymbolFactory().newSymbol("COMA",14, ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), RESULT);
            }
          return CUP$SintaxisPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // COMA ::= 
            {
              Object RESULT =null;

              CUP$SintaxisPython$result = parser.getSymbolFactory().newSymbol("COMA",14, ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), RESULT);
            }
          return CUP$SintaxisPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // FOR ::= forr LISTVAR COMA inn RANGE dosp SUITE 
            {
              Object RESULT =null;

              CUP$SintaxisPython$result = parser.getSymbolFactory().newSymbol("FOR",15, ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-6)), ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), RESULT);
            }
          return CUP$SintaxisPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // RANGE ::= range para OPERACION_A parc 
            {
              Object RESULT =null;

              CUP$SintaxisPython$result = parser.getSymbolFactory().newSymbol("RANGE",16, ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), RESULT);
            }
          return CUP$SintaxisPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // RANGE ::= range para OPERACION_A coma OPERACION_A parc 
            {
              Object RESULT =null;

              CUP$SintaxisPython$result = parser.getSymbolFactory().newSymbol("RANGE",16, ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-5)), ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), RESULT);
            }
          return CUP$SintaxisPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // RANGE ::= range para OPERACION_A coma OPERACION_A coma OPERACION_A parc 
            {
              Object RESULT =null;

              CUP$SintaxisPython$result = parser.getSymbolFactory().newSymbol("RANGE",16, ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-7)), ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), RESULT);
            }
          return CUP$SintaxisPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // OPERACION_A ::= OPERACION_A mas OPERACION_M 
            {
              OperacionPython RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-2)).right;
		OperacionPython e1 = (OperacionPython)((java_cup.runtime.Symbol) CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()).right;
		OperacionPython e2 = (OperacionPython)((java_cup.runtime.Symbol) CUP$SintaxisPython$stack.peek()).value;
		RESULT = new OperacionPython(e1, e2);
              CUP$SintaxisPython$result = parser.getSymbolFactory().newSymbol("OPERACION_A",29, ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), RESULT);
            }
          return CUP$SintaxisPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // OPERACION_A ::= OPERACION_M menos OPERACION_M 
            {
              OperacionPython RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-2)).right;
		OperacionPython e1 = (OperacionPython)((java_cup.runtime.Symbol) CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()).right;
		OperacionPython e2 = (OperacionPython)((java_cup.runtime.Symbol) CUP$SintaxisPython$stack.peek()).value;
		RESULT = new OperacionPython(e1, e2);
              CUP$SintaxisPython$result = parser.getSymbolFactory().newSymbol("OPERACION_A",29, ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), RESULT);
            }
          return CUP$SintaxisPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // OPERACION_A ::= OPERACION_M 
            {
              OperacionPython RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()).right;
		OperacionPython e1 = (OperacionPython)((java_cup.runtime.Symbol) CUP$SintaxisPython$stack.peek()).value;
		RESULT = e1;
              CUP$SintaxisPython$result = parser.getSymbolFactory().newSymbol("OPERACION_A",29, ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), RESULT);
            }
          return CUP$SintaxisPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // OPERACION_M ::= OPERACION_M por OPERACION_U 
            {
              OperacionPython RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-2)).right;
		OperacionPython e1 = (OperacionPython)((java_cup.runtime.Symbol) CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()).right;
		OperacionPython e2 = (OperacionPython)((java_cup.runtime.Symbol) CUP$SintaxisPython$stack.peek()).value;
		RESULT = new OperacionPython(e1, e2);
              CUP$SintaxisPython$result = parser.getSymbolFactory().newSymbol("OPERACION_M",31, ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), RESULT);
            }
          return CUP$SintaxisPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // OPERACION_M ::= OPERACION_M div OPERACION_U 
            {
              OperacionPython RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-2)).right;
		OperacionPython e1 = (OperacionPython)((java_cup.runtime.Symbol) CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()).right;
		OperacionPython e2 = (OperacionPython)((java_cup.runtime.Symbol) CUP$SintaxisPython$stack.peek()).value;
		RESULT = new OperacionPython(e1, e2);
              CUP$SintaxisPython$result = parser.getSymbolFactory().newSymbol("OPERACION_M",31, ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), RESULT);
            }
          return CUP$SintaxisPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // OPERACION_M ::= OPERACION_M floor OPERACION_U 
            {
              OperacionPython RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-2)).right;
		OperacionPython e1 = (OperacionPython)((java_cup.runtime.Symbol) CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()).right;
		OperacionPython e2 = (OperacionPython)((java_cup.runtime.Symbol) CUP$SintaxisPython$stack.peek()).value;
		RESULT = new OperacionPython(e1, e2);
              CUP$SintaxisPython$result = parser.getSymbolFactory().newSymbol("OPERACION_M",31, ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), RESULT);
            }
          return CUP$SintaxisPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // OPERACION_M ::= OPERACION_M mod OPERACION_U 
            {
              OperacionPython RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-2)).right;
		OperacionPython e1 = (OperacionPython)((java_cup.runtime.Symbol) CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()).right;
		OperacionPython e2 = (OperacionPython)((java_cup.runtime.Symbol) CUP$SintaxisPython$stack.peek()).value;
		RESULT = new OperacionPython(e1, e2);
              CUP$SintaxisPython$result = parser.getSymbolFactory().newSymbol("OPERACION_M",31, ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), RESULT);
            }
          return CUP$SintaxisPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // OPERACION_M ::= OPERACION_U 
            {
              OperacionPython RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()).right;
		OperacionPython e1 = (OperacionPython)((java_cup.runtime.Symbol) CUP$SintaxisPython$stack.peek()).value;
		RESULT = e1;
              CUP$SintaxisPython$result = parser.getSymbolFactory().newSymbol("OPERACION_M",31, ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), RESULT);
            }
          return CUP$SintaxisPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // OPERACION_U ::= menos OPERACION_U 
            {
              OperacionPython RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()).right;
		OperacionPython e1 = (OperacionPython)((java_cup.runtime.Symbol) CUP$SintaxisPython$stack.peek()).value;
		RESULT = e1;
              CUP$SintaxisPython$result = parser.getSymbolFactory().newSymbol("OPERACION_U",32, ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), RESULT);
            }
          return CUP$SintaxisPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // OPERACION_U ::= mas OPERACION_U 
            {
              OperacionPython RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()).right;
		OperacionPython e1 = (OperacionPython)((java_cup.runtime.Symbol) CUP$SintaxisPython$stack.peek()).value;
		RESULT  = e1;
              CUP$SintaxisPython$result = parser.getSymbolFactory().newSymbol("OPERACION_U",32, ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), RESULT);
            }
          return CUP$SintaxisPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // OPERACION_U ::= ATOM 
            {
              OperacionPython RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()).right;
		OperacionPython e1 = (OperacionPython)((java_cup.runtime.Symbol) CUP$SintaxisPython$stack.peek()).value;
		RESULT = e1;
              CUP$SintaxisPython$result = parser.getSymbolFactory().newSymbol("OPERACION_U",32, ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), RESULT);
            }
          return CUP$SintaxisPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // ATOM ::= id 
            {
              OperacionPython RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$SintaxisPython$stack.peek()).value;
		VariablePython tipo = sem.existeVar(new VariablePython(e1, PythonSemantica.AMBITO));
                if(tipo==null){syntax_error(getS());} else {RESULT = new OperacionPython(tipo.getTipo());}
              CUP$SintaxisPython$result = parser.getSymbolFactory().newSymbol("ATOM",33, ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), RESULT);
            }
          return CUP$SintaxisPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // ATOM ::= entero 
            {
              OperacionPython RESULT =null;
		RESULT = new OperacionPython(PythonSemantica.INT);
              CUP$SintaxisPython$result = parser.getSymbolFactory().newSymbol("ATOM",33, ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), RESULT);
            }
          return CUP$SintaxisPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // ATOM ::= decimal 
            {
              OperacionPython RESULT =null;
		RESULT  = new OperacionPython(PythonSemantica.FLOAT);
              CUP$SintaxisPython$result = parser.getSymbolFactory().newSymbol("ATOM",33, ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), RESULT);
            }
          return CUP$SintaxisPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // ATOM ::= para OPERACION_A parc 
            {
              OperacionPython RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-1)).right;
		OperacionPython e1 = (OperacionPython)((java_cup.runtime.Symbol) CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-1)).value;
		RESULT = e1;
              CUP$SintaxisPython$result = parser.getSymbolFactory().newSymbol("ATOM",33, ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), RESULT);
            }
          return CUP$SintaxisPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // CONDICION ::= CONDICION orr AND 
            {
              Object RESULT =null;

              CUP$SintaxisPython$result = parser.getSymbolFactory().newSymbol("CONDICION",17, ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), RESULT);
            }
          return CUP$SintaxisPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // CONDICION ::= AND 
            {
              Object RESULT =null;

              CUP$SintaxisPython$result = parser.getSymbolFactory().newSymbol("CONDICION",17, ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), RESULT);
            }
          return CUP$SintaxisPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // AND ::= AND andd NOT 
            {
              Object RESULT =null;

              CUP$SintaxisPython$result = parser.getSymbolFactory().newSymbol("AND",18, ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), RESULT);
            }
          return CUP$SintaxisPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // AND ::= NOT 
            {
              Object RESULT =null;

              CUP$SintaxisPython$result = parser.getSymbolFactory().newSymbol("AND",18, ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), RESULT);
            }
          return CUP$SintaxisPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // NOT ::= nott NOT 
            {
              Object RESULT =null;

              CUP$SintaxisPython$result = parser.getSymbolFactory().newSymbol("NOT",19, ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), RESULT);
            }
          return CUP$SintaxisPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // NOT ::= COMPARACION 
            {
              Object RESULT =null;

              CUP$SintaxisPython$result = parser.getSymbolFactory().newSymbol("NOT",19, ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), RESULT);
            }
          return CUP$SintaxisPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // COMPARACION ::= OPERACION_A igig OPERACION_A 
            {
              Object RESULT =null;

              CUP$SintaxisPython$result = parser.getSymbolFactory().newSymbol("COMPARACION",22, ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), RESULT);
            }
          return CUP$SintaxisPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // COMPARACION ::= OPERACION_A noigual OPERACION_A 
            {
              Object RESULT =null;

              CUP$SintaxisPython$result = parser.getSymbolFactory().newSymbol("COMPARACION",22, ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), RESULT);
            }
          return CUP$SintaxisPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // COMPARACION ::= OPERACION_A menor OPERACION_A 
            {
              Object RESULT =null;

              CUP$SintaxisPython$result = parser.getSymbolFactory().newSymbol("COMPARACION",22, ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), RESULT);
            }
          return CUP$SintaxisPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // COMPARACION ::= OPERACION_A menorig OPERACION_A 
            {
              Object RESULT =null;

              CUP$SintaxisPython$result = parser.getSymbolFactory().newSymbol("COMPARACION",22, ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), RESULT);
            }
          return CUP$SintaxisPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // COMPARACION ::= OPERACION_A mayor OPERACION_A 
            {
              Object RESULT =null;

              CUP$SintaxisPython$result = parser.getSymbolFactory().newSymbol("COMPARACION",22, ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), RESULT);
            }
          return CUP$SintaxisPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // COMPARACION ::= OPERACION_A mayorig OPERACION_A 
            {
              Object RESULT =null;

              CUP$SintaxisPython$result = parser.getSymbolFactory().newSymbol("COMPARACION",22, ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), RESULT);
            }
          return CUP$SintaxisPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // COMPARACION ::= para COMPARACION parc 
            {
              Object RESULT =null;

              CUP$SintaxisPython$result = parser.getSymbolFactory().newSymbol("COMPARACION",22, ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), RESULT);
            }
          return CUP$SintaxisPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // STRING ::= STRING coma D 
            {
              Object RESULT =null;

              CUP$SintaxisPython$result = parser.getSymbolFactory().newSymbol("STRING",23, ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), RESULT);
            }
          return CUP$SintaxisPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // STRING ::= STRING coma string 
            {
              Object RESULT =null;

              CUP$SintaxisPython$result = parser.getSymbolFactory().newSymbol("STRING",23, ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), RESULT);
            }
          return CUP$SintaxisPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // STRING ::= D 
            {
              Object RESULT =null;

              CUP$SintaxisPython$result = parser.getSymbolFactory().newSymbol("STRING",23, ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), RESULT);
            }
          return CUP$SintaxisPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // STRING ::= string 
            {
              Object RESULT =null;

              CUP$SintaxisPython$result = parser.getSymbolFactory().newSymbol("STRING",23, ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), RESULT);
            }
          return CUP$SintaxisPython$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$SintaxisPython$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$SintaxisPython$do_action(
    int                        CUP$SintaxisPython$act_num,
    java_cup.runtime.lr_parser CUP$SintaxisPython$parser,
    java.util.Stack            CUP$SintaxisPython$stack,
    int                        CUP$SintaxisPython$top)
    throws java.lang.Exception
    {
              return CUP$SintaxisPython$do_action_part00000000(
                               CUP$SintaxisPython$act_num,
                               CUP$SintaxisPython$parser,
                               CUP$SintaxisPython$stack,
                               CUP$SintaxisPython$top);
    }
}

}
