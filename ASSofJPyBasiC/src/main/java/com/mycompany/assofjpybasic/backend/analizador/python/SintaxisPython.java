
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package com.mycompany.assofjpybasic.backend.analizador.python;

import java_cup.runtime.*;
import com.mycompany.assofjpybasic.backend.semantica.python.*;
import com.mycompany.assofjpybasic.backend.semantica.programa.*;
import com.mycompany.assofjpybasic.backend.semantica.programa.cod3.*;
import com.mycompany.assofjpybasic.backend.error.Errores;
import java.util.ArrayList;
import java.util.List;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class SintaxisPython extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return SintaxisPythonSym.class;
}

  /** Default constructor. */
  @Deprecated
  public SintaxisPython() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public SintaxisPython(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public SintaxisPython(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\204\000\002\002\004\000\002\002\004\000\002\002" +
    "\003\000\002\003\003\000\002\003\002\000\002\004\004" +
    "\000\002\004\003\000\002\046\002\000\002\013\012\000" +
    "\002\047\002\000\002\013\011\000\002\013\004\000\002" +
    "\013\011\000\002\013\011\000\002\013\011\000\002\013" +
    "\011\000\002\013\011\000\002\015\005\000\002\015\003" +
    "\000\002\015\005\000\002\015\004\000\002\050\002\000" +
    "\002\031\005\000\002\051\002\000\002\031\007\000\002" +
    "\031\006\000\002\031\004\000\002\035\005\000\002\035" +
    "\004\000\002\035\005\000\002\005\003\000\002\005\002" +
    "\000\002\033\003\000\002\033\003\000\002\033\003\000" +
    "\002\033\003\000\002\044\007\000\002\044\005\000\002" +
    "\044\005\000\002\014\005\000\002\014\003\000\002\014" +
    "\005\000\002\016\005\000\002\016\003\000\002\024\003" +
    "\000\002\024\003\000\002\024\003\000\002\043\006\000" +
    "\002\043\006\000\002\043\006\000\002\043\006\000\002" +
    "\022\006\000\002\022\006\000\002\022\006\000\002\022" +
    "\006\000\002\022\006\000\002\022\006\000\002\022\006" +
    "\000\002\022\006\000\002\022\006\000\002\022\006\000" +
    "\002\022\006\000\002\022\006\000\002\032\004\000\002" +
    "\032\003\000\002\034\003\000\002\034\003\000\002\034" +
    "\003\000\002\034\004\000\002\034\003\000\002\036\010" +
    "\000\002\036\010\000\002\036\010\000\002\045\007\000" +
    "\002\045\002\000\002\045\007\000\002\045\007\000\002" +
    "\041\005\000\002\041\002\000\002\041\005\000\002\040" +
    "\006\000\002\040\006\000\002\040\006\000\002\006\003" +
    "\000\002\006\002\000\002\052\002\000\002\037\012\000" +
    "\002\037\011\000\002\017\006\000\002\017\010\000\002" +
    "\017\012\000\002\023\005\000\002\023\005\000\002\023" +
    "\003\000\002\023\004\000\002\025\005\000\002\025\005" +
    "\000\002\025\005\000\002\025\003\000\002\026\004\000" +
    "\002\026\004\000\002\026\003\000\002\027\003\000\002" +
    "\027\003\000\002\027\003\000\002\027\005\000\002\027" +
    "\003\000\002\011\005\000\002\011\003\000\002\010\005" +
    "\000\002\010\003\000\002\007\004\000\002\007\003\000" +
    "\002\007\005\000\002\012\005\000\002\012\005\000\002" +
    "\012\005\000\002\012\005\000\002\012\005\000\002\012" +
    "\005\000\002\042\005\000\002\042\005\000\002\042\003" +
    "\000\002\042\003\000\002\042\005\000\002\042\005\000" +
    "\002\030\006\000\002\030\006\000\002\021\003\000\002" +
    "\021\002\000\002\020\005\000\002\020\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u010e\000\012\002\ufffd\003\ufffd\004\ufffd\054\004\001" +
    "\002\000\010\002\ufffe\003\ufffe\004\ufffe\001\002\000\004" +
    "\002\u0110\001\002\000\010\002\uffff\003\010\004\007\001" +
    "\002\000\006\003\015\045\016\001\002\000\006\003\010" +
    "\004\007\001\002\000\010\002\ufffb\003\ufffb\004\ufffb\001" +
    "\002\000\010\002\000\003\010\004\007\001\002\000\010" +
    "\002\ufffc\003\ufffc\004\ufffc\001\002\000\010\002\ufff6\003" +
    "\ufff6\004\ufff6\001\002\000\004\032\u010b\001\002\000\006" +
    "\003\020\032\017\001\002\000\010\003\371\033\373\045" +
    "\022\001\002\000\004\045\022\001\002\000\010\003\023" +
    "\033\025\034\024\001\002\000\010\003\uffef\033\uffef\034" +
    "\uffef\001\002\000\012\003\uffed\033\uffed\034\uffed\045\370" +
    "\001\002\000\004\045\367\001\002\000\004\035\026\001" +
    "\002\000\022\003\031\036\uffec\037\uffec\040\uffec\041\uffec" +
    "\044\uffec\045\uffec\054\uffea\001\002\000\004\054\363\001" +
    "\002\000\016\036\041\037\057\040\037\041\040\044\053" +
    "\045\051\001\002\000\006\052\033\054\034\001\002\000" +
    "\010\002\ufff4\003\ufff4\004\ufff4\001\002\000\026\003\055" +
    "\010\052\013\062\016\047\036\041\037\057\040\037\041" +
    "\040\044\053\045\051\001\002\000\040\002\uffe7\003\uffe7" +
    "\004\uffe7\010\uffe7\011\uffe7\012\uffe7\013\uffe7\016\uffe7\036" +
    "\uffe7\037\uffe7\040\uffe7\041\uffe7\044\uffe7\045\uffe7\053\uffe7" +
    "\001\002\000\006\043\uffdf\054\uffdf\001\002\000\010\003" +
    "\344\034\346\042\345\001\002\000\006\003\334\032\333" +
    "\001\002\000\006\003\323\032\322\001\002\000\006\003" +
    "\302\032\301\001\002\000\030\003\uffbe\010\uffbe\013\uffbe" +
    "\016\uffbe\036\uffbe\037\uffbe\040\uffbe\041\uffbe\044\uffbe\045" +
    "\uffbe\053\uffbe\001\002\000\004\054\300\001\002\000\030" +
    "\003\uffc0\010\uffc0\013\uffc0\016\uffc0\036\uffc0\037\uffc0\040" +
    "\uffc0\041\uffc0\044\uffc0\045\uffc0\053\uffc0\001\002\000\006" +
    "\043\uffe0\054\uffe0\001\002\000\004\053\277\001\002\000" +
    "\022\003\267\005\201\025\106\026\101\032\207\045\074" +
    "\046\103\047\077\001\002\000\006\043\uffe1\054\uffe1\001" +
    "\002\000\012\003\uffd9\032\136\034\uffd9\042\uffd9\001\002" +
    "\000\022\003\205\005\201\025\106\026\101\032\207\045" +
    "\074\046\103\047\077\001\002\000\030\003\104\025\106" +
    "\026\101\032\107\037\057\040\037\041\040\045\074\046" +
    "\103\047\077\050\173\001\002\000\006\043\uffde\054\uffde" +
    "\001\002\000\030\003\uffbc\010\uffbc\013\uffbc\016\uffbc\036" +
    "\uffbc\037\uffbc\040\uffbc\041\uffbc\044\uffbc\045\uffbc\053\uffbc" +
    "\001\002\000\006\043\170\054\uffe2\001\002\000\006\003" +
    "\160\032\157\001\002\000\030\003\055\010\052\013\062" +
    "\016\047\036\041\037\057\040\037\041\040\044\053\045" +
    "\051\053\uffc1\001\002\000\030\003\uffbf\010\uffbf\013\uffbf" +
    "\016\uffbf\036\uffbf\037\uffbf\040\uffbf\041\uffbf\044\uffbf\045" +
    "\uffbf\053\uffbf\001\002\000\006\003\063\045\064\001\002" +
    "\000\006\014\uffad\034\067\001\002\000\006\014\uffac\034" +
    "\uffac\001\002\000\006\014\uffad\034\067\001\002\000\004" +
    "\014\070\001\002\000\004\014\uffae\001\002\000\004\015" +
    "\072\001\002\000\004\035\147\001\002\000\004\032\073" +
    "\001\002\000\020\003\104\025\106\026\101\032\107\045" +
    "\074\046\103\047\077\001\002\000\052\003\uff9b\006\uff9b" +
    "\007\uff9b\017\uff9b\020\uff9b\021\uff9b\022\uff9b\023\uff9b\024" +
    "\uff9b\025\uff9b\026\uff9b\027\uff9b\030\uff9b\031\uff9b\032\136" +
    "\033\uff9b\034\uff9b\035\uff9b\043\uff9b\054\uff9b\001\002\000" +
    "\012\025\111\026\112\033\130\034\127\001\002\000\050" +
    "\003\uff9f\006\uff9f\007\uff9f\017\uff9f\020\uff9f\021\uff9f\022" +
    "\uff9f\023\uff9f\024\uff9f\025\uff9f\026\uff9f\027\uff9f\030\uff9f" +
    "\031\uff9f\033\uff9f\034\uff9f\035\uff9f\043\uff9f\054\uff9f\001" +
    "\002\000\050\003\uff99\006\uff99\007\uff99\017\uff99\020\uff99" +
    "\021\uff99\022\uff99\023\uff99\024\uff99\025\uff99\026\uff99\027" +
    "\uff99\030\uff99\031\uff99\033\uff99\034\uff99\035\uff99\043\uff99" +
    "\054\uff99\001\002\000\050\003\uff9c\006\uff9c\007\uff9c\017" +
    "\uff9c\020\uff9c\021\uff9c\022\uff9c\023\uff9c\024\uff9c\025\uff9c" +
    "\026\uff9c\027\uff9c\030\uff9c\031\uff9c\033\uff9c\034\uff9c\035" +
    "\uff9c\043\uff9c\054\uff9c\001\002\000\016\025\106\026\101" +
    "\032\107\045\074\046\103\047\077\001\002\000\050\003" +
    "\uffa4\006\uffa4\007\uffa4\017\uffa4\020\uffa4\021\uffa4\022\uffa4" +
    "\023\uffa4\024\uffa4\025\uffa4\026\uffa4\027\115\030\117\031" +
    "\116\033\uffa4\034\uffa4\035\uffa4\043\uffa4\054\uffa4\001\002" +
    "\000\050\003\uff9a\006\uff9a\007\uff9a\017\uff9a\020\uff9a\021" +
    "\uff9a\022\uff9a\023\uff9a\024\uff9a\025\uff9a\026\uff9a\027\uff9a" +
    "\030\uff9a\031\uff9a\033\uff9a\034\uff9a\035\uff9a\043\uff9a\054" +
    "\uff9a\001\002\000\016\025\106\026\101\032\107\045\074" +
    "\046\103\047\077\001\002\000\050\003\uff97\006\uff97\007" +
    "\uff97\017\uff97\020\uff97\021\uff97\022\uff97\023\uff97\024\uff97" +
    "\025\uff97\026\uff97\027\uff97\030\uff97\031\uff97\033\uff97\034" +
    "\uff97\035\uff97\043\uff97\054\uff97\001\002\000\016\025\106" +
    "\026\101\032\107\045\074\046\103\047\077\001\002\000" +
    "\020\003\104\025\106\026\101\032\107\045\074\046\103" +
    "\047\077\001\002\000\010\025\111\026\112\033\113\001" +
    "\002\000\016\025\106\026\101\032\107\045\074\046\103" +
    "\047\077\001\002\000\016\025\106\026\101\032\107\045" +
    "\074\046\103\047\077\001\002\000\050\003\uff98\006\uff98" +
    "\007\uff98\017\uff98\020\uff98\021\uff98\022\uff98\023\uff98\024" +
    "\uff98\025\uff98\026\uff98\027\uff98\030\uff98\031\uff98\033\uff98" +
    "\034\uff98\035\uff98\043\uff98\054\uff98\001\002\000\050\003" +
    "\uffa5\006\uffa5\007\uffa5\017\uffa5\020\uffa5\021\uffa5\022\uffa5" +
    "\023\uffa5\024\uffa5\025\uffa5\026\uffa5\027\115\030\117\031" +
    "\116\033\uffa5\034\uffa5\035\uffa5\043\uffa5\054\uffa5\001\002" +
    "\000\016\025\106\026\101\032\107\045\074\046\103\047" +
    "\077\001\002\000\016\025\106\026\101\032\107\045\074" +
    "\046\103\047\077\001\002\000\016\025\106\026\101\032" +
    "\107\045\074\046\103\047\077\001\002\000\050\003\uffa1" +
    "\006\uffa1\007\uffa1\017\uffa1\020\uffa1\021\uffa1\022\uffa1\023" +
    "\uffa1\024\uffa1\025\uffa1\026\uffa1\027\uffa1\030\uffa1\031\uffa1" +
    "\033\uffa1\034\uffa1\035\uffa1\043\uffa1\054\uffa1\001\002\000" +
    "\050\003\uffa0\006\uffa0\007\uffa0\017\uffa0\020\uffa0\021\uffa0" +
    "\022\uffa0\023\uffa0\024\uffa0\025\uffa0\026\uffa0\027\uffa0\030" +
    "\uffa0\031\uffa0\033\uffa0\034\uffa0\035\uffa0\043\uffa0\054\uffa0" +
    "\001\002\000\050\003\uffa2\006\uffa2\007\uffa2\017\uffa2\020" +
    "\uffa2\021\uffa2\022\uffa2\023\uffa2\024\uffa2\025\uffa2\026\uffa2" +
    "\027\uffa2\030\uffa2\031\uffa2\033\uffa2\034\uffa2\035\uffa2\043" +
    "\uffa2\054\uffa2\001\002\000\050\003\uffa6\006\uffa6\007\uffa6" +
    "\017\uffa6\020\uffa6\021\uffa6\022\uffa6\023\uffa6\024\uffa6\025" +
    "\uffa6\026\uffa6\027\115\030\117\031\116\033\uffa6\034\uffa6" +
    "\035\uffa6\043\uffa6\054\uffa6\001\002\000\050\003\uff9d\006" +
    "\uff9d\007\uff9d\017\uff9d\020\uff9d\021\uff9d\022\uff9d\023\uff9d" +
    "\024\uff9d\025\uff9d\026\uff9d\027\uff9d\030\uff9d\031\uff9d\033" +
    "\uff9d\034\uff9d\035\uff9d\043\uff9d\054\uff9d\001\002\000\050" +
    "\003\uffa3\006\uffa3\007\uffa3\017\uffa3\020\uffa3\021\uffa3\022" +
    "\uffa3\023\uffa3\024\uffa3\025\uffa3\026\uffa3\027\115\030\117" +
    "\031\116\033\uffa3\034\uffa3\035\uffa3\043\uffa3\054\uffa3\001" +
    "\002\000\050\003\uff9e\006\uff9e\007\uff9e\017\uff9e\020\uff9e" +
    "\021\uff9e\022\uff9e\023\uff9e\024\uff9e\025\uff9e\026\uff9e\027" +
    "\uff9e\030\uff9e\031\uff9e\033\uff9e\034\uff9e\035\uff9e\043\uff9e" +
    "\054\uff9e\001\002\000\020\003\104\025\106\026\101\032" +
    "\107\045\074\046\103\047\077\001\002\000\004\035\uffa9" +
    "\001\002\000\012\025\111\026\112\033\133\034\132\001" +
    "\002\000\020\003\104\025\106\026\101\032\107\045\074" +
    "\046\103\047\077\001\002\000\004\035\uffa8\001\002\000" +
    "\010\025\111\026\112\033\135\001\002\000\004\035\uffa7" +
    "\001\002\000\024\003\142\025\106\026\101\032\107\033" +
    "\uff80\034\uff80\045\074\046\103\047\077\001\002\000\012" +
    "\025\111\026\112\033\uff7e\034\uff7e\001\002\000\006\033" +
    "\145\034\144\001\002\000\006\033\uff81\034\uff81\001\002" +
    "\000\020\025\106\026\101\032\107\033\143\045\074\046" +
    "\103\047\077\001\002\000\050\003\uff82\006\uff82\007\uff82" +
    "\017\uff82\020\uff82\021\uff82\022\uff82\023\uff82\024\uff82\025" +
    "\uff82\026\uff82\027\uff82\030\uff82\031\uff82\033\uff82\034\uff82" +
    "\035\uff82\043\uff82\054\uff82\001\002\000\020\003\104\025" +
    "\106\026\101\032\107\045\074\046\103\047\077\001\002" +
    "\000\050\003\uff83\006\uff83\007\uff83\017\uff83\020\uff83\021" +
    "\uff83\022\uff83\023\uff83\024\uff83\025\uff83\026\uff83\027\uff83" +
    "\030\uff83\031\uff83\033\uff83\034\uff83\035\uff83\043\uff83\054" +
    "\uff83\001\002\000\012\025\111\026\112\033\uff7f\034\uff7f" +
    "\001\002\000\022\003\031\036\uffec\037\uffec\040\uffec\041" +
    "\uffec\044\uffec\045\uffec\054\uffea\001\002\000\030\003\uffab" +
    "\010\uffab\013\uffab\016\uffab\036\uffab\037\uffab\040\uffab\041" +
    "\uffab\044\uffab\045\uffab\053\uffab\001\002\000\004\014\152" +
    "\001\002\000\004\015\072\001\002\000\004\035\154\001" +
    "\002\000\022\003\031\036\uffec\037\uffec\040\uffec\041\uffec" +
    "\044\uffec\045\uffec\054\uffea\001\002\000\030\003\uffaa\010" +
    "\uffaa\013\uffaa\016\uffaa\036\uffaa\037\uffaa\040\uffaa\041\uffaa" +
    "\044\uffaa\045\uffaa\053\uffaa\001\002\000\004\053\uffc2\001" +
    "\002\000\006\003\163\051\164\001\002\000\004\051\161" +
    "\001\002\000\004\033\162\001\002\000\014\003\uffcb\033" +
    "\uffcb\034\uffcb\043\uffcb\054\uffcb\001\002\000\004\033\167" +
    "\001\002\000\006\003\165\033\166\001\002\000\014\003" +
    "\uffc9\033\uffc9\034\uffc9\043\uffc9\054\uffc9\001\002\000\014" +
    "\003\uffcd\033\uffcd\034\uffcd\043\uffcd\054\uffcd\001\002\000" +
    "\014\003\uffca\033\uffca\034\uffca\043\uffca\054\uffca\001\002" +
    "\000\020\036\041\037\057\040\037\041\040\044\053\045" +
    "\051\054\uffe3\001\002\000\004\054\uffe5\001\002\000\004" +
    "\054\uffe6\001\002\000\014\003\uffd5\033\uffd5\034\uffd5\043" +
    "\uffd5\054\uffd5\001\002\000\014\003\uffd3\033\uffd3\034\uffd3" +
    "\043\uffd3\054\uffd3\001\002\000\006\043\177\054\uffe2\001" +
    "\002\000\020\003\uffd4\025\111\026\112\033\uffd4\034\uffd4" +
    "\043\uffd4\054\uffd4\001\002\000\004\054\uffe3\001\002\000" +
    "\004\054\uffe4\001\002\000\022\003\104\005\201\025\106" +
    "\026\101\032\207\045\074\046\103\047\077\001\002\000" +
    "\014\003\uff91\006\uff91\007\uff91\033\uff91\035\uff91\001\002" +
    "\000\014\003\uff95\006\215\007\uff95\033\uff95\035\uff95\001" +
    "\002\000\022\017\251\020\250\021\247\022\252\023\246" +
    "\024\253\025\111\026\112\001\002\000\020\025\106\026" +
    "\101\032\107\035\262\045\074\046\103\047\077\001\002" +
    "\000\014\003\uff93\006\uff93\007\uff93\033\uff93\035\uff93\001" +
    "\002\000\022\003\104\005\201\025\106\026\101\032\207" +
    "\045\074\046\103\047\077\001\002\000\010\003\212\007" +
    "\213\035\211\001\002\000\022\003\031\036\uffec\037\uffec" +
    "\040\uffec\041\uffec\044\uffec\045\uffec\054\uffea\001\002\000" +
    "\022\003\031\036\uffec\037\uffec\040\uffec\041\uffec\044\uffec" +
    "\045\uffec\054\uffea\001\002\000\022\003\104\005\201\025" +
    "\106\026\101\032\207\045\074\046\103\047\077\001\002" +
    "\000\014\003\uff96\006\215\007\uff96\033\uff96\035\uff96\001" +
    "\002\000\022\003\104\005\201\025\106\026\101\032\207" +
    "\045\074\046\103\047\077\001\002\000\014\003\uff94\006" +
    "\uff94\007\uff94\033\uff94\035\uff94\001\002\000\034\003\uffb7" +
    "\010\uffb7\011\uffb7\012\uffb7\013\uffb7\016\uffb7\036\uffb7\037" +
    "\uffb7\040\uffb7\041\uffb7\044\uffb7\045\uffb7\053\uffb7\001\002" +
    "\000\034\003\uffb3\010\uffb3\011\222\012\223\013\uffb3\016" +
    "\uffb3\036\uffb3\037\uffb3\040\uffb3\041\uffb3\044\uffb3\045\uffb3" +
    "\053\uffb3\001\002\000\030\003\uffb9\010\uffb9\013\uffb9\016" +
    "\uffb9\036\uffb9\037\uffb9\040\uffb9\041\uffb9\044\uffb9\045\uffb9" +
    "\053\uffb9\001\002\000\022\003\230\005\201\025\106\026" +
    "\101\032\207\045\074\046\103\047\077\001\002\000\006" +
    "\003\225\035\224\001\002\000\022\003\031\036\uffec\037" +
    "\uffec\040\uffec\041\uffec\044\uffec\045\uffec\054\uffea\001\002" +
    "\000\022\003\031\036\uffec\037\uffec\040\uffec\041\uffec\044" +
    "\uffec\045\uffec\054\uffea\001\002\000\030\003\uffb2\010\uffb2" +
    "\013\uffb2\016\uffb2\036\uffb2\037\uffb2\040\uffb2\041\uffb2\044" +
    "\uffb2\045\uffb2\053\uffb2\001\002\000\030\003\uffb4\010\uffb4" +
    "\013\uffb4\016\uffb4\036\uffb4\037\uffb4\040\uffb4\041\uffb4\044" +
    "\uffb4\045\uffb4\053\uffb4\001\002\000\020\025\106\026\101" +
    "\032\107\035\236\045\074\046\103\047\077\001\002\000" +
    "\010\003\233\007\213\035\232\001\002\000\022\003\031" +
    "\036\uffec\037\uffec\040\uffec\041\uffec\044\uffec\045\uffec\054" +
    "\uffea\001\002\000\022\003\031\036\uffec\037\uffec\040\uffec" +
    "\041\uffec\044\uffec\045\uffec\054\uffea\001\002\000\034\003" +
    "\uffb5\010\uffb5\011\uffb5\012\uffb5\013\uffb5\016\uffb5\036\uffb5" +
    "\037\uffb5\040\uffb5\041\uffb5\044\uffb5\045\uffb5\053\uffb5\001" +
    "\002\000\034\003\uffb8\010\uffb8\011\uffb8\012\uffb8\013\uffb8" +
    "\016\uffb8\036\uffb8\037\uffb8\040\uffb8\041\uffb8\044\uffb8\045" +
    "\uffb8\053\uffb8\001\002\000\022\003\031\036\uffec\037\uffec" +
    "\040\uffec\041\uffec\044\uffec\045\uffec\054\uffea\001\002\000" +
    "\034\003\uffb6\010\uffb6\011\uffb6\012\uffb6\013\uffb6\016\uffb6" +
    "\036\uffb6\037\uffb6\040\uffb6\041\uffb6\044\uffb6\045\uffb6\053" +
    "\uffb6\001\002\000\034\003\uffb7\010\uffb7\011\uffb7\012\uffb7" +
    "\013\uffb7\016\uffb7\036\uffb7\037\uffb7\040\uffb7\041\uffb7\044" +
    "\uffb7\045\uffb7\053\uffb7\001\002\000\034\003\uffb3\010\uffb3" +
    "\011\222\012\223\013\uffb3\016\uffb3\036\uffb3\037\uffb3\040" +
    "\uffb3\041\uffb3\044\uffb3\045\uffb3\053\uffb3\001\002\000\030" +
    "\003\uffbb\010\uffbb\013\uffbb\016\uffbb\036\uffbb\037\uffbb\040" +
    "\uffbb\041\uffbb\044\uffbb\045\uffbb\053\uffbb\001\002\000\024" +
    "\017\251\020\250\021\247\022\252\023\246\024\253\025" +
    "\111\026\112\033\113\001\002\000\006\007\213\033\245" +
    "\001\002\000\014\003\uff90\006\uff90\007\uff90\033\uff90\035" +
    "\uff90\001\002\000\020\003\104\025\106\026\101\032\107" +
    "\045\074\046\103\047\077\001\002\000\020\003\104\025" +
    "\106\026\101\032\107\045\074\046\103\047\077\001\002" +
    "\000\020\003\104\025\106\026\101\032\107\045\074\046" +
    "\103\047\077\001\002\000\020\003\104\025\106\026\101" +
    "\032\107\045\074\046\103\047\077\001\002\000\020\003" +
    "\104\025\106\026\101\032\107\045\074\046\103\047\077" +
    "\001\002\000\020\003\104\025\106\026\101\032\107\045" +
    "\074\046\103\047\077\001\002\000\020\003\uff8f\006\uff8f" +
    "\007\uff8f\025\111\026\112\033\uff8f\035\uff8f\001\002\000" +
    "\020\003\uff8b\006\uff8b\007\uff8b\025\111\026\112\033\uff8b" +
    "\035\uff8b\001\002\000\020\003\uff8e\006\uff8e\007\uff8e\025" +
    "\111\026\112\033\uff8e\035\uff8e\001\002\000\020\003\uff8d" +
    "\006\uff8d\007\uff8d\025\111\026\112\033\uff8d\035\uff8d\001" +
    "\002\000\020\003\uff8c\006\uff8c\007\uff8c\025\111\026\112" +
    "\033\uff8c\035\uff8c\001\002\000\020\003\uff8a\006\uff8a\007" +
    "\uff8a\025\111\026\112\033\uff8a\035\uff8a\001\002\000\022" +
    "\003\031\036\uffec\037\uffec\040\uffec\041\uffec\044\uffec\045" +
    "\uffec\054\uffea\001\002\000\034\003\uffb7\010\uffb7\011\uffb7" +
    "\012\uffb7\013\uffb7\016\uffb7\036\uffb7\037\uffb7\040\uffb7\041" +
    "\uffb7\044\uffb7\045\uffb7\053\uffb7\001\002\000\034\003\uffb3" +
    "\010\uffb3\011\222\012\223\013\uffb3\016\uffb3\036\uffb3\037" +
    "\uffb3\040\uffb3\041\uffb3\044\uffb3\045\uffb3\053\uffb3\001\002" +
    "\000\030\003\uffba\010\uffba\013\uffba\016\uffba\036\uffba\037" +
    "\uffba\040\uffba\041\uffba\044\uffba\045\uffba\053\uffba\001\002" +
    "\000\014\003\uff92\006\uff92\007\uff92\033\uff92\035\uff92\001" +
    "\002\000\020\025\106\026\101\032\107\035\275\045\074" +
    "\046\103\047\077\001\002\000\010\003\272\007\213\035" +
    "\271\001\002\000\022\003\031\036\uffec\037\uffec\040\uffec" +
    "\041\uffec\044\uffec\045\uffec\054\uffea\001\002\000\022\003" +
    "\031\036\uffec\037\uffec\040\uffec\041\uffec\044\uffec\045\uffec" +
    "\054\uffea\001\002\000\030\003\uffaf\010\uffaf\013\uffaf\016" +
    "\uffaf\036\uffaf\037\uffaf\040\uffaf\041\uffaf\044\uffaf\045\uffaf" +
    "\053\uffaf\001\002\000\030\003\uffb1\010\uffb1\013\uffb1\016" +
    "\uffb1\036\uffb1\037\uffb1\040\uffb1\041\uffb1\044\uffb1\045\uffb1" +
    "\053\uffb1\001\002\000\022\003\031\036\uffec\037\uffec\040" +
    "\uffec\041\uffec\044\uffec\045\uffec\054\uffea\001\002\000\030" +
    "\003\uffb0\010\uffb0\013\uffb0\016\uffb0\036\uffb0\037\uffb0\040" +
    "\uffb0\041\uffb0\044\uffb0\045\uffb0\053\uffb0\001\002\000\040" +
    "\002\uffe8\003\uffe8\004\uffe8\010\uffe8\011\uffe8\012\uffe8\013" +
    "\uffe8\016\uffe8\036\uffe8\037\uffe8\040\uffe8\041\uffe8\044\uffe8" +
    "\045\uffe8\053\uffe8\001\002\000\030\003\uffbd\010\uffbd\013" +
    "\uffbd\016\uffbd\036\uffbd\037\uffbd\040\uffbd\041\uffbd\044\uffbd" +
    "\045\uffbd\053\uffbd\001\002\000\032\003\316\025\106\026" +
    "\101\032\107\037\057\040\037\041\040\045\074\046\103" +
    "\047\077\050\173\051\303\001\002\000\032\003\104\025" +
    "\106\026\101\032\107\037\057\040\037\041\040\045\074" +
    "\046\103\047\077\050\173\051\303\001\002\000\010\003" +
    "\uff86\033\uff86\034\uff86\001\002\000\010\003\306\033\310" +
    "\034\307\001\002\000\010\003\uff87\033\uff87\034\uff87\001" +
    "\002\000\030\003\104\025\106\026\101\032\107\037\057" +
    "\040\037\041\040\045\074\046\103\047\077\050\173\001" +
    "\002\000\032\003\313\025\106\026\101\032\107\037\057" +
    "\040\037\041\040\045\074\046\103\047\077\050\173\051" +
    "\311\001\002\000\006\043\uffd1\054\uffd1\001\002\000\010" +
    "\003\uff88\033\uff88\034\uff88\001\002\000\010\003\uff89\033" +
    "\uff89\034\uff89\001\002\000\024\003\uff84\025\106\026\101" +
    "\032\107\033\uff84\034\uff84\045\074\046\103\047\077\001" +
    "\002\000\010\003\uff85\033\uff85\034\uff85\001\002\000\010" +
    "\003\320\033\321\034\307\001\002\000\020\025\106\026" +
    "\101\032\107\033\317\045\074\046\103\047\077\001\002" +
    "\000\006\043\uffd0\054\uffd0\001\002\000\034\003\104\025" +
    "\106\026\101\032\107\037\057\040\037\041\040\043\uffcf" +
    "\045\074\046\103\047\077\050\173\054\uffcf\001\002\000" +
    "\006\043\uffd2\054\uffd2\001\002\000\006\003\326\051\327" +
    "\001\002\000\004\051\324\001\002\000\004\033\325\001" +
    "\002\000\014\003\uffc8\033\uffc8\034\uffc8\043\uffc8\054\uffc8" +
    "\001\002\000\004\033\332\001\002\000\006\003\330\033" +
    "\331\001\002\000\014\003\uffc6\033\uffc6\034\uffc6\043\uffc6" +
    "\054\uffc6\001\002\000\014\003\uffcc\033\uffcc\034\uffcc\043" +
    "\uffcc\054\uffcc\001\002\000\014\003\uffc7\033\uffc7\034\uffc7" +
    "\043\uffc7\054\uffc7\001\002\000\006\003\337\051\340\001" +
    "\002\000\004\051\335\001\002\000\004\033\336\001\002" +
    "\000\014\003\uffc5\033\uffc5\034\uffc5\043\uffc5\054\uffc5\001" +
    "\002\000\004\033\343\001\002\000\006\003\341\033\342" +
    "\001\002\000\014\003\uffc3\033\uffc3\034\uffc3\043\uffc3\054" +
    "\uffc3\001\002\000\014\003\uffce\033\uffce\034\uffce\043\uffce" +
    "\054\uffce\001\002\000\014\003\uffc4\033\uffc4\034\uffc4\043" +
    "\uffc4\054\uffc4\001\002\000\030\003\104\025\106\026\101" +
    "\032\107\037\057\040\037\041\040\045\074\046\103\047" +
    "\077\050\173\001\002\000\030\003\104\025\106\026\101" +
    "\032\107\037\057\040\037\041\040\045\074\046\103\047" +
    "\077\050\173\001\002\000\010\003\347\042\350\045\351" +
    "\001\002\000\010\003\uffd8\034\uffd8\042\uffd8\001\002\000" +
    "\030\003\104\025\106\026\101\032\107\037\057\040\037" +
    "\041\040\045\074\046\103\047\077\050\173\001\002\000" +
    "\010\003\uffda\034\uffda\042\uffda\001\002\000\010\034\uffd6" +
    "\043\uffd6\054\uffd6\001\002\000\004\034\354\001\002\000" +
    "\034\003\104\025\106\026\101\032\107\037\057\040\037" +
    "\041\040\043\uffdd\045\074\046\103\047\077\050\173\054" +
    "\uffdd\001\002\000\010\034\uffd7\043\uffd7\054\uffd7\001\002" +
    "\000\010\034\357\043\uffdc\054\uffdc\001\002\000\030\003" +
    "\104\025\106\026\101\032\107\037\057\040\037\041\040" +
    "\045\074\046\103\047\077\050\173\001\002\000\010\034" +
    "\357\043\uffdb\054\uffdb\001\002\000\004\054\362\001\002" +
    "\000\040\002\uffeb\003\uffeb\004\uffeb\010\uffeb\011\uffeb\012" +
    "\uffeb\013\uffeb\016\uffeb\036\uffeb\037\uffeb\040\uffeb\041\uffeb" +
    "\044\uffeb\045\uffeb\053\uffeb\001\002\000\004\052\364\001" +
    "\002\000\026\003\055\010\052\013\062\016\047\036\041" +
    "\037\057\040\037\041\040\044\053\045\051\001\002\000" +
    "\004\053\366\001\002\000\040\002\uffe9\003\uffe9\004\uffe9" +
    "\010\uffe9\011\uffe9\012\uffe9\013\uffe9\016\uffe9\036\uffe9\037" +
    "\uffe9\040\uffe9\041\uffe9\044\uffe9\045\uffe9\053\uffe9\001\002" +
    "\000\010\003\ufff0\033\ufff0\034\ufff0\001\002\000\010\003" +
    "\uffee\033\uffee\034\uffee\001\002\000\004\033\u0108\001\002" +
    "\000\010\003\377\033\u0100\034\024\001\002\000\004\035" +
    "\374\001\002\000\022\003\ufff8\036\ufff8\037\ufff8\040\ufff8" +
    "\041\ufff8\044\ufff8\045\ufff8\054\ufff8\001\002\000\022\003" +
    "\031\036\uffec\037\uffec\040\uffec\041\uffec\044\uffec\045\uffec" +
    "\054\uffea\001\002\000\010\002\ufff7\003\ufff7\004\ufff7\001" +
    "\002\000\014\003\uffed\033\uffed\034\uffed\035\u0106\045\370" +
    "\001\002\000\006\003\u0102\035\u0101\001\002\000\022\003" +
    "\ufffa\036\ufffa\037\ufffa\040\ufffa\041\ufffa\044\ufffa\045\ufffa" +
    "\054\ufffa\001\002\000\022\003\031\036\uffec\037\uffec\040" +
    "\uffec\041\uffec\044\uffec\045\uffec\054\uffea\001\002\000\010" +
    "\002\ufff1\003\ufff1\004\ufff1\001\002\000\022\003\031\036" +
    "\uffec\037\uffec\040\uffec\041\uffec\044\uffec\045\uffec\054\uffea" +
    "\001\002\000\010\002\ufff9\003\ufff9\004\ufff9\001\002\000" +
    "\022\003\031\036\uffec\037\uffec\040\uffec\041\uffec\044\uffec" +
    "\045\uffec\054\uffea\001\002\000\010\002\ufff2\003\ufff2\004" +
    "\ufff2\001\002\000\004\035\u0109\001\002\000\022\003\031" +
    "\036\uffec\037\uffec\040\uffec\041\uffec\044\uffec\045\uffec\054" +
    "\uffea\001\002\000\010\002\ufff3\003\ufff3\004\ufff3\001\002" +
    "\000\004\045\022\001\002\000\010\003\023\033\u010d\034" +
    "\024\001\002\000\004\035\u010e\001\002\000\022\003\031" +
    "\036\uffec\037\uffec\040\uffec\041\uffec\044\uffec\045\uffec\054" +
    "\uffea\001\002\000\010\002\ufff5\003\ufff5\004\ufff5\001\002" +
    "\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u010e\000\006\002\004\003\005\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\004\011\013\010\001\001" +
    "\000\002\001\001\000\004\013\013\001\001\000\002\001" +
    "\001\000\004\013\012\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\015" +
    "\371\001\001\000\004\015\020\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\031\031\050\027\051\026\001\001" +
    "\000\002\001\001\000\020\014\035\022\034\030\053\033" +
    "\055\035\360\043\044\044\047\001\001\000\002\001\001" +
    "\000\002\001\001\000\032\014\035\022\034\030\053\032" +
    "\045\033\055\034\057\035\042\036\043\037\060\040\041" +
    "\043\044\044\047\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\024" +
    "\007\205\010\202\011\267\012\201\023\203\025\101\026" +
    "\075\027\077\030\104\001\001\000\002\001\001\000\002" +
    "\001\001\000\024\007\205\010\202\011\207\012\201\023" +
    "\203\025\101\026\075\027\077\030\104\001\001\000\020" +
    "\022\173\023\175\024\174\025\101\026\075\027\077\030" +
    "\104\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\005\170\001\001\000\002\001\001\000\032\014\035\022" +
    "\034\030\053\032\155\033\055\034\057\035\042\036\043" +
    "\037\060\040\041\043\044\044\047\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\006\150\001\001\000\004" +
    "\052\064\001\001\000\004\006\065\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\017\070\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\023\074\025\101\026" +
    "\075\027\077\030\104\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\026\125\027\077\030\104\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\025\124\026\075\027" +
    "\077\030\104\001\001\000\002\001\001\000\010\026\123" +
    "\027\077\030\104\001\001\000\014\023\107\025\101\026" +
    "\075\027\077\030\104\001\001\000\002\001\001\000\012" +
    "\025\122\026\075\027\077\030\104\001\001\000\012\025" +
    "\113\026\075\027\077\030\104\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\026\121\027\077\030\104\001" +
    "\001\000\010\026\120\027\077\030\104\001\001\000\010" +
    "\026\117\027\077\030\104\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\014\023" +
    "\130\025\101\026\075\027\077\030\104\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\023\133\025\101\026" +
    "\075\027\077\030\104\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\020\020\140\021\137\023" +
    "\136\025\101\026\075\027\077\030\104\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\025" +
    "\124\026\075\027\077\030\104\001\001\000\002\001\001" +
    "\000\014\023\145\025\101\026\075\027\077\030\104\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\031\147" +
    "\050\027\051\026\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\017\152\001\001\000\002\001\001\000\010" +
    "\031\154\050\027\051\026\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\020\014\035\022\034\030\053\033\055\035\171\043" +
    "\044\044\047\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\005\177\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\020\007\265\012\201\023\203\025\101\026\075\027" +
    "\077\030\104\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\025\124\026\075\027\077\030" +
    "\104\001\001\000\002\001\001\000\024\007\205\010\202" +
    "\011\243\012\201\023\242\025\101\026\075\027\077\030" +
    "\104\001\001\000\002\001\001\000\010\031\237\050\027" +
    "\051\026\001\001\000\010\031\216\050\027\051\026\001" +
    "\001\000\022\007\205\010\213\012\201\023\203\025\101" +
    "\026\075\027\077\030\104\001\001\000\002\001\001\000" +
    "\020\007\215\012\201\023\203\025\101\026\075\027\077" +
    "\030\104\001\001\000\002\001\001\000\004\045\217\001" +
    "\001\000\004\041\220\001\001\000\002\001\001\000\024" +
    "\007\205\010\202\011\230\012\201\023\203\025\101\026" +
    "\075\027\077\030\104\001\001\000\002\001\001\000\010" +
    "\031\226\050\027\051\026\001\001\000\010\031\225\050" +
    "\027\051\026\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\025\124\026\075\027\077\030\104\001\001\000" +
    "\002\001\001\000\010\031\234\050\027\051\026\001\001" +
    "\000\010\031\233\050\027\051\026\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\031\236\050\027\051\026" +
    "\001\001\000\002\001\001\000\004\045\240\001\001\000" +
    "\004\041\241\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\014\023\260\025" +
    "\101\026\075\027\077\030\104\001\001\000\014\023\257" +
    "\025\101\026\075\027\077\030\104\001\001\000\014\023" +
    "\256\025\101\026\075\027\077\030\104\001\001\000\014" +
    "\023\255\025\101\026\075\027\077\030\104\001\001\000" +
    "\014\023\254\025\101\026\075\027\077\030\104\001\001" +
    "\000\014\023\253\025\101\026\075\027\077\030\104\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\031\262\050\027\051\026\001\001\000\004\045\263" +
    "\001\001\000\004\041\264\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\025\124\026\075\027\077\030\104" +
    "\001\001\000\002\001\001\000\010\031\273\050\027\051" +
    "\026\001\001\000\010\031\272\050\027\051\026\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\031\275\050" +
    "\027\051\026\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\022\022\173\023\175\024\304\025" +
    "\101\026\075\027\077\030\104\042\314\001\001\000\022" +
    "\022\173\023\175\024\304\025\101\026\075\027\077\030" +
    "\104\042\303\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\020\022\173\023\175\024\313\025" +
    "\101\026\075\027\077\030\104\001\001\000\020\022\173" +
    "\023\175\024\311\025\101\026\075\027\077\030\104\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\025\124\026\075\027\077\030\104\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\025\124\026\075" +
    "\027\077\030\104\001\001\000\002\001\001\000\020\022" +
    "\173\023\175\024\313\025\101\026\075\027\077\030\104" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\022\016\357\022\173\023\175\024\351\025\101\026" +
    "\075\027\077\030\104\001\001\000\022\016\355\022\173" +
    "\023\175\024\351\025\101\026\075\027\077\030\104\001" +
    "\001\000\002\001\001\000\002\001\001\000\022\016\352" +
    "\022\173\023\175\024\351\025\101\026\075\027\077\030" +
    "\104\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\020\022\173\023\175\024\354\025\101\026" +
    "\075\027\077\030\104\001\001\000\002\001\001\000\002" +
    "\001\001\000\020\022\173\023\175\024\354\025\101\026" +
    "\075\027\077\030\104\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\032\014" +
    "\035\022\034\030\053\032\364\033\055\034\057\035\042" +
    "\036\043\037\060\040\041\043\044\044\047\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\047\374\001\001\000\010\031\375\050\027" +
    "\051\026\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\046\u0103\001\001\000\010\031\u0102" +
    "\050\027\051\026\001\001\000\002\001\001\000\010\031" +
    "\u0104\050\027\051\026\001\001\000\002\001\001\000\010" +
    "\031\u0106\050\027\051\026\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\031\u0109\050\027\051\026\001\001" +
    "\000\002\001\001\000\004\015\u010b\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\031\u010e\050\027\051\026" +
    "\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$SintaxisPython$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$SintaxisPython$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$SintaxisPython$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    private Symbol s;
    private PythonSemantica sem = new PythonSemantica();
    private MetodoPython actual;
    private Errores errores = new Errores();
    private int linea;

    public void setLinea(int line){
            this.linea = line;
    }
    
    public void syntax_error(Symbol sym){
            errores.errorSintactico(sym, linea); 
    }

    public void unrecovered_syntax_error(Symbol sym) throws java.lang.Exception{
            errores.errorSintactico(sym, this.linea); 
    }

    public PythonSemantica getPython(){
            return sem;
    }
    
    public void reportarSem(String texto){
            errores.errorSemantico(getS(), texto, this.linea);
    }

    public Symbol getS(){
        return this.cur_token;
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$SintaxisPython$actions {
  private final SintaxisPython parser;

  /** Constructor */
  CUP$SintaxisPython$actions(SintaxisPython parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$SintaxisPython$do_action_part00000000(
    int                        CUP$SintaxisPython$act_num,
    java_cup.runtime.lr_parser CUP$SintaxisPython$parser,
    java.util.Stack            CUP$SintaxisPython$stack,
    int                        CUP$SintaxisPython$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$SintaxisPython$result;

      /* select the action based on the action number */
      switch (CUP$SintaxisPython$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= PYTHON EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-1)).value;
		RESULT = start_val;
              CUP$SintaxisPython$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$SintaxisPython$parser.done_parsing();
          return CUP$SintaxisPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // PYTHON ::= ESP DEFS 
            {
              Object RESULT =null;
		for(MetodoPython me : sem.getMetodos()) {System.out.println(me.getId() + " METODO\n");
                        for(Triplete trip : me.getTrip()){
                                System.out.println(trip.devolverString());
                        }}
              CUP$SintaxisPython$result = parser.getSymbolFactory().newSymbol("PYTHON",0, ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), RESULT);
            }
          return CUP$SintaxisPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // PYTHON ::= ESP 
            {
              Object RESULT =null;

              CUP$SintaxisPython$result = parser.getSymbolFactory().newSymbol("PYTHON",0, ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), RESULT);
            }
          return CUP$SintaxisPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // ESP ::= newline 
            {
              Object RESULT =null;

              CUP$SintaxisPython$result = parser.getSymbolFactory().newSymbol("ESP",1, ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), RESULT);
            }
          return CUP$SintaxisPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // ESP ::= 
            {
              Object RESULT =null;

              CUP$SintaxisPython$result = parser.getSymbolFactory().newSymbol("ESP",1, ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), RESULT);
            }
          return CUP$SintaxisPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // DEFS ::= DEFS DEF 
            {
              Object RESULT =null;

              CUP$SintaxisPython$result = parser.getSymbolFactory().newSymbol("DEFS",2, ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), RESULT);
            }
          return CUP$SintaxisPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // DEFS ::= DEF 
            {
              Object RESULT =null;

              CUP$SintaxisPython$result = parser.getSymbolFactory().newSymbol("DEFS",2, ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), RESULT);
            }
          return CUP$SintaxisPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // NT$0 ::= 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-4)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-4)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-4)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-2)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-2)).right;
		List<VariablePython> e2 = (List<VariablePython>)((java_cup.runtime.Symbol) CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-2)).value;
MetodoPython met = new MetodoPython(e1, e2);
                                actual = met;
                                sem.addVar(e2);
                                if(!sem.addMetodo(met)){
                                        reportarSem("Metodo ya existente con id: <"+e1+"> con mismos parametros");
                                }
              CUP$SintaxisPython$result = parser.getSymbolFactory().newSymbol("NT$0",36, ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), RESULT);
            }
          return CUP$SintaxisPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // DEF ::= deff id para PAR_LIST parc dosp NT$0 SUITE 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-1)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-6)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-6)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-6)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-4)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-4)).right;
		List<VariablePython> e2 = (List<VariablePython>)((java_cup.runtime.Symbol) CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-4)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()).right;
		ListaTripletes e3 = (ListaTripletes)((java_cup.runtime.Symbol) CUP$SintaxisPython$stack.peek()).value;
		if(actual.getTIPO() == null){
                                        actual.setTIPO(PythonSemantica.VOID);
                                }
                                actual.setParams();
                                actual.getTrip().addAll(e3);
              CUP$SintaxisPython$result = parser.getSymbolFactory().newSymbol("DEF",9, ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-7)), ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), RESULT);
            }
          return CUP$SintaxisPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // NT$1 ::= 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-3)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-3)).value;
MetodoPython met = new MetodoPython(e1, new ArrayList<>());
                                actual = met;
                                if(!sem.addMetodo(met)){
                                        reportarSem("Metodo ya existente con id: <"+e1+"> con mismos parametros");
                                }
              CUP$SintaxisPython$result = parser.getSymbolFactory().newSymbol("NT$1",37, ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), RESULT);
            }
          return CUP$SintaxisPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // DEF ::= deff id para parc dosp NT$1 SUITE 
            {
              Object RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-1)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-5)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-5)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-5)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()).right;
		ListaTripletes e2 = (ListaTripletes)((java_cup.runtime.Symbol) CUP$SintaxisPython$stack.peek()).value;
		if(actual.getTIPO() == null){
                                        actual.setTIPO(PythonSemantica.VOID);
                                } actual.getTrip().addAll(e2);
              CUP$SintaxisPython$result = parser.getSymbolFactory().newSymbol("DEF",9, ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-6)), ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), RESULT);
            }
          return CUP$SintaxisPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // DEF ::= error DEF 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$SintaxisPython$stack.peek()).value;
		RESULT = e1;
              CUP$SintaxisPython$result = parser.getSymbolFactory().newSymbol("DEF",9, ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), RESULT);
            }
          return CUP$SintaxisPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // DEF ::= deff error para PAR_LIST parc dosp SUITE 
            {
              Object RESULT =null;
		int e3left = ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()).right;
		ListaTripletes e3 = (ListaTripletes)((java_cup.runtime.Symbol) CUP$SintaxisPython$stack.peek()).value;
		reportarSem("error en la definicion de metodo, se esperaba un id para el mismo");
              CUP$SintaxisPython$result = parser.getSymbolFactory().newSymbol("DEF",9, ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-6)), ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), RESULT);
            }
          return CUP$SintaxisPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // DEF ::= deff id error PAR_LIST parc dosp SUITE 
            {
              Object RESULT =null;
		int e3left = ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()).right;
		ListaTripletes e3 = (ListaTripletes)((java_cup.runtime.Symbol) CUP$SintaxisPython$stack.peek()).value;
		reportarSem("error en la definicion de metodo, se esperaba un ( antes de los parametros");
              CUP$SintaxisPython$result = parser.getSymbolFactory().newSymbol("DEF",9, ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-6)), ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), RESULT);
            }
          return CUP$SintaxisPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // DEF ::= deff id para error parc dosp SUITE 
            {
              Object RESULT =null;
		int e3left = ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()).right;
		ListaTripletes e3 = (ListaTripletes)((java_cup.runtime.Symbol) CUP$SintaxisPython$stack.peek()).value;
		reportarSem("error en la definicion de metodo, se esperaba parametros entre los parentesis");
              CUP$SintaxisPython$result = parser.getSymbolFactory().newSymbol("DEF",9, ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-6)), ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), RESULT);
            }
          return CUP$SintaxisPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // DEF ::= deff id para PAR_LIST error dosp SUITE 
            {
              Object RESULT =null;
		int e3left = ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()).right;
		ListaTripletes e3 = (ListaTripletes)((java_cup.runtime.Symbol) CUP$SintaxisPython$stack.peek()).value;
		reportarSem("error en la definicion de metodo, se esperaba un ) despues de los parametros");
              CUP$SintaxisPython$result = parser.getSymbolFactory().newSymbol("DEF",9, ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-6)), ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), RESULT);
            }
          return CUP$SintaxisPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // DEF ::= deff id para PAR_LIST parc error SUITE 
            {
              Object RESULT =null;
		int e3left = ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()).right;
		ListaTripletes e3 = (ListaTripletes)((java_cup.runtime.Symbol) CUP$SintaxisPython$stack.peek()).value;
		reportarSem("error en la definicion de metodo, se esperaba : despues de id(parametros)");
              CUP$SintaxisPython$result = parser.getSymbolFactory().newSymbol("DEF",9, ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-6)), ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), RESULT);
            }
          return CUP$SintaxisPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // PAR_LIST ::= PAR_LIST coma id 
            {
              List<VariablePython> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-2)).right;
		List<VariablePython> e1 = (List<VariablePython>)((java_cup.runtime.Symbol) CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$SintaxisPython$stack.peek()).value;
		e1.add(new VariablePython(e2, 1)); RESULT = e1;
              CUP$SintaxisPython$result = parser.getSymbolFactory().newSymbol("PAR_LIST",11, ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), RESULT);
            }
          return CUP$SintaxisPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // PAR_LIST ::= id 
            {
              List<VariablePython> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$SintaxisPython$stack.peek()).value;
		List<VariablePython> var = new ArrayList<>(); var.add(new VariablePython(e1, 1)); RESULT = var;
              CUP$SintaxisPython$result = parser.getSymbolFactory().newSymbol("PAR_LIST",11, ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), RESULT);
            }
          return CUP$SintaxisPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // PAR_LIST ::= PAR_LIST error id 
            {
              List<VariablePython> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$SintaxisPython$stack.peek()).value;
		reportarSem("error en los parametros, no hay una coma que lo separe"); RESULT = new ArrayList<>();
              CUP$SintaxisPython$result = parser.getSymbolFactory().newSymbol("PAR_LIST",11, ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), RESULT);
            }
          return CUP$SintaxisPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // PAR_LIST ::= PAR_LIST error 
            {
              List<VariablePython> RESULT =null;
		reportarSem("error en los parametros, no hay un id después de la coma"); RESULT = new ArrayList<>();
              CUP$SintaxisPython$result = parser.getSymbolFactory().newSymbol("PAR_LIST",11, ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), RESULT);
            }
          return CUP$SintaxisPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // NT$2 ::= 
            {
              ListaTripletes RESULT =null;
PythonSemantica.AMBITO += 1;
              CUP$SintaxisPython$result = parser.getSymbolFactory().newSymbol("NT$2",38, ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), RESULT);
            }
          return CUP$SintaxisPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // SUITE ::= NT$2 STMT_LIST newline 
            {
              ListaTripletes RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (ListaTripletes) ((java_cup.runtime.Symbol) CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-2)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-1)).right;
		ListaTripletes e1 = (ListaTripletes)((java_cup.runtime.Symbol) CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-1)).value;
		sem.eliminarAmbito(PythonSemantica.AMBITO);
                                                PythonSemantica.AMBITO -= 1;
                                                RESULT = e1;
              CUP$SintaxisPython$result = parser.getSymbolFactory().newSymbol("SUITE",23, ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), RESULT);
            }
          return CUP$SintaxisPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // NT$3 ::= 
            {
              ListaTripletes RESULT =null;
PythonSemantica.AMBITO += 1;
              CUP$SintaxisPython$result = parser.getSymbolFactory().newSymbol("NT$3",39, ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), RESULT);
            }
          return CUP$SintaxisPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // SUITE ::= NT$3 newline indent STATEMENTS dedent 
            {
              ListaTripletes RESULT =null;
              // propagate RESULT from NT$3
                RESULT = (ListaTripletes) ((java_cup.runtime.Symbol) CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-4)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-1)).right;
		ListaTripletes e1 = (ListaTripletes)((java_cup.runtime.Symbol) CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-1)).value;
		sem.eliminarAmbito(PythonSemantica.AMBITO);
                                                PythonSemantica.AMBITO -= 1;
                                                RESULT = e1;
              CUP$SintaxisPython$result = parser.getSymbolFactory().newSymbol("SUITE",23, ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-4)), ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), RESULT);
            }
          return CUP$SintaxisPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // SUITE ::= error indent STATEMENTS dedent 
            {
              ListaTripletes RESULT =null;
		reportarSem("Error en la parte de metodo, se esperaba un salto de linea"); sem.eliminarAmbito(PythonSemantica.AMBITO); PythonSemantica.AMBITO -= 1;
              CUP$SintaxisPython$result = parser.getSymbolFactory().newSymbol("SUITE",23, ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), RESULT);
            }
          return CUP$SintaxisPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // SUITE ::= error newline 
            {
              ListaTripletes RESULT =null;
		reportarSem("Error en la parte de metodo, se esperaba un conjunto de statements"); sem.eliminarAmbito(PythonSemantica.AMBITO); PythonSemantica.AMBITO -= 1;
              CUP$SintaxisPython$result = parser.getSymbolFactory().newSymbol("SUITE",23, ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), RESULT);
            }
          return CUP$SintaxisPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // STMT_LIST ::= STATEMENTLINE puntocoma STMT_LIST 
            {
              ListaTripletes RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-2)).right;
		ListaTripletes e1 = (ListaTripletes)((java_cup.runtime.Symbol) CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()).right;
		ListaTripletes e2 = (ListaTripletes)((java_cup.runtime.Symbol) CUP$SintaxisPython$stack.peek()).value;
		e1.addAll(e2); RESULT = e1;
              CUP$SintaxisPython$result = parser.getSymbolFactory().newSymbol("STMT_LIST",27, ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), RESULT);
            }
          return CUP$SintaxisPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // STMT_LIST ::= STATEMENTLINE PC 
            {
              ListaTripletes RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-1)).right;
		ListaTripletes e1 = (ListaTripletes)((java_cup.runtime.Symbol) CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-1)).value;
		RESULT = e1;
              CUP$SintaxisPython$result = parser.getSymbolFactory().newSymbol("STMT_LIST",27, ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), RESULT);
            }
          return CUP$SintaxisPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // STMT_LIST ::= returnn D PC 
            {
              ListaTripletes RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-1)).right;
		OperacionPython e1 = (OperacionPython)((java_cup.runtime.Symbol) CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-1)).value;
		ListaTripletes tri = new ListaTripletes();
        if(actual.getTIPO() == null || actual.getTIPO().equals(PythonSemantica.VAR)){
                actual.setTIPO(e1.getTipo()); tri.addAll(e1.mostrarTripletes());
                tri.add(new Return(e1.getTriplete()));
                tri.setRet(true);
        } else if(!actual.getTIPO().contains(e1.getTipo())){
                reportarSem("No coincide el tipo del return con el tipo de la función con id: " + actual.getId());
        } else {
                actual.setTIPO(e1.getTipo()); tri.addAll(e1.mostrarTripletes());
                tri.add(new Return(e1.getTriplete()));
                tri.setRet(true);
        } RESULT = tri;
              CUP$SintaxisPython$result = parser.getSymbolFactory().newSymbol("STMT_LIST",27, ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), RESULT);
            }
          return CUP$SintaxisPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // PC ::= puntocoma 
            {
              Object RESULT =null;

              CUP$SintaxisPython$result = parser.getSymbolFactory().newSymbol("PC",3, ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), RESULT);
            }
          return CUP$SintaxisPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // PC ::= 
            {
              Object RESULT =null;

              CUP$SintaxisPython$result = parser.getSymbolFactory().newSymbol("PC",3, ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), RESULT);
            }
          return CUP$SintaxisPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // STATEMENTLINE ::= AS_VAR 
            {
              ListaTripletes RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()).right;
		ListaTripletes e1 = (ListaTripletes)((java_cup.runtime.Symbol) CUP$SintaxisPython$stack.peek()).value;
		RESULT = e1;
              CUP$SintaxisPython$result = parser.getSymbolFactory().newSymbol("STATEMENTLINE",25, ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), RESULT);
            }
          return CUP$SintaxisPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // STATEMENTLINE ::= WRITE 
            {
              ListaTripletes RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()).right;
		ListaTripletes e1 = (ListaTripletes)((java_cup.runtime.Symbol) CUP$SintaxisPython$stack.peek()).value;
		RESULT = e1;
              CUP$SintaxisPython$result = parser.getSymbolFactory().newSymbol("STATEMENTLINE",25, ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), RESULT);
            }
          return CUP$SintaxisPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // STATEMENTLINE ::= INPUT 
            {
              ListaTripletes RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()).right;
		OperacionPython e1 = (OperacionPython)((java_cup.runtime.Symbol) CUP$SintaxisPython$stack.peek()).value;
		AsignarValor vl = new AsignarValor(new AsignarTemporal(null, null, e1.getTipo()),null
                ,OperacionPython.obtenerTipo(e1));
                ListaTripletes tri = new ListaTripletes(); tri.add(vl);
                tri.add(new AsignarValor(vl.getOperando1(), e1.getTriplete(), null)); RESULT = tri;
              CUP$SintaxisPython$result = parser.getSymbolFactory().newSymbol("STATEMENTLINE",25, ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), RESULT);
            }
          return CUP$SintaxisPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // STATEMENTLINE ::= LLAMADA_METODO 
            {
              ListaTripletes RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()).right;
		OperacionPython e1 = (OperacionPython)((java_cup.runtime.Symbol) CUP$SintaxisPython$stack.peek()).value;
		RESULT = new ListaTripletes(e1.getTripletes());
              CUP$SintaxisPython$result = parser.getSymbolFactory().newSymbol("STATEMENTLINE",25, ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), RESULT);
            }
          return CUP$SintaxisPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // AS_VAR ::= LISTVAR coma igual LISTDEF coma 
            {
              ListaTripletes RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-4)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-4)).right;
		List<VariablePython> e1 = (List<VariablePython>)((java_cup.runtime.Symbol) CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-4)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-1)).right;
		List<OperacionPython> e2 = (List<OperacionPython>)((java_cup.runtime.Symbol) CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-1)).value;
		if(!sem.addVar(e1, e2)){
        reportarSem("Una de las variables ya habia sido asignada a otro tipo diferente");
        RESULT  = new ListaTripletes();} 
        else{RESULT = new ListaTripletes(sem.devolverAsig(e1, e2));}
              CUP$SintaxisPython$result = parser.getSymbolFactory().newSymbol("AS_VAR",34, ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-4)), ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), RESULT);
            }
          return CUP$SintaxisPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // AS_VAR ::= LISTVAR igual LISTDEF 
            {
              ListaTripletes RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-2)).right;
		List<VariablePython> e1 = (List<VariablePython>)((java_cup.runtime.Symbol) CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()).right;
		List<OperacionPython> e2 = (List<OperacionPython>)((java_cup.runtime.Symbol) CUP$SintaxisPython$stack.peek()).value;
		if(!sem.addVar(e1, e2)){
        reportarSem("Una de las variables ya habia sido asignada a otro tipo diferente");
                RESULT  = new ListaTripletes();} 
        else{RESULT = new ListaTripletes(sem.devolverAsig(e1, e2));}
              CUP$SintaxisPython$result = parser.getSymbolFactory().newSymbol("AS_VAR",34, ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), RESULT);
            }
          return CUP$SintaxisPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // AS_VAR ::= LISTVAR error LISTDEF 
            {
              ListaTripletes RESULT =null;
		reportarSem("Error en la definicion de variables, se esperaba un igual entre las variables e igualdades"); RESULT =new ListaTripletes();
              CUP$SintaxisPython$result = parser.getSymbolFactory().newSymbol("AS_VAR",34, ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), RESULT);
            }
          return CUP$SintaxisPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // LISTVAR ::= LISTVAR coma id 
            {
              List<VariablePython> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-2)).right;
		List<VariablePython> e1 = (List<VariablePython>)((java_cup.runtime.Symbol) CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$SintaxisPython$stack.peek()).value;
		e1.add(new VariablePython(e2, PythonSemantica.AMBITO)); RESULT = e1;
              CUP$SintaxisPython$result = parser.getSymbolFactory().newSymbol("LISTVAR",10, ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), RESULT);
            }
          return CUP$SintaxisPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // LISTVAR ::= id 
            {
              List<VariablePython> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$SintaxisPython$stack.peek()).value;
		List<VariablePython> var = new ArrayList<>();
                var.add(new VariablePython(e1, PythonSemantica.AMBITO)); RESULT = var;
              CUP$SintaxisPython$result = parser.getSymbolFactory().newSymbol("LISTVAR",10, ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), RESULT);
            }
          return CUP$SintaxisPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // LISTVAR ::= LISTVAR coma error 
            {
              List<VariablePython> RESULT =null;
		reportarSem("Error en la lista de variables, después de una coma, se espera un id"); RESULT = new ArrayList<>();
              CUP$SintaxisPython$result = parser.getSymbolFactory().newSymbol("LISTVAR",10, ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), RESULT);
            }
          return CUP$SintaxisPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // LISTDEF ::= LISTDEF coma D 
            {
              List<OperacionPython> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-2)).right;
		List<OperacionPython> e1 = (List<OperacionPython>)((java_cup.runtime.Symbol) CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()).right;
		OperacionPython e2 = (OperacionPython)((java_cup.runtime.Symbol) CUP$SintaxisPython$stack.peek()).value;
		e1.add(e2); RESULT = e1;
              CUP$SintaxisPython$result = parser.getSymbolFactory().newSymbol("LISTDEF",12, ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), RESULT);
            }
          return CUP$SintaxisPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // LISTDEF ::= D 
            {
              List<OperacionPython> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()).right;
		OperacionPython e1 = (OperacionPython)((java_cup.runtime.Symbol) CUP$SintaxisPython$stack.peek()).value;
		List<OperacionPython> op = new ArrayList<>(); op.add(e1); RESULT = op;
              CUP$SintaxisPython$result = parser.getSymbolFactory().newSymbol("LISTDEF",12, ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), RESULT);
            }
          return CUP$SintaxisPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // D ::= character 
            {
              OperacionPython RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$SintaxisPython$stack.peek()).value;
		String s = ".LC" + Triplete.FLOAT;
                Triplete.FLOAT += 1;
                actual.getFl().add("\t.align 4");
                actual.getFl().add(s + ":");
                actual.getFl().add("\t.long\t"+Float.floatToIntBits(Float.parseFloat(e1)));
                RESULT = new OperacionPython(PythonSemantica.CHAR, new TerminalOperator(e1, s));
              CUP$SintaxisPython$result = parser.getSymbolFactory().newSymbol("D",18, ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), RESULT);
            }
          return CUP$SintaxisPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // D ::= OPERACION_A 
            {
              OperacionPython RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()).right;
		OperacionPython e1 = (OperacionPython)((java_cup.runtime.Symbol) CUP$SintaxisPython$stack.peek()).value;
		RESULT = e1;
              CUP$SintaxisPython$result = parser.getSymbolFactory().newSymbol("D",18, ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), RESULT);
            }
          return CUP$SintaxisPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // D ::= INPUT 
            {
              OperacionPython RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()).right;
		OperacionPython e1 = (OperacionPython)((java_cup.runtime.Symbol) CUP$SintaxisPython$stack.peek()).value;
		RESULT = e1;
              CUP$SintaxisPython$result = parser.getSymbolFactory().newSymbol("D",18, ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), RESULT);
            }
          return CUP$SintaxisPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // WRITE ::= print para STRING parc 
            {
              ListaTripletes RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-1)).right;
		ListaTripletes e1 = (ListaTripletes)((java_cup.runtime.Symbol) CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-1)).value;
		e1.add(new Printf("\\n")); RESULT = e1;
              CUP$SintaxisPython$result = parser.getSymbolFactory().newSymbol("WRITE",33, ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), RESULT);
            }
          return CUP$SintaxisPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // WRITE ::= print error STRING parc 
            {
              ListaTripletes RESULT =null;
		reportarSem("Error en el print, se esperaba un parentesis antes de los valores"); RESULT = new ListaTripletes();
              CUP$SintaxisPython$result = parser.getSymbolFactory().newSymbol("WRITE",33, ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), RESULT);
            }
          return CUP$SintaxisPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // WRITE ::= print para error parc 
            {
              ListaTripletes RESULT =null;
		reportarSem("Error en el print, se esperaban valores entre los parentesis"); RESULT = new ListaTripletes();
              CUP$SintaxisPython$result = parser.getSymbolFactory().newSymbol("WRITE",33, ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), RESULT);
            }
          return CUP$SintaxisPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // WRITE ::= print para STRING error 
            {
              ListaTripletes RESULT =null;
		reportarSem("Error en el print, se esperaba un parentesis despues de los valores"); RESULT = new ListaTripletes();
              CUP$SintaxisPython$result = parser.getSymbolFactory().newSymbol("WRITE",33, ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), RESULT);
            }
          return CUP$SintaxisPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // INPUT ::= intinput para string parc 
            {
              OperacionPython RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-1)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-1)).value;
		OperacionPython op = new OperacionPython(PythonSemantica.INT,
                                new Input("%d"));
                                op.getTripletes().add(new Printf(e1));
                                RESULT = op;
              CUP$SintaxisPython$result = parser.getSymbolFactory().newSymbol("INPUT",16, ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), RESULT);
            }
          return CUP$SintaxisPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // INPUT ::= charinput para string parc 
            {
              OperacionPython RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-1)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-1)).value;
		OperacionPython op = new OperacionPython(PythonSemantica.CHAR,
                                new Input("%c"));
                                op.getTripletes().add(new Printf(e1));
                                RESULT = op;
              CUP$SintaxisPython$result = parser.getSymbolFactory().newSymbol("INPUT",16, ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), RESULT);
            }
          return CUP$SintaxisPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // INPUT ::= floatinput para string parc 
            {
              OperacionPython RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-1)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-1)).value;
		OperacionPython op = new OperacionPython(PythonSemantica.FLOAT,
                                new Input("%f"));
                                op.getTripletes().add(new Printf(e1));
                                RESULT = op;
              CUP$SintaxisPython$result = parser.getSymbolFactory().newSymbol("INPUT",16, ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), RESULT);
            }
          return CUP$SintaxisPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // INPUT ::= charinput error string parc 
            {
              OperacionPython RESULT =null;
		reportarSem("error en el charinput, se esperaba un parentesis antes del string");
              CUP$SintaxisPython$result = parser.getSymbolFactory().newSymbol("INPUT",16, ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), RESULT);
            }
          return CUP$SintaxisPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // INPUT ::= charinput para error parc 
            {
              OperacionPython RESULT =null;
		reportarSem("error en el charinput, se esperaba un string entre los parentesis");
              CUP$SintaxisPython$result = parser.getSymbolFactory().newSymbol("INPUT",16, ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), RESULT);
            }
          return CUP$SintaxisPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // INPUT ::= charinput para string error 
            {
              OperacionPython RESULT =null;
		reportarSem("error en el charinput, se esperaba un parentesis despues del string");
              CUP$SintaxisPython$result = parser.getSymbolFactory().newSymbol("INPUT",16, ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), RESULT);
            }
          return CUP$SintaxisPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // INPUT ::= floatinput error string parc 
            {
              OperacionPython RESULT =null;
		reportarSem("error en el floatinput, se esperaba un parentesis antes del string");
              CUP$SintaxisPython$result = parser.getSymbolFactory().newSymbol("INPUT",16, ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), RESULT);
            }
          return CUP$SintaxisPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // INPUT ::= floatinput para error parc 
            {
              OperacionPython RESULT =null;
		reportarSem("error en el floatinput, se esperaba un string entre los parentesis");
              CUP$SintaxisPython$result = parser.getSymbolFactory().newSymbol("INPUT",16, ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), RESULT);
            }
          return CUP$SintaxisPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // INPUT ::= floatinput para string error 
            {
              OperacionPython RESULT =null;
		reportarSem("error en el floatinput, se esperaba un parentesis despues del string");
              CUP$SintaxisPython$result = parser.getSymbolFactory().newSymbol("INPUT",16, ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), RESULT);
            }
          return CUP$SintaxisPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // INPUT ::= intinput error string parc 
            {
              OperacionPython RESULT =null;
		reportarSem("error en el intinput, se esperaba un parentesis antes del string");
              CUP$SintaxisPython$result = parser.getSymbolFactory().newSymbol("INPUT",16, ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), RESULT);
            }
          return CUP$SintaxisPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // INPUT ::= intinput para error parc 
            {
              OperacionPython RESULT =null;
		reportarSem("error en el intinput, se esperaba un string entre los parentesis");
              CUP$SintaxisPython$result = parser.getSymbolFactory().newSymbol("INPUT",16, ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), RESULT);
            }
          return CUP$SintaxisPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // INPUT ::= intinput para string error 
            {
              OperacionPython RESULT =null;
		reportarSem("error en el intinput, se esperaba un parentesis despues del string");
              CUP$SintaxisPython$result = parser.getSymbolFactory().newSymbol("INPUT",16, ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), RESULT);
            }
          return CUP$SintaxisPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // STATEMENTS ::= STATEMENT STATEMENTS 
            {
              ListaTripletes RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-1)).right;
		ListaTripletes e1 = (ListaTripletes)((java_cup.runtime.Symbol) CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()).right;
		ListaTripletes e2 = (ListaTripletes)((java_cup.runtime.Symbol) CUP$SintaxisPython$stack.peek()).value;
		if(e1.isRet()){
                                                reportarSem("ya existe un return, no se puede seguir leyendo");
                                        }else {e1.addAll(e2); if(e2.isRet()){e1.setRet(true);}} RESULT = e1;
              CUP$SintaxisPython$result = parser.getSymbolFactory().newSymbol("STATEMENTS",24, ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), RESULT);
            }
          return CUP$SintaxisPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // STATEMENTS ::= STATEMENT 
            {
              ListaTripletes RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()).right;
		ListaTripletes e1 = (ListaTripletes)((java_cup.runtime.Symbol) CUP$SintaxisPython$stack.peek()).value;
		RESULT = e1;
              CUP$SintaxisPython$result = parser.getSymbolFactory().newSymbol("STATEMENTS",24, ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), RESULT);
            }
          return CUP$SintaxisPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // STATEMENT ::= IF 
            {
              ListaTripletes RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()).right;
		ListaTripletes e1 = (ListaTripletes)((java_cup.runtime.Symbol) CUP$SintaxisPython$stack.peek()).value;
		RESULT = e1;
              CUP$SintaxisPython$result = parser.getSymbolFactory().newSymbol("STATEMENT",26, ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), RESULT);
            }
          return CUP$SintaxisPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // STATEMENT ::= FOR 
            {
              ListaTripletes RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()).right;
		ListaTripletes e1 = (ListaTripletes)((java_cup.runtime.Symbol) CUP$SintaxisPython$stack.peek()).value;
		RESULT = e1;
              CUP$SintaxisPython$result = parser.getSymbolFactory().newSymbol("STATEMENT",26, ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), RESULT);
            }
          return CUP$SintaxisPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // STATEMENT ::= WHILE 
            {
              ListaTripletes RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()).right;
		ListaTripletes e1 = (ListaTripletes)((java_cup.runtime.Symbol) CUP$SintaxisPython$stack.peek()).value;
		RESULT = e1;
              CUP$SintaxisPython$result = parser.getSymbolFactory().newSymbol("STATEMENT",26, ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), RESULT);
            }
          return CUP$SintaxisPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // STATEMENT ::= STMT_LIST newline 
            {
              ListaTripletes RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-1)).right;
		ListaTripletes e1 = (ListaTripletes)((java_cup.runtime.Symbol) CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-1)).value;
		RESULT = e1;
              CUP$SintaxisPython$result = parser.getSymbolFactory().newSymbol("STATEMENT",26, ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), RESULT);
            }
          return CUP$SintaxisPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // STATEMENT ::= error 
            {
              ListaTripletes RESULT =null;
		RESULT = new ListaTripletes();
              CUP$SintaxisPython$result = parser.getSymbolFactory().newSymbol("STATEMENT",26, ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), RESULT);
            }
          return CUP$SintaxisPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // IF ::= iff CONDICION dosp SUITE ELSEIF ELSE 
            {
              ListaTripletes RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-4)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-4)).right;
		CondicionPrograma e1 = (CondicionPrograma)((java_cup.runtime.Symbol) CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-4)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-2)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-2)).right;
		ListaTripletes e2 = (ListaTripletes)((java_cup.runtime.Symbol) CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-2)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-1)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-1)).right;
		Else_Operator e3 = (Else_Operator)((java_cup.runtime.Symbol) CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-1)).value;
		int e4left = ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()).left;
		int e4right = ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()).right;
		ListaTripletes e4 = (ListaTripletes)((java_cup.runtime.Symbol) CUP$SintaxisPython$stack.peek()).value;
		e3.agregarIf(e1, e2); RESULT = e3.juntarTripletes(e4);
              CUP$SintaxisPython$result = parser.getSymbolFactory().newSymbol("IF",28, ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-5)), ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), RESULT);
            }
          return CUP$SintaxisPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // IF ::= iff error dosp SUITE ELSEIF ELSE 
            {
              ListaTripletes RESULT =null;
		reportarSem("Error en el if, se esperaba una condicion despues del if"); RESULT = new ListaTripletes();
              CUP$SintaxisPython$result = parser.getSymbolFactory().newSymbol("IF",28, ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-5)), ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), RESULT);
            }
          return CUP$SintaxisPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // IF ::= iff CONDICION error SUITE ELSEIF ELSE 
            {
              ListaTripletes RESULT =null;
		reportarSem("Error en el if, se esperaba : después de la condicion"); RESULT = new ListaTripletes();
              CUP$SintaxisPython$result = parser.getSymbolFactory().newSymbol("IF",28, ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-5)), ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), RESULT);
            }
          return CUP$SintaxisPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // ELSEIF ::= ELSEIF elseiff CONDICION dosp SUITE 
            {
              Else_Operator RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-4)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-4)).right;
		Else_Operator e1 = (Else_Operator)((java_cup.runtime.Symbol) CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-4)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-2)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-2)).right;
		CondicionPrograma e2 = (CondicionPrograma)((java_cup.runtime.Symbol) CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-2)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()).right;
		ListaTripletes e3 = (ListaTripletes)((java_cup.runtime.Symbol) CUP$SintaxisPython$stack.peek()).value;
		RESULT = e1.agregarElseIf(e2, e3);
              CUP$SintaxisPython$result = parser.getSymbolFactory().newSymbol("ELSEIF",35, ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-4)), ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), RESULT);
            }
          return CUP$SintaxisPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // ELSEIF ::= 
            {
              Else_Operator RESULT =null;
		RESULT = new Else_Operator();
              CUP$SintaxisPython$result = parser.getSymbolFactory().newSymbol("ELSEIF",35, ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), RESULT);
            }
          return CUP$SintaxisPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // ELSEIF ::= ELSEIF elseiff error dosp SUITE 
            {
              Else_Operator RESULT =null;
		reportarSem("Error en el elseif, se esperaba una condicion despues del elif"); RESULT = new Else_Operator();
              CUP$SintaxisPython$result = parser.getSymbolFactory().newSymbol("ELSEIF",35, ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-4)), ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), RESULT);
            }
          return CUP$SintaxisPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // ELSEIF ::= ELSEIF elseiff CONDICION error SUITE 
            {
              Else_Operator RESULT =null;
		reportarSem("Error en el elseif, se esperaba : despues de la condicion"); RESULT = new Else_Operator();
              CUP$SintaxisPython$result = parser.getSymbolFactory().newSymbol("ELSEIF",35, ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-4)), ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), RESULT);
            }
          return CUP$SintaxisPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // ELSE ::= elsee dosp SUITE 
            {
              ListaTripletes RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()).right;
		ListaTripletes e1 = (ListaTripletes)((java_cup.runtime.Symbol) CUP$SintaxisPython$stack.peek()).value;
		RESULT = e1;
              CUP$SintaxisPython$result = parser.getSymbolFactory().newSymbol("ELSE",31, ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), RESULT);
            }
          return CUP$SintaxisPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // ELSE ::= 
            {
              ListaTripletes RESULT =null;
		RESULT = new ListaTripletes();
              CUP$SintaxisPython$result = parser.getSymbolFactory().newSymbol("ELSE",31, ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), RESULT);
            }
          return CUP$SintaxisPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // ELSE ::= elsee error SUITE 
            {
              ListaTripletes RESULT =null;
		reportarSem("Error en else, se espera : después del else"); RESULT = new ListaTripletes();
              CUP$SintaxisPython$result = parser.getSymbolFactory().newSymbol("ELSE",31, ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), RESULT);
            }
          return CUP$SintaxisPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // WHILE ::= whilee CONDICION dosp SUITE 
            {
              ListaTripletes RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-2)).right;
		CondicionPrograma e1 = (CondicionPrograma)((java_cup.runtime.Symbol) CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()).right;
		ListaTripletes e2 = (ListaTripletes)((java_cup.runtime.Symbol) CUP$SintaxisPython$stack.peek()).value;
		RESULT = Else_Operator.WHILE(e1, e2);
              CUP$SintaxisPython$result = parser.getSymbolFactory().newSymbol("WHILE",30, ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), RESULT);
            }
          return CUP$SintaxisPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // WHILE ::= whilee error dosp SUITE 
            {
              ListaTripletes RESULT =null;
		reportarSem("Error en un while, se esperaba una condición despues del while"); RESULT = new ListaTripletes();
              CUP$SintaxisPython$result = parser.getSymbolFactory().newSymbol("WHILE",30, ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), RESULT);
            }
          return CUP$SintaxisPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // WHILE ::= whilee CONDICION error SUITE 
            {
              ListaTripletes RESULT =null;
		reportarSem("Error en un while, se esperaba : despues de la condicion"); RESULT = new ListaTripletes();
              CUP$SintaxisPython$result = parser.getSymbolFactory().newSymbol("WHILE",30, ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), RESULT);
            }
          return CUP$SintaxisPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // COMA ::= coma 
            {
              Object RESULT =null;

              CUP$SintaxisPython$result = parser.getSymbolFactory().newSymbol("COMA",4, ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), RESULT);
            }
          return CUP$SintaxisPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // COMA ::= 
            {
              Object RESULT =null;

              CUP$SintaxisPython$result = parser.getSymbolFactory().newSymbol("COMA",4, ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), RESULT);
            }
          return CUP$SintaxisPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // NT$4 ::= 
            {
              ListaTripletes RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$SintaxisPython$stack.peek()).value;
if(!sem.addVar(new VariablePython(e1, PythonSemantica.AMBITO + 1))){
                reportarSem("Id ya existente y no es de tipo entero");
        }
              CUP$SintaxisPython$result = parser.getSymbolFactory().newSymbol("NT$4",40, ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), RESULT);
            }
          return CUP$SintaxisPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // FOR ::= forr id NT$4 COMA inn RANGE dosp SUITE 
            {
              ListaTripletes RESULT =null;
              // propagate RESULT from NT$4
                RESULT = (ListaTripletes) ((java_cup.runtime.Symbol) CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-5)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-6)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-6)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-6)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-2)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-2)).right;
		List<OperacionPython> e2 = (List<OperacionPython>)((java_cup.runtime.Symbol) CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-2)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()).right;
		ListaTripletes e3 = (ListaTripletes)((java_cup.runtime.Symbol) CUP$SintaxisPython$stack.peek()).value;
		Integer d = sem.obtenerDireccion(e1);
                SumOperator sum = null;
                if(d == 0){
                        d = sem.getVariables().size() + 1;
                        sum = new SumOperator(null, new P(), new TerminalOperator(d.toString()), "int");
                } else {
                        sum = new SumOperator(null, new P(), new TerminalOperator(d.toString()), "int");
                } RESULT = Else_Operator.FORP(sum, sem.devolverDireccion(sum), e2, e3);
              CUP$SintaxisPython$result = parser.getSymbolFactory().newSymbol("FOR",29, ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-7)), ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), RESULT);
            }
          return CUP$SintaxisPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // FOR ::= forr error COMA inn RANGE dosp SUITE 
            {
              ListaTripletes RESULT =null;
		reportarSem("Error en el for, se esperaba un id"); RESULT = new ListaTripletes();
              CUP$SintaxisPython$result = parser.getSymbolFactory().newSymbol("FOR",29, ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-6)), ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), RESULT);
            }
          return CUP$SintaxisPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // RANGE ::= range para OPERACION_A parc 
            {
              List<OperacionPython> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-1)).right;
		OperacionPython e1 = (OperacionPython)((java_cup.runtime.Symbol) CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-1)).value;
		List<OperacionPython> op = new ArrayList<>();
                        op.add(e1); RESULT = op;
              CUP$SintaxisPython$result = parser.getSymbolFactory().newSymbol("RANGE",13, ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), RESULT);
            }
          return CUP$SintaxisPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // RANGE ::= range para OPERACION_A coma OPERACION_A parc 
            {
              List<OperacionPython> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-3)).right;
		OperacionPython e1 = (OperacionPython)((java_cup.runtime.Symbol) CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-1)).right;
		OperacionPython e2 = (OperacionPython)((java_cup.runtime.Symbol) CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-1)).value;
		List<OperacionPython> op = new ArrayList<>();
                        op.add(e1); op.add(e2); RESULT = op;
              CUP$SintaxisPython$result = parser.getSymbolFactory().newSymbol("RANGE",13, ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-5)), ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), RESULT);
            }
          return CUP$SintaxisPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // RANGE ::= range para OPERACION_A coma OPERACION_A coma OPERACION_A parc 
            {
              List<OperacionPython> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-5)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-5)).right;
		OperacionPython e1 = (OperacionPython)((java_cup.runtime.Symbol) CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-5)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-3)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-3)).right;
		OperacionPython e2 = (OperacionPython)((java_cup.runtime.Symbol) CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-3)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-1)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-1)).right;
		OperacionPython e3 = (OperacionPython)((java_cup.runtime.Symbol) CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-1)).value;
		List<OperacionPython> op = new ArrayList<>();
                        op.add(e1); op.add(e2); op.add(e3); RESULT = op;
              CUP$SintaxisPython$result = parser.getSymbolFactory().newSymbol("RANGE",13, ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-7)), ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), RESULT);
            }
          return CUP$SintaxisPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // OPERACION_A ::= OPERACION_A mas OPERACION_M 
            {
              OperacionPython RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-2)).right;
		OperacionPython e1 = (OperacionPython)((java_cup.runtime.Symbol) CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()).right;
		OperacionPython e2 = (OperacionPython)((java_cup.runtime.Symbol) CUP$SintaxisPython$stack.peek()).value;
		RESULT = new OperacionPython(e1, e2,
                        new SumOperator(null, e1.getTriplete(), e2.getTriplete(), OperacionPython.obtenerTipo(e1, e2)));
              CUP$SintaxisPython$result = parser.getSymbolFactory().newSymbol("OPERACION_A",17, ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), RESULT);
            }
          return CUP$SintaxisPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // OPERACION_A ::= OPERACION_A menos OPERACION_M 
            {
              OperacionPython RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-2)).right;
		OperacionPython e1 = (OperacionPython)((java_cup.runtime.Symbol) CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()).right;
		OperacionPython e2 = (OperacionPython)((java_cup.runtime.Symbol) CUP$SintaxisPython$stack.peek()).value;
		RESULT = new OperacionPython(e1, e2,
                        new RestOperator(null, e1.getTriplete(), e2.getTriplete(), OperacionPython.obtenerTipo(e1, e2)));
              CUP$SintaxisPython$result = parser.getSymbolFactory().newSymbol("OPERACION_A",17, ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), RESULT);
            }
          return CUP$SintaxisPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // OPERACION_A ::= OPERACION_M 
            {
              OperacionPython RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()).right;
		OperacionPython e1 = (OperacionPython)((java_cup.runtime.Symbol) CUP$SintaxisPython$stack.peek()).value;
		RESULT = e1;
              CUP$SintaxisPython$result = parser.getSymbolFactory().newSymbol("OPERACION_A",17, ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), RESULT);
            }
          return CUP$SintaxisPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // OPERACION_A ::= error OPERACION_M 
            {
              OperacionPython RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()).right;
		OperacionPython e1 = (OperacionPython)((java_cup.runtime.Symbol) CUP$SintaxisPython$stack.peek()).value;
		RESULT = e1;
              CUP$SintaxisPython$result = parser.getSymbolFactory().newSymbol("OPERACION_A",17, ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), RESULT);
            }
          return CUP$SintaxisPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // OPERACION_M ::= OPERACION_M por OPERACION_U 
            {
              OperacionPython RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-2)).right;
		OperacionPython e1 = (OperacionPython)((java_cup.runtime.Symbol) CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()).right;
		OperacionPython e2 = (OperacionPython)((java_cup.runtime.Symbol) CUP$SintaxisPython$stack.peek()).value;
		RESULT = new OperacionPython(e1, e2,
                        new PorOperator(null, e1.getTriplete(), e2.getTriplete(), OperacionPython.obtenerTipo(e1, e2)));
              CUP$SintaxisPython$result = parser.getSymbolFactory().newSymbol("OPERACION_M",19, ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), RESULT);
            }
          return CUP$SintaxisPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // OPERACION_M ::= OPERACION_M div OPERACION_U 
            {
              OperacionPython RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-2)).right;
		OperacionPython e1 = (OperacionPython)((java_cup.runtime.Symbol) CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()).right;
		OperacionPython e2 = (OperacionPython)((java_cup.runtime.Symbol) CUP$SintaxisPython$stack.peek()).value;
		RESULT = new OperacionPython(e1, e2,
                        new DivOperator(null, e1.getTriplete(), e2.getTriplete(), OperacionPython.obtenerTipo(e1, e2)));
              CUP$SintaxisPython$result = parser.getSymbolFactory().newSymbol("OPERACION_M",19, ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), RESULT);
            }
          return CUP$SintaxisPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // OPERACION_M ::= OPERACION_M mod OPERACION_U 
            {
              OperacionPython RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-2)).right;
		OperacionPython e1 = (OperacionPython)((java_cup.runtime.Symbol) CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()).right;
		OperacionPython e2 = (OperacionPython)((java_cup.runtime.Symbol) CUP$SintaxisPython$stack.peek()).value;
		RESULT = new OperacionPython(e1, e2,
                        new ModOperator(null, e1.getTriplete(), e2.getTriplete(), OperacionPython.obtenerTipo(e1, e2)));
              CUP$SintaxisPython$result = parser.getSymbolFactory().newSymbol("OPERACION_M",19, ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), RESULT);
            }
          return CUP$SintaxisPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // OPERACION_M ::= OPERACION_U 
            {
              OperacionPython RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()).right;
		OperacionPython e1 = (OperacionPython)((java_cup.runtime.Symbol) CUP$SintaxisPython$stack.peek()).value;
		RESULT = e1;
              CUP$SintaxisPython$result = parser.getSymbolFactory().newSymbol("OPERACION_M",19, ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), RESULT);
            }
          return CUP$SintaxisPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // OPERACION_U ::= menos OPERACION_U 
            {
              OperacionPython RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()).right;
		OperacionPython e1 = (OperacionPython)((java_cup.runtime.Symbol) CUP$SintaxisPython$stack.peek()).value;
		RESULT = new OperacionPython(new OperacionPython(PythonSemantica.INT, new TerminalOperator("0")),
                        e1, new RestOperator(null, new TerminalOperator("0"), e1.getTriplete(), OperacionPython.obtenerTipo(e1)));
              CUP$SintaxisPython$result = parser.getSymbolFactory().newSymbol("OPERACION_U",20, ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), RESULT);
            }
          return CUP$SintaxisPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // OPERACION_U ::= mas OPERACION_U 
            {
              OperacionPython RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()).right;
		OperacionPython e1 = (OperacionPython)((java_cup.runtime.Symbol) CUP$SintaxisPython$stack.peek()).value;
		RESULT  = e1;
              CUP$SintaxisPython$result = parser.getSymbolFactory().newSymbol("OPERACION_U",20, ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), RESULT);
            }
          return CUP$SintaxisPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // OPERACION_U ::= ATOM 
            {
              OperacionPython RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()).right;
		OperacionPython e1 = (OperacionPython)((java_cup.runtime.Symbol) CUP$SintaxisPython$stack.peek()).value;
		RESULT = e1;
              CUP$SintaxisPython$result = parser.getSymbolFactory().newSymbol("OPERACION_U",20, ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), RESULT);
            }
          return CUP$SintaxisPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // ATOM ::= id 
            {
              OperacionPython RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$SintaxisPython$stack.peek()).value;
		VariablePython tipo = sem.existeVar(new VariablePython(e1, PythonSemantica.AMBITO));
                if(tipo==null){
                        reportarSem("La variable con id: " + e1 + " no existe");
                } else {
                        SumOperator sum = sem.devolverSum(e1);
                        AsignarTemporal ast = new AsignarTemporal(null, sem.devolverDireccion(sum), "float");
                        OperacionPython op = new OperacionPython(tipo.getTipo(), ast);
                        op.getTripletes().add(sum);
                        RESULT = op;}
                
              CUP$SintaxisPython$result = parser.getSymbolFactory().newSymbol("ATOM",21, ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), RESULT);
            }
          return CUP$SintaxisPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // ATOM ::= entero 
            {
              OperacionPython RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$SintaxisPython$stack.peek()).value;
		String s = ".LC" + Triplete.FLOAT;
                Triplete.FLOAT += 1;
                actual.getFl().add("\t.align 4");
                actual.getFl().add(s + ":");
                actual.getFl().add("\t.long\t"+Float.floatToIntBits(Float.parseFloat(e1)));
                RESULT = new OperacionPython(PythonSemantica.INT, new TerminalOperator(e1,s));
              CUP$SintaxisPython$result = parser.getSymbolFactory().newSymbol("ATOM",21, ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), RESULT);
            }
          return CUP$SintaxisPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // ATOM ::= decimal 
            {
              OperacionPython RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$SintaxisPython$stack.peek()).value;
		
                String s = ".LC" + Triplete.FLOAT;
                Triplete.FLOAT += 1;
                actual.getFl().add("\t.align 4");
                actual.getFl().add(s + ":");
                actual.getFl().add("\t.long\t"+Float.floatToIntBits(Float.parseFloat(e1)));
                RESULT  = new OperacionPython(PythonSemantica.FLOAT, new TerminalOperator(e1, s));
              CUP$SintaxisPython$result = parser.getSymbolFactory().newSymbol("ATOM",21, ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), RESULT);
            }
          return CUP$SintaxisPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // ATOM ::= para OPERACION_A parc 
            {
              OperacionPython RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-1)).right;
		OperacionPython e1 = (OperacionPython)((java_cup.runtime.Symbol) CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-1)).value;
		RESULT = e1;
              CUP$SintaxisPython$result = parser.getSymbolFactory().newSymbol("ATOM",21, ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), RESULT);
            }
          return CUP$SintaxisPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // ATOM ::= LLAMADA_METODO 
            {
              OperacionPython RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()).right;
		OperacionPython e1 = (OperacionPython)((java_cup.runtime.Symbol) CUP$SintaxisPython$stack.peek()).value;
		RESULT = e1;
              CUP$SintaxisPython$result = parser.getSymbolFactory().newSymbol("ATOM",21, ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), RESULT);
            }
          return CUP$SintaxisPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // CONDICION ::= CONDICION orr AND 
            {
              CondicionPrograma RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-2)).right;
		CondicionPrograma e1 = (CondicionPrograma)((java_cup.runtime.Symbol) CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()).right;
		CondicionPrograma e2 = (CondicionPrograma)((java_cup.runtime.Symbol) CUP$SintaxisPython$stack.peek()).value;
		RESULT = IfPrograma.OR(e1, e2);
              CUP$SintaxisPython$result = parser.getSymbolFactory().newSymbol("CONDICION",7, ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), RESULT);
            }
          return CUP$SintaxisPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // CONDICION ::= AND 
            {
              CondicionPrograma RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()).right;
		CondicionPrograma e1 = (CondicionPrograma)((java_cup.runtime.Symbol) CUP$SintaxisPython$stack.peek()).value;
		RESULT = e1;
              CUP$SintaxisPython$result = parser.getSymbolFactory().newSymbol("CONDICION",7, ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), RESULT);
            }
          return CUP$SintaxisPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // AND ::= AND andd NOT 
            {
              CondicionPrograma RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-2)).right;
		CondicionPrograma e1 = (CondicionPrograma)((java_cup.runtime.Symbol) CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()).right;
		CondicionPrograma e2 = (CondicionPrograma)((java_cup.runtime.Symbol) CUP$SintaxisPython$stack.peek()).value;
		RESULT = IfPrograma.AND(e1, e2);
              CUP$SintaxisPython$result = parser.getSymbolFactory().newSymbol("AND",6, ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), RESULT);
            }
          return CUP$SintaxisPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // AND ::= NOT 
            {
              CondicionPrograma RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()).right;
		CondicionPrograma e1 = (CondicionPrograma)((java_cup.runtime.Symbol) CUP$SintaxisPython$stack.peek()).value;
		RESULT = e1;
              CUP$SintaxisPython$result = parser.getSymbolFactory().newSymbol("AND",6, ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), RESULT);
            }
          return CUP$SintaxisPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // NOT ::= nott NOT 
            {
              CondicionPrograma RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()).right;
		CondicionPrograma e1 = (CondicionPrograma)((java_cup.runtime.Symbol) CUP$SintaxisPython$stack.peek()).value;
		RESULT = IfPrograma.NOT(e1);
              CUP$SintaxisPython$result = parser.getSymbolFactory().newSymbol("NOT",5, ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), RESULT);
            }
          return CUP$SintaxisPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // NOT ::= COMPARACION 
            {
              CondicionPrograma RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()).right;
		Triplete e1 = (Triplete)((java_cup.runtime.Symbol) CUP$SintaxisPython$stack.peek()).value;
		RESULT = new IfPrograma(new If_Operator(e1, new Etiqueta()), ((CondicionalOperator)e1).getTripletes());
              CUP$SintaxisPython$result = parser.getSymbolFactory().newSymbol("NOT",5, ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), RESULT);
            }
          return CUP$SintaxisPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // NOT ::= para CONDICION parc 
            {
              CondicionPrograma RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-1)).right;
		CondicionPrograma e1 = (CondicionPrograma)((java_cup.runtime.Symbol) CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-1)).value;
		RESULT = e1;
              CUP$SintaxisPython$result = parser.getSymbolFactory().newSymbol("NOT",5, ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), RESULT);
            }
          return CUP$SintaxisPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // COMPARACION ::= OPERACION_A igig OPERACION_A 
            {
              Triplete RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-2)).right;
		OperacionPython e1 = (OperacionPython)((java_cup.runtime.Symbol) CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()).right;
		OperacionPython e2 = (OperacionPython)((java_cup.runtime.Symbol) CUP$SintaxisPython$stack.peek()).value;
		RESULT = new IgualOperator(e1.getTriplete(), e2.getTriplete(),
                e1.getTripletes(), e2.getTripletes());
              CUP$SintaxisPython$result = parser.getSymbolFactory().newSymbol("COMPARACION",8, ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), RESULT);
            }
          return CUP$SintaxisPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // COMPARACION ::= OPERACION_A noigual OPERACION_A 
            {
              Triplete RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-2)).right;
		OperacionPython e1 = (OperacionPython)((java_cup.runtime.Symbol) CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()).right;
		OperacionPython e2 = (OperacionPython)((java_cup.runtime.Symbol) CUP$SintaxisPython$stack.peek()).value;
		RESULT = new NoIgualOperator(e1.getTriplete(), e2.getTriplete(),
                e1.getTripletes(), e2.getTripletes());
              CUP$SintaxisPython$result = parser.getSymbolFactory().newSymbol("COMPARACION",8, ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), RESULT);
            }
          return CUP$SintaxisPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // COMPARACION ::= OPERACION_A menor OPERACION_A 
            {
              Triplete RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-2)).right;
		OperacionPython e1 = (OperacionPython)((java_cup.runtime.Symbol) CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()).right;
		OperacionPython e2 = (OperacionPython)((java_cup.runtime.Symbol) CUP$SintaxisPython$stack.peek()).value;
		RESULT = new MenorOperator(e1.getTriplete(), e2.getTriplete(),
                e1.getTripletes(), e2.getTripletes());
              CUP$SintaxisPython$result = parser.getSymbolFactory().newSymbol("COMPARACION",8, ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), RESULT);
            }
          return CUP$SintaxisPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // COMPARACION ::= OPERACION_A menorig OPERACION_A 
            {
              Triplete RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-2)).right;
		OperacionPython e1 = (OperacionPython)((java_cup.runtime.Symbol) CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()).right;
		OperacionPython e2 = (OperacionPython)((java_cup.runtime.Symbol) CUP$SintaxisPython$stack.peek()).value;
		RESULT = new MenorIgOperator(e1.getTriplete(), e2.getTriplete(),
                e1.getTripletes(), e2.getTripletes());
              CUP$SintaxisPython$result = parser.getSymbolFactory().newSymbol("COMPARACION",8, ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), RESULT);
            }
          return CUP$SintaxisPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // COMPARACION ::= OPERACION_A mayor OPERACION_A 
            {
              Triplete RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-2)).right;
		OperacionPython e1 = (OperacionPython)((java_cup.runtime.Symbol) CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()).right;
		OperacionPython e2 = (OperacionPython)((java_cup.runtime.Symbol) CUP$SintaxisPython$stack.peek()).value;
		RESULT = new MayorOperator(e1.getTriplete(), e2.getTriplete(),
                e1.getTripletes(), e2.getTripletes());
              CUP$SintaxisPython$result = parser.getSymbolFactory().newSymbol("COMPARACION",8, ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), RESULT);
            }
          return CUP$SintaxisPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // COMPARACION ::= OPERACION_A mayorig OPERACION_A 
            {
              Triplete RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-2)).right;
		OperacionPython e1 = (OperacionPython)((java_cup.runtime.Symbol) CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()).right;
		OperacionPython e2 = (OperacionPython)((java_cup.runtime.Symbol) CUP$SintaxisPython$stack.peek()).value;
		RESULT = new MayorIgOperator(e1.getTriplete(), e2.getTriplete(),
                e1.getTripletes(), e2.getTripletes());
              CUP$SintaxisPython$result = parser.getSymbolFactory().newSymbol("COMPARACION",8, ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), RESULT);
            }
          return CUP$SintaxisPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // STRING ::= STRING coma D 
            {
              ListaTripletes RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-2)).right;
		ListaTripletes e1 = (ListaTripletes)((java_cup.runtime.Symbol) CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()).right;
		OperacionPython e2 = (OperacionPython)((java_cup.runtime.Symbol) CUP$SintaxisPython$stack.peek()).value;
		e1.addAll(e2.getTripletes()); e1.add(new Printf(Input.tipoPython(e2), e2.getTriplete(), Input.tipoPythonf(e2))); RESULT = e1;
              CUP$SintaxisPython$result = parser.getSymbolFactory().newSymbol("STRING",32, ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), RESULT);
            }
          return CUP$SintaxisPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // STRING ::= STRING coma string 
            {
              ListaTripletes RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-2)).right;
		ListaTripletes e1 = (ListaTripletes)((java_cup.runtime.Symbol) CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$SintaxisPython$stack.peek()).value;
		e1.add(new Printf(e2)); RESULT = e1;
              CUP$SintaxisPython$result = parser.getSymbolFactory().newSymbol("STRING",32, ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), RESULT);
            }
          return CUP$SintaxisPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // STRING ::= D 
            {
              ListaTripletes RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()).right;
		OperacionPython e1 = (OperacionPython)((java_cup.runtime.Symbol) CUP$SintaxisPython$stack.peek()).value;
		ListaTripletes tri = new ListaTripletes(); tri.addAll(e1.getTripletes());
                tri.add(new Printf(Input.tipoPython(e1), e1.getTriplete(), Input.tipoPythonf(e1)));
                RESULT = tri;
              CUP$SintaxisPython$result = parser.getSymbolFactory().newSymbol("STRING",32, ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), RESULT);
            }
          return CUP$SintaxisPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // STRING ::= string 
            {
              ListaTripletes RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$SintaxisPython$stack.peek()).value;
		ListaTripletes tri = new ListaTripletes(); tri.add(new Printf(e1));
                RESULT = tri;
              CUP$SintaxisPython$result = parser.getSymbolFactory().newSymbol("STRING",32, ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), RESULT);
            }
          return CUP$SintaxisPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // STRING ::= STRING error D 
            {
              ListaTripletes RESULT =null;
		reportarSem("Error en String del print, se esperaba una coma antes del valor"); RESULT = new ListaTripletes();
              CUP$SintaxisPython$result = parser.getSymbolFactory().newSymbol("STRING",32, ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), RESULT);
            }
          return CUP$SintaxisPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // STRING ::= STRING coma error 
            {
              ListaTripletes RESULT =null;
		reportarSem("Error en String del print, se esperaba un valor despues de la coma"); RESULT = new ListaTripletes();
              CUP$SintaxisPython$result = parser.getSymbolFactory().newSymbol("STRING",32, ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), RESULT);
            }
          return CUP$SintaxisPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // LLAMADA_METODO ::= id para LIST_PARAM parc 
            {
              OperacionPython RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-3)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-1)).right;
		List<OperacionPython> e2 = (List<OperacionPython>)((java_cup.runtime.Symbol) CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-1)).value;
		MetodoPython met = sem.existeMetodo(e1, e2);
                        if(met == null){
                                System.out.println("error terminal python");
                                reportarSem("Metodo de Python no existente con id: <" + e1 + ">");
                        }else{
                                List<Triplete> tri = new ArrayList<>();
                                tri.addAll(met.verMetodo(sem.getVariables().size(), e2));
                                SumOperator s = new SumOperator(null, new P(), new TerminalOperator(""+sem.getVariables().size()),"int");
                                tri.add(s);
                                AsignarTemporal ast = new AsignarTemporal(null, new Stack(s), "float");
                                OperacionPython op = new OperacionPython(met.getTIPO(), ast);
                                op.getTripletes().addAll(tri);
                                RESULT = op;
                        }
              CUP$SintaxisPython$result = parser.getSymbolFactory().newSymbol("LLAMADA_METODO",22, ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), RESULT);
            }
          return CUP$SintaxisPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // LLAMADA_METODO ::= id para error parc 
            {
              OperacionPython RESULT =null;
		reportarSem("Error en llamada de un metodo, se esperaban parametros entre los parentesis");
              CUP$SintaxisPython$result = parser.getSymbolFactory().newSymbol("LLAMADA_METODO",22, ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), RESULT);
            }
          return CUP$SintaxisPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // LIST_PARAM ::= LIST 
            {
              List<OperacionPython> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()).right;
		List<OperacionPython> e1 = (List<OperacionPython>)((java_cup.runtime.Symbol) CUP$SintaxisPython$stack.peek()).value;
		RESULT = e1;
              CUP$SintaxisPython$result = parser.getSymbolFactory().newSymbol("LIST_PARAM",15, ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), RESULT);
            }
          return CUP$SintaxisPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // LIST_PARAM ::= 
            {
              List<OperacionPython> RESULT =null;
		RESULT = new ArrayList<>();
              CUP$SintaxisPython$result = parser.getSymbolFactory().newSymbol("LIST_PARAM",15, ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), RESULT);
            }
          return CUP$SintaxisPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // LIST ::= LIST_PARAM coma OPERACION_A 
            {
              List<OperacionPython> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-2)).right;
		List<OperacionPython> e1 = (List<OperacionPython>)((java_cup.runtime.Symbol) CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()).right;
		OperacionPython e2 = (OperacionPython)((java_cup.runtime.Symbol) CUP$SintaxisPython$stack.peek()).value;
		e1.add(e2); RESULT = e1;
              CUP$SintaxisPython$result = parser.getSymbolFactory().newSymbol("LIST",14, ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.elementAt(CUP$SintaxisPython$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), RESULT);
            }
          return CUP$SintaxisPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // LIST ::= OPERACION_A 
            {
              List<OperacionPython> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()).right;
		OperacionPython e1 = (OperacionPython)((java_cup.runtime.Symbol) CUP$SintaxisPython$stack.peek()).value;
		List<OperacionPython> params = new ArrayList<>(); params.add(e1); RESULT = params;
              CUP$SintaxisPython$result = parser.getSymbolFactory().newSymbol("LIST",14, ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisPython$stack.peek()), RESULT);
            }
          return CUP$SintaxisPython$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$SintaxisPython$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$SintaxisPython$do_action(
    int                        CUP$SintaxisPython$act_num,
    java_cup.runtime.lr_parser CUP$SintaxisPython$parser,
    java.util.Stack            CUP$SintaxisPython$stack,
    int                        CUP$SintaxisPython$top)
    throws java.lang.Exception
    {
              return CUP$SintaxisPython$do_action_part00000000(
                               CUP$SintaxisPython$act_num,
                               CUP$SintaxisPython$parser,
                               CUP$SintaxisPython$stack,
                               CUP$SintaxisPython$top);
    }
}

}
