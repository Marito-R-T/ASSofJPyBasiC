
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package com.mycompany.assofjpybasic.backend.analizador.visual;

import java_cup.runtime.*;
import com.mycompany.assofjpybasic.backend.semantica.visual.*;
import com.mycompany.assofjpybasic.backend.semantica.programa.*;
import com.mycompany.assofjpybasic.backend.semantica.python.*;
import com.mycompany.assofjpybasic.backend.semantica.programa.cod3.*;
import com.mycompany.assofjpybasic.backend.error.Errores;
import java.util.ArrayList;
import java.util.List;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class SintaxisVisual extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return SintaxisVisualSym.class;
}

  /** Default constructor. */
  @Deprecated
  public SintaxisVisual() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public SintaxisVisual(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public SintaxisVisual(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\220\000\002\002\004\000\002\002\004\000\002\007" +
    "\003\000\002\007\002\000\002\013\003\000\002\013\002" +
    "\000\002\003\004\000\002\003\002\000\002\004\003\000" +
    "\002\004\003\000\002\004\004\000\002\063\002\000\002" +
    "\005\016\000\002\064\002\000\002\006\017\000\002\050" +
    "\004\000\002\014\003\000\002\014\002\000\002\015\007" +
    "\000\002\015\005\000\002\015\007\000\002\015\007\000" +
    "\002\010\003\000\002\010\002\000\002\016\007\000\002" +
    "\016\005\000\002\016\007\000\002\040\005\000\002\040" +
    "\005\000\002\040\005\000\002\040\005\000\002\017\004" +
    "\000\002\017\004\000\002\017\004\000\002\020\004\000" +
    "\002\020\004\000\002\020\004\000\002\020\002\000\002" +
    "\026\004\000\002\026\002\000\002\022\005\000\002\022" +
    "\005\000\002\022\003\000\002\023\005\000\002\023\005" +
    "\000\002\023\005\000\002\023\003\000\002\024\004\000" +
    "\002\024\004\000\002\024\003\000\002\024\003\000\002" +
    "\025\003\000\002\025\003\000\002\025\003\000\002\025" +
    "\005\000\002\032\004\000\002\032\002\000\002\037\004" +
    "\000\002\037\005\000\002\037\002\000\002\021\003\000" +
    "\002\021\003\000\002\021\003\000\002\033\003\000\002" +
    "\033\003\000\002\033\003\000\002\033\003\000\002\033" +
    "\003\000\002\033\004\000\002\033\003\000\002\065\002" +
    "\000\002\066\002\000\002\042\016\000\002\067\002\000" +
    "\002\042\010\000\002\070\002\000\002\071\002\000\002" +
    "\042\016\000\002\072\002\000\002\062\011\000\002\062" +
    "\002\000\002\073\002\000\002\062\011\000\002\074\002" +
    "\000\002\041\006\000\002\041\002\000\002\011\003\000" +
    "\002\011\002\000\002\044\003\000\002\044\003\000\002" +
    "\044\003\000\002\044\003\000\002\044\003\000\002\043" +
    "\013\000\002\043\011\000\002\012\003\000\002\012\002" +
    "\000\002\075\002\000\002\036\007\000\002\036\002\000" +
    "\002\076\002\000\002\061\010\000\002\061\002\000\002" +
    "\056\005\000\002\056\003\000\002\077\002\000\002\047" +
    "\020\000\002\055\003\000\002\055\002\000\002\030\004" +
    "\000\002\100\002\000\002\045\012\000\002\101\002\000" +
    "\002\046\012\000\002\102\002\000\002\046\012\000\002" +
    "\034\006\000\002\034\006\000\002\027\006\000\002\027" +
    "\006\000\002\027\006\000\002\051\005\000\002\051\003" +
    "\000\002\051\004\000\002\053\005\000\002\053\003\000" +
    "\002\052\004\000\002\052\003\000\002\052\005\000\002" +
    "\054\005\000\002\054\005\000\002\054\005\000\002\054" +
    "\005\000\002\054\005\000\002\054\005\000\002\035\005" +
    "\000\002\035\005\000\002\035\003\000\002\035\003\000" +
    "\002\031\006\000\002\060\003\000\002\060\002\000\002" +
    "\057\005\000\002\057\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u012d\000\016\002\ufffe\003\ufffe\004\004\005\ufffe\006" +
    "\ufffe\010\ufffe\001\002\000\014\002\uffff\003\uffff\005\uffff" +
    "\006\uffff\010\uffff\001\002\000\004\002\u012f\001\002\000" +
    "\014\002\ufffa\003\012\005\ufffc\006\ufffc\010\007\001\002" +
    "\000\006\005\ufffd\006\ufffd\001\002\000\014\002\ufff9\003" +
    "\ufff9\005\ufff9\006\ufff9\010\ufff9\001\002\000\004\002\000" +
    "\001\002\000\012\003\012\005\ufffc\006\ufffc\010\007\001" +
    "\002\000\014\002\ufffa\003\012\005\ufffc\006\ufffc\010\007" +
    "\001\002\000\006\005\017\006\016\001\002\000\014\002" +
    "\ufff8\003\ufff8\005\ufff8\006\ufff8\010\ufff8\001\002\000\004" +
    "\054\u011d\001\002\000\004\054\020\001\002\000\004\051" +
    "\021\001\002\000\010\052\ufff0\054\uffea\067\024\001\002" +
    "\000\004\052\046\001\002\000\004\054\044\001\002\000" +
    "\006\003\uffeb\054\uffeb\001\002\000\010\003\026\052\ufff1" +
    "\053\027\001\002\000\006\054\uffea\067\024\001\002\000" +
    "\010\003\uffea\054\uffea\067\024\001\002\000\006\003\031" +
    "\054\032\001\002\000\004\012\033\001\002\000\004\012" +
    "\033\001\002\000\010\016\037\017\036\020\035\001\002" +
    "\000\010\003\uffef\052\uffef\053\uffef\001\002\000\014\003" +
    "\uffe1\004\uffe1\036\uffe1\052\uffe1\053\uffe1\001\002\000\014" +
    "\003\uffe0\004\uffe0\036\uffe0\052\uffe0\053\uffe0\001\002\000" +
    "\014\003\uffe2\004\uffe2\036\uffe2\052\uffe2\053\uffe2\001\002" +
    "\000\010\003\uffec\052\uffec\053\uffec\001\002\000\004\054" +
    "\042\001\002\000\004\012\033\001\002\000\010\003\uffed" +
    "\052\uffed\053\uffed\001\002\000\004\012\033\001\002\000" +
    "\010\003\uffee\052\uffee\053\uffee\001\002\000\004\004\047" +
    "\001\002\000\036\003\ufff6\007\ufff6\011\ufff6\021\ufff6\025" +
    "\ufff6\027\ufff6\033\ufff6\034\ufff6\054\ufff6\062\ufff6\063\ufff6" +
    "\064\ufff6\065\ufff6\066\ufff6\001\002\000\036\003\uffc9\007" +
    "\uffc9\011\uffc9\021\uffc9\025\uffc9\027\uffc9\033\uffc9\034\uffc9" +
    "\054\uffc9\062\uffc9\063\uffc9\064\uffc9\065\uffc9\066\uffc9\001" +
    "\002\000\036\003\070\007\075\011\073\021\066\025\102" +
    "\027\103\033\062\034\072\054\064\062\076\063\057\064" +
    "\074\065\054\066\053\001\002\000\004\004\uffa8\001\002" +
    "\000\004\051\u011a\001\002\000\004\051\u0117\001\002\000" +
    "\052\003\uffc1\007\uffc1\011\uffc1\021\uffc1\022\uffc1\023\uffc1" +
    "\025\uffc1\026\uffc1\027\uffc1\032\uffc1\033\uffc1\034\uffc1\035" +
    "\uffc1\054\uffc1\062\uffc1\063\uffc1\064\uffc1\065\uffc1\066\uffc1" +
    "\070\uffc1\001\002\000\052\003\uffbf\007\uffbf\011\uffbf\021" +
    "\uffbf\022\uffbf\023\uffbf\025\uffbf\026\uffbf\027\uffbf\032\uffbf" +
    "\033\uffbf\034\uffbf\035\uffbf\054\uffbf\062\uffbf\063\uffbf\064" +
    "\uffbf\065\uffbf\066\uffbf\070\uffbf\001\002\000\004\051\u0114" +
    "\001\002\000\004\004\uffa9\001\002\000\052\003\uffc2\007" +
    "\uffc2\011\uffc2\021\uffc2\022\uffc2\023\uffc2\025\uffc2\026\uffc2" +
    "\027\uffc2\032\uffc2\033\uffc2\034\uffc2\035\uffc2\054\uffc2\062" +
    "\uffc2\063\uffc2\064\uffc2\065\uffc2\066\uffc2\070\uffc2\001\002" +
    "\000\022\003\264\013\260\044\120\045\114\051\266\054" +
    "\107\055\112\056\116\001\002\000\052\003\uffbe\007\uffbe" +
    "\011\uffbe\021\uffbe\022\uffbe\023\uffbe\025\uffbe\026\uffbe\027" +
    "\uffbe\032\uffbe\033\uffbe\034\uffbe\035\uffbe\054\uffbe\062\uffbe" +
    "\063\uffbe\064\uffbe\065\uffbe\066\uffbe\070\uffbe\001\002\000" +
    "\010\003\u0108\036\u0109\051\154\001\002\000\004\004\uffa7" +
    "\001\002\000\022\003\335\013\260\044\120\045\114\051" +
    "\266\054\107\055\112\056\116\001\002\000\004\004\uffa5" +
    "\001\002\000\056\003\uffbc\004\325\007\uffbc\011\uffbc\021" +
    "\uffbc\022\uffbc\023\uffbc\025\uffbc\026\uffbc\027\uffbc\032\uffbc" +
    "\033\uffbc\034\uffbc\035\uffbc\036\326\054\uffbc\062\uffbc\063" +
    "\uffbc\064\uffbc\065\uffbc\066\uffbc\070\uffbc\001\002\000\004" +
    "\004\324\001\002\000\006\004\253\033\252\001\002\000" +
    "\004\054\231\001\002\000\004\051\225\001\002\000\004" +
    "\005\223\001\002\000\004\051\213\001\002\000\050\003" +
    "\uffca\007\uffca\011\uffca\021\uffca\022\uffca\023\uffca\025\uffca" +
    "\026\uffca\027\uffca\032\uffca\033\uffca\034\uffca\035\uffca\054" +
    "\uffca\062\uffca\063\uffca\064\uffca\065\uffca\066\uffca\001\002" +
    "\000\052\003\uffc0\007\uffc0\011\uffc0\021\uffc0\022\uffc0\023" +
    "\uffc0\025\uffc0\026\uffc0\027\uffc0\032\uffc0\033\uffc0\034\uffc0" +
    "\035\uffc0\054\uffc0\062\uffc0\063\uffc0\064\uffc0\065\uffc0\066" +
    "\uffc0\070\uffc0\001\002\000\004\004\uffa6\001\002\000\030" +
    "\026\164\044\uffa1\045\uffa1\051\uffa1\054\uffa1\055\uffa1\056" +
    "\uffa1\057\uffa1\064\uffa1\065\uffa1\066\uffa1\001\002\000\004" +
    "\054\104\001\002\000\004\012\033\001\002\000\004\036" +
    "\106\001\002\000\016\044\120\045\114\051\121\054\107" +
    "\055\112\056\116\001\002\000\056\003\uffce\004\uffce\014" +
    "\uffce\015\uffce\024\uffce\030\uffce\031\uffce\036\uffce\037\uffce" +
    "\040\uffce\041\uffce\042\uffce\043\uffce\044\uffce\045\uffce\046" +
    "\uffce\047\uffce\050\uffce\051\154\052\uffce\053\uffce\060\uffce" +
    "\001\002\000\010\030\140\044\123\045\124\001\002\000" +
    "\054\003\uffd3\004\uffd3\014\uffd3\015\uffd3\024\uffd3\030\uffd3" +
    "\031\uffd3\036\uffd3\037\uffd3\040\uffd3\041\uffd3\042\uffd3\043" +
    "\uffd3\044\uffd3\045\uffd3\046\uffd3\047\uffd3\050\uffd3\052\uffd3" +
    "\053\uffd3\060\uffd3\001\002\000\054\003\uffcc\004\uffcc\014" +
    "\uffcc\015\uffcc\024\uffcc\030\uffcc\031\uffcc\036\uffcc\037\uffcc" +
    "\040\uffcc\041\uffcc\042\uffcc\043\uffcc\044\uffcc\045\uffcc\046" +
    "\uffcc\047\uffcc\050\uffcc\052\uffcc\053\uffcc\060\uffcc\001\002" +
    "\000\054\003\uffd0\004\uffd0\014\uffd0\015\uffd0\024\uffd0\030" +
    "\uffd0\031\uffd0\036\uffd0\037\uffd0\040\uffd0\041\uffd0\042\uffd0" +
    "\043\uffd0\044\uffd0\045\uffd0\046\uffd0\047\uffd0\050\uffd0\052" +
    "\uffd0\053\uffd0\060\uffd0\001\002\000\016\044\120\045\114" +
    "\051\121\054\107\055\112\056\116\001\002\000\054\003" +
    "\uffd7\004\uffd7\014\uffd7\015\uffd7\024\uffd7\030\uffd7\031\uffd7" +
    "\036\uffd7\037\uffd7\040\uffd7\041\uffd7\042\uffd7\043\uffd7\044" +
    "\uffd7\045\uffd7\046\127\047\131\050\130\052\uffd7\053\uffd7" +
    "\060\uffd7\001\002\000\054\003\uffcd\004\uffcd\014\uffcd\015" +
    "\uffcd\024\uffcd\030\uffcd\031\uffcd\036\uffcd\037\uffcd\040\uffcd" +
    "\041\uffcd\042\uffcd\043\uffcd\044\uffcd\045\uffcd\046\uffcd\047" +
    "\uffcd\050\uffcd\052\uffcd\053\uffcd\060\uffcd\001\002\000\054" +
    "\003\uffcf\004\uffcf\014\uffcf\015\uffcf\024\uffcf\030\uffcf\031" +
    "\uffcf\036\uffcf\037\uffcf\040\uffcf\041\uffcf\042\uffcf\043\uffcf" +
    "\044\uffcf\045\uffcf\046\uffcf\047\uffcf\050\uffcf\052\uffcf\053" +
    "\uffcf\060\uffcf\001\002\000\016\044\120\045\114\051\121" +
    "\054\107\055\112\056\116\001\002\000\016\044\120\045" +
    "\114\051\121\054\107\055\112\056\116\001\002\000\010" +
    "\044\123\045\124\052\125\001\002\000\016\044\120\045" +
    "\114\051\121\054\107\055\112\056\116\001\002\000\016" +
    "\044\120\045\114\051\121\054\107\055\112\056\116\001" +
    "\002\000\054\003\uffcb\004\uffcb\014\uffcb\015\uffcb\024\uffcb" +
    "\030\uffcb\031\uffcb\036\uffcb\037\uffcb\040\uffcb\041\uffcb\042" +
    "\uffcb\043\uffcb\044\uffcb\045\uffcb\046\uffcb\047\uffcb\050\uffcb" +
    "\052\uffcb\053\uffcb\060\uffcb\001\002\000\054\003\uffd8\004" +
    "\uffd8\014\uffd8\015\uffd8\024\uffd8\030\uffd8\031\uffd8\036\uffd8" +
    "\037\uffd8\040\uffd8\041\uffd8\042\uffd8\043\uffd8\044\uffd8\045" +
    "\uffd8\046\127\047\131\050\130\052\uffd8\053\uffd8\060\uffd8" +
    "\001\002\000\016\044\120\045\114\051\121\054\107\055" +
    "\112\056\116\001\002\000\016\044\120\045\114\051\121" +
    "\054\107\055\112\056\116\001\002\000\016\044\120\045" +
    "\114\051\121\054\107\055\112\056\116\001\002\000\054" +
    "\003\uffd5\004\uffd5\014\uffd5\015\uffd5\024\uffd5\030\uffd5\031" +
    "\uffd5\036\uffd5\037\uffd5\040\uffd5\041\uffd5\042\uffd5\043\uffd5" +
    "\044\uffd5\045\uffd5\046\uffd5\047\uffd5\050\uffd5\052\uffd5\053" +
    "\uffd5\060\uffd5\001\002\000\054\003\uffd4\004\uffd4\014\uffd4" +
    "\015\uffd4\024\uffd4\030\uffd4\031\uffd4\036\uffd4\037\uffd4\040" +
    "\uffd4\041\uffd4\042\uffd4\043\uffd4\044\uffd4\045\uffd4\046\uffd4" +
    "\047\uffd4\050\uffd4\052\uffd4\053\uffd4\060\uffd4\001\002\000" +
    "\054\003\uffd6\004\uffd6\014\uffd6\015\uffd6\024\uffd6\030\uffd6" +
    "\031\uffd6\036\uffd6\037\uffd6\040\uffd6\041\uffd6\042\uffd6\043" +
    "\uffd6\044\uffd6\045\uffd6\046\uffd6\047\uffd6\050\uffd6\052\uffd6" +
    "\053\uffd6\060\uffd6\001\002\000\054\003\uffd9\004\uffd9\014" +
    "\uffd9\015\uffd9\024\uffd9\030\uffd9\031\uffd9\036\uffd9\037\uffd9" +
    "\040\uffd9\041\uffd9\042\uffd9\043\uffd9\044\uffd9\045\uffd9\046" +
    "\127\047\131\050\130\052\uffd9\053\uffd9\060\uffd9\001\002" +
    "\000\054\003\uffd1\004\uffd1\014\uffd1\015\uffd1\024\uffd1\030" +
    "\uffd1\031\uffd1\036\uffd1\037\uffd1\040\uffd1\041\uffd1\042\uffd1" +
    "\043\uffd1\044\uffd1\045\uffd1\046\uffd1\047\uffd1\050\uffd1\052" +
    "\uffd1\053\uffd1\060\uffd1\001\002\000\054\003\uffd2\004\uffd2" +
    "\014\uffd2\015\uffd2\024\uffd2\030\uffd2\031\uffd2\036\uffd2\037" +
    "\uffd2\040\uffd2\041\uffd2\042\uffd2\043\uffd2\044\uffd2\045\uffd2" +
    "\046\uffd2\047\uffd2\050\uffd2\052\uffd2\053\uffd2\060\uffd2\001" +
    "\002\000\016\044\120\045\114\051\121\054\107\055\112" +
    "\056\116\001\002\000\010\031\143\044\123\045\124\001" +
    "\002\000\004\004\145\001\002\000\016\044\120\045\114" +
    "\051\121\054\107\055\112\056\116\001\002\000\010\004" +
    "\uff94\044\123\045\124\001\002\000\036\003\uff98\011\uff98" +
    "\021\uff98\025\uff98\027\uff98\032\uff98\033\uff98\034\uff98\054" +
    "\uff98\062\uff98\063\uff98\064\uff98\065\uff98\066\uff98\001\002" +
    "\000\036\003\uffc9\011\uffc9\021\uffc9\025\uffc9\027\uffc9\032" +
    "\uffc9\033\uffc9\034\uffc9\054\uffc9\062\uffc9\063\uffc9\064\uffc9" +
    "\065\uffc9\066\uffc9\001\002\000\036\003\070\011\073\021" +
    "\066\025\102\027\103\032\150\033\062\034\072\054\064" +
    "\062\076\063\057\064\074\065\054\066\053\001\002\000" +
    "\006\004\uff95\054\152\001\002\000\004\004\153\001\002" +
    "\000\004\004\uff96\001\002\000\052\003\uff97\007\uff97\011" +
    "\uff97\021\uff97\022\uff97\023\uff97\025\uff97\026\uff97\027\uff97" +
    "\032\uff97\033\uff97\034\uff97\035\uff97\054\uff97\062\uff97\063" +
    "\uff97\064\uff97\065\uff97\066\uff97\070\uff97\001\002\000\022" +
    "\044\120\045\114\051\121\052\uff74\053\uff74\054\107\055" +
    "\112\056\116\001\002\000\012\044\123\045\124\052\uff72" +
    "\053\uff72\001\002\000\006\052\161\053\160\001\002\000" +
    "\006\052\uff75\053\uff75\001\002\000\016\044\120\045\114" +
    "\051\121\054\107\055\112\056\116\001\002\000\054\003" +
    "\uff76\004\uff76\014\uff76\015\uff76\024\uff76\030\uff76\031\uff76" +
    "\036\uff76\037\uff76\040\uff76\041\uff76\042\uff76\043\uff76\044" +
    "\uff76\045\uff76\046\uff76\047\uff76\050\uff76\052\uff76\053\uff76" +
    "\060\uff76\001\002\000\012\044\123\045\124\052\uff73\053" +
    "\uff73\001\002\000\026\044\120\045\114\051\121\054\107" +
    "\055\112\056\116\057\167\064\074\065\054\066\053\001" +
    "\002\000\026\044\uffa2\045\uffa2\051\uffa2\054\uffa2\055\uffa2" +
    "\056\uffa2\057\uffa2\064\uffa2\065\uffa2\066\uffa2\001\002\000" +
    "\020\003\uffc5\004\uffc5\044\123\045\124\052\uffc5\053\uffc5" +
    "\060\uffc5\001\002\000\014\003\uffc4\004\uffc4\052\uffc4\053" +
    "\uffc4\060\uffc4\001\002\000\014\003\uffc3\004\uffc3\052\uffc3" +
    "\053\uffc3\060\uffc3\001\002\000\004\004\171\001\002\000" +
    "\006\007\uff9b\026\uff9b\001\002\000\006\007\uff9e\026\173" +
    "\001\002\000\020\023\201\044\120\045\114\051\121\054" +
    "\107\055\112\056\116\001\002\000\004\007\175\001\002" +
    "\000\004\025\176\001\002\000\004\004\177\001\002\000" +
    "\052\003\uffa4\007\uffa4\011\uffa4\021\uffa4\022\uffa4\023\uffa4" +
    "\025\uffa4\026\uffa4\027\uffa4\032\uffa4\033\uffa4\034\uffa4\035" +
    "\uffa4\054\uffa4\062\uffa4\063\uffa4\064\uffa4\065\uffa4\066\uffa4" +
    "\070\uffa4\001\002\000\012\004\uff99\044\123\045\124\053" +
    "\uff99\001\002\000\004\004\210\001\002\000\006\004\203" +
    "\053\204\001\002\000\040\003\uff9d\007\uff9d\011\uff9d\021" +
    "\uff9d\025\uff9d\026\uff9d\027\uff9d\033\uff9d\034\uff9d\054\uff9d" +
    "\062\uff9d\063\uff9d\064\uff9d\065\uff9d\066\uff9d\001\002\000" +
    "\016\044\120\045\114\051\121\054\107\055\112\056\116" +
    "\001\002\000\012\004\uff9a\044\123\045\124\053\uff9a\001" +
    "\002\000\040\003\uffc9\007\uffc9\011\uffc9\021\uffc9\025\uffc9" +
    "\026\uffc9\027\uffc9\033\uffc9\034\uffc9\054\uffc9\062\uffc9\063" +
    "\uffc9\064\uffc9\065\uffc9\066\uffc9\001\002\000\040\003\070" +
    "\007\uff9c\011\073\021\066\025\102\026\uff9c\027\103\033" +
    "\062\034\072\054\064\062\076\063\057\064\074\065\054" +
    "\066\053\001\002\000\036\003\uffa0\007\uffa0\011\uffa0\021" +
    "\uffa0\025\uffa0\027\uffa0\033\uffa0\034\uffa0\054\uffa0\062\uffa0" +
    "\063\uffa0\064\uffa0\065\uffa0\066\uffa0\001\002\000\036\003" +
    "\uffc9\007\uffc9\011\uffc9\021\uffc9\025\uffc9\027\uffc9\033\uffc9" +
    "\034\uffc9\054\uffc9\062\uffc9\063\uffc9\064\uffc9\065\uffc9\066" +
    "\uffc9\001\002\000\036\003\070\007\uff9f\011\073\021\066" +
    "\025\102\027\103\033\062\034\072\054\064\062\076\063" +
    "\057\064\074\065\054\066\053\001\002\000\030\044\120" +
    "\045\114\051\121\054\107\055\112\056\116\057\167\061" +
    "\214\064\074\065\054\066\053\001\002\000\006\052\uff77" +
    "\060\uff77\001\002\000\006\052\uff78\060\uff78\001\002\000" +
    "\006\052\217\060\220\001\002\000\004\004\uff8d\001\002" +
    "\000\030\044\120\045\114\051\121\054\107\055\112\056" +
    "\116\057\167\061\221\064\074\065\054\066\053\001\002" +
    "\000\006\052\uff79\060\uff79\001\002\000\006\052\uff7a\060" +
    "\uff7a\001\002\000\004\004\224\001\002\000\014\002\ufff5" +
    "\003\ufff5\005\ufff5\006\ufff5\010\ufff5\001\002\000\004\061" +
    "\226\001\002\000\004\052\227\001\002\000\014\003\uff8b" +
    "\004\uff8b\052\uff8b\053\uff8b\060\uff8b\001\002\000\010\003" +
    "\242\004\ufff2\053\243\001\002\000\014\003\uffdc\004\uffdc" +
    "\012\232\036\uffdc\053\uffdc\001\002\000\010\016\241\017" +
    "\240\020\237\001\002\000\012\003\uffda\004\uffda\036\235" +
    "\053\uffda\001\002\000\010\003\uffe8\004\uffe8\053\uffe8\001" +
    "\002\000\026\044\120\045\114\051\121\054\107\055\112" +
    "\056\116\057\167\064\074\065\054\066\053\001\002\000" +
    "\010\003\uffdb\004\uffdb\053\uffdb\001\002\000\012\003\uffde" +
    "\004\uffde\036\uffde\053\uffde\001\002\000\012\003\uffdd\004" +
    "\uffdd\036\uffdd\053\uffdd\001\002\000\012\003\uffdf\004\uffdf" +
    "\036\uffdf\053\uffdf\001\002\000\004\054\247\001\002\000" +
    "\004\054\244\001\002\000\014\003\uffdc\004\uffdc\012\232" +
    "\036\uffdc\053\uffdc\001\002\000\012\003\uffda\004\uffda\036" +
    "\235\053\uffda\001\002\000\010\003\uffe9\004\uffe9\053\uffe9" +
    "\001\002\000\014\003\uffdc\004\uffdc\012\232\036\uffdc\053" +
    "\uffdc\001\002\000\012\003\uffda\004\uffda\036\235\053\uffda" +
    "\001\002\000\010\003\uffe7\004\uffe7\053\uffe7\001\002\000" +
    "\022\003\264\013\260\044\120\045\114\051\266\054\107" +
    "\055\112\056\116\001\002\000\036\003\uff8f\011\uff8f\021" +
    "\uff8f\025\uff8f\027\uff8f\033\uff8f\034\uff8f\035\uff8f\054\uff8f" +
    "\062\uff8f\063\uff8f\064\uff8f\065\uff8f\066\uff8f\001\002\000" +
    "\036\003\uffc9\011\uffc9\021\uffc9\025\uffc9\027\uffc9\033\uffc9" +
    "\034\uffc9\035\uffc9\054\uffc9\062\uffc9\063\uffc9\064\uffc9\065" +
    "\uffc9\066\uffc9\001\002\000\036\003\070\011\073\021\066" +
    "\025\102\027\103\033\062\034\072\035\256\054\064\062" +
    "\076\063\057\064\074\065\054\066\053\001\002\000\004" +
    "\033\257\001\002\000\022\003\264\013\260\044\120\045" +
    "\114\051\266\054\107\055\112\056\116\001\002\000\020" +
    "\013\260\044\120\045\114\051\266\054\107\055\112\056" +
    "\116\001\002\000\014\004\uff82\014\uff82\015\uff82\024\uff82" +
    "\052\uff82\001\002\000\014\004\uff87\014\273\015\uff87\024" +
    "\uff87\052\uff87\001\002\000\022\036\305\037\303\040\302" +
    "\041\301\042\304\043\300\044\123\045\124\001\002\000" +
    "\020\013\260\044\120\045\114\051\266\054\107\055\112" +
    "\056\116\001\002\000\014\004\uff84\014\uff84\015\uff84\024" +
    "\uff84\052\uff84\001\002\000\022\003\264\013\260\044\120" +
    "\045\114\051\266\054\107\055\112\056\116\001\002\000" +
    "\006\004\270\015\271\001\002\000\052\003\uff8e\007\uff8e" +
    "\011\uff8e\021\uff8e\022\uff8e\023\uff8e\025\uff8e\026\uff8e\027" +
    "\uff8e\032\uff8e\033\uff8e\034\uff8e\035\uff8e\054\uff8e\062\uff8e" +
    "\063\uff8e\064\uff8e\065\uff8e\066\uff8e\070\uff8e\001\002\000" +
    "\020\013\260\044\120\045\114\051\266\054\107\055\112" +
    "\056\116\001\002\000\014\004\uff88\014\273\015\uff88\024" +
    "\uff88\052\uff88\001\002\000\020\013\260\044\120\045\114" +
    "\051\266\054\107\055\112\056\116\001\002\000\014\004" +
    "\uff85\014\uff85\015\uff85\024\uff85\052\uff85\001\002\000\024" +
    "\036\305\037\303\040\302\041\301\042\304\043\300\044" +
    "\123\045\124\052\125\001\002\000\006\015\271\052\277" +
    "\001\002\000\014\004\uff81\014\uff81\015\uff81\024\uff81\052" +
    "\uff81\001\002\000\016\044\120\045\114\051\121\054\107" +
    "\055\112\056\116\001\002\000\016\044\120\045\114\051" +
    "\121\054\107\055\112\056\116\001\002\000\016\044\120" +
    "\045\114\051\121\054\107\055\112\056\116\001\002\000" +
    "\016\044\120\045\114\051\121\054\107\055\112\056\116" +
    "\001\002\000\016\044\120\045\114\051\121\054\107\055" +
    "\112\056\116\001\002\000\016\044\120\045\114\051\121" +
    "\054\107\055\112\056\116\001\002\000\020\004\uff80\014" +
    "\uff80\015\uff80\024\uff80\044\123\045\124\052\uff80\001\002" +
    "\000\020\004\uff7c\014\uff7c\015\uff7c\024\uff7c\044\123\045" +
    "\124\052\uff7c\001\002\000\020\004\uff7f\014\uff7f\015\uff7f" +
    "\024\uff7f\044\123\045\124\052\uff7f\001\002\000\020\004" +
    "\uff7e\014\uff7e\015\uff7e\024\uff7e\044\123\045\124\052\uff7e" +
    "\001\002\000\020\004\uff7d\014\uff7d\015\uff7d\024\uff7d\044" +
    "\123\045\124\052\uff7d\001\002\000\020\004\uff7b\014\uff7b" +
    "\015\uff7b\024\uff7b\044\123\045\124\052\uff7b\001\002\000" +
    "\014\004\uff86\014\273\015\uff86\024\uff86\052\uff86\001\002" +
    "\000\014\004\uff83\014\uff83\015\uff83\024\uff83\052\uff83\001" +
    "\002\000\006\004\317\015\271\001\002\000\036\003\uff91" +
    "\011\uff91\021\uff91\025\uff91\027\uff91\033\uff91\034\uff91\035" +
    "\uff91\054\uff91\062\uff91\063\uff91\064\uff91\065\uff91\066\uff91" +
    "\001\002\000\036\003\uffc9\011\uffc9\021\uffc9\025\uffc9\027" +
    "\uffc9\033\uffc9\034\uffc9\035\uffc9\054\uffc9\062\uffc9\063\uffc9" +
    "\064\uffc9\065\uffc9\066\uffc9\001\002\000\036\003\070\011" +
    "\073\021\066\025\102\027\103\033\062\034\072\035\322" +
    "\054\064\062\076\063\057\064\074\065\054\066\053\001" +
    "\002\000\004\004\323\001\002\000\052\003\uff90\007\uff90" +
    "\011\uff90\021\uff90\022\uff90\023\uff90\025\uff90\026\uff90\027" +
    "\uff90\032\uff90\033\uff90\034\uff90\035\uff90\054\uff90\062\uff90" +
    "\063\uff90\064\uff90\065\uff90\066\uff90\070\uff90\001\002\000" +
    "\052\003\uffbd\007\uffbd\011\uffbd\021\uffbd\022\uffbd\023\uffbd" +
    "\025\uffbd\026\uffbd\027\uffbd\032\uffbd\033\uffbd\034\uffbd\035" +
    "\uffbd\054\uffbd\062\uffbd\063\uffbd\064\uffbd\065\uffbd\066\uffbd" +
    "\070\uffbd\001\002\000\006\007\uff9b\026\uff9b\001\002\000" +
    "\026\044\120\045\114\051\121\054\107\055\112\056\116" +
    "\057\167\064\074\065\054\066\053\001\002\000\004\004" +
    "\uffe5\001\002\000\006\007\uff9e\026\173\001\002\000\004" +
    "\007\332\001\002\000\004\025\333\001\002\000\004\004" +
    "\334\001\002\000\052\003\uffa3\007\uffa3\011\uffa3\021\uffa3" +
    "\022\uffa3\023\uffa3\025\uffa3\026\uffa3\027\uffa3\032\uffa3\033" +
    "\uffa3\034\uffa3\035\uffa3\054\uffa3\062\uffa3\063\uffa3\064\uffa3" +
    "\065\uffa3\066\uffa3\070\uffa3\001\002\000\024\004\uffaa\013" +
    "\260\024\356\044\120\045\114\051\266\054\107\055\112" +
    "\056\116\001\002\000\010\004\uffaa\015\271\024\337\001" +
    "\002\000\024\003\uffb8\004\uffab\011\uffb8\054\uffb8\062\uffb8" +
    "\063\uffb8\064\uffb8\065\uffb8\066\uffb8\001\002\000\004\004" +
    "\341\001\002\000\042\003\uffbb\007\uffbb\011\uffbb\021\uffbb" +
    "\022\uffbb\023\uffbb\025\uffbb\027\uffbb\033\uffbb\034\uffbb\054" +
    "\uffbb\062\uffbb\063\uffbb\064\uffbb\065\uffbb\066\uffbb\001\002" +
    "\000\042\003\uffc9\007\uffc9\011\uffc9\021\uffc9\022\uffc9\023" +
    "\uffc9\025\uffc9\027\uffc9\033\uffc9\034\uffc9\054\uffc9\062\uffc9" +
    "\063\uffc9\064\uffc9\065\uffc9\066\uffc9\001\002\000\042\003" +
    "\070\007\uffba\011\073\021\066\022\uffba\023\uffba\025\102" +
    "\027\103\033\062\034\072\054\064\062\076\063\057\064" +
    "\074\065\054\066\053\001\002\000\010\007\uffb1\022\uffb1" +
    "\023\uffb1\001\002\000\010\007\uffac\022\347\023\350\001" +
    "\002\000\004\007\367\001\002\000\022\003\354\013\260" +
    "\044\120\045\114\051\266\054\107\055\112\056\116\001" +
    "\002\000\004\004\351\001\002\000\036\003\uffae\007\uffae" +
    "\011\uffae\021\uffae\025\uffae\027\uffae\033\uffae\034\uffae\054" +
    "\uffae\062\uffae\063\uffae\064\uffae\065\uffae\066\uffae\001\002" +
    "\000\036\003\uffc9\007\uffc9\011\uffc9\021\uffc9\025\uffc9\027" +
    "\uffc9\033\uffc9\034\uffc9\054\uffc9\062\uffc9\063\uffc9\064\uffc9" +
    "\065\uffc9\066\uffc9\001\002\000\036\003\070\007\uffad\011" +
    "\073\021\066\025\102\027\103\033\062\034\072\054\064" +
    "\062\076\063\057\064\074\065\054\066\053\001\002\000" +
    "\024\004\uffaa\013\260\024\356\044\120\045\114\051\266" +
    "\054\107\055\112\056\116\001\002\000\010\004\uffaa\015" +
    "\271\024\356\001\002\000\004\004\uffab\001\002\000\004" +
    "\004\360\001\002\000\042\003\uffb3\007\uffb3\011\uffb3\021" +
    "\uffb3\022\uffb3\023\uffb3\025\uffb3\027\uffb3\033\uffb3\034\uffb3" +
    "\054\uffb3\062\uffb3\063\uffb3\064\uffb3\065\uffb3\066\uffb3\001" +
    "\002\000\042\003\uffc9\007\uffc9\011\uffc9\021\uffc9\022\uffc9" +
    "\023\uffc9\025\uffc9\027\uffc9\033\uffc9\034\uffc9\054\uffc9\062" +
    "\uffc9\063\uffc9\064\uffc9\065\uffc9\066\uffc9\001\002\000\042" +
    "\003\070\007\uffb2\011\073\021\066\022\uffb2\023\uffb2\025" +
    "\102\027\103\033\062\034\072\054\064\062\076\063\057" +
    "\064\074\065\054\066\053\001\002\000\004\004\364\001" +
    "\002\000\042\003\uffb0\007\uffb0\011\uffb0\021\uffb0\022\uffb0" +
    "\023\uffb0\025\uffb0\027\uffb0\033\uffb0\034\uffb0\054\uffb0\062" +
    "\uffb0\063\uffb0\064\uffb0\065\uffb0\066\uffb0\001\002\000\042" +
    "\003\uffc9\007\uffc9\011\uffc9\021\uffc9\022\uffc9\023\uffc9\025" +
    "\uffc9\027\uffc9\033\uffc9\034\uffc9\054\uffc9\062\uffc9\063\uffc9" +
    "\064\uffc9\065\uffc9\066\uffc9\001\002\000\042\003\070\007" +
    "\uffaf\011\073\021\066\022\uffaf\023\uffaf\025\102\027\103" +
    "\033\062\034\072\054\064\062\076\063\057\064\074\065" +
    "\054\066\053\001\002\000\004\021\370\001\002\000\004" +
    "\004\371\001\002\000\052\003\uffb9\007\uffb9\011\uffb9\021" +
    "\uffb9\022\uffb9\023\uffb9\025\uffb9\026\uffb9\027\uffb9\032\uffb9" +
    "\033\uffb9\034\uffb9\035\uffb9\054\uffb9\062\uffb9\063\uffb9\064" +
    "\uffb9\065\uffb9\066\uffb9\070\uffb9\001\002\000\022\003\374" +
    "\011\073\054\064\062\076\063\057\064\074\065\054\066" +
    "\053\001\002\000\004\004\375\001\002\000\004\036\326" +
    "\001\002\000\052\003\uffb7\007\uffb7\011\uffb7\021\uffb7\022" +
    "\uffb7\023\uffb7\025\uffb7\026\uffb7\027\uffb7\032\uffb7\033\uffb7" +
    "\034\uffb7\035\uffb7\054\uffb7\062\uffb7\063\uffb7\064\uffb7\065" +
    "\uffb7\066\uffb7\070\uffb7\001\002\000\004\004\377\001\002" +
    "\000\042\003\uffb6\007\uffb6\011\uffb6\021\uffb6\022\uffb6\023" +
    "\uffb6\025\uffb6\027\uffb6\033\uffb6\034\uffb6\054\uffb6\062\uffb6" +
    "\063\uffb6\064\uffb6\065\uffb6\066\uffb6\001\002\000\042\003" +
    "\uffc9\007\uffc9\011\uffc9\021\uffc9\022\uffc9\023\uffc9\025\uffc9" +
    "\027\uffc9\033\uffc9\034\uffc9\054\uffc9\062\uffc9\063\uffc9\064" +
    "\uffc9\065\uffc9\066\uffc9\001\002\000\042\003\070\007\uffb5" +
    "\011\073\021\066\022\uffb5\023\uffb5\025\102\027\103\033" +
    "\062\034\072\054\064\062\076\063\057\064\074\065\054" +
    "\066\053\001\002\000\010\007\uffb1\022\uffb1\023\uffb1\001" +
    "\002\000\010\007\uffac\022\347\023\350\001\002\000\004" +
    "\007\u0105\001\002\000\004\021\u0106\001\002\000\004\004" +
    "\u0107\001\002\000\052\003\uffb4\007\uffb4\011\uffb4\021\uffb4" +
    "\022\uffb4\023\uffb4\025\uffb4\026\uffb4\027\uffb4\032\uffb4\033" +
    "\uffb4\034\uffb4\035\uffb4\054\uffb4\062\uffb4\063\uffb4\064\uffb4" +
    "\065\uffb4\066\uffb4\070\uffb4\001\002\000\026\044\120\045" +
    "\114\051\121\054\107\055\112\056\116\057\167\064\074" +
    "\065\054\066\053\001\002\000\030\003\u010b\044\120\045" +
    "\114\051\121\054\107\055\112\056\116\057\167\064\074" +
    "\065\054\066\053\001\002\000\004\004\uffe6\001\002\000" +
    "\004\004\uffe3\001\002\000\004\004\uffe4\001\002\000\006" +
    "\004\u010e\015\271\001\002\000\036\003\uff93\007\uff93\011" +
    "\uff93\021\uff93\025\uff93\027\uff93\033\uff93\034\uff93\054\uff93" +
    "\062\uff93\063\uff93\064\uff93\065\uff93\066\uff93\001\002\000" +
    "\036\003\uffc9\007\uffc9\011\uffc9\021\uffc9\025\uffc9\027\uffc9" +
    "\033\uffc9\034\uffc9\054\uffc9\062\uffc9\063\uffc9\064\uffc9\065" +
    "\uffc9\066\uffc9\001\002\000\036\003\070\007\u0111\011\073" +
    "\021\066\025\102\027\103\033\062\034\072\054\064\062" +
    "\076\063\057\064\074\065\054\066\053\001\002\000\004" +
    "\033\u0112\001\002\000\004\004\u0113\001\002\000\052\003" +
    "\uff92\007\uff92\011\uff92\021\uff92\022\uff92\023\uff92\025\uff92" +
    "\026\uff92\027\uff92\032\uff92\033\uff92\034\uff92\035\uff92\054" +
    "\uff92\062\uff92\063\uff92\064\uff92\065\uff92\066\uff92\070\uff92" +
    "\001\002\000\030\044\120\045\114\051\121\054\107\055" +
    "\112\056\116\057\167\061\214\064\074\065\054\066\053" +
    "\001\002\000\006\052\u0116\060\220\001\002\000\004\004" +
    "\uff8c\001\002\000\004\061\u0118\001\002\000\004\052\u0119" +
    "\001\002\000\014\003\uff8a\004\uff8a\052\uff8a\053\uff8a\060" +
    "\uff8a\001\002\000\004\061\u011b\001\002\000\004\052\u011c" +
    "\001\002\000\014\003\uff89\004\uff89\052\uff89\053\uff89\060" +
    "\uff89\001\002\000\004\051\u011e\001\002\000\010\052\ufff0" +
    "\054\uffea\067\024\001\002\000\004\052\u0120\001\002\000" +
    "\004\012\033\001\002\000\004\004\u0122\001\002\000\040" +
    "\003\ufff4\007\ufff4\011\ufff4\021\ufff4\025\ufff4\027\ufff4\033" +
    "\ufff4\034\ufff4\054\ufff4\062\ufff4\063\ufff4\064\ufff4\065\ufff4" +
    "\066\ufff4\070\ufff4\001\002\000\040\003\070\007\uffc6\011" +
    "\073\021\066\025\102\027\103\033\062\034\072\054\064" +
    "\062\076\063\057\064\074\065\054\066\053\070\u0125\001" +
    "\002\000\004\007\u012a\001\002\000\026\044\120\045\114" +
    "\051\121\054\107\055\112\056\116\057\167\064\074\065" +
    "\054\066\053\001\002\000\040\003\070\007\uffc6\011\073" +
    "\021\066\025\102\027\103\033\062\034\072\054\064\062" +
    "\076\063\057\064\074\065\054\066\053\070\u0125\001\002" +
    "\000\004\007\uffc8\001\002\000\004\004\u0129\001\002\000" +
    "\004\007\uffc7\001\002\000\004\006\u012b\001\002\000\004" +
    "\004\u012c\001\002\000\014\002\ufff3\003\ufff3\005\ufff3\006" +
    "\ufff3\010\ufff3\001\002\000\004\002\ufffb\001\002\000\014" +
    "\002\ufff7\003\ufff7\005\ufff7\006\ufff7\010\ufff7\001\002\000" +
    "\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u012d\000\006\002\004\007\005\001\001\000\002\001" +
    "\001\000\002\001\001\000\014\003\010\004\012\005\007" +
    "\006\014\013\013\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\004\u012d\005\007\006\014" +
    "\013\013\001\001\000\014\003\u012c\004\012\005\007\006" +
    "\014\013\013\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\010\022\014\021\015\024\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\010\040\001\001\000\004\010\027\001\001\000\002" +
    "\001\001\000\004\017\037\001\001\000\004\017\033\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\017\042\001\001\000\002\001\001" +
    "\000\004\017\044\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\063\047\001\001\000\004\032\050\001\001" +
    "\000\032\027\051\031\066\033\076\034\057\040\100\042" +
    "\060\043\054\044\070\045\055\046\062\047\077\050\064" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\024\022\262\023" +
    "\114\024\110\025\112\031\116\051\u010c\052\264\053\261" +
    "\054\260\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\024\022\262\023\114\024\110\025\112" +
    "\031\116\051\335\052\264\053\261\054\260\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\016\227\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\012\162\001\001\000" +
    "\002\001\001\000\004\017\104\001\001\000\002\001\001" +
    "\000\014\022\107\023\114\024\110\025\112\031\116\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\024\136\025" +
    "\112\031\116\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\024\135\025\112\031\116\001" +
    "\001\000\014\022\121\023\114\024\110\025\112\031\116" +
    "\001\001\000\002\001\001\000\012\023\134\024\110\025" +
    "\112\031\116\001\001\000\012\023\125\024\110\025\112" +
    "\031\116\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\024\133\025\112\031\116\001\001\000\010\024\132" +
    "\025\112\031\116\001\001\000\010\024\131\025\112\031" +
    "\116\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\014\022\140\023\114\024\110\025\112\031\116" +
    "\001\001\000\004\030\141\001\001\000\002\001\001\000" +
    "\014\022\143\023\114\024\110\025\112\031\116\001\001" +
    "\000\002\001\001\000\004\077\145\001\001\000\004\032" +
    "\146\001\001\000\032\027\051\031\066\033\076\034\057" +
    "\040\100\042\060\043\054\044\070\045\055\046\062\047" +
    "\077\050\064\001\001\000\004\055\150\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\020\022" +
    "\154\023\114\024\110\025\112\031\116\057\156\060\155" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\014\022\161\023\114\024\110\025\112\031\116" +
    "\001\001\000\002\001\001\000\002\001\001\000\020\021" +
    "\167\022\164\023\114\024\110\025\112\027\165\031\116" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\061\171" +
    "\001\001\000\004\036\173\001\001\000\016\022\177\023" +
    "\114\024\110\025\112\031\116\056\201\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\076\205\001\001\000\014\022\204\023\114\024" +
    "\110\025\112\031\116\001\001\000\002\001\001\000\004" +
    "\032\206\001\001\000\032\027\051\031\066\033\076\034" +
    "\057\040\100\042\060\043\054\044\070\045\055\046\062" +
    "\047\077\050\064\001\001\000\004\075\210\001\001\000" +
    "\004\032\211\001\001\000\032\027\051\031\066\033\076" +
    "\034\057\040\100\042\060\043\054\044\070\045\055\046" +
    "\062\047\077\050\064\001\001\000\022\021\214\022\164" +
    "\023\114\024\110\025\112\027\165\031\116\035\215\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\020\021\221\022\164\023\114\024" +
    "\110\025\112\027\165\031\116\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\020\232\001\001\000\002\001\001\000" +
    "\004\026\233\001\001\000\002\001\001\000\020\021\235" +
    "\022\164\023\114\024\110\025\112\027\165\031\116\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\020\244\001\001\000\004\026\245\001\001\000\002" +
    "\001\001\000\004\020\247\001\001\000\004\026\250\001" +
    "\001\000\002\001\001\000\024\022\262\023\114\024\110" +
    "\025\112\031\116\051\315\052\264\053\261\054\260\001" +
    "\001\000\004\102\253\001\001\000\004\032\254\001\001" +
    "\000\032\027\051\031\066\033\076\034\057\040\100\042" +
    "\060\043\054\044\070\045\055\046\062\047\077\050\064" +
    "\001\001\000\002\001\001\000\024\022\262\023\114\024" +
    "\110\025\112\031\116\051\266\052\264\053\261\054\260" +
    "\001\001\000\020\022\262\023\114\024\110\025\112\031" +
    "\116\052\314\054\260\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\022\022\262\023\114\024" +
    "\110\025\112\031\116\052\264\053\313\054\260\001\001" +
    "\000\002\001\001\000\024\022\274\023\114\024\110\025" +
    "\112\031\116\051\275\052\264\053\261\054\260\001\001" +
    "\000\002\001\001\000\002\001\001\000\022\022\262\023" +
    "\114\024\110\025\112\031\116\052\264\053\271\054\260" +
    "\001\001\000\002\001\001\000\020\022\262\023\114\024" +
    "\110\025\112\031\116\052\273\054\260\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\014\022\312\023\114\024\110\025\112\031\116" +
    "\001\001\000\014\022\311\023\114\024\110\025\112\031" +
    "\116\001\001\000\014\022\310\023\114\024\110\025\112" +
    "\031\116\001\001\000\014\022\307\023\114\024\110\025" +
    "\112\031\116\001\001\000\014\022\306\023\114\024\110" +
    "\025\112\031\116\001\001\000\014\022\305\023\114\024" +
    "\110\025\112\031\116\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\101\317\001\001\000\004\032" +
    "\320\001\001\000\032\027\051\031\066\033\076\034\057" +
    "\040\100\042\060\043\054\044\070\045\055\046\062\047" +
    "\077\050\064\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\061\327\001\001\000\020\021" +
    "\326\022\164\023\114\024\110\025\112\027\165\031\116" +
    "\001\001\000\002\001\001\000\004\036\330\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\024\011\375\022\262\023\114\024\110\025" +
    "\112\031\116\052\264\053\313\054\260\001\001\000\004" +
    "\011\337\001\001\000\004\067\371\001\001\000\002\001" +
    "\001\000\004\065\341\001\001\000\004\032\342\001\001" +
    "\000\034\027\051\031\066\033\076\034\057\040\100\042" +
    "\060\043\054\044\070\045\055\046\062\047\077\050\064" +
    "\066\343\001\001\000\004\062\344\001\001\000\004\041" +
    "\345\001\001\000\002\001\001\000\024\022\262\023\114" +
    "\024\110\025\112\031\116\051\354\052\264\053\261\054" +
    "\260\001\001\000\002\001\001\000\004\074\351\001\001" +
    "\000\004\032\352\001\001\000\032\027\051\031\066\033" +
    "\076\034\057\040\100\042\060\043\054\044\070\045\055" +
    "\046\062\047\077\050\064\001\001\000\024\011\362\022" +
    "\262\023\114\024\110\025\112\031\116\052\264\053\313" +
    "\054\260\001\001\000\004\011\356\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\072\360\001\001\000\004" +
    "\032\361\001\001\000\032\027\051\031\066\033\076\034" +
    "\057\040\100\042\060\043\054\044\070\045\055\046\062" +
    "\047\077\050\064\001\001\000\002\001\001\000\004\073" +
    "\364\001\001\000\004\032\365\001\001\000\032\027\051" +
    "\031\066\033\076\034\057\040\100\042\060\043\054\044" +
    "\070\045\055\046\062\047\077\050\064\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\016\027" +
    "\051\031\066\034\057\040\100\044\372\050\064\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\070\377\001\001\000\004\032\u0100" +
    "\001\001\000\034\027\051\031\066\033\076\034\057\040" +
    "\100\042\060\043\054\044\070\045\055\046\062\047\077" +
    "\050\064\071\u0101\001\001\000\004\062\u0102\001\001\000" +
    "\004\041\u0103\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\020\021\u010b\022" +
    "\164\023\114\024\110\025\112\027\165\031\116\001\001" +
    "\000\020\021\u0109\022\164\023\114\024\110\025\112\027" +
    "\165\031\116\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\100\u010e\001" +
    "\001\000\004\032\u010f\001\001\000\032\027\051\031\066" +
    "\033\076\034\057\040\100\042\060\043\054\044\070\045" +
    "\055\046\062\047\077\050\064\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\022\021\214\022" +
    "\164\023\114\024\110\025\112\027\165\031\116\035\u0114" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\010\022\014\u011e\015\024\001\001\000\002\001\001" +
    "\000\004\017\u0120\001\001\000\002\001\001\000\004\064" +
    "\u0122\001\001\000\034\027\051\031\066\033\u0125\034\057" +
    "\037\u0123\040\100\042\060\043\054\044\070\045\055\046" +
    "\062\047\077\050\064\001\001\000\002\001\001\000\020" +
    "\021\u0127\022\164\023\114\024\110\025\112\027\165\031" +
    "\116\001\001\000\034\027\051\031\066\033\u0125\034\057" +
    "\037\u0126\040\100\042\060\043\054\044\070\045\055\046" +
    "\062\047\077\050\064\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$SintaxisVisual$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$SintaxisVisual$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$SintaxisVisual$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    private Symbol s;
    private VisualSemantica sem = new VisualSemantica();
    private boolean error = false;
    private MetodoVisual actual;
    private Errores errores = new Errores();
    private int linea;

    public void setLinea(int line){
            this.linea = line;
    }

    public void syntax_error(Symbol sym){
            errores.errorSintactico(sym, this.linea);
    }

    public void unrecovered_syntax_error(Symbol sym) throws java.lang.Exception{
            errores.errorSintactico(sym, this.linea); 
    }

    public VisualSemantica getVisual(){
            return sem;
    }
    
    public void reportarSem(String texto){
            errores.errorSemantico(getS(), texto, this.linea);
    }
    
    public Symbol getS(){
        return this.cur_token;
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$SintaxisVisual$actions {
  private final SintaxisVisual parser;

  /** Constructor */
  CUP$SintaxisVisual$actions(SintaxisVisual parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$SintaxisVisual$do_action_part00000000(
    int                        CUP$SintaxisVisual$act_num,
    java_cup.runtime.lr_parser CUP$SintaxisVisual$parser,
    java.util.Stack            CUP$SintaxisVisual$stack,
    int                        CUP$SintaxisVisual$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$SintaxisVisual$result;

      /* select the action based on the action number */
      switch (CUP$SintaxisVisual$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= VISUAL EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-1)).value;
		RESULT = start_val;
              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$SintaxisVisual$parser.done_parsing();
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // VISUAL ::= ESP STATESM 
            {
              Object RESULT =null;
		sem.mostrarMetodos();
              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("VISUAL",0, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // ESP ::= espacio 
            {
              Object RESULT =null;

              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("ESP",5, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // ESP ::= 
            {
              Object RESULT =null;

              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("ESP",5, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // PUBLIC ::= publicc 
            {
              Object RESULT =null;

              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("PUBLIC",9, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // PUBLIC ::= 
            {
              Object RESULT =null;

              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("PUBLIC",9, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // STATESM ::= STATEM STATESM 
            {
              Object RESULT =null;

              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("STATESM",1, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // STATESM ::= 
            {
              Object RESULT =null;

              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("STATESM",1, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // STATEM ::= SUB 
            {
              Object RESULT =null;

              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("STATEM",2, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // STATEM ::= FUNCTION 
            {
              Object RESULT =null;

              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("STATEM",2, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // STATEM ::= error STATEM 
            {
              Object RESULT =null;
		sem.eliminarAmbito(VisualSemantica.AMBITO); VisualSemantica.AMBITO = 0;
              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("STATEM",2, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // NT$0 ::= 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-4)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-4)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-4)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-2)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-2)).right;
		List<VariableVisual> e2 = (List<VariableVisual>)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-2)).value;
VisualSemantica.AMBITO += 1;
                                        MetodoVisual met = new MetodoVisual(e1, e2, VisualSemantica.VOID);
                                        actual = met;
                                        sem.addListVar(e2);
                                        if(!sem.addMetodo(met)){
                                                reportarSem("Metodo ya existente con id: <"+e1+"> con mismos parametros");}
              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("NT$0",49, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // SUB ::= PUBLIC subb id para LISTPARAMM parc espacio NT$0 STATEMENTS endd subb espacio 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-4)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-9)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-9)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-9)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-7)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-7)).right;
		List<VariableVisual> e2 = (List<VariableVisual>)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-7)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-3)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-3)).right;
		ListaTripletes e3 = (ListaTripletes)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-3)).value;
		sem.eliminarAmbito(VisualSemantica.AMBITO);
                                        VisualSemantica.AMBITO -= 1;
                                        actual.getTripletes().addAll(e3); sem.setDireccion(0);
              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("SUB",3, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-11)), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // NT$1 ::= 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-5)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-5)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-5)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-3)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-3)).right;
		List<VariableVisual> e2 = (List<VariableVisual>)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-3)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-1)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-1)).right;
		String e3 = (String)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-1)).value;
VisualSemantica.AMBITO += 1;
                                        MetodoVisual met = new MetodoVisual(e1, e2, e3);
                                        actual = met; met.setVisual(new VariableVisual(e1, VisualSemantica.AMBITO, e3,
                                        new AsignarValor(new TerminalOperator(e1), null, e3)));
                                        VariableVisual var = new VariableVisual(e1, VisualSemantica.AMBITO, e3, new TerminalOperator(e1)); var.setDireccion(-1);
                                        sem.getVariables().add(var);
                                        if(!sem.addListVar(e2)){
                                                reportarSem("Un parametro tiene el mismo nombre del de la función con id: <"+e1+">");
                                        } if(!sem.addMetodo(met)){
                                                reportarSem("Metodo ya existente con id: <"+e1+"> con mismos parametros");}
              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("NT$1",50, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // FUNCTION ::= PUBLIC functionn id para LISTPARAMM parc TYPE espacio NT$1 STATEMENTSF endd functionn espacio 
            {
              Object RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-4)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-10)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-10)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-10)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-8)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-8)).right;
		List<VariableVisual> e2 = (List<VariableVisual>)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-8)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-6)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-6)).right;
		String e3 = (String)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-6)).value;
		int e4left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-3)).left;
		int e4right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-3)).right;
		ListaTripletes e4 = (ListaTripletes)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-3)).value;
		sem.eliminarAmbito(VisualSemantica.AMBITO);
                                        VisualSemantica.AMBITO -= 1;
                                        actual.getTripletes().addAll(e4); sem.setDireccion(0);
              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("FUNCTION",4, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-12)), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // DEFVAR ::= dimm LISTVAR 
            {
              ListaTripletes RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()).right;
		List<VariableVisual> e1 = (List<VariableVisual>)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.peek()).value;
		if(VisualSemantica.tienenTipos(e1)&&sem.addListVar(e1)){}
                                        else{reportarSem("Error con el tipado de variables");} 
                                        RESULT = new ListaTripletes(sem.devolverTrip(e1));
              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("DEFVAR",38, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // LISTPARAMM ::= LISTPARAM 
            {
              List<VariableVisual> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()).right;
		List<VariableVisual> e1 = (List<VariableVisual>)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.peek()).value;
		RESULT = e1;
              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("LISTPARAMM",10, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // LISTPARAMM ::= 
            {
              List<VariableVisual> RESULT =null;
		RESULT = new ArrayList<>();
              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("LISTPARAMM",10, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // LISTPARAM ::= LISTPARAM coma BYVAL id TYPE 
            {
              List<VariableVisual> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-4)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-4)).right;
		List<VariableVisual> e1 = (List<VariableVisual>)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-4)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-1)).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-1)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()).right;
		String e3 = (String)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.peek()).value;
		e1.add(new VariableVisual(e2, (VisualSemantica.AMBITO + 1), e3, new TerminalOperator(e2)));
                                        RESULT = e1;
              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("LISTPARAM",11, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-4)), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // LISTPARAM ::= BYVAL id TYPE 
            {
              List<VariableVisual> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-1)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.peek()).value;
		List<VariableVisual> var = new ArrayList<>();
                        var.add(new VariableVisual(e1, (VisualSemantica.AMBITO + 1), e2, new TerminalOperator(e1)));
                        RESULT = var;
              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("LISTPARAM",11, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // LISTPARAM ::= LISTPARAM error BYVAL id TYPE 
            {
              List<VariableVisual> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-4)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-4)).right;
		List<VariableVisual> e1 = (List<VariableVisual>)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-4)).value;
		reportarSem("Error con los parametros, se esperaba una coma"); RESULT = e1;
              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("LISTPARAM",11, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-4)), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // LISTPARAM ::= LISTPARAM coma BYVAL error TYPE 
            {
              List<VariableVisual> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-4)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-4)).right;
		List<VariableVisual> e1 = (List<VariableVisual>)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-4)).value;
		reportarSem("Error con los parametros, se esperaba un id"); RESULT = e1;
              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("LISTPARAM",11, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-4)), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // BYVAL ::= byval 
            {
              Object RESULT =null;

              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("BYVAL",6, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // BYVAL ::= 
            {
              Object RESULT =null;

              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("BYVAL",6, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // LISTVAR ::= LISTVAR coma id TYPEE DEF 
            {
              List<VariableVisual> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-4)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-4)).right;
		List<VariableVisual> e1 = (List<VariableVisual>)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-4)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-2)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-2)).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-2)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-1)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-1)).right;
		String e3 = (String)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-1)).value;
		int e4left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()).left;
		int e4right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()).right;
		OperacionVisual e4 = (OperacionVisual)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.peek()).value;
		String tipo = VariableVisual.verificarTipo(e3, e4); VariableVisual va;
                        if(e4!=null){va = new VariableVisual(e2, VisualSemantica.AMBITO, tipo, 
                        new AsignarValor(new TerminalOperator(e2), e4.getTriplete(), OperacionVisual.obtenerTipo(e3)));
                        va.getTripletes().addAll(e4.mostrarTripletes());
                        }else{va = new VariableVisual(e2, VisualSemantica.AMBITO, tipo, 
                        new AsignarValor(new TerminalOperator(e2), null,OperacionVisual.obtenerTipo(e3)));}
                        va.setDefinido(e4 != null); va.setAstipo(e3 != null && e4 == null);
                        if(tipo == null && e3 != null && e4 != null){
                                reportarSem("No coincide el tipo con la asignación de la variable con id: " + e2);
                        } else if(e3 != null && e4 == null){
                                e1.add(va);
                                VisualSemantica.cambiarT(e1, e3);
                        } else {
                                e1.add(va);
                        } RESULT = e1;
              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("LISTVAR",12, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-4)), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // LISTVAR ::= id TYPEE DEF 
            {
              List<VariableVisual> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-1)).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-1)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()).right;
		OperacionVisual e3 = (OperacionVisual)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.peek()).value;
		List<VariableVisual> vars = new ArrayList<>(); String tipo = VariableVisual.verificarTipo(e2, e3); VariableVisual va;
                        if(e3!=null){va = new VariableVisual(e1, VisualSemantica.AMBITO, tipo, 
                        new AsignarValor(new TerminalOperator(e1), e3.getTriplete(),OperacionVisual.obtenerTipo(e2)));
                        va.getTripletes().addAll(e3.mostrarTripletes());
                        }else{va = new VariableVisual(e1, VisualSemantica.AMBITO, tipo, 
                        new AsignarValor(new TerminalOperator(e1), null,OperacionVisual.obtenerTipo(e2)));}
                        va.setDefinido(e3 != null); va.setAstipo(e2 != null && e3 == null);
                        if(tipo == null && e2 != null && e3 != null){
                                reportarSem("No coincide el tipo con la asignación de la variable con id: " + e1);
                        } vars.add(va); RESULT = vars;
              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("LISTVAR",12, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // LISTVAR ::= LISTVAR error id TYPEE DEF 
            {
              List<VariableVisual> RESULT =null;
		reportarSem("Error con la asignacion de variables, se esperaba una coma"); RESULT = new ArrayList<>();
              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("LISTVAR",12, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-4)), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // ASIGVAR ::= id igual EXPR 
            {
              ListaTripletes RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()).right;
		OperacionVisual e2 = (OperacionVisual)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.peek()).value;
		VariableVisual var = sem.existeVar(new VariableVisual(e1, VisualSemantica.AMBITO, null));
                                ListaTripletes trip = new ListaTripletes();
                                if(var==null || !var.getTipo().contains(e2.getTipo())){
                                reportarSem("No coincide el tipo con la asignación de la variable con id: " + e2);}
                                else{trip.addAll(e2.mostrarTripletes()); SumOperator sum = sem.devolverSum(e1);
                                trip.add(sum);
                                trip.add(new AsignarValor(sem.devolverDireccion(sum.getId()), e2.getTriplete(), null));}
                                RESULT = trip;
              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("ASIGVAR",30, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // ASIGVAR ::= error igual EXPR 
            {
              ListaTripletes RESULT =null;
		reportarSem("Error en la asignacion de variable, se esperaba un id"); RESULT = new ListaTripletes();
              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("ASIGVAR",30, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // ASIGVAR ::= id error EXPR 
            {
              ListaTripletes RESULT =null;
		reportarSem("Error en la asignacion de variable, se esperaba un igual"); RESULT = new ListaTripletes();
              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("ASIGVAR",30, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // ASIGVAR ::= id igual error 
            {
              ListaTripletes RESULT =null;
		reportarSem("Error en la asignacion de variable, se esperaba una operacion"); RESULT = new ListaTripletes();
              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("ASIGVAR",30, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // TYPE ::= ass integerr 
            {
              String RESULT =null;
		RESULT = VisualSemantica.INT;
              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("TYPE",13, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // TYPE ::= ass charr 
            {
              String RESULT =null;
		RESULT = VisualSemantica.CHAR;
              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("TYPE",13, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // TYPE ::= ass decimall 
            {
              String RESULT =null;
		RESULT = VisualSemantica.FLOAT;
              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("TYPE",13, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // TYPEE ::= ass integerr 
            {
              String RESULT =null;
		RESULT = VisualSemantica.INT;
              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("TYPEE",14, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // TYPEE ::= ass charr 
            {
              String RESULT =null;
		RESULT = VisualSemantica.CHAR;
              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("TYPEE",14, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // TYPEE ::= ass decimall 
            {
              String RESULT =null;
		RESULT = VisualSemantica.FLOAT;
              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("TYPEE",14, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // TYPEE ::= 
            {
              String RESULT =null;
		RESULT = null;
              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("TYPEE",14, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // DEF ::= igual EXPR 
            {
              OperacionVisual RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()).right;
		OperacionVisual e1 = (OperacionVisual)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.peek()).value;
		RESULT = e1;
              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("DEF",20, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // DEF ::= 
            {
              OperacionVisual RESULT =null;
		RESULT = null;
              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("DEF",20, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // OPERACION_A ::= OPERACION_A mas OPERACION_M 
            {
              OperacionVisual RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-2)).right;
		OperacionVisual e1 = (OperacionVisual)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()).right;
		OperacionVisual e2 = (OperacionVisual)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.peek()).value;
		if(e1!=null && e2 !=null){RESULT = new OperacionVisual(e1, e2,
                        new SumOperator(null, e1.getTriplete(), e2.getTriplete(), OperacionVisual.obtenerTipo(e1, e2)));};
              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("OPERACION_A",16, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // OPERACION_A ::= OPERACION_A menos OPERACION_M 
            {
              OperacionVisual RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-2)).right;
		OperacionVisual e1 = (OperacionVisual)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()).right;
		OperacionVisual e2 = (OperacionVisual)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.peek()).value;
		if(e1!=null && e2 !=null){RESULT = new OperacionVisual(e1, e2,
                        new RestOperator(null, e1.getTriplete(), e2.getTriplete(), OperacionVisual.obtenerTipo(e1, e2)));}
              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("OPERACION_A",16, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // OPERACION_A ::= OPERACION_M 
            {
              OperacionVisual RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()).right;
		OperacionVisual e1 = (OperacionVisual)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.peek()).value;
		RESULT = e1;
              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("OPERACION_A",16, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // OPERACION_M ::= OPERACION_M por OPERACION_U 
            {
              OperacionVisual RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-2)).right;
		OperacionVisual e1 = (OperacionVisual)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()).right;
		OperacionVisual e2 = (OperacionVisual)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.peek()).value;
		if(e1!=null && e2 !=null){RESULT = new OperacionVisual(e1, e2,
                                new PorOperator(null, e1.getTriplete(), e2.getTriplete(), OperacionVisual.obtenerTipo(e1, e2)));}
              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("OPERACION_M",17, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // OPERACION_M ::= OPERACION_M div OPERACION_U 
            {
              OperacionVisual RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-2)).right;
		OperacionVisual e1 = (OperacionVisual)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()).right;
		OperacionVisual e2 = (OperacionVisual)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.peek()).value;
		if(e1!=null && e2 !=null){RESULT = new OperacionVisual(e1, e2,
                                new DivOperator(null, e1.getTriplete(), e2.getTriplete(), OperacionVisual.obtenerTipo(e1, e2)));}
              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("OPERACION_M",17, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // OPERACION_M ::= OPERACION_M mod OPERACION_U 
            {
              OperacionVisual RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-2)).right;
		OperacionVisual e1 = (OperacionVisual)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()).right;
		OperacionVisual e2 = (OperacionVisual)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.peek()).value;
		if(e1!=null && e2 !=null){RESULT = new OperacionVisual(e1, e2,
                                new ModOperator(null, e1.getTriplete(), e2.getTriplete(), OperacionVisual.obtenerTipo(e1, e2)));}
              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("OPERACION_M",17, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // OPERACION_M ::= OPERACION_U 
            {
              OperacionVisual RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()).right;
		OperacionVisual e1 = (OperacionVisual)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.peek()).value;
		RESULT = e1;
              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("OPERACION_M",17, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // OPERACION_U ::= menos OPERACION_U 
            {
              OperacionVisual RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()).right;
		OperacionVisual e1 = (OperacionVisual)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.peek()).value;
		RESULT = new OperacionVisual(new OperacionVisual(PythonSemantica.INT, new TerminalOperator("0")),
                        e1, new RestOperator(null, new TerminalOperator("0"), e1.getTriplete(), OperacionVisual.obtenerTipo(e1)));
              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("OPERACION_U",18, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // OPERACION_U ::= mas OPERACION_U 
            {
              OperacionVisual RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()).right;
		OperacionVisual e1 = (OperacionVisual)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.peek()).value;
		RESULT = e1;
              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("OPERACION_U",18, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // OPERACION_U ::= ATOM 
            {
              OperacionVisual RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()).right;
		OperacionVisual e1 = (OperacionVisual)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.peek()).value;
		RESULT = e1;
              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("OPERACION_U",18, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // OPERACION_U ::= LLAMADA_METODO 
            {
              OperacionVisual RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()).right;
		OperacionVisual e1 = (OperacionVisual)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.peek()).value;
		RESULT = e1;
              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("OPERACION_U",18, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // ATOM ::= id 
            {
              OperacionVisual RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.peek()).value;
		VariableVisual var = sem.existeVar(new VariableVisual(e1, VisualSemantica.AMBITO, null)); 
                if(var==null){
                        reportarSem("No existe la variable con id: " + e1);
                } else {
                        SumOperator sum = sem.devolverSum(e1);
                        OperacionVisual op = new OperacionVisual(var.getTipo(), sem.devolverDireccion(sum.getId()));
                        op.getTripletes().add(sum);
                        RESULT = op;
                }
              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("ATOM",19, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // ATOM ::= entero 
            {
              OperacionVisual RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.peek()).value;
		RESULT = new OperacionVisual(VisualSemantica.INT, new TerminalOperator(e1));
              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("ATOM",19, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // ATOM ::= decimal 
            {
              OperacionVisual RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.peek()).value;
		RESULT = new OperacionVisual(VisualSemantica.FLOAT, new TerminalOperator(e1));
              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("ATOM",19, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // ATOM ::= para OPERACION_A parc 
            {
              OperacionVisual RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-1)).right;
		OperacionVisual e1 = (OperacionVisual)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-1)).value;
		RESULT = e1;
              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("ATOM",19, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // STATEMENTS ::= STATEMENTS STATEMENT 
            {
              ListaTripletes RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-1)).right;
		ListaTripletes e1 = (ListaTripletes)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()).right;
		ListaTripletes e2 = (ListaTripletes)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.peek()).value;
		e1.addAll(e2); RESULT = e1;
              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("STATEMENTS",24, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // STATEMENTS ::= 
            {
              ListaTripletes RESULT =null;
		RESULT = new ListaTripletes();
              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("STATEMENTS",24, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // STATEMENTSF ::= STATEMENT STATEMENTSF 
            {
              ListaTripletes RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-1)).right;
		ListaTripletes e1 = (ListaTripletes)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()).right;
		ListaTripletes e2 = (ListaTripletes)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.peek()).value;
		if(e1.isRet() && e2.isRet()){
                                                        reportarSem("ya existe varios returns, algunos no se toman en cuenta");
                                                }else {e1.addAll(e2);} RESULT = e1;
              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("STATEMENTSF",29, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // STATEMENTSF ::= returnn EXPR espacio 
            {
              ListaTripletes RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-1)).right;
		OperacionVisual e1 = (OperacionVisual)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-1)).value;
		ListaTripletes tri = new ListaTripletes();
                if(e1 == null || !actual.getTIPO().contains(e1.getTipo())){
                        reportarSem("No coincide el tipo del return con el tipo de la función con id: " + actual.getId());}
                else{
                        tri.setRet(true);
                        tri.addAll(e1.mostrarTripletes());
                        tri.add(new Return(e1.getTriplete()));}
                        RESULT = tri;
              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("STATEMENTSF",29, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // STATEMENTSF ::= 
            {
              ListaTripletes RESULT =null;
		RESULT = new ListaTripletes();
              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("STATEMENTSF",29, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // EXPR ::= OPERACION_A 
            {
              OperacionVisual RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()).right;
		OperacionVisual e1 = (OperacionVisual)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.peek()).value;
		RESULT = e1;
              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("EXPR",15, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // EXPR ::= INPUT 
            {
              OperacionVisual RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()).right;
		OperacionVisual e1 = (OperacionVisual)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.peek()).value;
		RESULT = e1;
              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("EXPR",15, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // EXPR ::= character 
            {
              OperacionVisual RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.peek()).value;
		RESULT = new OperacionVisual(VisualSemantica.CHAR, new TerminalOperator("'"+e1+"'"));
              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("EXPR",15, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // STATEMENT ::= IF_ELSE 
            {
              ListaTripletes RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()).right;
		ListaTripletes e1 = (ListaTripletes)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.peek()).value;
		RESULT = e1;
              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("STATEMENT",25, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // STATEMENT ::= SELECT 
            {
              ListaTripletes RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()).right;
		ListaTripletes e1 = (ListaTripletes)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.peek()).value;
		RESULT = e1;
              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("STATEMENT",25, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // STATEMENT ::= FOR 
            {
              ListaTripletes RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()).right;
		ListaTripletes e1 = (ListaTripletes)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.peek()).value;
		RESULT = e1;
              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("STATEMENT",25, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // STATEMENT ::= WHILE 
            {
              ListaTripletes RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()).right;
		ListaTripletes e1 = (ListaTripletes)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.peek()).value;
		RESULT = e1;
              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("STATEMENT",25, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // STATEMENT ::= DO_WHILE 
            {
              ListaTripletes RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()).right;
		ListaTripletes e1 = (ListaTripletes)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.peek()).value;
		RESULT = e1;
              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("STATEMENT",25, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // STATEMENT ::= STATEMENTLINE espacio 
            {
              ListaTripletes RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-1)).right;
		ListaTripletes e1 = (ListaTripletes)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-1)).value;
		RESULT = e1;
              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("STATEMENT",25, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // STATEMENT ::= error 
            {
              ListaTripletes RESULT =null;
		RESULT = new ListaTripletes();
              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("STATEMENT",25, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // NT$2 ::= 
            {
              ListaTripletes RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-2)).right;
		CondicionPrograma e1 = (CondicionPrograma)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-2)).value;
VisualSemantica.AMBITO += 1;
              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("NT$2",51, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // NT$3 ::= 
            {
              ListaTripletes RESULT =(ListaTripletes) ((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-1)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-4)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-4)).right;
		CondicionPrograma e1 = (CondicionPrograma)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-4)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()).right;
		ListaTripletes e2 = (ListaTripletes)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.peek()).value;
sem.eliminarAmbito(VisualSemantica.AMBITO); VisualSemantica.AMBITO -= 1;
              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("NT$3",52, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // IF_ELSE ::= iff CONDICION THEN espacio NT$2 STATEMENTS NT$3 ELSE_IF ELSE endd iff espacio 
            {
              ListaTripletes RESULT =null;
              // propagate RESULT from NT$3
                RESULT = (ListaTripletes) ((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-5)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-10)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-10)).right;
		CondicionPrograma e1 = (CondicionPrograma)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-10)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-6)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-6)).right;
		ListaTripletes e2 = (ListaTripletes)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-6)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-4)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-4)).right;
		Else_Operator e3 = (Else_Operator)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-4)).value;
		int e4left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-3)).left;
		int e4right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-3)).right;
		ListaTripletes e4 = (ListaTripletes)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-3)).value;
		e3.agregarIf(e1, e2); RESULT = e3.juntarTripletes(e4);
              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("IF_ELSE",32, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-11)), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // NT$4 ::= 
            {
              ListaTripletes RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-1)).right;
		CondicionPrograma e1 = (CondicionPrograma)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-1)).value;
VisualSemantica.AMBITO += 1;
              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("NT$4",53, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // IF_ELSE ::= iff CONDICION thenn NT$4 STATEMENTLINE espacio 
            {
              ListaTripletes RESULT =null;
              // propagate RESULT from NT$4
                RESULT = (ListaTripletes) ((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-2)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-4)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-4)).right;
		CondicionPrograma e1 = (CondicionPrograma)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-4)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-1)).right;
		ListaTripletes e2 = (ListaTripletes)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-1)).value;
		sem.eliminarAmbito(VisualSemantica.AMBITO); VisualSemantica.AMBITO -= 1; 
                RESULT = Else_Operator.IFSIMPLE(e1, e2);
              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("IF_ELSE",32, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-5)), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // NT$5 ::= 
            {
              ListaTripletes RESULT =null;
reportarSem("Error en el if, se esperaba la condicion"); VisualSemantica.AMBITO += 1;
              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("NT$5",54, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // NT$6 ::= 
            {
              ListaTripletes RESULT =(ListaTripletes) ((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()).right;
		ListaTripletes e2 = (ListaTripletes)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.peek()).value;
sem.eliminarAmbito(VisualSemantica.AMBITO); VisualSemantica.AMBITO -= 1;
              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("NT$6",55, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // IF_ELSE ::= iff error THEN espacio NT$5 STATEMENTS NT$6 ELSE_IF ELSE endd iff espacio 
            {
              ListaTripletes RESULT =null;
              // propagate RESULT from NT$6
                RESULT = (ListaTripletes) ((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-5)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-6)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-6)).right;
		ListaTripletes e2 = (ListaTripletes)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-6)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-4)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-4)).right;
		Else_Operator e3 = (Else_Operator)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-4)).value;
		int e4left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-3)).left;
		int e4right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-3)).right;
		ListaTripletes e4 = (ListaTripletes)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-3)).value;
		RESULT = new ListaTripletes();
              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("IF_ELSE",32, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-11)), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // NT$7 ::= 
            {
              Else_Operator RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-4)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-4)).right;
		Else_Operator e1 = (Else_Operator)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-4)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-2)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-2)).right;
		CondicionPrograma e2 = (CondicionPrograma)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-2)).value;
VisualSemantica.AMBITO += 1;
              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("NT$7",56, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // ELSE_IF ::= ELSE_IF elseiff CONDICION THEN espacio NT$7 STATEMENTS 
            {
              Else_Operator RESULT =null;
              // propagate RESULT from NT$7
                RESULT = (Else_Operator) ((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-1)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-6)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-6)).right;
		Else_Operator e1 = (Else_Operator)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-6)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-4)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-4)).right;
		CondicionPrograma e2 = (CondicionPrograma)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-4)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()).right;
		ListaTripletes e3 = (ListaTripletes)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.peek()).value;
		sem.eliminarAmbito(VisualSemantica.AMBITO); VisualSemantica.AMBITO -= 1; RESULT = e1.agregarElseIf(e2, e3);
              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("ELSE_IF",48, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-6)), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // ELSE_IF ::= 
            {
              Else_Operator RESULT =null;
		RESULT = new Else_Operator();
              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("ELSE_IF",48, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // NT$8 ::= 
            {
              Else_Operator RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-4)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-4)).right;
		Else_Operator e1 = (Else_Operator)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-4)).value;
reportarSem("Error en el else if, se esperaba la condicion"); VisualSemantica.AMBITO += 1;
              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("NT$8",57, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // ELSE_IF ::= ELSE_IF elseiff error THEN espacio NT$8 STATEMENTS 
            {
              Else_Operator RESULT =null;
              // propagate RESULT from NT$8
                RESULT = (Else_Operator) ((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-1)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-6)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-6)).right;
		Else_Operator e1 = (Else_Operator)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-6)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()).right;
		ListaTripletes e3 = (ListaTripletes)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.peek()).value;
		sem.eliminarAmbito(VisualSemantica.AMBITO); VisualSemantica.AMBITO -= 1; RESULT = new Else_Operator();
              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("ELSE_IF",48, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-6)), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // NT$9 ::= 
            {
              ListaTripletes RESULT =null;
VisualSemantica.AMBITO += 1;
              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("NT$9",58, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // ELSE ::= elsee espacio NT$9 STATEMENTS 
            {
              ListaTripletes RESULT =null;
              // propagate RESULT from NT$9
                RESULT = (ListaTripletes) ((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-1)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()).right;
		ListaTripletes e1 = (ListaTripletes)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.peek()).value;
		sem.eliminarAmbito(VisualSemantica.AMBITO); VisualSemantica.AMBITO -= 1;
        RESULT = e1;
              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("ELSE",31, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // ELSE ::= 
            {
              ListaTripletes RESULT =null;
		RESULT = new ListaTripletes();
              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("ELSE",31, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // THEN ::= thenn 
            {
              Object RESULT =null;

              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("THEN",7, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // THEN ::= 
            {
              Object RESULT =null;

              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("THEN",7, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // STATEMENTLINE ::= CONSOLEWRITE 
            {
              ListaTripletes RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()).right;
		ListaTripletes e1 = (ListaTripletes)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.peek()).value;
		RESULT = e1;
              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("STATEMENTLINE",34, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // STATEMENTLINE ::= INPUT 
            {
              ListaTripletes RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()).right;
		OperacionVisual e1 = (OperacionVisual)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.peek()).value;
		AsignarValor vl = new AsignarValor(new AsignarTemporal(null, null, e1.getTipo()),null
                ,OperacionVisual.obtenerTipo(e1)); 
                ListaTripletes tri = new ListaTripletes(); tri.add(vl); 
                tri.add(new AsignarValor(vl.getOperando1(), e1.getTriplete(), null)); RESULT = tri;
              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("STATEMENTLINE",34, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // STATEMENTLINE ::= DEFVAR 
            {
              ListaTripletes RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()).right;
		ListaTripletes e1 = (ListaTripletes)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.peek()).value;
		RESULT = e1;
              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("STATEMENTLINE",34, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // STATEMENTLINE ::= ASIGVAR 
            {
              ListaTripletes RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()).right;
		ListaTripletes e1 = (ListaTripletes)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.peek()).value;
		RESULT = e1;
              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("STATEMENTLINE",34, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // STATEMENTLINE ::= LLAMADA_METODO 
            {
              ListaTripletes RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()).right;
		OperacionVisual e1 = (OperacionVisual)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.peek()).value;
		RESULT = new ListaTripletes(e1.getTripletes());
              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("STATEMENTLINE",34, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // SELECT ::= selectt CA EXPR espacio CASES CASEELSE endd selectt espacio 
            {
              ListaTripletes RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-6)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-6)).right;
		OperacionVisual e1 = (OperacionVisual)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-6)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-4)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-4)).right;
		CaseVisual e2 = (CaseVisual)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-4)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-3)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-3)).right;
		ListaTripletes e3 = (ListaTripletes)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-3)).value;
		RESULT = e2.agregarDefault(e1, e3);
              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("SELECT",33, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-8)), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // SELECT ::= error espacio CASES CASEELSE endd selectt espacio 
            {
              ListaTripletes RESULT =null;
		 reportarSem("Error en el select, no hay un inicio correcto");
        RESULT = new ListaTripletes();
              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("SELECT",33, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-6)), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // CA ::= casee 
            {
              Object RESULT =null;

              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("CA",8, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // CA ::= 
            {
              Object RESULT =null;

              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("CA",8, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // NT$10 ::= 
            {
              ListaTripletes RESULT =null;
VisualSemantica.AMBITO += 1;
              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("NT$10",59, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // CASEELSE ::= casee elsee espacio NT$10 STATEMENTS 
            {
              ListaTripletes RESULT =null;
              // propagate RESULT from NT$10
                RESULT = (ListaTripletes) ((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-1)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()).right;
		ListaTripletes e1 = (ListaTripletes)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.peek()).value;
		sem.eliminarAmbito(VisualSemantica.AMBITO); VisualSemantica.AMBITO -= 1; RESULT = e1;
              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("CASEELSE",28, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-4)), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // CASEELSE ::= 
            {
              ListaTripletes RESULT =null;

              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("CASEELSE",28, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // NT$11 ::= 
            {
              CaseVisual RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-3)).right;
		CaseVisual e1 = (CaseVisual)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-1)).right;
		List<OperacionVisual> e2 = (List<OperacionVisual>)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-1)).value;
VisualSemantica.AMBITO += 1;
              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("NT$11",60, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // CASES ::= CASES casee LIST_CASE espacio NT$11 STATEMENTS 
            {
              CaseVisual RESULT =null;
              // propagate RESULT from NT$11
                RESULT = (CaseVisual) ((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-1)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-5)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-5)).right;
		CaseVisual e1 = (CaseVisual)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-5)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-3)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-3)).right;
		List<OperacionVisual> e2 = (List<OperacionVisual>)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-3)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()).right;
		ListaTripletes e3 = (ListaTripletes)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.peek()).value;
		sem.eliminarAmbito(VisualSemantica.AMBITO); VisualSemantica.AMBITO -= 1; RESULT = e1.agregarCase(e2, e3);
              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("CASES",47, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-5)), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // CASES ::= 
            {
              CaseVisual RESULT =null;
		RESULT = new CaseVisual();
              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("CASES",47, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // LIST_CASE ::= LIST_CASE coma OPERACION_A 
            {
              List<OperacionVisual> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-2)).right;
		List<OperacionVisual> e1 = (List<OperacionVisual>)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()).right;
		OperacionVisual e2 = (OperacionVisual)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.peek()).value;
		e1.add(e2); RESULT = e1;
              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("LIST_CASE",44, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // LIST_CASE ::= OPERACION_A 
            {
              List<OperacionVisual> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()).right;
		OperacionVisual e1 = (OperacionVisual)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.peek()).value;
		List<OperacionVisual> op = new ArrayList<>(); op.add(e1); RESULT =op;
              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("LIST_CASE",44, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // NT$12 ::= 
            {
              ListaTripletes RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-7)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-7)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-7)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-6)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-6)).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-6)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-4)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-4)).right;
		OperacionVisual e3 = (OperacionVisual)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-4)).value;
		int e4left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-2)).left;
		int e4right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-2)).right;
		OperacionVisual e4 = (OperacionVisual)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-2)).value;
		int e5left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-1)).left;
		int e5right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-1)).right;
		OperacionVisual e5 = (OperacionVisual)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-1)).value;
VisualSemantica.AMBITO += 1;
                VariableVisual vr = new VariableVisual(e1, VisualSemantica.AMBITO, null);
                if(sem.addVar(vr)){
                        
                }
              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("NT$12",61, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // FOR ::= forr id TYPE igual OPERACION_A to OPERACION_A STEP espacio NT$12 STATEMENTS nextt ID espacio 
            {
              ListaTripletes RESULT =null;
              // propagate RESULT from NT$12
                RESULT = (ListaTripletes) ((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-4)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-12)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-12)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-12)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-11)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-11)).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-11)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-9)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-9)).right;
		OperacionVisual e3 = (OperacionVisual)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-9)).value;
		int e4left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-7)).left;
		int e4right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-7)).right;
		OperacionVisual e4 = (OperacionVisual)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-7)).value;
		int e5left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-6)).left;
		int e5right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-6)).right;
		OperacionVisual e5 = (OperacionVisual)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-6)).value;
		int e6left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-3)).left;
		int e6right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-3)).right;
		ListaTripletes e6 = (ListaTripletes)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-3)).value;
		int e7left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-1)).left;
		int e7right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-1)).right;
		String e7 = (String)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-1)).value;
		sem.eliminarAmbito(VisualSemantica.AMBITO); VisualSemantica.AMBITO -= 1;
                if(e7!=null && !e1.equals(e1)){
                        reportarSem("No coincide el id del for, con el next del mismo for, id1: " + e1 + "  id2: " + e7);}
                else{RESULT = Else_Operator.FORV(sem.obtenerDireccion(e1), e2, e3, e4, e5, e6);}
              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("FOR",37, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-13)), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // ID ::= id 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.peek()).value;
		RESULT = e1;
              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("ID",43, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // ID ::= 
            {
              String RESULT =null;
		RESULT = null;
              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("ID",43, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // STEP ::= stepp OPERACION_A 
            {
              OperacionVisual RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()).right;
		OperacionVisual e1 = (OperacionVisual)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.peek()).value;
		RESULT = e1;
              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("STEP",22, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // NT$13 ::= 
            {
              ListaTripletes RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-1)).right;
		CondicionPrograma e1 = (CondicionPrograma)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-1)).value;
VisualSemantica.AMBITO += 1;
              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("NT$13",62, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // WHILE ::= whilee CONDICION espacio NT$13 STATEMENTS endd whilee espacio 
            {
              ListaTripletes RESULT =null;
              // propagate RESULT from NT$13
                RESULT = (ListaTripletes) ((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-4)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-6)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-6)).right;
		CondicionPrograma e1 = (CondicionPrograma)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-6)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-3)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-3)).right;
		ListaTripletes e2 = (ListaTripletes)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-3)).value;
		sem.eliminarAmbito(VisualSemantica.AMBITO); VisualSemantica.AMBITO -= 1; RESULT = Else_Operator.WHILE(e1, e2);
              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("WHILE",35, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-7)), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // NT$14 ::= 
            {
              ListaTripletes RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-1)).right;
		CondicionPrograma e1 = (CondicionPrograma)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-1)).value;
VisualSemantica.AMBITO += 1;
              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("NT$14",63, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // DO_WHILE ::= doo whilee CONDICION espacio NT$14 STATEMENTS loopp espacio 
            {
              ListaTripletes RESULT =null;
              // propagate RESULT from NT$14
                RESULT = (ListaTripletes) ((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-3)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-5)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-5)).right;
		CondicionPrograma e1 = (CondicionPrograma)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-5)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-2)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-2)).right;
		ListaTripletes e2 = (ListaTripletes)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-2)).value;
		sem.eliminarAmbito(VisualSemantica.AMBITO); VisualSemantica.AMBITO -= 1; RESULT = Else_Operator.DOWHILE(e1, e2);
              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("DO_WHILE",36, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-7)), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // NT$15 ::= 
            {
              ListaTripletes RESULT =null;
VisualSemantica.AMBITO += 1;
              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("NT$15",64, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // DO_WHILE ::= doo espacio NT$15 STATEMENTS loopp whilee CONDICION espacio 
            {
              ListaTripletes RESULT =null;
              // propagate RESULT from NT$15
                RESULT = (ListaTripletes) ((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-5)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-4)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-4)).right;
		ListaTripletes e2 = (ListaTripletes)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-4)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-1)).right;
		CondicionPrograma e1 = (CondicionPrograma)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-1)).value;
		sem.eliminarAmbito(VisualSemantica.AMBITO); VisualSemantica.AMBITO -= 1; RESULT = Else_Operator.DOWHILE(e1, e2);
              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("DO_WHILE",36, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-7)), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // CONSOLEWRITE ::= write para STRING parc 
            {
              ListaTripletes RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-1)).right;
		ListaTripletes e1 = (ListaTripletes)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-1)).value;
		RESULT = e1;
              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("CONSOLEWRITE",26, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // CONSOLEWRITE ::= writeln para STRING parc 
            {
              ListaTripletes RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-1)).right;
		ListaTripletes e1 = (ListaTripletes)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-1)).value;
		e1.add(new Printf("\\n")); RESULT = e1;
              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("CONSOLEWRITE",26, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // INPUT ::= charinput para string parc 
            {
              OperacionVisual RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-1)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-1)).value;
		OperacionVisual op = new OperacionVisual(VisualSemantica.CHAR,
                                new Input("%d"));
                                op.getTripletes().add(new Printf(e1));
                                RESULT = op;
              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("INPUT",21, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // INPUT ::= floatinput para string parc 
            {
              OperacionVisual RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-1)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-1)).value;
		OperacionVisual op = new OperacionVisual(VisualSemantica.FLOAT,
                                new Input("%c"));
                                op.getTripletes().add(new Printf(e1));
                                RESULT = op;
              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("INPUT",21, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // INPUT ::= intinput para string parc 
            {
              OperacionVisual RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-1)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-1)).value;
		OperacionVisual op = new OperacionVisual(VisualSemantica.INT,
                                new Input("%f"));
                                op.getTripletes().add(new Printf(e1));
                                RESULT = op;
              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("INPUT",21, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // CONDICION ::= CONDICION orr AND 
            {
              CondicionPrograma RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-2)).right;
		CondicionPrograma e1 = (CondicionPrograma)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()).right;
		CondicionPrograma e2 = (CondicionPrograma)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.peek()).value;
		RESULT = IfPrograma.OR(e1, e2);
              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("CONDICION",39, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // CONDICION ::= AND 
            {
              CondicionPrograma RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()).right;
		CondicionPrograma e1 = (CondicionPrograma)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.peek()).value;
		RESULT = e1;
              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("CONDICION",39, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // CONDICION ::= error AND 
            {
              CondicionPrograma RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()).right;
		CondicionPrograma e1 = (CondicionPrograma)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.peek()).value;
		RESULT = e1;
              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("CONDICION",39, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // AND ::= AND andd NOT 
            {
              CondicionPrograma RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-2)).right;
		CondicionPrograma e1 = (CondicionPrograma)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()).right;
		CondicionPrograma e2 = (CondicionPrograma)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.peek()).value;
		RESULT = IfPrograma.AND(e1, e2);
              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("AND",41, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // AND ::= NOT 
            {
              CondicionPrograma RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()).right;
		CondicionPrograma e1 = (CondicionPrograma)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.peek()).value;
		RESULT = e1;
              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("AND",41, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // NOT ::= nott NOT 
            {
              CondicionPrograma RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()).right;
		CondicionPrograma e1 = (CondicionPrograma)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.peek()).value;
		RESULT = IfPrograma.NOT(e1);
              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("NOT",40, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // NOT ::= COMPARACION 
            {
              CondicionPrograma RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()).right;
		Triplete e1 = (Triplete)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.peek()).value;
		RESULT = new IfPrograma(new If_Operator(e1, new Etiqueta()), ((CondicionalOperator)e1).getTripletes());
              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("NOT",40, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // NOT ::= para CONDICION parc 
            {
              CondicionPrograma RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-1)).right;
		CondicionPrograma e1 = (CondicionPrograma)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-1)).value;
		RESULT = e1;
              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("NOT",40, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // COMPARACION ::= OPERACION_A igual OPERACION_A 
            {
              Triplete RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-2)).right;
		OperacionVisual e1 = (OperacionVisual)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()).right;
		OperacionVisual e2 = (OperacionVisual)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.peek()).value;
		RESULT = new IgualOperator(e1.getTriplete(), e2.getTriplete(),
                e1.getTripletes(), e2.getTripletes());
              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("COMPARACION",42, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // COMPARACION ::= OPERACION_A noigual OPERACION_A 
            {
              Triplete RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-2)).right;
		OperacionVisual e1 = (OperacionVisual)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()).right;
		OperacionVisual e2 = (OperacionVisual)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.peek()).value;
		RESULT = new NoIgualOperator(e1.getTriplete(), e2.getTriplete(),
                e1.getTripletes(), e2.getTripletes());
              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("COMPARACION",42, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // COMPARACION ::= OPERACION_A menor OPERACION_A 
            {
              Triplete RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-2)).right;
		OperacionVisual e1 = (OperacionVisual)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()).right;
		OperacionVisual e2 = (OperacionVisual)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.peek()).value;
		RESULT = new MenorOperator(e1.getTriplete(), e2.getTriplete(),
                e1.getTripletes(), e2.getTripletes());
              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("COMPARACION",42, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // COMPARACION ::= OPERACION_A menorig OPERACION_A 
            {
              Triplete RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-2)).right;
		OperacionVisual e1 = (OperacionVisual)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()).right;
		OperacionVisual e2 = (OperacionVisual)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.peek()).value;
		RESULT = new MenorIgOperator(e1.getTriplete(), e2.getTriplete(),
                e1.getTripletes(), e2.getTripletes());
              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("COMPARACION",42, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // COMPARACION ::= OPERACION_A mayor OPERACION_A 
            {
              Triplete RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-2)).right;
		OperacionVisual e1 = (OperacionVisual)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()).right;
		OperacionVisual e2 = (OperacionVisual)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.peek()).value;
		RESULT = new MayorOperator(e1.getTriplete(), e2.getTriplete(),
                e1.getTripletes(), e2.getTripletes());
              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("COMPARACION",42, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // COMPARACION ::= OPERACION_A mayorig OPERACION_A 
            {
              Triplete RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-2)).right;
		OperacionVisual e1 = (OperacionVisual)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()).right;
		OperacionVisual e2 = (OperacionVisual)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.peek()).value;
		RESULT = new MayorIgOperator(e1.getTriplete(), e2.getTriplete(),
                e1.getTripletes(), e2.getTripletes());
              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("COMPARACION",42, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // STRING ::= STRING y EXPR 
            {
              ListaTripletes RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-2)).right;
		ListaTripletes e1 = (ListaTripletes)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()).right;
		OperacionVisual e2 = (OperacionVisual)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.peek()).value;
		e1.addAll(e2.getTripletes()); e1.add(new Printf(Input.tipoVisual(e2), e2.getTriplete(), Input.tipoVisualf(e2))); RESULT = e1;
              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("STRING",27, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // STRING ::= STRING y string 
            {
              ListaTripletes RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-2)).right;
		ListaTripletes e1 = (ListaTripletes)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.peek()).value;
		e1.add(new Printf(e2)); RESULT = e1;
              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("STRING",27, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // STRING ::= EXPR 
            {
              ListaTripletes RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()).right;
		OperacionVisual e1 = (OperacionVisual)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.peek()).value;
		ListaTripletes tri = new ListaTripletes(); tri.addAll(e1.getTripletes());
                tri.add(new Printf(Input.tipoVisual(e1), e1.getTriplete(), Input.tipoVisualf(e1)));
                RESULT = tri;
              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("STRING",27, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // STRING ::= string 
            {
              ListaTripletes RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.peek()).value;
		ListaTripletes tri = new ListaTripletes(); tri.add(new Printf(e1));
                RESULT = tri;
              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("STRING",27, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // LLAMADA_METODO ::= id para LIST_PARAM parc 
            {
              OperacionVisual RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-3)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-1)).right;
		List<OperacionVisual> e2 = (List<OperacionVisual>)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-1)).value;
		MetodoVisual met = sem.existeMetodo(e1, e2);
                        if(met == null){
                                reportarSem("Metodo de Visual no existente con id: <" + e1 + ">");
                        }else {
                                List<Triplete> tri = new ArrayList<>();
                                tri.addAll(met.verMetodo(sem.getVariables().size(), e2));
                                SumOperator s = new SumOperator(null, new P(), new TerminalOperator(""+sem.getVariables().size()),"int");
                                tri.add(s);
                                OperacionVisual op = new OperacionVisual(met.getTIPO(), new Stack(s));
                                op.getTripletes().addAll(tri);
                                RESULT = op;
                        }
              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("LLAMADA_METODO",23, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // LIST_PARAM ::= LIST 
            {
              List<OperacionVisual> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()).right;
		List<OperacionVisual> e1 = (List<OperacionVisual>)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.peek()).value;
		RESULT = e1;
              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("LIST_PARAM",46, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // LIST_PARAM ::= 
            {
              List<OperacionVisual> RESULT =null;
		RESULT = new ArrayList<>();
              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("LIST_PARAM",46, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // LIST ::= LIST_PARAM coma OPERACION_A 
            {
              List<OperacionVisual> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-2)).right;
		List<OperacionVisual> e1 = (List<OperacionVisual>)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()).right;
		OperacionVisual e2 = (OperacionVisual)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.peek()).value;
		e1.add(e2); RESULT = e1;
              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("LIST",45, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // LIST ::= OPERACION_A 
            {
              List<OperacionVisual> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()).right;
		OperacionVisual e1 = (OperacionVisual)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.peek()).value;
		List<OperacionVisual> params = new ArrayList<>(); params.add(e1); RESULT = params;
              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("LIST",45, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$SintaxisVisual$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$SintaxisVisual$do_action(
    int                        CUP$SintaxisVisual$act_num,
    java_cup.runtime.lr_parser CUP$SintaxisVisual$parser,
    java.util.Stack            CUP$SintaxisVisual$stack,
    int                        CUP$SintaxisVisual$top)
    throws java.lang.Exception
    {
              return CUP$SintaxisVisual$do_action_part00000000(
                               CUP$SintaxisVisual$act_num,
                               CUP$SintaxisVisual$parser,
                               CUP$SintaxisVisual$stack,
                               CUP$SintaxisVisual$top);
    }
}

}
