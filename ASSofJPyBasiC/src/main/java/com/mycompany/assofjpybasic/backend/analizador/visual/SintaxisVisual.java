
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package com.mycompany.assofjpybasic.backend.analizador.visual;

import java_cup.runtime.*;
import com.mycompany.assofjpybasic.backend.semantica.visual.*;
import com.mycompany.assofjpybasic.backend.semantica.programa.*;
import com.mycompany.assofjpybasic.backend.semantica.python.*;
import com.mycompany.assofjpybasic.backend.semantica.programa.cod3.*;
import com.mycompany.assofjpybasic.backend.error.Errores;
import java.util.ArrayList;
import java.util.List;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class SintaxisVisual extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return SintaxisVisualSym.class;
}

  /** Default constructor. */
  @Deprecated
  public SintaxisVisual() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public SintaxisVisual(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public SintaxisVisual(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\174\000\002\002\004\000\002\002\004\000\002\007" +
    "\003\000\002\007\002\000\002\012\003\000\002\012\002" +
    "\000\002\003\004\000\002\003\002\000\002\004\003\000" +
    "\002\004\003\000\002\004\004\000\002\057\002\000\002" +
    "\005\016\000\002\060\002\000\002\006\017\000\002\046" +
    "\005\000\002\013\003\000\002\013\002\000\002\014\006" +
    "\000\002\014\004\000\002\015\007\000\002\015\005\000" +
    "\002\036\006\000\002\016\004\000\002\016\004\000\002" +
    "\016\004\000\002\017\004\000\002\017\004\000\002\017" +
    "\004\000\002\017\002\000\002\025\004\000\002\025\002" +
    "\000\002\021\005\000\002\021\005\000\002\021\003\000" +
    "\002\022\005\000\002\022\005\000\002\022\005\000\002" +
    "\022\003\000\002\023\004\000\002\023\004\000\002\023" +
    "\003\000\002\024\003\000\002\024\003\000\002\024\003" +
    "\000\002\024\005\000\002\030\004\000\002\030\002\000" +
    "\002\035\004\000\002\035\005\000\002\035\002\000\002" +
    "\020\003\000\002\020\003\000\002\020\003\000\002\031" +
    "\003\000\002\031\003\000\002\031\003\000\002\031\003" +
    "\000\002\031\003\000\002\031\003\000\002\031\003\000" +
    "\002\061\002\000\002\062\002\000\002\040\016\000\002" +
    "\063\002\000\002\040\010\000\002\064\002\000\002\056" +
    "\011\000\002\056\002\000\002\065\002\000\002\037\006" +
    "\000\002\037\002\000\002\010\003\000\002\010\002\000" +
    "\002\042\003\000\002\042\003\000\002\042\003\000\002" +
    "\042\003\000\002\041\013\000\002\041\011\000\002\011" +
    "\003\000\002\011\002\000\002\066\002\000\002\034\007" +
    "\000\002\034\002\000\002\067\002\000\002\055\010\000" +
    "\002\055\002\000\002\054\005\000\002\054\003\000\002" +
    "\070\002\000\002\045\020\000\002\053\003\000\002\053" +
    "\002\000\002\027\004\000\002\071\002\000\002\043\012" +
    "\000\002\072\002\000\002\044\012\000\002\073\002\000" +
    "\002\044\012\000\002\032\007\000\002\032\007\000\002" +
    "\026\006\000\002\026\006\000\002\026\006\000\002\047" +
    "\005\000\002\047\003\000\002\047\004\000\002\051\005" +
    "\000\002\051\003\000\002\050\004\000\002\050\003\000" +
    "\002\050\005\000\002\052\005\000\002\052\005\000\002" +
    "\052\005\000\002\052\005\000\002\052\005\000\002\052" +
    "\005\000\002\033\005\000\002\033\005\000\002\033\003" +
    "\000\002\033\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0104\000\016\002\ufffe\003\ufffe\004\004\005\ufffe\006" +
    "\ufffe\010\ufffe\001\002\000\014\002\uffff\003\uffff\005\uffff" +
    "\006\uffff\010\uffff\001\002\000\004\002\u0106\001\002\000" +
    "\014\002\ufffa\003\012\005\ufffc\006\ufffc\010\007\001\002" +
    "\000\006\005\ufffd\006\ufffd\001\002\000\014\002\ufff9\003" +
    "\ufff9\005\ufff9\006\ufff9\010\ufff9\001\002\000\004\002\000" +
    "\001\002\000\012\003\012\005\ufffc\006\ufffc\010\007\001" +
    "\002\000\014\002\ufffa\003\012\005\ufffc\006\ufffc\010\007" +
    "\001\002\000\006\005\017\006\016\001\002\000\014\002" +
    "\ufff8\003\ufff8\005\ufff8\006\ufff8\010\ufff8\001\002\000\004" +
    "\054\364\001\002\000\004\054\020\001\002\000\004\051" +
    "\021\001\002\000\006\052\ufff0\054\024\001\002\000\004" +
    "\052\035\001\002\000\006\052\ufff1\053\032\001\002\000" +
    "\004\012\025\001\002\000\010\016\031\017\030\020\027" +
    "\001\002\000\006\052\uffee\053\uffee\001\002\000\012\004" +
    "\uffe9\036\uffe9\052\uffe9\053\uffe9\001\002\000\012\004\uffe8" +
    "\036\uffe8\052\uffe8\053\uffe8\001\002\000\012\004\uffea\036" +
    "\uffea\052\uffea\053\uffea\001\002\000\004\054\033\001\002" +
    "\000\004\012\025\001\002\000\006\052\uffef\053\uffef\001" +
    "\002\000\004\004\036\001\002\000\036\003\ufff6\007\ufff6" +
    "\011\ufff6\021\ufff6\025\ufff6\027\ufff6\033\ufff6\034\ufff6\054" +
    "\ufff6\062\ufff6\063\ufff6\064\ufff6\065\ufff6\066\ufff6\001\002" +
    "\000\036\003\uffd2\007\uffd2\011\uffd2\021\uffd2\025\uffd2\027" +
    "\uffd2\033\uffd2\034\uffd2\054\uffd2\062\uffd2\063\uffd2\064\uffd2" +
    "\065\uffd2\066\uffd2\001\002\000\036\003\056\007\063\011" +
    "\061\021\055\025\067\027\071\033\051\034\060\054\052" +
    "\062\064\063\046\064\062\065\043\066\042\001\002\000" +
    "\054\003\uffb6\004\uffb6\007\uffb6\011\uffb6\021\uffb6\022\uffb6" +
    "\023\uffb6\025\uffb6\026\uffb6\027\uffb6\032\uffb6\033\uffb6\034" +
    "\uffb6\035\uffb6\054\uffb6\062\uffb6\063\uffb6\064\uffb6\065\uffb6" +
    "\066\uffb6\067\uffb6\001\002\000\004\051\361\001\002\000" +
    "\004\051\356\001\002\000\052\003\uffca\007\uffca\011\uffca" +
    "\021\uffca\022\uffca\023\uffca\025\uffca\026\uffca\027\uffca\032" +
    "\uffca\033\uffca\034\uffca\035\uffca\054\uffca\062\uffca\063\uffca" +
    "\064\uffca\065\uffca\066\uffca\067\uffca\001\002\000\054\003" +
    "\uffb7\004\uffb7\007\uffb7\011\uffb7\021\uffb7\022\uffb7\023\uffb7" +
    "\025\uffb7\026\uffb7\027\uffb7\032\uffb7\033\uffb7\034\uffb7\035" +
    "\uffb7\054\uffb7\062\uffb7\063\uffb7\064\uffb7\065\uffb7\066\uffb7" +
    "\067\uffb7\001\002\000\004\051\352\001\002\000\052\003" +
    "\uffc8\007\uffc8\011\uffc8\021\uffc8\022\uffc8\023\uffc8\025\uffc8" +
    "\026\uffc8\027\uffc8\032\uffc8\033\uffc8\034\uffc8\035\uffc8\054" +
    "\uffc8\062\uffc8\063\uffc8\064\uffc8\065\uffc8\066\uffc8\067\uffc8" +
    "\001\002\000\052\003\uffcb\007\uffcb\011\uffcb\021\uffcb\022" +
    "\uffcb\023\uffcb\025\uffcb\026\uffcb\027\uffcb\032\uffcb\033\uffcb" +
    "\034\uffcb\035\uffcb\054\uffcb\062\uffcb\063\uffcb\064\uffcb\065" +
    "\uffcb\066\uffcb\067\uffcb\001\002\000\022\003\234\013\230" +
    "\044\105\045\102\051\237\054\075\055\100\056\104\001" +
    "\002\000\004\036\340\001\002\000\052\003\uffc7\007\uffc7" +
    "\011\uffc7\021\uffc7\022\uffc7\023\uffc7\025\uffc7\026\uffc7\027" +
    "\uffc7\032\uffc7\033\uffc7\034\uffc7\035\uffc7\054\uffc7\062\uffc7" +
    "\063\uffc7\064\uffc7\065\uffc7\066\uffc7\067\uffc7\001\002\000" +
    "\054\003\uffb5\004\uffb5\007\uffb5\011\uffb5\021\uffb5\022\uffb5" +
    "\023\uffb5\025\uffb5\026\uffb5\027\uffb5\032\uffb5\033\uffb5\034" +
    "\uffb5\035\uffb5\054\uffb5\062\uffb5\063\uffb5\064\uffb5\065\uffb5" +
    "\066\uffb5\067\uffb5\001\002\000\022\003\234\013\230\044" +
    "\105\045\102\051\237\054\075\055\100\056\104\001\002" +
    "\000\054\003\uffc5\004\300\007\uffc5\011\uffc5\021\uffc5\022" +
    "\uffc5\023\uffc5\025\uffc5\026\uffc5\027\uffc5\032\uffc5\033\uffc5" +
    "\034\uffc5\035\uffc5\054\uffc5\062\uffc5\063\uffc5\064\uffc5\065" +
    "\uffc5\066\uffc5\067\uffc5\001\002\000\052\003\uffc6\007\uffc6" +
    "\011\uffc6\021\uffc6\022\uffc6\023\uffc6\025\uffc6\026\uffc6\027" +
    "\uffc6\032\uffc6\033\uffc6\034\uffc6\035\uffc6\054\uffc6\062\uffc6" +
    "\063\uffc6\064\uffc6\065\uffc6\066\uffc6\067\uffc6\001\002\000" +
    "\006\004\226\033\227\001\002\000\004\054\210\001\002" +
    "\000\004\051\204\001\002\000\004\005\202\001\002\000" +
    "\004\051\171\001\002\000\050\003\uffd3\007\uffd3\011\uffd3" +
    "\021\uffd3\022\uffd3\023\uffd3\025\uffd3\026\uffd3\027\uffd3\032" +
    "\uffd3\033\uffd3\034\uffd3\035\uffd3\054\uffd3\062\uffd3\063\uffd3" +
    "\064\uffd3\065\uffd3\066\uffd3\001\002\000\052\003\uffc9\007" +
    "\uffc9\011\uffc9\021\uffc9\022\uffc9\023\uffc9\025\uffc9\026\uffc9" +
    "\027\uffc9\032\uffc9\033\uffc9\034\uffc9\035\uffc9\054\uffc9\062" +
    "\uffc9\063\uffc9\064\uffc9\065\uffc9\066\uffc9\067\uffc9\001\002" +
    "\000\030\026\142\044\uffb0\045\uffb0\051\uffb0\054\uffb0\055" +
    "\uffb0\056\uffb0\057\uffb0\064\uffb0\065\uffb0\066\uffb0\001\002" +
    "\000\054\003\uffb4\004\uffb4\007\uffb4\011\uffb4\021\uffb4\022" +
    "\uffb4\023\uffb4\025\uffb4\026\uffb4\027\uffb4\032\uffb4\033\uffb4" +
    "\034\uffb4\035\uffb4\054\uffb4\062\uffb4\063\uffb4\064\uffb4\065" +
    "\uffb4\066\uffb4\067\uffb4\001\002\000\004\054\072\001\002" +
    "\000\004\012\025\001\002\000\004\036\074\001\002\000" +
    "\016\044\105\045\102\051\106\054\075\055\100\056\104" +
    "\001\002\000\052\004\uffd7\014\uffd7\015\uffd7\024\uffd7\030" +
    "\uffd7\031\uffd7\036\uffd7\037\uffd7\040\uffd7\041\uffd7\042\uffd7" +
    "\043\uffd7\044\uffd7\045\uffd7\046\uffd7\047\uffd7\050\uffd7\052" +
    "\uffd7\053\uffd7\060\uffd7\001\002\000\010\030\125\044\110" +
    "\045\111\001\002\000\052\004\uffdb\014\uffdb\015\uffdb\024" +
    "\uffdb\030\uffdb\031\uffdb\036\uffdb\037\uffdb\040\uffdb\041\uffdb" +
    "\042\uffdb\043\uffdb\044\uffdb\045\uffdb\046\uffdb\047\uffdb\050" +
    "\uffdb\052\uffdb\053\uffdb\060\uffdb\001\002\000\052\004\uffd5" +
    "\014\uffd5\015\uffd5\024\uffd5\030\uffd5\031\uffd5\036\uffd5\037" +
    "\uffd5\040\uffd5\041\uffd5\042\uffd5\043\uffd5\044\uffd5\045\uffd5" +
    "\046\uffd5\047\uffd5\050\uffd5\052\uffd5\053\uffd5\060\uffd5\001" +
    "\002\000\052\004\uffd8\014\uffd8\015\uffd8\024\uffd8\030\uffd8" +
    "\031\uffd8\036\uffd8\037\uffd8\040\uffd8\041\uffd8\042\uffd8\043" +
    "\uffd8\044\uffd8\045\uffd8\046\uffd8\047\uffd8\050\uffd8\052\uffd8" +
    "\053\uffd8\060\uffd8\001\002\000\016\044\105\045\102\051" +
    "\106\054\075\055\100\056\104\001\002\000\052\004\uffdf" +
    "\014\uffdf\015\uffdf\024\uffdf\030\uffdf\031\uffdf\036\uffdf\037" +
    "\uffdf\040\uffdf\041\uffdf\042\uffdf\043\uffdf\044\uffdf\045\uffdf" +
    "\046\114\047\116\050\115\052\uffdf\053\uffdf\060\uffdf\001" +
    "\002\000\052\004\uffd6\014\uffd6\015\uffd6\024\uffd6\030\uffd6" +
    "\031\uffd6\036\uffd6\037\uffd6\040\uffd6\041\uffd6\042\uffd6\043" +
    "\uffd6\044\uffd6\045\uffd6\046\uffd6\047\uffd6\050\uffd6\052\uffd6" +
    "\053\uffd6\060\uffd6\001\002\000\016\044\105\045\102\051" +
    "\106\054\075\055\100\056\104\001\002\000\016\044\105" +
    "\045\102\051\106\054\075\055\100\056\104\001\002\000" +
    "\010\044\110\045\111\052\112\001\002\000\016\044\105" +
    "\045\102\051\106\054\075\055\100\056\104\001\002\000" +
    "\016\044\105\045\102\051\106\054\075\055\100\056\104" +
    "\001\002\000\052\004\uffd4\014\uffd4\015\uffd4\024\uffd4\030" +
    "\uffd4\031\uffd4\036\uffd4\037\uffd4\040\uffd4\041\uffd4\042\uffd4" +
    "\043\uffd4\044\uffd4\045\uffd4\046\uffd4\047\uffd4\050\uffd4\052" +
    "\uffd4\053\uffd4\060\uffd4\001\002\000\052\004\uffe0\014\uffe0" +
    "\015\uffe0\024\uffe0\030\uffe0\031\uffe0\036\uffe0\037\uffe0\040" +
    "\uffe0\041\uffe0\042\uffe0\043\uffe0\044\uffe0\045\uffe0\046\114" +
    "\047\116\050\115\052\uffe0\053\uffe0\060\uffe0\001\002\000" +
    "\016\044\105\045\102\051\106\054\075\055\100\056\104" +
    "\001\002\000\016\044\105\045\102\051\106\054\075\055" +
    "\100\056\104\001\002\000\016\044\105\045\102\051\106" +
    "\054\075\055\100\056\104\001\002\000\052\004\uffdd\014" +
    "\uffdd\015\uffdd\024\uffdd\030\uffdd\031\uffdd\036\uffdd\037\uffdd" +
    "\040\uffdd\041\uffdd\042\uffdd\043\uffdd\044\uffdd\045\uffdd\046" +
    "\uffdd\047\uffdd\050\uffdd\052\uffdd\053\uffdd\060\uffdd\001\002" +
    "\000\052\004\uffdc\014\uffdc\015\uffdc\024\uffdc\030\uffdc\031" +
    "\uffdc\036\uffdc\037\uffdc\040\uffdc\041\uffdc\042\uffdc\043\uffdc" +
    "\044\uffdc\045\uffdc\046\uffdc\047\uffdc\050\uffdc\052\uffdc\053" +
    "\uffdc\060\uffdc\001\002\000\052\004\uffde\014\uffde\015\uffde" +
    "\024\uffde\030\uffde\031\uffde\036\uffde\037\uffde\040\uffde\041" +
    "\uffde\042\uffde\043\uffde\044\uffde\045\uffde\046\uffde\047\uffde" +
    "\050\uffde\052\uffde\053\uffde\060\uffde\001\002\000\052\004" +
    "\uffe1\014\uffe1\015\uffe1\024\uffe1\030\uffe1\031\uffe1\036\uffe1" +
    "\037\uffe1\040\uffe1\041\uffe1\042\uffe1\043\uffe1\044\uffe1\045" +
    "\uffe1\046\114\047\116\050\115\052\uffe1\053\uffe1\060\uffe1" +
    "\001\002\000\052\004\uffd9\014\uffd9\015\uffd9\024\uffd9\030" +
    "\uffd9\031\uffd9\036\uffd9\037\uffd9\040\uffd9\041\uffd9\042\uffd9" +
    "\043\uffd9\044\uffd9\045\uffd9\046\uffd9\047\uffd9\050\uffd9\052" +
    "\uffd9\053\uffd9\060\uffd9\001\002\000\052\004\uffda\014\uffda" +
    "\015\uffda\024\uffda\030\uffda\031\uffda\036\uffda\037\uffda\040" +
    "\uffda\041\uffda\042\uffda\043\uffda\044\uffda\045\uffda\046\uffda" +
    "\047\uffda\050\uffda\052\uffda\053\uffda\060\uffda\001\002\000" +
    "\016\044\105\045\102\051\106\054\075\055\100\056\104" +
    "\001\002\000\010\031\130\044\110\045\111\001\002\000" +
    "\004\004\132\001\002\000\016\044\105\045\102\051\106" +
    "\054\075\055\100\056\104\001\002\000\010\004\uffa3\044" +
    "\110\045\111\001\002\000\036\003\uffa7\011\uffa7\021\uffa7" +
    "\025\uffa7\027\uffa7\032\uffa7\033\uffa7\034\uffa7\054\uffa7\062" +
    "\uffa7\063\uffa7\064\uffa7\065\uffa7\066\uffa7\001\002\000\036" +
    "\003\uffd2\011\uffd2\021\uffd2\025\uffd2\027\uffd2\032\uffd2\033" +
    "\uffd2\034\uffd2\054\uffd2\062\uffd2\063\uffd2\064\uffd2\065\uffd2" +
    "\066\uffd2\001\002\000\036\003\056\011\061\021\055\025" +
    "\067\027\071\032\135\033\051\034\060\054\052\062\064" +
    "\063\046\064\062\065\043\066\042\001\002\000\006\004" +
    "\uffa4\054\137\001\002\000\004\004\140\001\002\000\004" +
    "\004\uffa5\001\002\000\052\003\uffa6\007\uffa6\011\uffa6\021" +
    "\uffa6\022\uffa6\023\uffa6\025\uffa6\026\uffa6\027\uffa6\032\uffa6" +
    "\033\uffa6\034\uffa6\035\uffa6\054\uffa6\062\uffa6\063\uffa6\064" +
    "\uffa6\065\uffa6\066\uffa6\067\uffa6\001\002\000\026\044\105" +
    "\045\102\051\106\054\075\055\100\056\104\057\145\064" +
    "\062\065\043\066\042\001\002\000\026\044\uffb1\045\uffb1" +
    "\051\uffb1\054\uffb1\055\uffb1\056\uffb1\057\uffb1\064\uffb1\065" +
    "\uffb1\066\uffb1\001\002\000\016\004\uffce\044\110\045\111" +
    "\052\uffce\053\uffce\060\uffce\001\002\000\012\004\uffcd\052" +
    "\uffcd\053\uffcd\060\uffcd\001\002\000\012\004\uffcc\052\uffcc" +
    "\053\uffcc\060\uffcc\001\002\000\004\004\147\001\002\000" +
    "\006\007\uffaa\026\uffaa\001\002\000\006\007\uffad\026\151" +
    "\001\002\000\020\023\157\044\105\045\102\051\106\054" +
    "\075\055\100\056\104\001\002\000\004\007\153\001\002" +
    "\000\004\025\154\001\002\000\004\004\155\001\002\000" +
    "\052\003\uffb3\007\uffb3\011\uffb3\021\uffb3\022\uffb3\023\uffb3" +
    "\025\uffb3\026\uffb3\027\uffb3\032\uffb3\033\uffb3\034\uffb3\035" +
    "\uffb3\054\uffb3\062\uffb3\063\uffb3\064\uffb3\065\uffb3\066\uffb3" +
    "\067\uffb3\001\002\000\012\004\uffa8\044\110\045\111\053" +
    "\uffa8\001\002\000\004\004\166\001\002\000\006\004\161" +
    "\053\162\001\002\000\040\003\uffac\007\uffac\011\uffac\021" +
    "\uffac\025\uffac\026\uffac\027\uffac\033\uffac\034\uffac\054\uffac" +
    "\062\uffac\063\uffac\064\uffac\065\uffac\066\uffac\001\002\000" +
    "\016\044\105\045\102\051\106\054\075\055\100\056\104" +
    "\001\002\000\012\004\uffa9\044\110\045\111\053\uffa9\001" +
    "\002\000\040\003\uffd2\007\uffd2\011\uffd2\021\uffd2\025\uffd2" +
    "\026\uffd2\027\uffd2\033\uffd2\034\uffd2\054\uffd2\062\uffd2\063" +
    "\uffd2\064\uffd2\065\uffd2\066\uffd2\001\002\000\040\003\056" +
    "\007\uffab\011\061\021\055\025\067\026\uffab\027\071\033" +
    "\051\034\060\054\052\062\064\063\046\064\062\065\043" +
    "\066\042\001\002\000\036\003\uffaf\007\uffaf\011\uffaf\021" +
    "\uffaf\025\uffaf\027\uffaf\033\uffaf\034\uffaf\054\uffaf\062\uffaf" +
    "\063\uffaf\064\uffaf\065\uffaf\066\uffaf\001\002\000\036\003" +
    "\uffd2\007\uffd2\011\uffd2\021\uffd2\025\uffd2\027\uffd2\033\uffd2" +
    "\034\uffd2\054\uffd2\062\uffd2\063\uffd2\064\uffd2\065\uffd2\066" +
    "\uffd2\001\002\000\036\003\056\007\uffae\011\061\021\055" +
    "\025\067\027\071\033\051\034\060\054\052\062\064\063" +
    "\046\064\062\065\043\066\042\001\002\000\030\044\105" +
    "\045\102\051\106\054\075\055\100\056\104\057\145\061" +
    "\172\064\062\065\043\066\042\001\002\000\006\052\uff86" +
    "\060\uff86\001\002\000\006\052\uff87\060\uff87\001\002\000" +
    "\006\052\175\060\176\001\002\000\004\004\201\001\002" +
    "\000\030\044\105\045\102\051\106\054\075\055\100\056" +
    "\104\057\145\061\177\064\062\065\043\066\042\001\002" +
    "\000\006\052\uff88\060\uff88\001\002\000\006\052\uff89\060" +
    "\uff89\001\002\000\054\003\uff9c\004\uff9c\007\uff9c\011\uff9c" +
    "\021\uff9c\022\uff9c\023\uff9c\025\uff9c\026\uff9c\027\uff9c\032" +
    "\uff9c\033\uff9c\034\uff9c\035\uff9c\054\uff9c\062\uff9c\063\uff9c" +
    "\064\uff9c\065\uff9c\066\uff9c\067\uff9c\001\002\000\004\004" +
    "\203\001\002\000\014\002\ufff5\003\ufff5\005\ufff5\006\ufff5" +
    "\010\ufff5\001\002\000\004\061\205\001\002\000\004\052" +
    "\206\001\002\000\062\003\uff9a\004\uff9a\007\uff9a\011\uff9a" +
    "\021\uff9a\022\uff9a\023\uff9a\025\uff9a\026\uff9a\027\uff9a\032" +
    "\uff9a\033\uff9a\034\uff9a\035\uff9a\052\uff9a\053\uff9a\054\uff9a" +
    "\060\uff9a\062\uff9a\063\uff9a\064\uff9a\065\uff9a\066\uff9a\067" +
    "\uff9a\001\002\000\006\004\221\053\222\001\002\000\012" +
    "\004\uffe4\012\211\036\uffe4\053\uffe4\001\002\000\010\016" +
    "\220\017\217\020\216\001\002\000\010\004\uffe2\036\214" +
    "\053\uffe2\001\002\000\006\004\uffec\053\uffec\001\002\000" +
    "\026\044\105\045\102\051\106\054\075\055\100\056\104" +
    "\057\145\064\062\065\043\066\042\001\002\000\006\004" +
    "\uffe3\053\uffe3\001\002\000\010\004\uffe6\036\uffe6\053\uffe6" +
    "\001\002\000\010\004\uffe5\036\uffe5\053\uffe5\001\002\000" +
    "\010\004\uffe7\036\uffe7\053\uffe7\001\002\000\054\003\ufff2" +
    "\004\ufff2\007\ufff2\011\ufff2\021\ufff2\022\ufff2\023\ufff2\025" +
    "\ufff2\026\ufff2\027\ufff2\032\ufff2\033\ufff2\034\ufff2\035\ufff2" +
    "\054\ufff2\062\ufff2\063\ufff2\064\ufff2\065\ufff2\066\ufff2\067" +
    "\ufff2\001\002\000\004\054\223\001\002\000\012\004\uffe4" +
    "\012\211\036\uffe4\053\uffe4\001\002\000\010\004\uffe2\036" +
    "\214\053\uffe2\001\002\000\006\004\uffed\053\uffed\001\002" +
    "\000\036\003\uff9e\011\uff9e\021\uff9e\025\uff9e\027\uff9e\033" +
    "\uff9e\034\uff9e\035\uff9e\054\uff9e\062\uff9e\063\uff9e\064\uff9e" +
    "\065\uff9e\066\uff9e\001\002\000\022\003\234\013\230\044" +
    "\105\045\102\051\237\054\075\055\100\056\104\001\002" +
    "\000\020\013\230\044\105\045\102\051\237\054\075\055" +
    "\100\056\104\001\002\000\014\004\uff91\014\uff91\015\uff91" +
    "\024\uff91\052\uff91\001\002\000\014\004\uff96\014\245\015" +
    "\uff96\024\uff96\052\uff96\001\002\000\022\036\254\037\252" +
    "\040\251\041\250\042\253\043\247\044\110\045\111\001" +
    "\002\000\020\013\230\044\105\045\102\051\237\054\075" +
    "\055\100\056\104\001\002\000\014\004\uff93\014\uff93\015" +
    "\uff93\024\uff93\052\uff93\001\002\000\006\004\263\015\243" +
    "\001\002\000\022\003\234\013\230\044\105\045\102\051" +
    "\237\054\075\055\100\056\104\001\002\000\024\036\254" +
    "\037\252\040\251\041\250\042\253\043\247\044\110\045" +
    "\111\052\112\001\002\000\006\015\243\052\242\001\002" +
    "\000\014\004\uff90\014\uff90\015\uff90\024\uff90\052\uff90\001" +
    "\002\000\020\013\230\044\105\045\102\051\237\054\075" +
    "\055\100\056\104\001\002\000\014\004\uff97\014\245\015" +
    "\uff97\024\uff97\052\uff97\001\002\000\020\013\230\044\105" +
    "\045\102\051\237\054\075\055\100\056\104\001\002\000" +
    "\014\004\uff94\014\uff94\015\uff94\024\uff94\052\uff94\001\002" +
    "\000\016\044\105\045\102\051\106\054\075\055\100\056" +
    "\104\001\002\000\016\044\105\045\102\051\106\054\075" +
    "\055\100\056\104\001\002\000\016\044\105\045\102\051" +
    "\106\054\075\055\100\056\104\001\002\000\016\044\105" +
    "\045\102\051\106\054\075\055\100\056\104\001\002\000" +
    "\016\044\105\045\102\051\106\054\075\055\100\056\104" +
    "\001\002\000\016\044\105\045\102\051\106\054\075\055" +
    "\100\056\104\001\002\000\020\004\uff8f\014\uff8f\015\uff8f" +
    "\024\uff8f\044\110\045\111\052\uff8f\001\002\000\020\004" +
    "\uff8b\014\uff8b\015\uff8b\024\uff8b\044\110\045\111\052\uff8b" +
    "\001\002\000\020\004\uff8e\014\uff8e\015\uff8e\024\uff8e\044" +
    "\110\045\111\052\uff8e\001\002\000\020\004\uff8d\014\uff8d" +
    "\015\uff8d\024\uff8d\044\110\045\111\052\uff8d\001\002\000" +
    "\020\004\uff8c\014\uff8c\015\uff8c\024\uff8c\044\110\045\111" +
    "\052\uff8c\001\002\000\020\004\uff8a\014\uff8a\015\uff8a\024" +
    "\uff8a\044\110\045\111\052\uff8a\001\002\000\036\003\uffa0" +
    "\011\uffa0\021\uffa0\025\uffa0\027\uffa0\033\uffa0\034\uffa0\035" +
    "\uffa0\054\uffa0\062\uffa0\063\uffa0\064\uffa0\065\uffa0\066\uffa0" +
    "\001\002\000\036\003\uffd2\011\uffd2\021\uffd2\025\uffd2\027" +
    "\uffd2\033\uffd2\034\uffd2\035\uffd2\054\uffd2\062\uffd2\063\uffd2" +
    "\064\uffd2\065\uffd2\066\uffd2\001\002\000\036\003\056\011" +
    "\061\021\055\025\067\027\071\033\051\034\060\035\266" +
    "\054\052\062\064\063\046\064\062\065\043\066\042\001" +
    "\002\000\004\004\267\001\002\000\052\003\uff9f\007\uff9f" +
    "\011\uff9f\021\uff9f\022\uff9f\023\uff9f\025\uff9f\026\uff9f\027" +
    "\uff9f\032\uff9f\033\uff9f\034\uff9f\035\uff9f\054\uff9f\062\uff9f" +
    "\063\uff9f\064\uff9f\065\uff9f\066\uff9f\067\uff9f\001\002\000" +
    "\014\004\uff95\014\245\015\uff95\024\uff95\052\uff95\001\002" +
    "\000\014\004\uff92\014\uff92\015\uff92\024\uff92\052\uff92\001" +
    "\002\000\036\003\uffd2\011\uffd2\021\uffd2\025\uffd2\027\uffd2" +
    "\033\uffd2\034\uffd2\035\uffd2\054\uffd2\062\uffd2\063\uffd2\064" +
    "\uffd2\065\uffd2\066\uffd2\001\002\000\036\003\056\011\061" +
    "\021\055\025\067\027\071\033\051\034\060\035\274\054" +
    "\052\062\064\063\046\064\062\065\043\066\042\001\002" +
    "\000\004\033\275\001\002\000\022\003\234\013\230\044" +
    "\105\045\102\051\237\054\075\055\100\056\104\001\002" +
    "\000\006\004\277\015\243\001\002\000\052\003\uff9d\007" +
    "\uff9d\011\uff9d\021\uff9d\022\uff9d\023\uff9d\025\uff9d\026\uff9d" +
    "\027\uff9d\032\uff9d\033\uff9d\034\uff9d\035\uff9d\054\uff9d\062" +
    "\uff9d\063\uff9d\064\uff9d\065\uff9d\066\uff9d\067\uff9d\001\002" +
    "\000\006\007\uffaa\026\uffaa\001\002\000\006\007\uffad\026" +
    "\151\001\002\000\004\007\303\001\002\000\004\025\304" +
    "\001\002\000\004\004\305\001\002\000\052\003\uffb2\007" +
    "\uffb2\011\uffb2\021\uffb2\022\uffb2\023\uffb2\025\uffb2\026\uffb2" +
    "\027\uffb2\032\uffb2\033\uffb2\034\uffb2\035\uffb2\054\uffb2\062" +
    "\uffb2\063\uffb2\064\uffb2\065\uffb2\066\uffb2\067\uffb2\001\002" +
    "\000\010\004\uffb8\015\243\024\307\001\002\000\022\004" +
    "\uffb9\011\uffc1\054\uffc1\062\uffc1\063\uffc1\064\uffc1\065\uffc1" +
    "\066\uffc1\001\002\000\004\004\311\001\002\000\042\003" +
    "\uffc4\007\uffc4\011\uffc4\021\uffc4\022\uffc4\023\uffc4\025\uffc4" +
    "\027\uffc4\033\uffc4\034\uffc4\054\uffc4\062\uffc4\063\uffc4\064" +
    "\uffc4\065\uffc4\066\uffc4\001\002\000\042\003\uffd2\007\uffd2" +
    "\011\uffd2\021\uffd2\022\uffd2\023\uffd2\025\uffd2\027\uffd2\033" +
    "\uffd2\034\uffd2\054\uffd2\062\uffd2\063\uffd2\064\uffd2\065\uffd2" +
    "\066\uffd2\001\002\000\042\003\056\007\uffc3\011\061\021" +
    "\055\022\uffc3\023\uffc3\025\067\027\071\033\051\034\060" +
    "\054\052\062\064\063\046\064\062\065\043\066\042\001" +
    "\002\000\010\007\uffbd\022\uffbd\023\uffbd\001\002\000\010" +
    "\007\uffba\022\317\023\320\001\002\000\004\007\332\001" +
    "\002\000\022\003\234\013\230\044\105\045\102\051\237" +
    "\054\075\055\100\056\104\001\002\000\004\004\321\001" +
    "\002\000\036\003\uffbc\007\uffbc\011\uffbc\021\uffbc\025\uffbc" +
    "\027\uffbc\033\uffbc\034\uffbc\054\uffbc\062\uffbc\063\uffbc\064" +
    "\uffbc\065\uffbc\066\uffbc\001\002\000\036\003\uffd2\007\uffd2" +
    "\011\uffd2\021\uffd2\025\uffd2\027\uffd2\033\uffd2\034\uffd2\054" +
    "\uffd2\062\uffd2\063\uffd2\064\uffd2\065\uffd2\066\uffd2\001\002" +
    "\000\036\003\056\007\uffbb\011\061\021\055\025\067\027" +
    "\071\033\051\034\060\054\052\062\064\063\046\064\062" +
    "\065\043\066\042\001\002\000\010\004\uffb8\015\243\024" +
    "\325\001\002\000\004\004\uffb9\001\002\000\004\004\327" +
    "\001\002\000\042\003\uffbf\007\uffbf\011\uffbf\021\uffbf\022" +
    "\uffbf\023\uffbf\025\uffbf\027\uffbf\033\uffbf\034\uffbf\054\uffbf" +
    "\062\uffbf\063\uffbf\064\uffbf\065\uffbf\066\uffbf\001\002\000" +
    "\042\003\uffd2\007\uffd2\011\uffd2\021\uffd2\022\uffd2\023\uffd2" +
    "\025\uffd2\027\uffd2\033\uffd2\034\uffd2\054\uffd2\062\uffd2\063" +
    "\uffd2\064\uffd2\065\uffd2\066\uffd2\001\002\000\042\003\056" +
    "\007\uffbe\011\061\021\055\022\uffbe\023\uffbe\025\067\027" +
    "\071\033\051\034\060\054\052\062\064\063\046\064\062" +
    "\065\043\066\042\001\002\000\004\021\333\001\002\000" +
    "\004\004\334\001\002\000\052\003\uffc2\007\uffc2\011\uffc2" +
    "\021\uffc2\022\uffc2\023\uffc2\025\uffc2\026\uffc2\027\uffc2\032" +
    "\uffc2\033\uffc2\034\uffc2\035\uffc2\054\uffc2\062\uffc2\063\uffc2" +
    "\064\uffc2\065\uffc2\066\uffc2\067\uffc2\001\002\000\020\011" +
    "\061\054\052\062\064\063\046\064\062\065\043\066\042" +
    "\001\002\000\004\004\337\001\002\000\052\003\uffc0\007" +
    "\uffc0\011\uffc0\021\uffc0\022\uffc0\023\uffc0\025\uffc0\026\uffc0" +
    "\027\uffc0\032\uffc0\033\uffc0\034\uffc0\035\uffc0\054\uffc0\062" +
    "\uffc0\063\uffc0\064\uffc0\065\uffc0\066\uffc0\067\uffc0\001\002" +
    "\000\026\044\105\045\102\051\106\054\075\055\100\056" +
    "\104\057\145\064\062\065\043\066\042\001\002\000\004" +
    "\004\342\001\002\000\054\003\uffeb\004\uffeb\007\uffeb\011" +
    "\uffeb\021\uffeb\022\uffeb\023\uffeb\025\uffeb\026\uffeb\027\uffeb" +
    "\032\uffeb\033\uffeb\034\uffeb\035\uffeb\054\uffeb\062\uffeb\063" +
    "\uffeb\064\uffeb\065\uffeb\066\uffeb\067\uffeb\001\002\000\006" +
    "\004\344\015\243\001\002\000\036\003\uffa2\007\uffa2\011" +
    "\uffa2\021\uffa2\025\uffa2\027\uffa2\033\uffa2\034\uffa2\054\uffa2" +
    "\062\uffa2\063\uffa2\064\uffa2\065\uffa2\066\uffa2\001\002\000" +
    "\036\003\uffd2\007\uffd2\011\uffd2\021\uffd2\025\uffd2\027\uffd2" +
    "\033\uffd2\034\uffd2\054\uffd2\062\uffd2\063\uffd2\064\uffd2\065" +
    "\uffd2\066\uffd2\001\002\000\036\003\056\007\347\011\061" +
    "\021\055\025\067\027\071\033\051\034\060\054\052\062" +
    "\064\063\046\064\062\065\043\066\042\001\002\000\004" +
    "\033\350\001\002\000\004\004\351\001\002\000\052\003" +
    "\uffa1\007\uffa1\011\uffa1\021\uffa1\022\uffa1\023\uffa1\025\uffa1" +
    "\026\uffa1\027\uffa1\032\uffa1\033\uffa1\034\uffa1\035\uffa1\054" +
    "\uffa1\062\uffa1\063\uffa1\064\uffa1\065\uffa1\066\uffa1\067\uffa1" +
    "\001\002\000\030\044\105\045\102\051\106\054\075\055" +
    "\100\056\104\057\145\061\172\064\062\065\043\066\042" +
    "\001\002\000\006\052\354\060\176\001\002\000\004\004" +
    "\355\001\002\000\054\003\uff9b\004\uff9b\007\uff9b\011\uff9b" +
    "\021\uff9b\022\uff9b\023\uff9b\025\uff9b\026\uff9b\027\uff9b\032" +
    "\uff9b\033\uff9b\034\uff9b\035\uff9b\054\uff9b\062\uff9b\063\uff9b" +
    "\064\uff9b\065\uff9b\066\uff9b\067\uff9b\001\002\000\004\061" +
    "\357\001\002\000\004\052\360\001\002\000\062\003\uff99" +
    "\004\uff99\007\uff99\011\uff99\021\uff99\022\uff99\023\uff99\025" +
    "\uff99\026\uff99\027\uff99\032\uff99\033\uff99\034\uff99\035\uff99" +
    "\052\uff99\053\uff99\054\uff99\060\uff99\062\uff99\063\uff99\064" +
    "\uff99\065\uff99\066\uff99\067\uff99\001\002\000\004\061\362" +
    "\001\002\000\004\052\363\001\002\000\062\003\uff98\004" +
    "\uff98\007\uff98\011\uff98\021\uff98\022\uff98\023\uff98\025\uff98" +
    "\026\uff98\027\uff98\032\uff98\033\uff98\034\uff98\035\uff98\052" +
    "\uff98\053\uff98\054\uff98\060\uff98\062\uff98\063\uff98\064\uff98" +
    "\065\uff98\066\uff98\067\uff98\001\002\000\004\051\365\001" +
    "\002\000\006\052\ufff0\054\024\001\002\000\004\052\367" +
    "\001\002\000\004\012\025\001\002\000\004\004\371\001" +
    "\002\000\040\003\ufff4\007\ufff4\011\ufff4\021\ufff4\025\ufff4" +
    "\027\ufff4\033\ufff4\034\ufff4\054\ufff4\062\ufff4\063\ufff4\064" +
    "\ufff4\065\ufff4\066\ufff4\067\ufff4\001\002\000\040\003\056" +
    "\007\uffcf\011\061\021\055\025\067\027\071\033\051\034" +
    "\060\054\052\062\064\063\046\064\062\065\043\066\042" +
    "\067\374\001\002\000\004\007\u0101\001\002\000\026\044" +
    "\105\045\102\051\106\054\075\055\100\056\104\057\145" +
    "\064\062\065\043\066\042\001\002\000\040\003\056\007" +
    "\uffcf\011\061\021\055\025\067\027\071\033\051\034\060" +
    "\054\052\062\064\063\046\064\062\065\043\066\042\067" +
    "\374\001\002\000\004\007\uffd1\001\002\000\004\004\u0100" +
    "\001\002\000\004\007\uffd0\001\002\000\004\006\u0102\001" +
    "\002\000\004\004\u0103\001\002\000\014\002\ufff3\003\ufff3" +
    "\005\ufff3\006\ufff3\010\ufff3\001\002\000\004\002\ufffb\001" +
    "\002\000\014\002\ufff7\003\ufff7\005\ufff7\006\ufff7\010\ufff7" +
    "\001\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0104\000\006\002\004\007\005\001\001\000\002\001" +
    "\001\000\002\001\001\000\014\003\010\004\012\005\007" +
    "\006\014\012\013\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\004\u0104\005\007\006\014" +
    "\012\013\001\001\000\014\003\u0103\004\012\005\007\006" +
    "\014\012\013\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\013\021\014\022\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\016\025\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\016\033\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\057\036\001\001" +
    "\000\004\030\037\001\001\000\030\026\040\031\064\032" +
    "\044\036\067\040\047\041\043\042\056\043\046\044\052" +
    "\045\065\046\053\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\022\021\232\022\102\023\076\024\100\047\342\050\234" +
    "\051\231\052\230\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\022\021\232\022\102\023\076" +
    "\024\100\047\305\050\234\051\231\052\230\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\015\206\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\011\140\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\016\072\001\001\000\002\001\001\000\012\021\075" +
    "\022\102\023\076\024\100\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\023\123\024\100\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\023\122\024\100\001\001" +
    "\000\012\021\106\022\102\023\076\024\100\001\001\000" +
    "\002\001\001\000\010\022\121\023\076\024\100\001\001" +
    "\000\010\022\112\023\076\024\100\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\023\120\024\100\001\001" +
    "\000\006\023\117\024\100\001\001\000\006\023\116\024" +
    "\100\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\021\125\022\102\023\076\024\100\001\001" +
    "\000\004\027\126\001\001\000\002\001\001\000\012\021" +
    "\130\022\102\023\076\024\100\001\001\000\002\001\001" +
    "\000\004\070\132\001\001\000\004\030\133\001\001\000" +
    "\030\026\040\031\064\032\044\036\067\040\047\041\043" +
    "\042\056\043\046\044\052\045\065\046\053\001\001\000" +
    "\004\053\135\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\016\020\145\021\142\022\102\023" +
    "\076\024\100\026\143\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\055\147\001\001\000\004\034\151\001\001" +
    "\000\014\021\155\022\102\023\076\024\100\054\157\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\067\163\001\001\000\012\021\162" +
    "\022\102\023\076\024\100\001\001\000\002\001\001\000" +
    "\004\030\164\001\001\000\030\026\040\031\064\032\044" +
    "\036\067\040\047\041\043\042\056\043\046\044\052\045" +
    "\065\046\053\001\001\000\004\066\166\001\001\000\004" +
    "\030\167\001\001\000\030\026\040\031\064\032\044\036" +
    "\067\040\047\041\043\042\056\043\046\044\052\045\065" +
    "\046\053\001\001\000\020\020\172\021\142\022\102\023" +
    "\076\024\100\026\143\033\173\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\016\020\177\021\142\022\102\023\076\024\100\026\143" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\017\211\001\001\000\002\001\001\000\004\025\212" +
    "\001\001\000\002\001\001\000\016\020\214\021\142\022" +
    "\102\023\076\024\100\026\143\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\017\223\001\001" +
    "\000\004\025\224\001\001\000\002\001\001\000\004\073" +
    "\271\001\001\000\022\021\232\022\102\023\076\024\100" +
    "\047\235\050\234\051\231\052\230\001\001\000\016\021" +
    "\232\022\102\023\076\024\100\050\270\052\230\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\020\021\232\022\102\023\076\024\100\050\234\051\267" +
    "\052\230\001\001\000\002\001\001\000\002\001\001\000" +
    "\022\021\237\022\102\023\076\024\100\047\240\050\234" +
    "\051\231\052\230\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\020\021\232\022\102\023\076" +
    "\024\100\050\234\051\243\052\230\001\001\000\002\001" +
    "\001\000\016\021\232\022\102\023\076\024\100\050\245" +
    "\052\230\001\001\000\002\001\001\000\012\021\261\022" +
    "\102\023\076\024\100\001\001\000\012\021\260\022\102" +
    "\023\076\024\100\001\001\000\012\021\257\022\102\023" +
    "\076\024\100\001\001\000\012\021\256\022\102\023\076" +
    "\024\100\001\001\000\012\021\255\022\102\023\076\024" +
    "\100\001\001\000\012\021\254\022\102\023\076\024\100" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\072\263\001\001\000\004\030\264\001\001\000" +
    "\030\026\040\031\064\032\044\036\067\040\047\041\043" +
    "\042\056\043\046\044\052\045\065\046\053\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\030\272\001\001\000\030\026\040\031" +
    "\064\032\044\036\067\040\047\041\043\042\056\043\046" +
    "\044\052\045\065\046\053\001\001\000\002\001\001\000" +
    "\022\021\232\022\102\023\076\024\100\047\275\050\234" +
    "\051\231\052\230\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\055\300\001\001\000\004\034\301\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\010\307\001\001\000\004\063\334" +
    "\001\001\000\002\001\001\000\004\061\311\001\001\000" +
    "\004\030\312\001\001\000\032\026\040\031\064\032\044" +
    "\036\067\040\047\041\043\042\056\043\046\044\052\045" +
    "\065\046\053\062\313\001\001\000\004\056\314\001\001" +
    "\000\004\037\315\001\001\000\002\001\001\000\022\021" +
    "\232\022\102\023\076\024\100\047\323\050\234\051\231" +
    "\052\230\001\001\000\002\001\001\000\004\065\321\001" +
    "\001\000\004\030\322\001\001\000\030\026\040\031\064" +
    "\032\044\036\067\040\047\041\043\042\056\043\046\044" +
    "\052\045\065\046\053\001\001\000\004\010\325\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\064\327\001" +
    "\001\000\004\030\330\001\001\000\030\026\040\031\064" +
    "\032\044\036\067\040\047\041\043\042\056\043\046\044" +
    "\052\045\065\046\053\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\026\040\032\044\036" +
    "\067\042\335\046\053\001\001\000\002\001\001\000\002" +
    "\001\001\000\016\020\340\021\142\022\102\023\076\024" +
    "\100\026\143\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\071\344\001\001\000\004\030" +
    "\345\001\001\000\030\026\040\031\064\032\044\036\067" +
    "\040\047\041\043\042\056\043\046\044\052\045\065\046" +
    "\053\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\020\020\172\021\142\022\102\023\076\024" +
    "\100\026\143\033\352\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\013\365\014" +
    "\022\001\001\000\002\001\001\000\004\016\367\001\001" +
    "\000\002\001\001\000\004\060\371\001\001\000\032\026" +
    "\040\031\374\032\044\035\372\036\067\040\047\041\043" +
    "\042\056\043\046\044\052\045\065\046\053\001\001\000" +
    "\002\001\001\000\016\020\376\021\142\022\102\023\076" +
    "\024\100\026\143\001\001\000\032\026\040\031\374\032" +
    "\044\035\375\036\067\040\047\041\043\042\056\043\046" +
    "\044\052\045\065\046\053\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$SintaxisVisual$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$SintaxisVisual$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$SintaxisVisual$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    private Symbol s;
    private VisualSemantica sem = new VisualSemantica();
    private boolean error = false;
    private MetodoVisual actual;
    private Errores errores = new Errores();
    private int linea;

    public void setLinea(int line){
            this.linea = line;
    }

    public void syntax_error(Symbol sym){
            errores.errorSintactico(sym, this.linea);
    }

    public void unrecovered_syntax_error(Symbol sym) throws java.lang.Exception{
            errores.errorSintactico(sym, this.linea); 
    }

    public VisualSemantica getVisual(){
            return sem;
    }
    
    public void reportarSem(String texto){
            errores.errorSemantico(getS(), texto, this.linea);
    }
    
    public Symbol getS(){
        return this.cur_token;
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$SintaxisVisual$actions {
  private final SintaxisVisual parser;

  /** Constructor */
  CUP$SintaxisVisual$actions(SintaxisVisual parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$SintaxisVisual$do_action_part00000000(
    int                        CUP$SintaxisVisual$act_num,
    java_cup.runtime.lr_parser CUP$SintaxisVisual$parser,
    java.util.Stack            CUP$SintaxisVisual$stack,
    int                        CUP$SintaxisVisual$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$SintaxisVisual$result;

      /* select the action based on the action number */
      switch (CUP$SintaxisVisual$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= VISUAL EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-1)).value;
		RESULT = start_val;
              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$SintaxisVisual$parser.done_parsing();
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // VISUAL ::= ESP STATESM 
            {
              Object RESULT =null;
		sem.mostrarMetodos();
              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("VISUAL",0, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // ESP ::= espacio 
            {
              Object RESULT =null;

              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("ESP",5, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // ESP ::= 
            {
              Object RESULT =null;

              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("ESP",5, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // PUBLIC ::= publicc 
            {
              Object RESULT =null;

              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("PUBLIC",8, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // PUBLIC ::= 
            {
              Object RESULT =null;

              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("PUBLIC",8, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // STATESM ::= STATEM STATESM 
            {
              Object RESULT =null;

              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("STATESM",1, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // STATESM ::= 
            {
              Object RESULT =null;

              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("STATESM",1, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // STATEM ::= SUB 
            {
              Object RESULT =null;

              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("STATEM",2, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // STATEM ::= FUNCTION 
            {
              Object RESULT =null;

              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("STATEM",2, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // STATEM ::= error STATEM 
            {
              Object RESULT =null;
		sem.eliminarAmbito(VisualSemantica.AMBITO); VisualSemantica.AMBITO = 0;
              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("STATEM",2, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // NT$0 ::= 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-4)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-4)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-4)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-2)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-2)).right;
		List<VariableVisual> e2 = (List<VariableVisual>)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-2)).value;
VisualSemantica.AMBITO += 1;
                                        MetodoVisual met = new MetodoVisual(e1, e2, VisualSemantica.VOID);
                                        actual = met;
                                        sem.addListVar(e2);
                                        if(!sem.addMetodo(met)){
                                                reportarSem("Metodo ya existente con id: <"+e1+"> con mismos parametros");}
              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("NT$0",45, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // SUB ::= PUBLIC subb id para LISTPARAMM parc espacio NT$0 STATEMENTS endd subb espacio 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-4)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-9)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-9)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-9)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-7)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-7)).right;
		List<VariableVisual> e2 = (List<VariableVisual>)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-7)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-3)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-3)).right;
		ListaTripletes e3 = (ListaTripletes)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-3)).value;
		sem.eliminarAmbito(VisualSemantica.AMBITO);
                                        VisualSemantica.AMBITO -= 1;
                                        actual.getTripletes().addAll(e3);
              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("SUB",3, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-11)), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // NT$1 ::= 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-5)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-5)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-5)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-3)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-3)).right;
		List<VariableVisual> e2 = (List<VariableVisual>)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-3)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-1)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-1)).right;
		String e3 = (String)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-1)).value;
VisualSemantica.AMBITO += 1;
                                        MetodoVisual met = new MetodoVisual(e1, e2, e3);
                                        actual = met; met.setVisual(new VariableVisual(e1, VisualSemantica.AMBITO, e3,
                                        new AsignarValor(new TerminalOperator(e1), null, e3)));
                                        sem.addVar(new VariableVisual(e1, VisualSemantica.AMBITO, e3, new TerminalOperator(e1)));
                                        if(!sem.addListVar(e2)){
                                                reportarSem("Un parametro tiene el mismo nombre del de la función con id: <"+e1+">");
                                        } if(!sem.addMetodo(met)){
                                                reportarSem("Metodo ya existente con id: <"+e1+"> con mismos parametros");}
              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("NT$1",46, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // FUNCTION ::= PUBLIC functionn id para LISTPARAMM parc TYPE espacio NT$1 STATEMENTSF endd functionn espacio 
            {
              Object RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-4)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-10)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-10)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-10)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-8)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-8)).right;
		List<VariableVisual> e2 = (List<VariableVisual>)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-8)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-6)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-6)).right;
		String e3 = (String)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-6)).value;
		int e4left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-3)).left;
		int e4right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-3)).right;
		ListaTripletes e4 = (ListaTripletes)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-3)).value;
		sem.eliminarAmbito(VisualSemantica.AMBITO);
                                        VisualSemantica.AMBITO -= 1;
                                        actual.getTripletes().addAll(e4);
              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("FUNCTION",4, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-12)), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // DEFVAR ::= dimm LISTVAR espacio 
            {
              ListaTripletes RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-1)).right;
		List<VariableVisual> e1 = (List<VariableVisual>)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-1)).value;
		if(VisualSemantica.tienenTipos(e1)&&sem.addListVar(e1)){}
                                        else{reportarSem("Error con el tipado de variables");} 
                                        RESULT = new ListaTripletes(sem.devolverTrip(e1));
              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("DEFVAR",36, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // LISTPARAMM ::= LISTPARAM 
            {
              List<VariableVisual> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()).right;
		List<VariableVisual> e1 = (List<VariableVisual>)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.peek()).value;
		RESULT = e1;
              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("LISTPARAMM",9, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // LISTPARAMM ::= 
            {
              List<VariableVisual> RESULT =null;
		RESULT = new ArrayList<>();
              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("LISTPARAMM",9, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // LISTPARAM ::= LISTPARAM coma id TYPE 
            {
              List<VariableVisual> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-3)).right;
		List<VariableVisual> e1 = (List<VariableVisual>)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-1)).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-1)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()).right;
		String e3 = (String)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.peek()).value;
		e1.add(new VariableVisual(e2, (VisualSemantica.AMBITO + 1), e3, new TerminalOperator(e2)));
                                        RESULT = e1;
              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("LISTPARAM",10, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // LISTPARAM ::= id TYPE 
            {
              List<VariableVisual> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-1)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.peek()).value;
		List<VariableVisual> var = new ArrayList<>();
                        var.add(new VariableVisual(e1, (VisualSemantica.AMBITO + 1), e2, new TerminalOperator(e1)));
                        RESULT = var;
              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("LISTPARAM",10, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // LISTVAR ::= LISTVAR coma id TYPEE DEF 
            {
              List<VariableVisual> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-4)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-4)).right;
		List<VariableVisual> e1 = (List<VariableVisual>)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-4)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-2)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-2)).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-2)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-1)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-1)).right;
		String e3 = (String)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-1)).value;
		int e4left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()).left;
		int e4right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()).right;
		OperacionVisual e4 = (OperacionVisual)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.peek()).value;
		String tipo = VariableVisual.verificarTipo(e3, e4); VariableVisual va;
                        if(e4!=null){va = new VariableVisual(e2, VisualSemantica.AMBITO, tipo, 
                        new AsignarValor(new TerminalOperator(e2), e4.getTriplete(), OperacionVisual.obtenerTipo(e3)));
                        va.getTripletes().addAll(e4.mostrarTripletes());
                        }else{va = new VariableVisual(e2, VisualSemantica.AMBITO, tipo, 
                        new AsignarValor(new TerminalOperator(e2), null,OperacionVisual.obtenerTipo(e3)));}
                        va.setDefinido(e4 != null); va.setAstipo(e3 != null && e4 == null);
                        if(tipo == null && e3 != null && e4 != null){
                                reportarSem("No coincide el tipo con la asignación de la variable con id: " + e2);
                        } else if(e3 != null && e4 == null){
                                e1.add(va);
                                VisualSemantica.cambiarT(e1, e3);
                        } else {
                                e1.add(va);
                        } RESULT = e1;
              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("LISTVAR",11, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-4)), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // LISTVAR ::= id TYPEE DEF 
            {
              List<VariableVisual> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-1)).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-1)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()).right;
		OperacionVisual e3 = (OperacionVisual)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.peek()).value;
		List<VariableVisual> vars = new ArrayList<>(); String tipo = VariableVisual.verificarTipo(e2, e3); VariableVisual va;
                        if(e3!=null){va = new VariableVisual(e1, VisualSemantica.AMBITO, tipo, 
                        new AsignarValor(new TerminalOperator(e1), e3.getTriplete(),OperacionVisual.obtenerTipo(e2)));
                        va.getTripletes().addAll(e3.mostrarTripletes());
                        }else{va = new VariableVisual(e1, VisualSemantica.AMBITO, tipo, 
                        new AsignarValor(new TerminalOperator(e1), null,OperacionVisual.obtenerTipo(e2)));}
                        va.setDefinido(e3 != null); va.setAstipo(e2 != null && e3 == null);
                        if(tipo == null && e2 != null && e3 != null){
                                reportarSem("No coincide el tipo con la asignación de la variable con id: " + e1);
                        } vars.add(va); RESULT = vars;
              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("LISTVAR",11, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // ASIGVAR ::= id igual EXPR espacio 
            {
              ListaTripletes RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-3)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-1)).right;
		OperacionVisual e2 = (OperacionVisual)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-1)).value;
		VariableVisual var = sem.existeVar(new VariableVisual(e1, VisualSemantica.AMBITO, null));
                                ListaTripletes trip = new ListaTripletes();
                                if(var==null || !var.getTipo().contains(e2.getTipo())){
                                reportarSem("No coincide el tipo con la asignación de la variable con id: " + e2);}
                                else{trip.addAll(e2.mostrarTripletes()); SumOperator sum = sem.devolverSum(e1);
                                trip.add(sum);
                                trip.add(new AsignarValor(new TerminalOperator(sem.devolverDireccion(sum.getId())), e2.getTriplete(), null));}
                                RESULT = trip;
              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("ASIGVAR",28, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // TYPE ::= ass integerr 
            {
              String RESULT =null;
		RESULT = VisualSemantica.INT;
              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("TYPE",12, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // TYPE ::= ass charr 
            {
              String RESULT =null;
		RESULT = VisualSemantica.CHAR;
              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("TYPE",12, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // TYPE ::= ass decimall 
            {
              String RESULT =null;
		RESULT = VisualSemantica.FLOAT;
              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("TYPE",12, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // TYPEE ::= ass integerr 
            {
              String RESULT =null;
		RESULT = VisualSemantica.INT;
              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("TYPEE",13, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // TYPEE ::= ass charr 
            {
              String RESULT =null;
		RESULT = VisualSemantica.CHAR;
              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("TYPEE",13, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // TYPEE ::= ass decimall 
            {
              String RESULT =null;
		RESULT = VisualSemantica.FLOAT;
              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("TYPEE",13, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // TYPEE ::= 
            {
              String RESULT =null;
		RESULT = null;
              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("TYPEE",13, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // DEF ::= igual EXPR 
            {
              OperacionVisual RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()).right;
		OperacionVisual e1 = (OperacionVisual)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.peek()).value;
		RESULT = e1;
              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("DEF",19, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // DEF ::= 
            {
              OperacionVisual RESULT =null;
		RESULT = null;
              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("DEF",19, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // OPERACION_A ::= OPERACION_A mas OPERACION_M 
            {
              OperacionVisual RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-2)).right;
		OperacionVisual e1 = (OperacionVisual)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()).right;
		OperacionVisual e2 = (OperacionVisual)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.peek()).value;
		if(e1!=null && e2 !=null){RESULT = new OperacionVisual(e1, e2,
                        new SumOperator(null, e1.getTriplete(), e2.getTriplete(), OperacionVisual.obtenerTipo(e1, e2)));};
              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("OPERACION_A",15, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // OPERACION_A ::= OPERACION_A menos OPERACION_M 
            {
              OperacionVisual RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-2)).right;
		OperacionVisual e1 = (OperacionVisual)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()).right;
		OperacionVisual e2 = (OperacionVisual)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.peek()).value;
		if(e1!=null && e2 !=null){RESULT = new OperacionVisual(e1, e2,
                        new RestOperator(null, e1.getTriplete(), e2.getTriplete(), OperacionVisual.obtenerTipo(e1, e2)));}
              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("OPERACION_A",15, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // OPERACION_A ::= OPERACION_M 
            {
              OperacionVisual RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()).right;
		OperacionVisual e1 = (OperacionVisual)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.peek()).value;
		RESULT = e1;
              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("OPERACION_A",15, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // OPERACION_M ::= OPERACION_M por OPERACION_U 
            {
              OperacionVisual RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-2)).right;
		OperacionVisual e1 = (OperacionVisual)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()).right;
		OperacionVisual e2 = (OperacionVisual)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.peek()).value;
		if(e1!=null && e2 !=null){RESULT = new OperacionVisual(e1, e2,
                                new PorOperator(null, e1.getTriplete(), e2.getTriplete(), OperacionVisual.obtenerTipo(e1, e2)));}
              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("OPERACION_M",16, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // OPERACION_M ::= OPERACION_M div OPERACION_U 
            {
              OperacionVisual RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-2)).right;
		OperacionVisual e1 = (OperacionVisual)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()).right;
		OperacionVisual e2 = (OperacionVisual)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.peek()).value;
		if(e1!=null && e2 !=null){RESULT = new OperacionVisual(e1, e2,
                                new DivOperator(null, e1.getTriplete(), e2.getTriplete(), OperacionVisual.obtenerTipo(e1, e2)));}
              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("OPERACION_M",16, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // OPERACION_M ::= OPERACION_M mod OPERACION_U 
            {
              OperacionVisual RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-2)).right;
		OperacionVisual e1 = (OperacionVisual)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()).right;
		OperacionVisual e2 = (OperacionVisual)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.peek()).value;
		if(e1!=null && e2 !=null){RESULT = new OperacionVisual(e1, e2,
                                new ModOperator(null, e1.getTriplete(), e2.getTriplete(), OperacionVisual.obtenerTipo(e1, e2)));}
              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("OPERACION_M",16, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // OPERACION_M ::= OPERACION_U 
            {
              OperacionVisual RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()).right;
		OperacionVisual e1 = (OperacionVisual)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.peek()).value;
		RESULT = e1;
              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("OPERACION_M",16, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // OPERACION_U ::= menos OPERACION_U 
            {
              OperacionVisual RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()).right;
		OperacionVisual e1 = (OperacionVisual)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.peek()).value;
		RESULT = new OperacionVisual(new OperacionVisual(PythonSemantica.INT, new TerminalOperator("0")),
                        e1, new RestOperator(null, new TerminalOperator("0"), e1.getTriplete(), OperacionVisual.obtenerTipo(e1)));
              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("OPERACION_U",17, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // OPERACION_U ::= mas OPERACION_U 
            {
              OperacionVisual RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()).right;
		OperacionVisual e1 = (OperacionVisual)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.peek()).value;
		RESULT = e1;
              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("OPERACION_U",17, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // OPERACION_U ::= ATOM 
            {
              OperacionVisual RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()).right;
		OperacionVisual e1 = (OperacionVisual)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.peek()).value;
		RESULT = e1;
              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("OPERACION_U",17, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // ATOM ::= id 
            {
              OperacionVisual RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.peek()).value;
		VariableVisual var = sem.existeVar(new VariableVisual(e1, VisualSemantica.AMBITO, null)); 
                if(var==null){
                        reportarSem("No existe la variable con id: " + e1);
                } else {
                        SumOperator sum = sem.devolverSum(e1);
                        OperacionVisual op = new OperacionVisual(var.getTipo(), new TerminalOperator(sem.devolverDireccion(sum.getId())));
                        op.getTripletes().add(sum);
                        RESULT = op;
                }
              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("ATOM",18, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // ATOM ::= entero 
            {
              OperacionVisual RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.peek()).value;
		RESULT = new OperacionVisual(VisualSemantica.INT, new TerminalOperator(e1));
              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("ATOM",18, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // ATOM ::= decimal 
            {
              OperacionVisual RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.peek()).value;
		RESULT = new OperacionVisual(VisualSemantica.FLOAT, new TerminalOperator(e1));
              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("ATOM",18, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // ATOM ::= para OPERACION_A parc 
            {
              OperacionVisual RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-1)).right;
		OperacionVisual e1 = (OperacionVisual)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-1)).value;
		RESULT = e1;
              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("ATOM",18, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // STATEMENTS ::= STATEMENTS STATEMENT 
            {
              ListaTripletes RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-1)).right;
		ListaTripletes e1 = (ListaTripletes)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()).right;
		ListaTripletes e2 = (ListaTripletes)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.peek()).value;
		e1.addAll(e2); RESULT = e1;
              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("STATEMENTS",22, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // STATEMENTS ::= 
            {
              ListaTripletes RESULT =null;
		RESULT = new ListaTripletes();
              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("STATEMENTS",22, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // STATEMENTSF ::= STATEMENT STATEMENTSF 
            {
              ListaTripletes RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-1)).right;
		ListaTripletes e1 = (ListaTripletes)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()).right;
		ListaTripletes e2 = (ListaTripletes)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.peek()).value;
		if(e1.isRet() && e2.isRet()){
                                                        reportarSem("ya existe varios returns, algunos no se toman en cuenta");
                                                }else {e1.addAll(e2);} RESULT = e1;
              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("STATEMENTSF",27, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // STATEMENTSF ::= returnn EXPR espacio 
            {
              ListaTripletes RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-1)).right;
		OperacionVisual e1 = (OperacionVisual)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-1)).value;
		ListaTripletes tri = new ListaTripletes();
                if(e1 == null || !actual.getTIPO().contains(e1.getTipo())){
                        reportarSem("No coincide el tipo del return con el tipo de la función con id: " + actual.getId());}
                else{
                        tri.setRet(true);
                        tri.addAll(e1.mostrarTripletes());
                        tri.add(new Return(e1.getTriplete()));}
                        RESULT = tri;
              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("STATEMENTSF",27, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // STATEMENTSF ::= 
            {
              ListaTripletes RESULT =null;
		RESULT = new ListaTripletes();
              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("STATEMENTSF",27, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // EXPR ::= OPERACION_A 
            {
              OperacionVisual RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()).right;
		OperacionVisual e1 = (OperacionVisual)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.peek()).value;
		RESULT = e1;
              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("EXPR",14, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // EXPR ::= INPUT 
            {
              OperacionVisual RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()).right;
		OperacionVisual e1 = (OperacionVisual)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.peek()).value;
		RESULT = e1;
              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("EXPR",14, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // EXPR ::= character 
            {
              OperacionVisual RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.peek()).value;
		RESULT = new OperacionVisual(VisualSemantica.CHAR, new TerminalOperator("'"+e1+"'"));
              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("EXPR",14, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // STATEMENT ::= IF_ELSE 
            {
              ListaTripletes RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()).right;
		ListaTripletes e1 = (ListaTripletes)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.peek()).value;
		RESULT = e1;
              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("STATEMENT",23, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // STATEMENT ::= SELECT 
            {
              ListaTripletes RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()).right;
		ListaTripletes e1 = (ListaTripletes)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.peek()).value;
		RESULT = e1;
              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("STATEMENT",23, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // STATEMENT ::= FOR 
            {
              ListaTripletes RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()).right;
		ListaTripletes e1 = (ListaTripletes)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.peek()).value;
		RESULT = e1;
              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("STATEMENT",23, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // STATEMENT ::= WHILE 
            {
              ListaTripletes RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()).right;
		ListaTripletes e1 = (ListaTripletes)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.peek()).value;
		RESULT = e1;
              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("STATEMENT",23, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // STATEMENT ::= DO_WHILE 
            {
              ListaTripletes RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()).right;
		ListaTripletes e1 = (ListaTripletes)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.peek()).value;
		RESULT = e1;
              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("STATEMENT",23, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // STATEMENT ::= STATEMENTLINE 
            {
              ListaTripletes RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()).right;
		ListaTripletes e1 = (ListaTripletes)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.peek()).value;
		RESULT = e1;
              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("STATEMENT",23, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // STATEMENT ::= error 
            {
              ListaTripletes RESULT =null;
		RESULT = new ListaTripletes();
              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("STATEMENT",23, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // NT$2 ::= 
            {
              ListaTripletes RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-2)).right;
		CondicionPrograma e1 = (CondicionPrograma)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-2)).value;
VisualSemantica.AMBITO += 1;
              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("NT$2",47, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // NT$3 ::= 
            {
              ListaTripletes RESULT =(ListaTripletes) ((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-1)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-4)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-4)).right;
		CondicionPrograma e1 = (CondicionPrograma)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-4)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()).right;
		ListaTripletes e2 = (ListaTripletes)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.peek()).value;
sem.eliminarAmbito(VisualSemantica.AMBITO); VisualSemantica.AMBITO -= 1;
              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("NT$3",48, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // IF_ELSE ::= iff CONDICION THEN espacio NT$2 STATEMENTS NT$3 ELSE_IF ELSE endd iff espacio 
            {
              ListaTripletes RESULT =null;
              // propagate RESULT from NT$3
                RESULT = (ListaTripletes) ((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-5)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-10)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-10)).right;
		CondicionPrograma e1 = (CondicionPrograma)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-10)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-6)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-6)).right;
		ListaTripletes e2 = (ListaTripletes)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-6)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-4)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-4)).right;
		Else_Operator e3 = (Else_Operator)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-4)).value;
		int e4left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-3)).left;
		int e4right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-3)).right;
		ListaTripletes e4 = (ListaTripletes)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-3)).value;
		e3.agregarIf(e1, e2); RESULT = e3.juntarTripletes(e4);
              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("IF_ELSE",30, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-11)), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // NT$4 ::= 
            {
              ListaTripletes RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-1)).right;
		CondicionPrograma e1 = (CondicionPrograma)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-1)).value;
VisualSemantica.AMBITO += 1;
              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("NT$4",49, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // IF_ELSE ::= iff CONDICION thenn NT$4 STATEMENTLINE espacio 
            {
              ListaTripletes RESULT =null;
              // propagate RESULT from NT$4
                RESULT = (ListaTripletes) ((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-2)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-4)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-4)).right;
		CondicionPrograma e1 = (CondicionPrograma)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-4)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-1)).right;
		ListaTripletes e2 = (ListaTripletes)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-1)).value;
		sem.eliminarAmbito(VisualSemantica.AMBITO); VisualSemantica.AMBITO -= 1; 
                RESULT = Else_Operator.IFSIMPLE(e1, e2);
              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("IF_ELSE",30, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-5)), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // NT$5 ::= 
            {
              Else_Operator RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-4)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-4)).right;
		Else_Operator e1 = (Else_Operator)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-4)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-2)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-2)).right;
		CondicionPrograma e2 = (CondicionPrograma)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-2)).value;
VisualSemantica.AMBITO += 1;
              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("NT$5",50, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // ELSE_IF ::= ELSE_IF elseiff CONDICION THEN espacio NT$5 STATEMENTS 
            {
              Else_Operator RESULT =null;
              // propagate RESULT from NT$5
                RESULT = (Else_Operator) ((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-1)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-6)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-6)).right;
		Else_Operator e1 = (Else_Operator)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-6)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-4)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-4)).right;
		CondicionPrograma e2 = (CondicionPrograma)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-4)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()).right;
		ListaTripletes e3 = (ListaTripletes)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.peek()).value;
		sem.eliminarAmbito(VisualSemantica.AMBITO); VisualSemantica.AMBITO -= 1; RESULT = e1.agregarElseIf(e2, e3);
              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("ELSE_IF",44, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-6)), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // ELSE_IF ::= 
            {
              Else_Operator RESULT =null;
		RESULT = new Else_Operator();
              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("ELSE_IF",44, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // NT$6 ::= 
            {
              ListaTripletes RESULT =null;
VisualSemantica.AMBITO += 1;
              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("NT$6",51, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // ELSE ::= elsee espacio NT$6 STATEMENTS 
            {
              ListaTripletes RESULT =null;
              // propagate RESULT from NT$6
                RESULT = (ListaTripletes) ((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-1)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()).right;
		ListaTripletes e1 = (ListaTripletes)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.peek()).value;
		sem.eliminarAmbito(VisualSemantica.AMBITO); VisualSemantica.AMBITO -= 1;
        RESULT = e1;
              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("ELSE",29, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // ELSE ::= 
            {
              ListaTripletes RESULT =null;
		RESULT = new ListaTripletes();
              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("ELSE",29, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // THEN ::= thenn 
            {
              Object RESULT =null;

              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("THEN",6, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // THEN ::= 
            {
              Object RESULT =null;

              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("THEN",6, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // STATEMENTLINE ::= CONSOLEWRITE 
            {
              ListaTripletes RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()).right;
		ListaTripletes e1 = (ListaTripletes)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.peek()).value;
		RESULT = e1;
              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("STATEMENTLINE",32, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // STATEMENTLINE ::= INPUT 
            {
              ListaTripletes RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()).right;
		OperacionVisual e1 = (OperacionVisual)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.peek()).value;
		AsignarValor vl = new AsignarValor(new AsignarTemporal(null, null, e1.getTipo()),null
                ,OperacionVisual.obtenerTipo(e1)); 
                ListaTripletes tri = new ListaTripletes(); tri.add(vl); 
                tri.add(new AsignarValor(vl.getOperando1(), e1.getTriplete(), null)); RESULT = tri;
              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("STATEMENTLINE",32, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // STATEMENTLINE ::= DEFVAR 
            {
              ListaTripletes RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()).right;
		ListaTripletes e1 = (ListaTripletes)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.peek()).value;
		RESULT = e1;
              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("STATEMENTLINE",32, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // STATEMENTLINE ::= ASIGVAR 
            {
              ListaTripletes RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()).right;
		ListaTripletes e1 = (ListaTripletes)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.peek()).value;
		RESULT = e1;
              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("STATEMENTLINE",32, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // SELECT ::= selectt CA EXPR espacio CASES CASEELSE endd selectt espacio 
            {
              ListaTripletes RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-6)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-6)).right;
		OperacionVisual e1 = (OperacionVisual)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-6)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-4)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-4)).right;
		CaseVisual e2 = (CaseVisual)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-4)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-3)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-3)).right;
		ListaTripletes e3 = (ListaTripletes)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-3)).value;
		RESULT = e2.agregarDefault(e1, e3);
              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("SELECT",31, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-8)), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // SELECT ::= error espacio CASES CASEELSE endd selectt espacio 
            {
              ListaTripletes RESULT =null;
		RESULT = new ListaTripletes();
              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("SELECT",31, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-6)), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // CA ::= casee 
            {
              Object RESULT =null;

              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("CA",7, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // CA ::= 
            {
              Object RESULT =null;

              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("CA",7, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // NT$7 ::= 
            {
              ListaTripletes RESULT =null;
VisualSemantica.AMBITO += 1;
              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("NT$7",52, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // CASEELSE ::= casee elsee espacio NT$7 STATEMENTS 
            {
              ListaTripletes RESULT =null;
              // propagate RESULT from NT$7
                RESULT = (ListaTripletes) ((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-1)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()).right;
		ListaTripletes e1 = (ListaTripletes)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.peek()).value;
		sem.eliminarAmbito(VisualSemantica.AMBITO); VisualSemantica.AMBITO -= 1; RESULT = e1;
              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("CASEELSE",26, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-4)), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // CASEELSE ::= 
            {
              ListaTripletes RESULT =null;

              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("CASEELSE",26, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // NT$8 ::= 
            {
              CaseVisual RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-3)).right;
		CaseVisual e1 = (CaseVisual)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-1)).right;
		List<OperacionVisual> e2 = (List<OperacionVisual>)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-1)).value;
VisualSemantica.AMBITO += 1;
              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("NT$8",53, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // CASES ::= CASES casee LIST_CASE espacio NT$8 STATEMENTS 
            {
              CaseVisual RESULT =null;
              // propagate RESULT from NT$8
                RESULT = (CaseVisual) ((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-1)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-5)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-5)).right;
		CaseVisual e1 = (CaseVisual)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-5)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-3)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-3)).right;
		List<OperacionVisual> e2 = (List<OperacionVisual>)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-3)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()).right;
		ListaTripletes e3 = (ListaTripletes)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.peek()).value;
		sem.eliminarAmbito(VisualSemantica.AMBITO); VisualSemantica.AMBITO -= 1; RESULT = e1.agregarCase(e2, e3);
              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("CASES",43, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-5)), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // CASES ::= 
            {
              CaseVisual RESULT =null;
		RESULT = new CaseVisual();
              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("CASES",43, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // LIST_CASE ::= LIST_CASE coma OPERACION_A 
            {
              List<OperacionVisual> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-2)).right;
		List<OperacionVisual> e1 = (List<OperacionVisual>)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()).right;
		OperacionVisual e2 = (OperacionVisual)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.peek()).value;
		e1.add(e2); RESULT = e1;
              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("LIST_CASE",42, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // LIST_CASE ::= OPERACION_A 
            {
              List<OperacionVisual> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()).right;
		OperacionVisual e1 = (OperacionVisual)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.peek()).value;
		List<OperacionVisual> op = new ArrayList<>(); op.add(e1); RESULT =op;
              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("LIST_CASE",42, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // NT$9 ::= 
            {
              ListaTripletes RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-7)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-7)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-7)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-6)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-6)).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-6)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-4)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-4)).right;
		OperacionVisual e3 = (OperacionVisual)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-4)).value;
		int e4left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-2)).left;
		int e4right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-2)).right;
		OperacionVisual e4 = (OperacionVisual)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-2)).value;
		int e5left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-1)).left;
		int e5right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-1)).right;
		OperacionVisual e5 = (OperacionVisual)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-1)).value;
VisualSemantica.AMBITO += 1;
              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("NT$9",54, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // FOR ::= forr id TYPE igual OPERACION_A to OPERACION_A STEP espacio NT$9 STATEMENTS nextt ID espacio 
            {
              ListaTripletes RESULT =null;
              // propagate RESULT from NT$9
                RESULT = (ListaTripletes) ((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-4)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-12)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-12)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-12)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-11)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-11)).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-11)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-9)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-9)).right;
		OperacionVisual e3 = (OperacionVisual)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-9)).value;
		int e4left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-7)).left;
		int e4right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-7)).right;
		OperacionVisual e4 = (OperacionVisual)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-7)).value;
		int e5left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-6)).left;
		int e5right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-6)).right;
		OperacionVisual e5 = (OperacionVisual)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-6)).value;
		int e6left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-3)).left;
		int e6right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-3)).right;
		ListaTripletes e6 = (ListaTripletes)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-3)).value;
		int e7left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-1)).left;
		int e7right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-1)).right;
		String e7 = (String)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-1)).value;
		sem.eliminarAmbito(VisualSemantica.AMBITO); VisualSemantica.AMBITO -= 1;
                if(e7!=null && !e1.equals(e1)){
                        reportarSem("No coincide el id del for, con el next del mismo for, id1: " + e1 + "  id2: " + e7);}
                else{RESULT = Else_Operator.FORV(e1, e2, e3, e4, e5, e6);}
              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("FOR",35, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-13)), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // ID ::= id 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.peek()).value;
		RESULT = e1;
              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("ID",41, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // ID ::= 
            {
              String RESULT =null;
		RESULT = null;
              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("ID",41, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // STEP ::= stepp OPERACION_A 
            {
              OperacionVisual RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()).right;
		OperacionVisual e1 = (OperacionVisual)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.peek()).value;
		RESULT = e1;
              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("STEP",21, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // NT$10 ::= 
            {
              ListaTripletes RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-1)).right;
		CondicionPrograma e1 = (CondicionPrograma)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-1)).value;
VisualSemantica.AMBITO += 1;
              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("NT$10",55, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // WHILE ::= whilee CONDICION espacio NT$10 STATEMENTS endd whilee espacio 
            {
              ListaTripletes RESULT =null;
              // propagate RESULT from NT$10
                RESULT = (ListaTripletes) ((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-4)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-6)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-6)).right;
		CondicionPrograma e1 = (CondicionPrograma)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-6)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-3)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-3)).right;
		ListaTripletes e2 = (ListaTripletes)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-3)).value;
		sem.eliminarAmbito(VisualSemantica.AMBITO); VisualSemantica.AMBITO -= 1; RESULT = Else_Operator.WHILE(e1, e2);
              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("WHILE",33, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-7)), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // NT$11 ::= 
            {
              ListaTripletes RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-1)).right;
		CondicionPrograma e1 = (CondicionPrograma)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-1)).value;
VisualSemantica.AMBITO += 1;
              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("NT$11",56, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // DO_WHILE ::= doo whilee CONDICION espacio NT$11 STATEMENTS loopp espacio 
            {
              ListaTripletes RESULT =null;
              // propagate RESULT from NT$11
                RESULT = (ListaTripletes) ((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-3)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-5)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-5)).right;
		CondicionPrograma e1 = (CondicionPrograma)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-5)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-2)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-2)).right;
		ListaTripletes e2 = (ListaTripletes)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-2)).value;
		sem.eliminarAmbito(VisualSemantica.AMBITO); VisualSemantica.AMBITO -= 1; RESULT = Else_Operator.DOWHILE(e1, e2);
              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("DO_WHILE",34, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-7)), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // NT$12 ::= 
            {
              ListaTripletes RESULT =null;
VisualSemantica.AMBITO += 1;
              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("NT$12",57, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // DO_WHILE ::= doo espacio NT$12 STATEMENTS loopp whilee CONDICION espacio 
            {
              ListaTripletes RESULT =null;
              // propagate RESULT from NT$12
                RESULT = (ListaTripletes) ((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-5)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-4)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-4)).right;
		ListaTripletes e2 = (ListaTripletes)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-4)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-1)).right;
		CondicionPrograma e1 = (CondicionPrograma)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-1)).value;
		sem.eliminarAmbito(VisualSemantica.AMBITO); VisualSemantica.AMBITO -= 1; RESULT = Else_Operator.DOWHILE(e1, e2);
              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("DO_WHILE",34, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-7)), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // CONSOLEWRITE ::= write para STRING parc espacio 
            {
              ListaTripletes RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-2)).right;
		ListaTripletes e1 = (ListaTripletes)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-2)).value;
		RESULT = e1;
              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("CONSOLEWRITE",24, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-4)), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // CONSOLEWRITE ::= writeln para STRING parc espacio 
            {
              ListaTripletes RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-2)).right;
		ListaTripletes e1 = (ListaTripletes)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-2)).value;
		e1.add(new Printf("\n")); RESULT = e1;
              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("CONSOLEWRITE",24, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-4)), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // INPUT ::= charinput para string parc 
            {
              OperacionVisual RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-1)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-1)).value;
		OperacionVisual op = new OperacionVisual(VisualSemantica.CHAR,
                                new Input("%d"));
                                op.getTripletes().add(new Printf(e1));
                                RESULT = op;
              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("INPUT",20, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // INPUT ::= floatinput para string parc 
            {
              OperacionVisual RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-1)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-1)).value;
		OperacionVisual op = new OperacionVisual(VisualSemantica.FLOAT,
                                new Input("%c"));
                                op.getTripletes().add(new Printf(e1));
                                RESULT = op;
              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("INPUT",20, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // INPUT ::= intinput para string parc 
            {
              OperacionVisual RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-1)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-1)).value;
		OperacionVisual op = new OperacionVisual(VisualSemantica.INT,
                                new Input("%f"));
                                op.getTripletes().add(new Printf(e1));
                                RESULT = op;
              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("INPUT",20, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // CONDICION ::= CONDICION orr AND 
            {
              CondicionPrograma RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-2)).right;
		CondicionPrograma e1 = (CondicionPrograma)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()).right;
		CondicionPrograma e2 = (CondicionPrograma)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.peek()).value;
		RESULT = IfPrograma.OR(e1, e2);
              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("CONDICION",37, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // CONDICION ::= AND 
            {
              CondicionPrograma RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()).right;
		CondicionPrograma e1 = (CondicionPrograma)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.peek()).value;
		RESULT = e1;
              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("CONDICION",37, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // CONDICION ::= error AND 
            {
              CondicionPrograma RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()).right;
		CondicionPrograma e1 = (CondicionPrograma)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.peek()).value;
		RESULT = e1;
              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("CONDICION",37, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // AND ::= AND andd NOT 
            {
              CondicionPrograma RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-2)).right;
		CondicionPrograma e1 = (CondicionPrograma)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()).right;
		CondicionPrograma e2 = (CondicionPrograma)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.peek()).value;
		RESULT = IfPrograma.AND(e1, e2);
              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("AND",39, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // AND ::= NOT 
            {
              CondicionPrograma RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()).right;
		CondicionPrograma e1 = (CondicionPrograma)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.peek()).value;
		RESULT = e1;
              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("AND",39, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // NOT ::= nott NOT 
            {
              CondicionPrograma RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()).right;
		CondicionPrograma e1 = (CondicionPrograma)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.peek()).value;
		RESULT = IfPrograma.NOT(e1);
              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("NOT",38, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // NOT ::= COMPARACION 
            {
              CondicionPrograma RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()).right;
		Triplete e1 = (Triplete)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.peek()).value;
		RESULT = new IfPrograma(new If_Operator(e1, new Etiqueta()), ((CondicionalOperator)e1).getTripletes());
              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("NOT",38, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // NOT ::= para CONDICION parc 
            {
              CondicionPrograma RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-1)).right;
		CondicionPrograma e1 = (CondicionPrograma)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-1)).value;
		RESULT = e1;
              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("NOT",38, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // COMPARACION ::= OPERACION_A igual OPERACION_A 
            {
              Triplete RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-2)).right;
		OperacionVisual e1 = (OperacionVisual)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()).right;
		OperacionVisual e2 = (OperacionVisual)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.peek()).value;
		RESULT = new IgualOperator(e1.getTriplete(), e2.getTriplete(),
                e1.getTripletes(), e2.getTripletes());
              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("COMPARACION",40, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // COMPARACION ::= OPERACION_A noigual OPERACION_A 
            {
              Triplete RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-2)).right;
		OperacionVisual e1 = (OperacionVisual)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()).right;
		OperacionVisual e2 = (OperacionVisual)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.peek()).value;
		RESULT = new NoIgualOperator(e1.getTriplete(), e2.getTriplete(),
                e1.getTripletes(), e2.getTripletes());
              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("COMPARACION",40, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // COMPARACION ::= OPERACION_A menor OPERACION_A 
            {
              Triplete RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-2)).right;
		OperacionVisual e1 = (OperacionVisual)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()).right;
		OperacionVisual e2 = (OperacionVisual)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.peek()).value;
		RESULT = new MenorOperator(e1.getTriplete(), e2.getTriplete(),
                e1.getTripletes(), e2.getTripletes());
              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("COMPARACION",40, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // COMPARACION ::= OPERACION_A menorig OPERACION_A 
            {
              Triplete RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-2)).right;
		OperacionVisual e1 = (OperacionVisual)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()).right;
		OperacionVisual e2 = (OperacionVisual)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.peek()).value;
		RESULT = new MenorIgOperator(e1.getTriplete(), e2.getTriplete(),
                e1.getTripletes(), e2.getTripletes());
              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("COMPARACION",40, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // COMPARACION ::= OPERACION_A mayor OPERACION_A 
            {
              Triplete RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-2)).right;
		OperacionVisual e1 = (OperacionVisual)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()).right;
		OperacionVisual e2 = (OperacionVisual)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.peek()).value;
		RESULT = new MayorOperator(e1.getTriplete(), e2.getTriplete(),
                e1.getTripletes(), e2.getTripletes());
              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("COMPARACION",40, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // COMPARACION ::= OPERACION_A mayorig OPERACION_A 
            {
              Triplete RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-2)).right;
		OperacionVisual e1 = (OperacionVisual)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()).right;
		OperacionVisual e2 = (OperacionVisual)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.peek()).value;
		RESULT = new MayorIgOperator(e1.getTriplete(), e2.getTriplete(),
                e1.getTripletes(), e2.getTripletes());
              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("COMPARACION",40, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // STRING ::= STRING y EXPR 
            {
              ListaTripletes RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-2)).right;
		ListaTripletes e1 = (ListaTripletes)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()).right;
		OperacionVisual e2 = (OperacionVisual)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.peek()).value;
		e1.addAll(e2.getTripletes()); e1.add(new Printf(Input.tipoVisual(e2), e2.getTriplete())); RESULT = e1;
              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("STRING",25, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // STRING ::= STRING y string 
            {
              ListaTripletes RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-2)).right;
		ListaTripletes e1 = (ListaTripletes)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.peek()).value;
		e1.add(new Printf(e2)); RESULT = e1;
              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("STRING",25, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // STRING ::= EXPR 
            {
              ListaTripletes RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()).right;
		OperacionVisual e1 = (OperacionVisual)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.peek()).value;
		ListaTripletes tri = new ListaTripletes(); tri.addAll(e1.getTripletes());
                tri.add(new Printf(Input.tipoVisual(e1), e1.getTriplete()));
                RESULT = tri;
              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("STRING",25, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // STRING ::= string 
            {
              ListaTripletes RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.peek()).value;
		ListaTripletes tri = new ListaTripletes(); tri.add(new Printf(e1));
                RESULT = tri;
              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("STRING",25, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$SintaxisVisual$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$SintaxisVisual$do_action(
    int                        CUP$SintaxisVisual$act_num,
    java_cup.runtime.lr_parser CUP$SintaxisVisual$parser,
    java.util.Stack            CUP$SintaxisVisual$stack,
    int                        CUP$SintaxisVisual$top)
    throws java.lang.Exception
    {
              return CUP$SintaxisVisual$do_action_part00000000(
                               CUP$SintaxisVisual$act_num,
                               CUP$SintaxisVisual$parser,
                               CUP$SintaxisVisual$stack,
                               CUP$SintaxisVisual$top);
    }
}

}
