
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package com.mycompany.assofjpybasic.backend.analizador.visual;

import java_cup.runtime.*;
import com.mycompany.assofjpybasic.backend.semantica.visual.*;
import com.mycompany.assofjpybasic.backend.semantica.programa.*;
import com.mycompany.assofjpybasic.backend.semantica.python.*;
import com.mycompany.assofjpybasic.backend.semantica.programa.cod3.*;
import com.mycompany.assofjpybasic.backend.error.Errores;
import java.util.ArrayList;
import java.util.List;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class SintaxisVisual extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return SintaxisVisualSym.class;
}

  /** Default constructor. */
  @Deprecated
  public SintaxisVisual() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public SintaxisVisual(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public SintaxisVisual(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\267\000\002\002\004\000\002\002\004\000\002\007" +
    "\003\000\002\007\002\000\002\013\003\000\002\013\002" +
    "\000\002\003\004\000\002\003\002\000\002\004\003\000" +
    "\002\004\003\000\002\004\004\000\002\063\002\000\002" +
    "\005\016\000\002\064\002\000\002\006\017\000\002\050" +
    "\004\000\002\014\003\000\002\014\002\000\002\015\007" +
    "\000\002\015\005\000\002\015\007\000\002\015\007\000" +
    "\002\010\003\000\002\010\002\000\002\016\007\000\002" +
    "\016\005\000\002\016\007\000\002\040\005\000\002\040" +
    "\005\000\002\040\005\000\002\040\005\000\002\017\004" +
    "\000\002\017\004\000\002\017\004\000\002\020\004\000" +
    "\002\020\004\000\002\020\004\000\002\020\002\000\002" +
    "\026\004\000\002\026\002\000\002\022\005\000\002\022" +
    "\005\000\002\022\003\000\002\023\005\000\002\023\005" +
    "\000\002\023\005\000\002\023\003\000\002\024\004\000" +
    "\002\024\004\000\002\024\003\000\002\024\003\000\002" +
    "\025\003\000\002\025\003\000\002\025\003\000\002\025" +
    "\005\000\002\032\004\000\002\032\002\000\002\037\004" +
    "\000\002\037\005\000\002\037\002\000\002\021\003\000" +
    "\002\021\003\000\002\021\003\000\002\033\003\000\002" +
    "\033\003\000\002\033\003\000\002\033\003\000\002\033" +
    "\003\000\002\033\004\000\002\033\003\000\002\065\002" +
    "\000\002\066\002\000\002\042\016\000\002\067\002\000" +
    "\002\042\010\000\002\070\002\000\002\071\002\000\002" +
    "\042\016\000\002\072\002\000\002\073\002\000\002\042" +
    "\015\000\002\074\002\000\002\062\011\000\002\062\002" +
    "\000\002\075\002\000\002\062\011\000\002\076\002\000" +
    "\002\062\011\000\002\077\002\000\002\041\006\000\002" +
    "\041\002\000\002\011\003\000\002\011\002\000\002\044" +
    "\003\000\002\044\003\000\002\044\003\000\002\044\003" +
    "\000\002\044\003\000\002\043\013\000\002\043\011\000" +
    "\002\012\003\000\002\012\002\000\002\100\002\000\002" +
    "\036\007\000\002\036\002\000\002\101\002\000\002\061" +
    "\010\000\002\061\002\000\002\056\005\000\002\056\003" +
    "\000\002\102\002\000\002\047\020\000\002\103\002\000" +
    "\002\047\020\000\002\104\002\000\002\047\020\000\002" +
    "\105\002\000\002\047\020\000\002\106\002\000\002\047" +
    "\020\000\002\107\002\000\002\047\020\000\002\110\002" +
    "\000\002\047\020\000\002\055\003\000\002\055\002\000" +
    "\002\030\004\000\002\111\002\000\002\045\012\000\002" +
    "\112\002\000\002\045\012\000\002\113\002\000\002\045" +
    "\012\000\002\114\002\000\002\046\012\000\002\115\002" +
    "\000\002\046\012\000\002\116\002\000\002\046\012\000" +
    "\002\034\006\000\002\034\006\000\002\034\006\000\002" +
    "\034\006\000\002\034\006\000\002\034\006\000\002\034" +
    "\006\000\002\034\006\000\002\027\006\000\002\027\006" +
    "\000\002\027\006\000\002\027\006\000\002\027\006\000" +
    "\002\027\006\000\002\027\006\000\002\027\006\000\002" +
    "\027\006\000\002\027\006\000\002\027\006\000\002\027" +
    "\006\000\002\051\005\000\002\051\003\000\002\051\004" +
    "\000\002\053\005\000\002\053\003\000\002\052\004\000" +
    "\002\052\003\000\002\052\005\000\002\054\005\000\002" +
    "\054\005\000\002\054\005\000\002\054\005\000\002\054" +
    "\005\000\002\054\005\000\002\035\005\000\002\035\005" +
    "\000\002\035\003\000\002\035\003\000\002\031\006\000" +
    "\002\031\006\000\002\060\003\000\002\060\002\000\002" +
    "\057\005\000\002\057\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u01a6\000\016\002\ufffe\003\ufffe\004\004\005\ufffe\006" +
    "\ufffe\010\ufffe\001\002\000\014\002\uffff\003\uffff\005\uffff" +
    "\006\uffff\010\uffff\001\002\000\004\002\u01a8\001\002\000" +
    "\014\002\ufffa\003\012\005\ufffc\006\ufffc\010\007\001\002" +
    "\000\006\005\ufffd\006\ufffd\001\002\000\014\002\ufff9\003" +
    "\ufff9\005\ufff9\006\ufff9\010\ufff9\001\002\000\004\002\000" +
    "\001\002\000\012\003\012\005\ufffc\006\ufffc\010\007\001" +
    "\002\000\014\002\ufffa\003\012\005\ufffc\006\ufffc\010\007" +
    "\001\002\000\006\005\017\006\016\001\002\000\014\002" +
    "\ufff8\003\ufff8\005\ufff8\006\ufff8\010\ufff8\001\002\000\004" +
    "\054\u0196\001\002\000\004\054\020\001\002\000\004\051" +
    "\021\001\002\000\010\052\ufff0\054\uffea\067\024\001\002" +
    "\000\004\052\046\001\002\000\004\054\044\001\002\000" +
    "\006\003\uffeb\054\uffeb\001\002\000\010\003\026\052\ufff1" +
    "\053\027\001\002\000\006\054\uffea\067\024\001\002\000" +
    "\010\003\uffea\054\uffea\067\024\001\002\000\006\003\031" +
    "\054\032\001\002\000\004\012\033\001\002\000\004\012" +
    "\033\001\002\000\010\016\037\017\036\020\035\001\002" +
    "\000\010\003\uffef\052\uffef\053\uffef\001\002\000\014\003" +
    "\uffe1\004\uffe1\036\uffe1\052\uffe1\053\uffe1\001\002\000\014" +
    "\003\uffe0\004\uffe0\036\uffe0\052\uffe0\053\uffe0\001\002\000" +
    "\014\003\uffe2\004\uffe2\036\uffe2\052\uffe2\053\uffe2\001\002" +
    "\000\010\003\uffec\052\uffec\053\uffec\001\002\000\004\054" +
    "\042\001\002\000\004\012\033\001\002\000\010\003\uffed" +
    "\052\uffed\053\uffed\001\002\000\004\012\033\001\002\000" +
    "\010\003\uffee\052\uffee\053\uffee\001\002\000\004\004\047" +
    "\001\002\000\036\003\ufff6\007\ufff6\011\ufff6\021\ufff6\025" +
    "\ufff6\027\ufff6\033\ufff6\034\ufff6\054\ufff6\062\ufff6\063\ufff6" +
    "\064\ufff6\065\ufff6\066\ufff6\001\002\000\036\003\uffc9\007" +
    "\uffc9\011\uffc9\021\uffc9\025\uffc9\027\uffc9\033\uffc9\034\uffc9" +
    "\054\uffc9\062\uffc9\063\uffc9\064\uffc9\065\uffc9\066\uffc9\001" +
    "\002\000\036\003\067\007\075\011\073\021\066\025\101" +
    "\027\103\033\062\034\072\054\064\062\077\063\060\064" +
    "\074\065\054\066\053\001\002\000\004\004\uffa3\001\002" +
    "\000\006\003\u018e\051\u018d\001\002\000\006\003\u0185\051" +
    "\u0184\001\002\000\052\003\uffc1\007\uffc1\011\uffc1\021\uffc1" +
    "\022\uffc1\023\uffc1\025\uffc1\026\uffc1\027\uffc1\032\uffc1\033" +
    "\uffc1\034\uffc1\035\uffc1\054\uffc1\062\uffc1\063\uffc1\064\uffc1" +
    "\065\uffc1\066\uffc1\070\uffc1\001\002\000\052\003\uffbf\007" +
    "\uffbf\011\uffbf\021\uffbf\022\uffbf\023\uffbf\025\uffbf\026\uffbf" +
    "\027\uffbf\032\uffbf\033\uffbf\034\uffbf\035\uffbf\054\uffbf\062" +
    "\uffbf\063\uffbf\064\uffbf\065\uffbf\066\uffbf\070\uffbf\001\002" +
    "\000\004\004\uffa4\001\002\000\006\003\u017c\051\u017b\001" +
    "\002\000\052\003\uffc2\007\uffc2\011\uffc2\021\uffc2\022\uffc2" +
    "\023\uffc2\025\uffc2\026\uffc2\027\uffc2\032\uffc2\033\uffc2\034" +
    "\uffc2\035\uffc2\054\uffc2\062\uffc2\063\uffc2\064\uffc2\065\uffc2" +
    "\066\uffc2\070\uffc2\001\002\000\022\003\u0167\013\366\044" +
    "\123\045\115\051\373\054\111\055\114\056\120\001\002" +
    "\000\052\003\uffbe\007\uffbe\011\uffbe\021\uffbe\022\uffbe\023" +
    "\uffbe\025\uffbe\026\uffbe\027\uffbe\032\uffbe\033\uffbe\034\uffbe" +
    "\035\uffbe\054\uffbe\062\uffbe\063\uffbe\064\uffbe\065\uffbe\066" +
    "\uffbe\070\uffbe\001\002\000\010\003\u0162\036\u0163\051\220" +
    "\001\002\000\004\004\uffa2\001\002\000\022\003\u012b\013" +
    "\366\044\123\045\115\051\373\054\111\055\114\056\120" +
    "\001\002\000\056\003\uffbc\004\u0123\007\uffbc\011\uffbc\021" +
    "\uffbc\022\uffbc\023\uffbc\025\uffbc\026\uffbc\027\uffbc\032\uffbc" +
    "\033\uffbc\034\uffbc\035\uffbc\036\u0124\054\uffbc\062\uffbc\063" +
    "\uffbc\064\uffbc\065\uffbc\066\uffbc\070\uffbc\001\002\000\004" +
    "\004\uffa0\001\002\000\004\004\u0122\001\002\000\010\003" +
    "\361\004\362\033\363\001\002\000\004\054\340\001\002" +
    "\000\006\003\327\051\326\001\002\000\004\005\324\001" +
    "\002\000\050\003\uffca\007\uffca\011\uffca\021\uffca\022\uffca" +
    "\023\uffca\025\uffca\026\uffca\027\uffca\032\uffca\033\uffca\034" +
    "\uffca\035\uffca\054\uffca\062\uffca\063\uffca\064\uffca\065\uffca" +
    "\066\uffca\001\002\000\006\003\307\051\306\001\002\000" +
    "\052\003\uffc0\007\uffc0\011\uffc0\021\uffc0\022\uffc0\023\uffc0" +
    "\025\uffc0\026\uffc0\027\uffc0\032\uffc0\033\uffc0\034\uffc0\035" +
    "\uffc0\054\uffc0\062\uffc0\063\uffc0\064\uffc0\065\uffc0\066\uffc0" +
    "\070\uffc0\001\002\000\030\026\257\044\uff9c\045\uff9c\051" +
    "\uff9c\054\uff9c\055\uff9c\056\uff9c\057\uff9c\064\uff9c\065\uff9c" +
    "\066\uff9c\001\002\000\004\004\uffa1\001\002\000\006\003" +
    "\104\054\105\001\002\000\004\012\033\001\002\000\004" +
    "\012\033\001\002\000\006\003\107\036\110\001\002\000" +
    "\016\044\123\045\115\051\124\054\111\055\114\056\120" +
    "\001\002\000\020\003\122\044\123\045\115\051\124\054" +
    "\111\055\114\056\120\001\002\000\056\003\uffce\004\uffce" +
    "\014\uffce\015\uffce\024\uffce\030\uffce\031\uffce\036\uffce\037" +
    "\uffce\040\uffce\041\uffce\042\uffce\043\uffce\044\uffce\045\uffce" +
    "\046\uffce\047\uffce\050\uffce\051\220\052\uffce\053\uffce\060" +
    "\uffce\001\002\000\012\003\157\030\160\044\126\045\127" +
    "\001\002\000\054\003\uffd3\004\uffd3\014\uffd3\015\uffd3\024" +
    "\uffd3\030\uffd3\031\uffd3\036\uffd3\037\uffd3\040\uffd3\041\uffd3" +
    "\042\uffd3\043\uffd3\044\uffd3\045\uffd3\046\uffd3\047\uffd3\050" +
    "\uffd3\052\uffd3\053\uffd3\060\uffd3\001\002\000\054\003\uffcc" +
    "\004\uffcc\014\uffcc\015\uffcc\024\uffcc\030\uffcc\031\uffcc\036" +
    "\uffcc\037\uffcc\040\uffcc\041\uffcc\042\uffcc\043\uffcc\044\uffcc" +
    "\045\uffcc\046\uffcc\047\uffcc\050\uffcc\052\uffcc\053\uffcc\060" +
    "\uffcc\001\002\000\016\044\123\045\115\051\124\054\111" +
    "\055\114\056\120\001\002\000\054\003\uffd0\004\uffd0\014" +
    "\uffd0\015\uffd0\024\uffd0\030\uffd0\031\uffd0\036\uffd0\037\uffd0" +
    "\040\uffd0\041\uffd0\042\uffd0\043\uffd0\044\uffd0\045\uffd0\046" +
    "\uffd0\047\uffd0\050\uffd0\052\uffd0\053\uffd0\060\uffd0\001\002" +
    "\000\054\003\uffd7\004\uffd7\014\uffd7\015\uffd7\024\uffd7\030" +
    "\uffd7\031\uffd7\036\uffd7\037\uffd7\040\uffd7\041\uffd7\042\uffd7" +
    "\043\uffd7\044\uffd7\045\uffd7\046\132\047\134\050\133\052" +
    "\uffd7\053\uffd7\060\uffd7\001\002\000\054\003\uffcd\004\uffcd" +
    "\014\uffcd\015\uffcd\024\uffcd\030\uffcd\031\uffcd\036\uffcd\037" +
    "\uffcd\040\uffcd\041\uffcd\042\uffcd\043\uffcd\044\uffcd\045\uffcd" +
    "\046\uffcd\047\uffcd\050\uffcd\052\uffcd\053\uffcd\060\uffcd\001" +
    "\002\000\054\003\uffcf\004\uffcf\014\uffcf\015\uffcf\024\uffcf" +
    "\030\uffcf\031\uffcf\036\uffcf\037\uffcf\040\uffcf\041\uffcf\042" +
    "\uffcf\043\uffcf\044\uffcf\045\uffcf\046\uffcf\047\uffcf\050\uffcf" +
    "\052\uffcf\053\uffcf\060\uffcf\001\002\000\004\030\142\001" +
    "\002\000\016\044\123\045\115\051\124\054\111\055\114" +
    "\056\120\001\002\000\016\044\123\045\115\051\124\054" +
    "\111\055\114\056\120\001\002\000\010\044\126\045\127" +
    "\052\130\001\002\000\016\044\123\045\115\051\124\054" +
    "\111\055\114\056\120\001\002\000\016\044\123\045\115" +
    "\051\124\054\111\055\114\056\120\001\002\000\054\003" +
    "\uffcb\004\uffcb\014\uffcb\015\uffcb\024\uffcb\030\uffcb\031\uffcb" +
    "\036\uffcb\037\uffcb\040\uffcb\041\uffcb\042\uffcb\043\uffcb\044" +
    "\uffcb\045\uffcb\046\uffcb\047\uffcb\050\uffcb\052\uffcb\053\uffcb" +
    "\060\uffcb\001\002\000\054\003\uffd8\004\uffd8\014\uffd8\015" +
    "\uffd8\024\uffd8\030\uffd8\031\uffd8\036\uffd8\037\uffd8\040\uffd8" +
    "\041\uffd8\042\uffd8\043\uffd8\044\uffd8\045\uffd8\046\132\047" +
    "\134\050\133\052\uffd8\053\uffd8\060\uffd8\001\002\000\016" +
    "\044\123\045\115\051\124\054\111\055\114\056\120\001" +
    "\002\000\016\044\123\045\115\051\124\054\111\055\114" +
    "\056\120\001\002\000\016\044\123\045\115\051\124\054" +
    "\111\055\114\056\120\001\002\000\054\003\uffd5\004\uffd5" +
    "\014\uffd5\015\uffd5\024\uffd5\030\uffd5\031\uffd5\036\uffd5\037" +
    "\uffd5\040\uffd5\041\uffd5\042\uffd5\043\uffd5\044\uffd5\045\uffd5" +
    "\046\uffd5\047\uffd5\050\uffd5\052\uffd5\053\uffd5\060\uffd5\001" +
    "\002\000\054\003\uffd4\004\uffd4\014\uffd4\015\uffd4\024\uffd4" +
    "\030\uffd4\031\uffd4\036\uffd4\037\uffd4\040\uffd4\041\uffd4\042" +
    "\uffd4\043\uffd4\044\uffd4\045\uffd4\046\uffd4\047\uffd4\050\uffd4" +
    "\052\uffd4\053\uffd4\060\uffd4\001\002\000\054\003\uffd6\004" +
    "\uffd6\014\uffd6\015\uffd6\024\uffd6\030\uffd6\031\uffd6\036\uffd6" +
    "\037\uffd6\040\uffd6\041\uffd6\042\uffd6\043\uffd6\044\uffd6\045" +
    "\uffd6\046\uffd6\047\uffd6\050\uffd6\052\uffd6\053\uffd6\060\uffd6" +
    "\001\002\000\054\003\uffd9\004\uffd9\014\uffd9\015\uffd9\024" +
    "\uffd9\030\uffd9\031\uffd9\036\uffd9\037\uffd9\040\uffd9\041\uffd9" +
    "\042\uffd9\043\uffd9\044\uffd9\045\uffd9\046\132\047\134\050" +
    "\133\052\uffd9\053\uffd9\060\uffd9\001\002\000\054\003\uffd1" +
    "\004\uffd1\014\uffd1\015\uffd1\024\uffd1\030\uffd1\031\uffd1\036" +
    "\uffd1\037\uffd1\040\uffd1\041\uffd1\042\uffd1\043\uffd1\044\uffd1" +
    "\045\uffd1\046\uffd1\047\uffd1\050\uffd1\052\uffd1\053\uffd1\060" +
    "\uffd1\001\002\000\016\044\123\045\115\051\124\054\111" +
    "\055\114\056\120\001\002\000\010\031\145\044\126\045" +
    "\127\001\002\000\004\004\147\001\002\000\016\044\123" +
    "\045\115\051\124\054\111\055\114\056\120\001\002\000" +
    "\010\004\uff83\044\126\045\127\001\002\000\036\003\uff8d" +
    "\011\uff8d\021\uff8d\025\uff8d\027\uff8d\032\uff8d\033\uff8d\034" +
    "\uff8d\054\uff8d\062\uff8d\063\uff8d\064\uff8d\065\uff8d\066\uff8d" +
    "\001\002\000\036\003\uffc9\011\uffc9\021\uffc9\025\uffc9\027" +
    "\uffc9\032\uffc9\033\uffc9\034\uffc9\054\uffc9\062\uffc9\063\uffc9" +
    "\064\uffc9\065\uffc9\066\uffc9\001\002\000\036\003\067\011" +
    "\073\021\066\025\101\027\103\032\152\033\062\034\072" +
    "\054\064\062\077\063\060\064\074\065\054\066\053\001" +
    "\002\000\006\004\uff84\054\154\001\002\000\004\004\155" +
    "\001\002\000\004\004\uff85\001\002\000\052\003\uff8c\007" +
    "\uff8c\011\uff8c\021\uff8c\022\uff8c\023\uff8c\025\uff8c\026\uff8c" +
    "\027\uff8c\032\uff8c\033\uff8c\034\uff8c\035\uff8c\054\uff8c\062" +
    "\uff8c\063\uff8c\064\uff8c\065\uff8c\066\uff8c\070\uff8c\001\002" +
    "\000\054\003\uffd2\004\uffd2\014\uffd2\015\uffd2\024\uffd2\030" +
    "\uffd2\031\uffd2\036\uffd2\037\uffd2\040\uffd2\041\uffd2\042\uffd2" +
    "\043\uffd2\044\uffd2\045\uffd2\046\uffd2\047\uffd2\050\uffd2\052" +
    "\uffd2\053\uffd2\060\uffd2\001\002\000\016\044\123\045\115" +
    "\051\124\054\111\055\114\056\120\001\002\000\020\003" +
    "\162\044\123\045\115\051\124\054\111\055\114\056\120" +
    "\001\002\000\012\003\173\031\145\044\126\045\127\001" +
    "\002\000\004\031\145\001\002\000\004\004\164\001\002" +
    "\000\036\003\uff8b\011\uff8b\021\uff8b\025\uff8b\027\uff8b\032" +
    "\uff8b\033\uff8b\034\uff8b\054\uff8b\062\uff8b\063\uff8b\064\uff8b" +
    "\065\uff8b\066\uff8b\001\002\000\036\003\uffc9\011\uffc9\021" +
    "\uffc9\025\uffc9\027\uffc9\032\uffc9\033\uffc9\034\uffc9\054\uffc9" +
    "\062\uffc9\063\uffc9\064\uffc9\065\uffc9\066\uffc9\001\002\000" +
    "\036\003\067\011\073\021\066\025\101\027\103\032\167" +
    "\033\062\034\072\054\064\062\077\063\060\064\074\065" +
    "\054\066\053\001\002\000\006\004\uff84\054\154\001\002" +
    "\000\004\004\171\001\002\000\052\003\uff8a\007\uff8a\011" +
    "\uff8a\021\uff8a\022\uff8a\023\uff8a\025\uff8a\026\uff8a\027\uff8a" +
    "\032\uff8a\033\uff8a\034\uff8a\035\uff8a\054\uff8a\062\uff8a\063" +
    "\uff8a\064\uff8a\065\uff8a\066\uff8a\070\uff8a\001\002\000\004" +
    "\004\202\001\002\000\004\004\174\001\002\000\036\003" +
    "\uff87\011\uff87\021\uff87\025\uff87\027\uff87\032\uff87\033\uff87" +
    "\034\uff87\054\uff87\062\uff87\063\uff87\064\uff87\065\uff87\066" +
    "\uff87\001\002\000\036\003\uffc9\011\uffc9\021\uffc9\025\uffc9" +
    "\027\uffc9\032\uffc9\033\uffc9\034\uffc9\054\uffc9\062\uffc9\063" +
    "\uffc9\064\uffc9\065\uffc9\066\uffc9\001\002\000\036\003\067" +
    "\011\073\021\066\025\101\027\103\032\177\033\062\034" +
    "\072\054\064\062\077\063\060\064\074\065\054\066\053" +
    "\001\002\000\006\004\uff84\054\154\001\002\000\004\004" +
    "\201\001\002\000\052\003\uff86\007\uff86\011\uff86\021\uff86" +
    "\022\uff86\023\uff86\025\uff86\026\uff86\027\uff86\032\uff86\033" +
    "\uff86\034\uff86\035\uff86\054\uff86\062\uff86\063\uff86\064\uff86" +
    "\065\uff86\066\uff86\070\uff86\001\002\000\036\003\uff93\011" +
    "\uff93\021\uff93\025\uff93\027\uff93\032\uff93\033\uff93\034\uff93" +
    "\054\uff93\062\uff93\063\uff93\064\uff93\065\uff93\066\uff93\001" +
    "\002\000\036\003\uffc9\011\uffc9\021\uffc9\025\uffc9\027\uffc9" +
    "\032\uffc9\033\uffc9\034\uffc9\054\uffc9\062\uffc9\063\uffc9\064" +
    "\uffc9\065\uffc9\066\uffc9\001\002\000\036\003\067\011\073" +
    "\021\066\025\101\027\103\032\205\033\062\034\072\054" +
    "\064\062\077\063\060\064\074\065\054\066\053\001\002" +
    "\000\006\004\uff84\054\154\001\002\000\004\004\207\001" +
    "\002\000\052\003\uff92\007\uff92\011\uff92\021\uff92\022\uff92" +
    "\023\uff92\025\uff92\026\uff92\027\uff92\032\uff92\033\uff92\034" +
    "\uff92\035\uff92\054\uff92\062\uff92\063\uff92\064\uff92\065\uff92" +
    "\066\uff92\070\uff92\001\002\000\010\031\145\044\126\045" +
    "\127\001\002\000\004\004\212\001\002\000\036\003\uff89" +
    "\011\uff89\021\uff89\025\uff89\027\uff89\032\uff89\033\uff89\034" +
    "\uff89\054\uff89\062\uff89\063\uff89\064\uff89\065\uff89\066\uff89" +
    "\001\002\000\036\003\uffc9\011\uffc9\021\uffc9\025\uffc9\027" +
    "\uffc9\032\uffc9\033\uffc9\034\uffc9\054\uffc9\062\uffc9\063\uffc9" +
    "\064\uffc9\065\uffc9\066\uffc9\001\002\000\036\003\067\011" +
    "\073\021\066\025\101\027\103\032\215\033\062\034\072" +
    "\054\064\062\077\063\060\064\074\065\054\066\053\001" +
    "\002\000\006\004\uff84\054\154\001\002\000\004\004\217" +
    "\001\002\000\052\003\uff88\007\uff88\011\uff88\021\uff88\022" +
    "\uff88\023\uff88\025\uff88\026\uff88\027\uff88\032\uff88\033\uff88" +
    "\034\uff88\035\uff88\054\uff88\062\uff88\063\uff88\064\uff88\065" +
    "\uff88\066\uff88\070\uff88\001\002\000\024\003\uff4d\044\123" +
    "\045\115\051\124\052\uff4d\053\uff4d\054\111\055\114\056" +
    "\120\001\002\000\014\003\uff4b\044\126\045\127\052\uff4b" +
    "\053\uff4b\001\002\000\010\003\224\052\226\053\225\001" +
    "\002\000\010\003\uff4e\052\uff4e\053\uff4e\001\002\000\054" +
    "\003\uff4f\004\uff4f\014\uff4f\015\uff4f\024\uff4f\030\uff4f\031" +
    "\uff4f\036\uff4f\037\uff4f\040\uff4f\041\uff4f\042\uff4f\043\uff4f" +
    "\044\uff4f\045\uff4f\046\uff4f\047\uff4f\050\uff4f\052\uff4f\053" +
    "\uff4f\060\uff4f\001\002\000\016\044\123\045\115\051\124" +
    "\054\111\055\114\056\120\001\002\000\054\003\uff50\004" +
    "\uff50\014\uff50\015\uff50\024\uff50\030\uff50\031\uff50\036\uff50" +
    "\037\uff50\040\uff50\041\uff50\042\uff50\043\uff50\044\uff50\045" +
    "\uff50\046\uff50\047\uff50\050\uff50\052\uff50\053\uff50\060\uff50" +
    "\001\002\000\014\003\uff4c\044\126\045\127\052\uff4c\053" +
    "\uff4c\001\002\000\010\030\231\044\126\045\127\001\002" +
    "\000\016\044\123\045\115\051\124\054\111\055\114\056" +
    "\120\001\002\000\010\031\145\044\126\045\127\001\002" +
    "\000\004\004\234\001\002\000\036\003\uff8f\011\uff8f\021" +
    "\uff8f\025\uff8f\027\uff8f\032\uff8f\033\uff8f\034\uff8f\054\uff8f" +
    "\062\uff8f\063\uff8f\064\uff8f\065\uff8f\066\uff8f\001\002\000" +
    "\036\003\uffc9\011\uffc9\021\uffc9\025\uffc9\027\uffc9\032\uffc9" +
    "\033\uffc9\034\uffc9\054\uffc9\062\uffc9\063\uffc9\064\uffc9\065" +
    "\uffc9\066\uffc9\001\002\000\036\003\067\011\073\021\066" +
    "\025\101\027\103\032\237\033\062\034\072\054\064\062" +
    "\077\063\060\064\074\065\054\066\053\001\002\000\006" +
    "\004\uff84\054\154\001\002\000\004\004\241\001\002\000" +
    "\052\003\uff8e\007\uff8e\011\uff8e\021\uff8e\022\uff8e\023\uff8e" +
    "\025\uff8e\026\uff8e\027\uff8e\032\uff8e\033\uff8e\034\uff8e\035" +
    "\uff8e\054\uff8e\062\uff8e\063\uff8e\064\uff8e\065\uff8e\066\uff8e" +
    "\070\uff8e\001\002\000\004\036\243\001\002\000\016\044" +
    "\123\045\115\051\124\054\111\055\114\056\120\001\002" +
    "\000\010\030\245\044\126\045\127\001\002\000\016\044" +
    "\123\045\115\051\124\054\111\055\114\056\120\001\002" +
    "\000\010\031\145\044\126\045\127\001\002\000\004\004" +
    "\250\001\002\000\036\003\uff91\011\uff91\021\uff91\025\uff91" +
    "\027\uff91\032\uff91\033\uff91\034\uff91\054\uff91\062\uff91\063" +
    "\uff91\064\uff91\065\uff91\066\uff91\001\002\000\036\003\uffc9" +
    "\011\uffc9\021\uffc9\025\uffc9\027\uffc9\032\uffc9\033\uffc9\034" +
    "\uffc9\054\uffc9\062\uffc9\063\uffc9\064\uffc9\065\uffc9\066\uffc9" +
    "\001\002\000\036\003\067\011\073\021\066\025\101\027" +
    "\103\032\253\033\062\034\072\054\064\062\077\063\060" +
    "\064\074\065\054\066\053\001\002\000\006\004\uff84\054" +
    "\154\001\002\000\004\004\255\001\002\000\052\003\uff90" +
    "\007\uff90\011\uff90\021\uff90\022\uff90\023\uff90\025\uff90\026" +
    "\uff90\027\uff90\032\uff90\033\uff90\034\uff90\035\uff90\054\uff90" +
    "\062\uff90\063\uff90\064\uff90\065\uff90\066\uff90\070\uff90\001" +
    "\002\000\026\044\123\045\115\051\124\054\111\055\114" +
    "\056\120\057\262\064\074\065\054\066\053\001\002\000" +
    "\026\044\uff9d\045\uff9d\051\uff9d\054\uff9d\055\uff9d\056\uff9d" +
    "\057\uff9d\064\uff9d\065\uff9d\066\uff9d\001\002\000\020\003" +
    "\uffc5\004\uffc5\044\126\045\127\052\uffc5\053\uffc5\060\uffc5" +
    "\001\002\000\014\003\uffc4\004\uffc4\052\uffc4\053\uffc4\060" +
    "\uffc4\001\002\000\014\003\uffc3\004\uffc3\052\uffc3\053\uffc3" +
    "\060\uffc3\001\002\000\004\004\264\001\002\000\006\007" +
    "\uff96\026\uff96\001\002\000\006\007\uff99\026\266\001\002" +
    "\000\020\023\274\044\123\045\115\051\124\054\111\055" +
    "\114\056\120\001\002\000\004\007\270\001\002\000\004" +
    "\025\271\001\002\000\004\004\272\001\002\000\052\003" +
    "\uff9f\007\uff9f\011\uff9f\021\uff9f\022\uff9f\023\uff9f\025\uff9f" +
    "\026\uff9f\027\uff9f\032\uff9f\033\uff9f\034\uff9f\035\uff9f\054" +
    "\uff9f\062\uff9f\063\uff9f\064\uff9f\065\uff9f\066\uff9f\070\uff9f" +
    "\001\002\000\012\004\uff94\044\126\045\127\053\uff94\001" +
    "\002\000\004\004\303\001\002\000\006\004\276\053\277" +
    "\001\002\000\040\003\uff98\007\uff98\011\uff98\021\uff98\025" +
    "\uff98\026\uff98\027\uff98\033\uff98\034\uff98\054\uff98\062\uff98" +
    "\063\uff98\064\uff98\065\uff98\066\uff98\001\002\000\016\044" +
    "\123\045\115\051\124\054\111\055\114\056\120\001\002" +
    "\000\012\004\uff95\044\126\045\127\053\uff95\001\002\000" +
    "\040\003\uffc9\007\uffc9\011\uffc9\021\uffc9\025\uffc9\026\uffc9" +
    "\027\uffc9\033\uffc9\034\uffc9\054\uffc9\062\uffc9\063\uffc9\064" +
    "\uffc9\065\uffc9\066\uffc9\001\002\000\040\003\067\007\uff97" +
    "\011\073\021\066\025\101\026\uff97\027\103\033\062\034" +
    "\072\054\064\062\077\063\060\064\074\065\054\066\053" +
    "\001\002\000\036\003\uff9b\007\uff9b\011\uff9b\021\uff9b\025" +
    "\uff9b\027\uff9b\033\uff9b\034\uff9b\054\uff9b\062\uff9b\063\uff9b" +
    "\064\uff9b\065\uff9b\066\uff9b\001\002\000\036\003\uffc9\007" +
    "\uffc9\011\uffc9\021\uffc9\025\uffc9\027\uffc9\033\uffc9\034\uffc9" +
    "\054\uffc9\062\uffc9\063\uffc9\064\uffc9\065\uffc9\066\uffc9\001" +
    "\002\000\036\003\067\007\uff9a\011\073\021\066\025\101" +
    "\027\103\033\062\034\072\054\064\062\077\063\060\064" +
    "\074\065\054\066\053\001\002\000\032\003\320\044\123" +
    "\045\115\051\124\054\111\055\114\056\120\057\262\061" +
    "\310\064\074\065\054\066\053\001\002\000\030\044\123" +
    "\045\115\051\124\054\111\055\114\056\120\057\262\061" +
    "\310\064\074\065\054\066\053\001\002\000\010\003\uff51" +
    "\052\uff51\060\uff51\001\002\000\010\003\uff52\052\uff52\060" +
    "\uff52\001\002\000\006\052\313\060\314\001\002\000\004" +
    "\004\uff74\001\002\000\030\044\123\045\115\051\124\054" +
    "\111\055\114\056\120\057\262\061\315\064\074\065\054" +
    "\066\053\001\002\000\010\003\uff53\052\uff53\060\uff53\001" +
    "\002\000\010\003\uff54\052\uff54\060\uff54\001\002\000\010" +
    "\003\322\052\323\060\314\001\002\000\004\052\321\001" +
    "\002\000\004\004\uff73\001\002\000\004\004\uff72\001\002" +
    "\000\004\004\uff76\001\002\000\004\004\325\001\002\000" +
    "\014\002\ufff5\003\ufff5\005\ufff5\006\ufff5\010\ufff5\001\002" +
    "\000\006\003\332\061\333\001\002\000\004\061\330\001" +
    "\002\000\004\052\331\001\002\000\014\003\uff6b\004\uff6b" +
    "\052\uff6b\053\uff6b\060\uff6b\001\002\000\004\052\336\001" +
    "\002\000\006\003\334\052\335\001\002\000\014\003\uff69" +
    "\004\uff69\052\uff69\053\uff69\060\uff69\001\002\000\014\003" +
    "\uff6e\004\uff6e\052\uff6e\053\uff6e\060\uff6e\001\002\000\014" +
    "\003\uff6a\004\uff6a\052\uff6a\053\uff6a\060\uff6a\001\002\000" +
    "\010\003\351\004\ufff2\053\352\001\002\000\014\003\uffdc" +
    "\004\uffdc\012\341\036\uffdc\053\uffdc\001\002\000\010\016" +
    "\350\017\347\020\346\001\002\000\012\003\uffda\004\uffda" +
    "\036\344\053\uffda\001\002\000\010\003\uffe8\004\uffe8\053" +
    "\uffe8\001\002\000\026\044\123\045\115\051\124\054\111" +
    "\055\114\056\120\057\262\064\074\065\054\066\053\001" +
    "\002\000\010\003\uffdb\004\uffdb\053\uffdb\001\002\000\012" +
    "\003\uffde\004\uffde\036\uffde\053\uffde\001\002\000\012\003" +
    "\uffdd\004\uffdd\036\uffdd\053\uffdd\001\002\000\012\003\uffdf" +
    "\004\uffdf\036\uffdf\053\uffdf\001\002\000\004\054\356\001" +
    "\002\000\004\054\353\001\002\000\014\003\uffdc\004\uffdc" +
    "\012\341\036\uffdc\053\uffdc\001\002\000\012\003\uffda\004" +
    "\uffda\036\344\053\uffda\001\002\000\010\003\uffe9\004\uffe9" +
    "\053\uffe9\001\002\000\014\003\uffdc\004\uffdc\012\341\036" +
    "\uffdc\053\uffdc\001\002\000\012\003\uffda\004\uffda\036\344" +
    "\053\uffda\001\002\000\010\003\uffe7\004\uffe7\053\uffe7\001" +
    "\002\000\036\003\uff78\011\uff78\021\uff78\025\uff78\027\uff78" +
    "\033\uff78\034\uff78\035\uff78\054\uff78\062\uff78\063\uff78\064" +
    "\uff78\065\uff78\066\uff78\001\002\000\036\003\uff7a\011\uff7a" +
    "\021\uff7a\025\uff7a\027\uff7a\033\uff7a\034\uff7a\035\uff7a\054" +
    "\uff7a\062\uff7a\063\uff7a\064\uff7a\065\uff7a\066\uff7a\001\002" +
    "\000\022\003\370\013\366\044\123\045\115\051\373\054" +
    "\111\055\114\056\120\001\002\000\016\003\uff5c\004\uff5c" +
    "\014\uff5c\015\uff5c\024\uff5c\052\uff5c\001\002\000\016\003" +
    "\uff61\004\uff61\014\u0101\015\uff61\024\uff61\052\uff61\001\002" +
    "\000\020\013\366\044\123\045\115\051\373\054\111\055" +
    "\114\056\120\001\002\000\022\036\u0108\037\u0106\040\u0105" +
    "\041\u0104\042\u0107\043\u0103\044\126\045\127\001\002\000" +
    "\020\013\366\044\123\045\115\051\373\054\111\055\114" +
    "\056\120\001\002\000\016\003\uff5e\004\uff5e\014\uff5e\015" +
    "\uff5e\024\uff5e\052\uff5e\001\002\000\006\004\u010f\015\377" +
    "\001\002\000\022\003\370\013\366\044\123\045\115\051" +
    "\373\054\111\055\114\056\120\001\002\000\024\036\u0108" +
    "\037\u0106\040\u0105\041\u0104\042\u0107\043\u0103\044\126\045" +
    "\127\052\130\001\002\000\006\015\377\052\376\001\002" +
    "\000\016\003\uff5b\004\uff5b\014\uff5b\015\uff5b\024\uff5b\052" +
    "\uff5b\001\002\000\020\013\366\044\123\045\115\051\373" +
    "\054\111\055\114\056\120\001\002\000\016\003\uff62\004" +
    "\uff62\014\u0101\015\uff62\024\uff62\052\uff62\001\002\000\020" +
    "\013\366\044\123\045\115\051\373\054\111\055\114\056" +
    "\120\001\002\000\016\003\uff5f\004\uff5f\014\uff5f\015\uff5f" +
    "\024\uff5f\052\uff5f\001\002\000\016\044\123\045\115\051" +
    "\124\054\111\055\114\056\120\001\002\000\016\044\123" +
    "\045\115\051\124\054\111\055\114\056\120\001\002\000" +
    "\016\044\123\045\115\051\124\054\111\055\114\056\120" +
    "\001\002\000\016\044\123\045\115\051\124\054\111\055" +
    "\114\056\120\001\002\000\016\044\123\045\115\051\124" +
    "\054\111\055\114\056\120\001\002\000\016\044\123\045" +
    "\115\051\124\054\111\055\114\056\120\001\002\000\022" +
    "\003\uff5a\004\uff5a\014\uff5a\015\uff5a\024\uff5a\044\126\045" +
    "\127\052\uff5a\001\002\000\022\003\uff56\004\uff56\014\uff56" +
    "\015\uff56\024\uff56\044\126\045\127\052\uff56\001\002\000" +
    "\022\003\uff59\004\uff59\014\uff59\015\uff59\024\uff59\044\126" +
    "\045\127\052\uff59\001\002\000\022\003\uff58\004\uff58\014" +
    "\uff58\015\uff58\024\uff58\044\126\045\127\052\uff58\001\002" +
    "\000\022\003\uff57\004\uff57\014\uff57\015\uff57\024\uff57\044" +
    "\126\045\127\052\uff57\001\002\000\022\003\uff55\004\uff55" +
    "\014\uff55\015\uff55\024\uff55\044\126\045\127\052\uff55\001" +
    "\002\000\036\003\uff7c\011\uff7c\021\uff7c\025\uff7c\027\uff7c" +
    "\033\uff7c\034\uff7c\035\uff7c\054\uff7c\062\uff7c\063\uff7c\064" +
    "\uff7c\065\uff7c\066\uff7c\001\002\000\036\003\uffc9\011\uffc9" +
    "\021\uffc9\025\uffc9\027\uffc9\033\uffc9\034\uffc9\035\uffc9\054" +
    "\uffc9\062\uffc9\063\uffc9\064\uffc9\065\uffc9\066\uffc9\001\002" +
    "\000\036\003\067\011\073\021\066\025\101\027\103\033" +
    "\062\034\072\035\u0112\054\064\062\077\063\060\064\074" +
    "\065\054\066\053\001\002\000\004\004\u0113\001\002\000" +
    "\052\003\uff7b\007\uff7b\011\uff7b\021\uff7b\022\uff7b\023\uff7b" +
    "\025\uff7b\026\uff7b\027\uff7b\032\uff7b\033\uff7b\034\uff7b\035" +
    "\uff7b\054\uff7b\062\uff7b\063\uff7b\064\uff7b\065\uff7b\066\uff7b" +
    "\070\uff7b\001\002\000\016\003\uff60\004\uff60\014\u0101\015" +
    "\uff60\024\uff60\052\uff60\001\002\000\016\003\uff5d\004\uff5d" +
    "\014\uff5d\015\uff5d\024\uff5d\052\uff5d\001\002\000\036\003" +
    "\uffc9\011\uffc9\021\uffc9\025\uffc9\027\uffc9\033\uffc9\034\uffc9" +
    "\035\uffc9\054\uffc9\062\uffc9\063\uffc9\064\uffc9\065\uffc9\066" +
    "\uffc9\001\002\000\036\003\067\011\073\021\066\025\101" +
    "\027\103\033\062\034\072\035\u0118\054\064\062\077\063" +
    "\060\064\074\065\054\066\053\001\002\000\004\033\u0119" +
    "\001\002\000\022\003\370\013\366\044\123\045\115\051" +
    "\373\054\111\055\114\056\120\001\002\000\006\004\u011b" +
    "\015\377\001\002\000\052\003\uff79\007\uff79\011\uff79\021" +
    "\uff79\022\uff79\023\uff79\025\uff79\026\uff79\027\uff79\032\uff79" +
    "\033\uff79\034\uff79\035\uff79\054\uff79\062\uff79\063\uff79\064" +
    "\uff79\065\uff79\066\uff79\070\uff79\001\002\000\036\003\uffc9" +
    "\011\uffc9\021\uffc9\025\uffc9\027\uffc9\033\uffc9\034\uffc9\035" +
    "\uffc9\054\uffc9\062\uffc9\063\uffc9\064\uffc9\065\uffc9\066\uffc9" +
    "\001\002\000\036\003\067\011\073\021\066\025\101\027" +
    "\103\033\062\034\072\035\u011e\054\064\062\077\063\060" +
    "\064\074\065\054\066\053\001\002\000\004\033\u011f\001" +
    "\002\000\022\003\370\013\366\044\123\045\115\051\373" +
    "\054\111\055\114\056\120\001\002\000\006\004\u0121\015" +
    "\377\001\002\000\052\003\uff77\007\uff77\011\uff77\021\uff77" +
    "\022\uff77\023\uff77\025\uff77\026\uff77\027\uff77\032\uff77\033" +
    "\uff77\034\uff77\035\uff77\054\uff77\062\uff77\063\uff77\064\uff77" +
    "\065\uff77\066\uff77\070\uff77\001\002\000\052\003\uffbd\007" +
    "\uffbd\011\uffbd\021\uffbd\022\uffbd\023\uffbd\025\uffbd\026\uffbd" +
    "\027\uffbd\032\uffbd\033\uffbd\034\uffbd\035\uffbd\054\uffbd\062" +
    "\uffbd\063\uffbd\064\uffbd\065\uffbd\066\uffbd\070\uffbd\001\002" +
    "\000\006\007\uff96\026\uff96\001\002\000\026\044\123\045" +
    "\115\051\124\054\111\055\114\056\120\057\262\064\074" +
    "\065\054\066\053\001\002\000\004\004\uffe5\001\002\000" +
    "\006\007\uff99\026\266\001\002\000\004\007\u0128\001\002" +
    "\000\004\025\u0129\001\002\000\004\004\u012a\001\002\000" +
    "\052\003\uff9e\007\uff9e\011\uff9e\021\uff9e\022\uff9e\023\uff9e" +
    "\025\uff9e\026\uff9e\027\uff9e\032\uff9e\033\uff9e\034\uff9e\035" +
    "\uff9e\054\uff9e\062\uff9e\063\uff9e\064\uff9e\065\uff9e\066\uff9e" +
    "\070\uff9e\001\002\000\024\004\uffa5\013\366\024\u013d\044" +
    "\123\045\115\051\373\054\111\055\114\056\120\001\002" +
    "\000\012\003\u012e\004\uffa5\015\377\024\u012d\001\002\000" +
    "\024\003\uffb8\004\uffa6\011\uffb8\054\uffb8\062\uffb8\063\uffb8" +
    "\064\uffb8\065\uffb8\066\uffb8\001\002\000\042\003\uffb3\007" +
    "\uffb3\011\uffb3\021\uffb3\022\uffb3\023\uffb3\025\uffb3\027\uffb3" +
    "\033\uffb3\034\uffb3\054\uffb3\062\uffb3\063\uffb3\064\uffb3\065" +
    "\uffb3\066\uffb3\001\002\000\004\004\u0130\001\002\000\042" +
    "\003\uffbb\007\uffbb\011\uffbb\021\uffbb\022\uffbb\023\uffbb\025" +
    "\uffbb\027\uffbb\033\uffbb\034\uffbb\054\uffbb\062\uffbb\063\uffbb" +
    "\064\uffbb\065\uffbb\066\uffbb\001\002\000\042\003\uffc9\007" +
    "\uffc9\011\uffc9\021\uffc9\022\uffc9\023\uffc9\025\uffc9\027\uffc9" +
    "\033\uffc9\034\uffc9\054\uffc9\062\uffc9\063\uffc9\064\uffc9\065" +
    "\uffc9\066\uffc9\001\002\000\042\003\067\007\uffba\011\073" +
    "\021\066\022\uffba\023\uffba\025\101\027\103\033\062\034" +
    "\072\054\064\062\077\063\060\064\074\065\054\066\053" +
    "\001\002\000\010\007\uffae\022\uffae\023\uffae\001\002\000" +
    "\010\007\uffa7\022\u0136\023\u0137\001\002\000\004\007\u0149" +
    "\001\002\000\022\003\u013b\013\366\044\123\045\115\051" +
    "\373\054\111\055\114\056\120\001\002\000\004\004\u0138" +
    "\001\002\000\036\003\uffa9\007\uffa9\011\uffa9\021\uffa9\025" +
    "\uffa9\027\uffa9\033\uffa9\034\uffa9\054\uffa9\062\uffa9\063\uffa9" +
    "\064\uffa9\065\uffa9\066\uffa9\001\002\000\036\003\uffc9\007" +
    "\uffc9\011\uffc9\021\uffc9\025\uffc9\027\uffc9\033\uffc9\034\uffc9" +
    "\054\uffc9\062\uffc9\063\uffc9\064\uffc9\065\uffc9\066\uffc9\001" +
    "\002\000\036\003\067\007\uffa8\011\073\021\066\025\101" +
    "\027\103\033\062\034\072\054\064\062\077\063\060\064" +
    "\074\065\054\066\053\001\002\000\024\004\uffa5\013\366" +
    "\024\u013d\044\123\045\115\051\373\054\111\055\114\056" +
    "\120\001\002\000\012\003\uffa5\004\uffa5\015\377\024\u013d" +
    "\001\002\000\006\003\uffa6\004\uffa6\001\002\000\006\003" +
    "\u013f\004\u0140\001\002\000\042\003\uffab\007\uffab\011\uffab" +
    "\021\uffab\022\uffab\023\uffab\025\uffab\027\uffab\033\uffab\034" +
    "\uffab\054\uffab\062\uffab\063\uffab\064\uffab\065\uffab\066\uffab" +
    "\001\002\000\042\003\uffb0\007\uffb0\011\uffb0\021\uffb0\022" +
    "\uffb0\023\uffb0\025\uffb0\027\uffb0\033\uffb0\034\uffb0\054\uffb0" +
    "\062\uffb0\063\uffb0\064\uffb0\065\uffb0\066\uffb0\001\002\000" +
    "\042\003\uffc9\007\uffc9\011\uffc9\021\uffc9\022\uffc9\023\uffc9" +
    "\025\uffc9\027\uffc9\033\uffc9\034\uffc9\054\uffc9\062\uffc9\063" +
    "\uffc9\064\uffc9\065\uffc9\066\uffc9\001\002\000\042\003\067" +
    "\007\uffaf\011\073\021\066\022\uffaf\023\uffaf\025\101\027" +
    "\103\033\062\034\072\054\064\062\077\063\060\064\074" +
    "\065\054\066\053\001\002\000\042\003\uffc9\007\uffc9\011" +
    "\uffc9\021\uffc9\022\uffc9\023\uffc9\025\uffc9\027\uffc9\033\uffc9" +
    "\034\uffc9\054\uffc9\062\uffc9\063\uffc9\064\uffc9\065\uffc9\066" +
    "\uffc9\001\002\000\042\003\067\007\uffaa\011\073\021\066" +
    "\022\uffaa\023\uffaa\025\101\027\103\033\062\034\072\054" +
    "\064\062\077\063\060\064\074\065\054\066\053\001\002" +
    "\000\004\004\u0146\001\002\000\042\003\uffad\007\uffad\011" +
    "\uffad\021\uffad\022\uffad\023\uffad\025\uffad\027\uffad\033\uffad" +
    "\034\uffad\054\uffad\062\uffad\063\uffad\064\uffad\065\uffad\066" +
    "\uffad\001\002\000\042\003\uffc9\007\uffc9\011\uffc9\021\uffc9" +
    "\022\uffc9\023\uffc9\025\uffc9\027\uffc9\033\uffc9\034\uffc9\054" +
    "\uffc9\062\uffc9\063\uffc9\064\uffc9\065\uffc9\066\uffc9\001\002" +
    "\000\042\003\067\007\uffac\011\073\021\066\022\uffac\023" +
    "\uffac\025\101\027\103\033\062\034\072\054\064\062\077" +
    "\063\060\064\074\065\054\066\053\001\002\000\004\021" +
    "\u014a\001\002\000\004\004\u014b\001\002\000\052\003\uffb9" +
    "\007\uffb9\011\uffb9\021\uffb9\022\uffb9\023\uffb9\025\uffb9\026" +
    "\uffb9\027\uffb9\032\uffb9\033\uffb9\034\uffb9\035\uffb9\054\uffb9" +
    "\062\uffb9\063\uffb9\064\uffb9\065\uffb9\066\uffb9\070\uffb9\001" +
    "\002\000\042\003\uffc9\007\uffc9\011\uffc9\021\uffc9\022\uffc9" +
    "\023\uffc9\025\uffc9\027\uffc9\033\uffc9\034\uffc9\054\uffc9\062" +
    "\uffc9\063\uffc9\064\uffc9\065\uffc9\066\uffc9\001\002\000\042" +
    "\003\067\007\uffb2\011\073\021\066\022\uffb2\023\uffb2\025" +
    "\101\027\103\033\062\034\072\054\064\062\077\063\060" +
    "\064\074\065\054\066\053\001\002\000\010\007\uffae\022" +
    "\uffae\023\uffae\001\002\000\010\007\uffa7\022\u0136\023\u0137" +
    "\001\002\000\004\007\u0151\001\002\000\004\021\u0152\001" +
    "\002\000\004\004\u0153\001\002\000\052\003\uffb1\007\uffb1" +
    "\011\uffb1\021\uffb1\022\uffb1\023\uffb1\025\uffb1\026\uffb1\027" +
    "\uffb1\032\uffb1\033\uffb1\034\uffb1\035\uffb1\054\uffb1\062\uffb1" +
    "\063\uffb1\064\uffb1\065\uffb1\066\uffb1\070\uffb1\001\002\000" +
    "\022\003\u0156\011\073\054\064\062\077\063\060\064\074" +
    "\065\054\066\053\001\002\000\004\004\u0157\001\002\000" +
    "\004\036\u0124\001\002\000\052\003\uffb7\007\uffb7\011\uffb7" +
    "\021\uffb7\022\uffb7\023\uffb7\025\uffb7\026\uffb7\027\uffb7\032" +
    "\uffb7\033\uffb7\034\uffb7\035\uffb7\054\uffb7\062\uffb7\063\uffb7" +
    "\064\uffb7\065\uffb7\066\uffb7\070\uffb7\001\002\000\004\004" +
    "\u0159\001\002\000\042\003\uffb6\007\uffb6\011\uffb6\021\uffb6" +
    "\022\uffb6\023\uffb6\025\uffb6\027\uffb6\033\uffb6\034\uffb6\054" +
    "\uffb6\062\uffb6\063\uffb6\064\uffb6\065\uffb6\066\uffb6\001\002" +
    "\000\042\003\uffc9\007\uffc9\011\uffc9\021\uffc9\022\uffc9\023" +
    "\uffc9\025\uffc9\027\uffc9\033\uffc9\034\uffc9\054\uffc9\062\uffc9" +
    "\063\uffc9\064\uffc9\065\uffc9\066\uffc9\001\002\000\042\003" +
    "\067\007\uffb5\011\073\021\066\022\uffb5\023\uffb5\025\101" +
    "\027\103\033\062\034\072\054\064\062\077\063\060\064" +
    "\074\065\054\066\053\001\002\000\010\007\uffae\022\uffae" +
    "\023\uffae\001\002\000\010\007\uffa7\022\u0136\023\u0137\001" +
    "\002\000\004\007\u015f\001\002\000\004\021\u0160\001\002" +
    "\000\004\004\u0161\001\002\000\052\003\uffb4\007\uffb4\011" +
    "\uffb4\021\uffb4\022\uffb4\023\uffb4\025\uffb4\026\uffb4\027\uffb4" +
    "\032\uffb4\033\uffb4\034\uffb4\035\uffb4\054\uffb4\062\uffb4\063" +
    "\uffb4\064\uffb4\065\uffb4\066\uffb4\070\uffb4\001\002\000\026" +
    "\044\123\045\115\051\124\054\111\055\114\056\120\057" +
    "\262\064\074\065\054\066\053\001\002\000\030\003\u0165" +
    "\044\123\045\115\051\124\054\111\055\114\056\120\057" +
    "\262\064\074\065\054\066\053\001\002\000\004\004\uffe6" +
    "\001\002\000\004\004\uffe3\001\002\000\004\004\uffe4\001" +
    "\002\000\022\004\u0175\013\366\044\123\045\115\051\373" +
    "\054\111\055\114\056\120\001\002\000\010\003\u0169\004" +
    "\u016a\015\377\001\002\000\036\003\uff7e\007\uff7e\011\uff7e" +
    "\021\uff7e\025\uff7e\027\uff7e\033\uff7e\034\uff7e\054\uff7e\062" +
    "\uff7e\063\uff7e\064\uff7e\065\uff7e\066\uff7e\001\002\000\036" +
    "\003\uff82\007\uff82\011\uff82\021\uff82\025\uff82\027\uff82\033" +
    "\uff82\034\uff82\054\uff82\062\uff82\063\uff82\064\uff82\065\uff82" +
    "\066\uff82\001\002\000\036\003\uffc9\007\uffc9\011\uffc9\021" +
    "\uffc9\025\uffc9\027\uffc9\033\uffc9\034\uffc9\054\uffc9\062\uffc9" +
    "\063\uffc9\064\uffc9\065\uffc9\066\uffc9\001\002\000\036\003" +
    "\067\007\u016d\011\073\021\066\025\101\027\103\033\062" +
    "\034\072\054\064\062\077\063\060\064\074\065\054\066" +
    "\053\001\002\000\004\033\u016e\001\002\000\004\004\u016f" +
    "\001\002\000\052\003\uff81\007\uff81\011\uff81\021\uff81\022" +
    "\uff81\023\uff81\025\uff81\026\uff81\027\uff81\032\uff81\033\uff81" +
    "\034\uff81\035\uff81\054\uff81\062\uff81\063\uff81\064\uff81\065" +
    "\uff81\066\uff81\070\uff81\001\002\000\036\003\uffc9\007\uffc9" +
    "\011\uffc9\021\uffc9\025\uffc9\027\uffc9\033\uffc9\034\uffc9\054" +
    "\uffc9\062\uffc9\063\uffc9\064\uffc9\065\uffc9\066\uffc9\001\002" +
    "\000\036\003\067\007\u0172\011\073\021\066\025\101\027" +
    "\103\033\062\034\072\054\064\062\077\063\060\064\074" +
    "\065\054\066\053\001\002\000\004\033\u0173\001\002\000" +
    "\004\004\u0174\001\002\000\052\003\uff7d\007\uff7d\011\uff7d" +
    "\021\uff7d\022\uff7d\023\uff7d\025\uff7d\026\uff7d\027\uff7d\032" +
    "\uff7d\033\uff7d\034\uff7d\035\uff7d\054\uff7d\062\uff7d\063\uff7d" +
    "\064\uff7d\065\uff7d\066\uff7d\070\uff7d\001\002\000\036\003" +
    "\uff80\007\uff80\011\uff80\021\uff80\025\uff80\027\uff80\033\uff80" +
    "\034\uff80\054\uff80\062\uff80\063\uff80\064\uff80\065\uff80\066" +
    "\uff80\001\002\000\036\003\uffc9\007\uffc9\011\uffc9\021\uffc9" +
    "\025\uffc9\027\uffc9\033\uffc9\034\uffc9\054\uffc9\062\uffc9\063" +
    "\uffc9\064\uffc9\065\uffc9\066\uffc9\001\002\000\036\003\067" +
    "\007\u0178\011\073\021\066\025\101\027\103\033\062\034" +
    "\072\054\064\062\077\063\060\064\074\065\054\066\053" +
    "\001\002\000\004\033\u0179\001\002\000\004\004\u017a\001" +
    "\002\000\052\003\uff7f\007\uff7f\011\uff7f\021\uff7f\022\uff7f" +
    "\023\uff7f\025\uff7f\026\uff7f\027\uff7f\032\uff7f\033\uff7f\034" +
    "\uff7f\035\uff7f\054\uff7f\062\uff7f\063\uff7f\064\uff7f\065\uff7f" +
    "\066\uff7f\070\uff7f\001\002\000\032\003\u0180\044\123\045" +
    "\115\051\124\054\111\055\114\056\120\057\262\061\310" +
    "\064\074\065\054\066\053\001\002\000\030\044\123\045" +
    "\115\051\124\054\111\055\114\056\120\057\262\061\310" +
    "\064\074\065\054\066\053\001\002\000\006\052\u017e\060" +
    "\314\001\002\000\004\004\uff71\001\002\000\010\003\u0182" +
    "\052\u0183\060\314\001\002\000\004\052\u0181\001\002\000" +
    "\004\004\uff70\001\002\000\004\004\uff6f\001\002\000\004" +
    "\004\uff75\001\002\000\006\003\u0188\061\u0189\001\002\000" +
    "\004\061\u0186\001\002\000\004\052\u0187\001\002\000\014" +
    "\003\uff68\004\uff68\052\uff68\053\uff68\060\uff68\001\002\000" +
    "\004\052\u018c\001\002\000\006\003\u018a\052\u018b\001\002" +
    "\000\014\003\uff66\004\uff66\052\uff66\053\uff66\060\uff66\001" +
    "\002\000\014\003\uff6d\004\uff6d\052\uff6d\053\uff6d\060\uff6d" +
    "\001\002\000\014\003\uff67\004\uff67\052\uff67\053\uff67\060" +
    "\uff67\001\002\000\006\003\u0191\061\u0192\001\002\000\004" +
    "\061\u018f\001\002\000\004\052\u0190\001\002\000\014\003" +
    "\uff65\004\uff65\052\uff65\053\uff65\060\uff65\001\002\000\004" +
    "\052\u0195\001\002\000\006\003\u0193\052\u0194\001\002\000" +
    "\014\003\uff63\004\uff63\052\uff63\053\uff63\060\uff63\001\002" +
    "\000\014\003\uff6c\004\uff6c\052\uff6c\053\uff6c\060\uff6c\001" +
    "\002\000\014\003\uff64\004\uff64\052\uff64\053\uff64\060\uff64" +
    "\001\002\000\004\051\u0197\001\002\000\010\052\ufff0\054" +
    "\uffea\067\024\001\002\000\004\052\u0199\001\002\000\004" +
    "\012\033\001\002\000\004\004\u019b\001\002\000\040\003" +
    "\ufff4\007\ufff4\011\ufff4\021\ufff4\025\ufff4\027\ufff4\033\ufff4" +
    "\034\ufff4\054\ufff4\062\ufff4\063\ufff4\064\ufff4\065\ufff4\066" +
    "\ufff4\070\ufff4\001\002\000\040\003\067\007\uffc6\011\073" +
    "\021\066\025\101\027\103\033\062\034\072\054\064\062" +
    "\077\063\060\064\074\065\054\066\053\070\u019e\001\002" +
    "\000\004\007\u01a3\001\002\000\026\044\123\045\115\051" +
    "\124\054\111\055\114\056\120\057\262\064\074\065\054" +
    "\066\053\001\002\000\040\003\067\007\uffc6\011\073\021" +
    "\066\025\101\027\103\033\062\034\072\054\064\062\077" +
    "\063\060\064\074\065\054\066\053\070\u019e\001\002\000" +
    "\004\007\uffc8\001\002\000\004\004\u01a2\001\002\000\004" +
    "\007\uffc7\001\002\000\004\006\u01a4\001\002\000\004\004" +
    "\u01a5\001\002\000\014\002\ufff3\003\ufff3\005\ufff3\006\ufff3" +
    "\010\ufff3\001\002\000\004\002\ufffb\001\002\000\014\002" +
    "\ufff7\003\ufff7\005\ufff7\006\ufff7\010\ufff7\001\002\000\004" +
    "\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u01a6\000\006\002\004\007\005\001\001\000\002\001" +
    "\001\000\002\001\001\000\014\003\010\004\012\005\007" +
    "\006\014\013\013\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\004\u01a6\005\007\006\014" +
    "\013\013\001\001\000\014\003\u01a5\004\012\005\007\006" +
    "\014\013\013\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\010\022\014\021\015\024\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\010\040\001\001\000\004\010\027\001\001\000\002" +
    "\001\001\000\004\017\037\001\001\000\004\017\033\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\017\042\001\001\000\002\001\001" +
    "\000\004\017\044\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\063\047\001\001\000\004\032\050\001\001" +
    "\000\032\027\051\031\067\033\075\034\056\040\101\042" +
    "\060\043\054\044\070\045\055\046\062\047\077\050\064" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\024\022\366\023" +
    "\116\024\112\025\115\031\120\051\u0167\052\370\053\364" +
    "\054\363\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\024\022\366\023\116\024\112\025\115" +
    "\031\120\051\u012b\052\370\053\364\054\363\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\016\336\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\012\255\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\017\241\001\001\000\004\017\105" +
    "\001\001\000\002\001\001\000\014\022\227\023\116\024" +
    "\112\025\115\031\120\001\001\000\014\022\111\023\116" +
    "\024\112\025\115\031\120\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\024\155\025\115\031\120\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\024\140\025\115\031\120\001\001\000" +
    "\014\022\124\023\116\024\112\025\115\031\120\001\001" +
    "\000\002\001\001\000\012\023\137\024\112\025\115\031" +
    "\120\001\001\000\012\023\130\024\112\025\115\031\120" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\024" +
    "\136\025\115\031\120\001\001\000\010\024\135\025\115" +
    "\031\120\001\001\000\010\024\134\025\115\031\120\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\014\022\142\023" +
    "\116\024\112\025\115\031\120\001\001\000\004\030\143" +
    "\001\001\000\002\001\001\000\014\022\145\023\116\024" +
    "\112\025\115\031\120\001\001\000\002\001\001\000\004" +
    "\105\147\001\001\000\004\032\150\001\001\000\032\027" +
    "\051\031\067\033\075\034\056\040\101\042\060\043\054" +
    "\044\070\045\055\046\062\047\077\050\064\001\001\000" +
    "\004\055\152\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\014\022\207\023" +
    "\116\024\112\025\115\031\120\001\001\000\014\022\160" +
    "\023\116\024\112\025\115\031\120\001\001\000\004\030" +
    "\171\001\001\000\004\030\162\001\001\000\002\001\001" +
    "\000\004\106\164\001\001\000\004\032\165\001\001\000" +
    "\032\027\051\031\067\033\075\034\056\040\101\042\060" +
    "\043\054\044\070\045\055\046\062\047\077\050\064\001" +
    "\001\000\004\055\167\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\110" +
    "\174\001\001\000\004\032\175\001\001\000\032\027\051" +
    "\031\067\033\075\034\056\040\101\042\060\043\054\044" +
    "\070\045\055\046\062\047\077\050\064\001\001\000\004" +
    "\055\177\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\102\202\001\001\000\004\032\203\001\001\000\032" +
    "\027\051\031\067\033\075\034\056\040\101\042\060\043" +
    "\054\044\070\045\055\046\062\047\077\050\064\001\001" +
    "\000\004\055\205\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\030\210\001\001\000\002\001\001\000\004" +
    "\107\212\001\001\000\004\032\213\001\001\000\032\027" +
    "\051\031\067\033\075\034\056\040\101\042\060\043\054" +
    "\044\070\045\055\046\062\047\077\050\064\001\001\000" +
    "\004\055\215\001\001\000\002\001\001\000\002\001\001" +
    "\000\020\022\220\023\116\024\112\025\115\031\120\057" +
    "\222\060\221\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\014\022\226\023" +
    "\116\024\112\025\115\031\120\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\014\022\231\023" +
    "\116\024\112\025\115\031\120\001\001\000\004\030\232" +
    "\001\001\000\002\001\001\000\004\104\234\001\001\000" +
    "\004\032\235\001\001\000\032\027\051\031\067\033\075" +
    "\034\056\040\101\042\060\043\054\044\070\045\055\046" +
    "\062\047\077\050\064\001\001\000\004\055\237\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\014\022\243\023\116\024\112\025\115\031\120\001\001" +
    "\000\002\001\001\000\014\022\245\023\116\024\112\025" +
    "\115\031\120\001\001\000\004\030\246\001\001\000\002" +
    "\001\001\000\004\103\250\001\001\000\004\032\251\001" +
    "\001\000\032\027\051\031\067\033\075\034\056\040\101" +
    "\042\060\043\054\044\070\045\055\046\062\047\077\050" +
    "\064\001\001\000\004\055\253\001\001\000\002\001\001" +
    "\000\002\001\001\000\020\021\262\022\257\023\116\024" +
    "\112\025\115\027\260\031\120\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\061\264\001\001\000\004\036\266" +
    "\001\001\000\016\022\272\023\116\024\112\025\115\031" +
    "\120\056\274\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\101\300\001\001" +
    "\000\014\022\277\023\116\024\112\025\115\031\120\001" +
    "\001\000\002\001\001\000\004\032\301\001\001\000\032" +
    "\027\051\031\067\033\075\034\056\040\101\042\060\043" +
    "\054\044\070\045\055\046\062\047\077\050\064\001\001" +
    "\000\004\100\303\001\001\000\004\032\304\001\001\000" +
    "\032\027\051\031\067\033\075\034\056\040\101\042\060" +
    "\043\054\044\070\045\055\046\062\047\077\050\064\001" +
    "\001\000\022\021\310\022\257\023\116\024\112\025\115" +
    "\027\260\031\120\035\316\001\001\000\022\021\310\022" +
    "\257\023\116\024\112\025\115\027\260\031\120\035\311" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\020\021\315\022\257\023\116" +
    "\024\112\025\115\027\260\031\120\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\020\341\001" +
    "\001\000\002\001\001\000\004\026\342\001\001\000\002" +
    "\001\001\000\020\021\344\022\257\023\116\024\112\025" +
    "\115\027\260\031\120\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\020\353\001\001\000\004" +
    "\026\354\001\001\000\002\001\001\000\004\020\356\001" +
    "\001\000\004\026\357\001\001\000\002\001\001\000\004" +
    "\116\u011b\001\001\000\004\115\u0115\001\001\000\024\022" +
    "\366\023\116\024\112\025\115\031\120\051\371\052\370" +
    "\053\364\054\363\001\001\000\002\001\001\000\002\001" +
    "\001\000\020\022\366\023\116\024\112\025\115\031\120" +
    "\052\u0114\054\363\001\001\000\002\001\001\000\022\022" +
    "\366\023\116\024\112\025\115\031\120\052\370\053\u0113" +
    "\054\363\001\001\000\002\001\001\000\002\001\001\000" +
    "\024\022\373\023\116\024\112\025\115\031\120\051\374" +
    "\052\370\053\364\054\363\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\022\022\366\023\116" +
    "\024\112\025\115\031\120\052\370\053\377\054\363\001" +
    "\001\000\002\001\001\000\020\022\366\023\116\024\112" +
    "\025\115\031\120\052\u0101\054\363\001\001\000\002\001" +
    "\001\000\014\022\u010d\023\116\024\112\025\115\031\120" +
    "\001\001\000\014\022\u010c\023\116\024\112\025\115\031" +
    "\120\001\001\000\014\022\u010b\023\116\024\112\025\115" +
    "\031\120\001\001\000\014\022\u010a\023\116\024\112\025" +
    "\115\031\120\001\001\000\014\022\u0109\023\116\024\112" +
    "\025\115\031\120\001\001\000\014\022\u0108\023\116\024" +
    "\112\025\115\031\120\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\114\u010f\001\001\000\004" +
    "\032\u0110\001\001\000\032\027\051\031\067\033\075\034" +
    "\056\040\101\042\060\043\054\044\070\045\055\046\062" +
    "\047\077\050\064\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\032\u0116" +
    "\001\001\000\032\027\051\031\067\033\075\034\056\040" +
    "\101\042\060\043\054\044\070\045\055\046\062\047\077" +
    "\050\064\001\001\000\002\001\001\000\024\022\366\023" +
    "\116\024\112\025\115\031\120\051\u0119\052\370\053\364" +
    "\054\363\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\032\u011c\001\001\000\032\027\051\031\067\033\075" +
    "\034\056\040\101\042\060\043\054\044\070\045\055\046" +
    "\062\047\077\050\064\001\001\000\002\001\001\000\024" +
    "\022\366\023\116\024\112\025\115\031\120\051\u011f\052" +
    "\370\053\364\054\363\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\061\u0125\001\001\000" +
    "\020\021\u0124\022\257\023\116\024\112\025\115\027\260" +
    "\031\120\001\001\000\002\001\001\000\004\036\u0126\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\024\011\u0157\022\366\023\116\024" +
    "\112\025\115\031\120\052\370\053\u0113\054\363\001\001" +
    "\000\004\011\u012e\001\001\000\004\067\u0153\001\001\000" +
    "\004\072\u014b\001\001\000\002\001\001\000\004\065\u0130" +
    "\001\001\000\004\032\u0131\001\001\000\034\027\051\031" +
    "\067\033\075\034\056\040\101\042\060\043\054\044\070" +
    "\045\055\046\062\047\077\050\064\066\u0132\001\001\000" +
    "\004\062\u0133\001\001\000\004\041\u0134\001\001\000\002" +
    "\001\001\000\024\022\366\023\116\024\112\025\115\031" +
    "\120\051\u013b\052\370\053\364\054\363\001\001\000\002" +
    "\001\001\000\004\077\u0138\001\001\000\004\032\u0139\001" +
    "\001\000\032\027\051\031\067\033\075\034\056\040\101" +
    "\042\060\043\054\044\070\045\055\046\062\047\077\050" +
    "\064\001\001\000\024\011\u0144\022\366\023\116\024\112" +
    "\025\115\031\120\052\370\053\u0113\054\363\001\001\000" +
    "\004\011\u013d\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\076\u0142\001\001\000\004\074\u0140\001\001\000" +
    "\004\032\u0141\001\001\000\032\027\051\031\067\033\075" +
    "\034\056\040\101\042\060\043\054\044\070\045\055\046" +
    "\062\047\077\050\064\001\001\000\004\032\u0143\001\001" +
    "\000\032\027\051\031\067\033\075\034\056\040\101\042" +
    "\060\043\054\044\070\045\055\046\062\047\077\050\064" +
    "\001\001\000\002\001\001\000\004\075\u0146\001\001\000" +
    "\004\032\u0147\001\001\000\032\027\051\031\067\033\075" +
    "\034\056\040\101\042\060\043\054\044\070\045\055\046" +
    "\062\047\077\050\064\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\032\u014c\001\001\000" +
    "\034\027\051\031\067\033\075\034\056\040\101\042\060" +
    "\043\054\044\070\045\055\046\062\047\077\050\064\073" +
    "\u014d\001\001\000\004\062\u014e\001\001\000\004\041\u014f" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\016\027\051\031\067\034\056" +
    "\040\101\044\u0154\050\064\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\070\u0159\001\001\000\004\032\u015a\001\001\000\034\027" +
    "\051\031\067\033\075\034\056\040\101\042\060\043\054" +
    "\044\070\045\055\046\062\047\077\050\064\071\u015b\001" +
    "\001\000\004\062\u015c\001\001\000\004\041\u015d\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\020\021\u0165\022\257\023\116\024\112" +
    "\025\115\027\260\031\120\001\001\000\020\021\u0163\022" +
    "\257\023\116\024\112\025\115\027\260\031\120\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\022\022\366\023\116\024\112\025\115\031\120\052\370" +
    "\053\u0113\054\363\001\001\000\002\001\001\000\004\113" +
    "\u016f\001\001\000\004\111\u016a\001\001\000\004\032\u016b" +
    "\001\001\000\032\027\051\031\067\033\075\034\056\040" +
    "\101\042\060\043\054\044\070\045\055\046\062\047\077" +
    "\050\064\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\032\u0170\001\001\000\032\027\051" +
    "\031\067\033\075\034\056\040\101\042\060\043\054\044" +
    "\070\045\055\046\062\047\077\050\064\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\112" +
    "\u0175\001\001\000\004\032\u0176\001\001\000\032\027\051" +
    "\031\067\033\075\034\056\040\101\042\060\043\054\044" +
    "\070\045\055\046\062\047\077\050\064\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\022\021" +
    "\310\022\257\023\116\024\112\025\115\027\260\031\120" +
    "\035\u017e\001\001\000\022\021\310\022\257\023\116\024" +
    "\112\025\115\027\260\031\120\035\u017c\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\010\022\014\u0197\015\024\001\001\000\002\001\001\000" +
    "\004\017\u0199\001\001\000\002\001\001\000\004\064\u019b" +
    "\001\001\000\034\027\051\031\067\033\u019e\034\056\037" +
    "\u019c\040\101\042\060\043\054\044\070\045\055\046\062" +
    "\047\077\050\064\001\001\000\002\001\001\000\020\021" +
    "\u01a0\022\257\023\116\024\112\025\115\027\260\031\120" +
    "\001\001\000\034\027\051\031\067\033\u019e\034\056\037" +
    "\u019f\040\101\042\060\043\054\044\070\045\055\046\062" +
    "\047\077\050\064\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$SintaxisVisual$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$SintaxisVisual$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$SintaxisVisual$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    private Symbol s;
    private VisualSemantica sem = new VisualSemantica();
    private boolean error = false;
    private MetodoVisual actual;
    private Errores errores = new Errores();
    private int linea;

    public void setLinea(int line){
            this.linea = line;
    }

    public void syntax_error(Symbol sym){
            errores.errorSintactico(sym, this.linea);
    }

    public void unrecovered_syntax_error(Symbol sym) throws java.lang.Exception{
            errores.errorSintactico(sym, this.linea); 
    }

    public VisualSemantica getVisual(){
            return sem;
    }
    
    public void reportarSem(String texto){
            errores.errorSemantico(getS(), texto, this.linea);
    }
    
    public Symbol getS(){
        return this.cur_token;
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$SintaxisVisual$actions {
  private final SintaxisVisual parser;

  /** Constructor */
  CUP$SintaxisVisual$actions(SintaxisVisual parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$SintaxisVisual$do_action_part00000000(
    int                        CUP$SintaxisVisual$act_num,
    java_cup.runtime.lr_parser CUP$SintaxisVisual$parser,
    java.util.Stack            CUP$SintaxisVisual$stack,
    int                        CUP$SintaxisVisual$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$SintaxisVisual$result;

      /* select the action based on the action number */
      switch (CUP$SintaxisVisual$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= VISUAL EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-1)).value;
		RESULT = start_val;
              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$SintaxisVisual$parser.done_parsing();
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // VISUAL ::= ESP STATESM 
            {
              Object RESULT =null;
		sem.mostrarMetodos();
              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("VISUAL",0, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // ESP ::= espacio 
            {
              Object RESULT =null;

              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("ESP",5, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // ESP ::= 
            {
              Object RESULT =null;

              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("ESP",5, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // PUBLIC ::= publicc 
            {
              Object RESULT =null;

              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("PUBLIC",9, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // PUBLIC ::= 
            {
              Object RESULT =null;

              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("PUBLIC",9, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // STATESM ::= STATEM STATESM 
            {
              Object RESULT =null;

              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("STATESM",1, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // STATESM ::= 
            {
              Object RESULT =null;

              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("STATESM",1, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // STATEM ::= SUB 
            {
              Object RESULT =null;

              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("STATEM",2, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // STATEM ::= FUNCTION 
            {
              Object RESULT =null;

              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("STATEM",2, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // STATEM ::= error STATEM 
            {
              Object RESULT =null;
		sem.eliminarAmbito(VisualSemantica.AMBITO); VisualSemantica.AMBITO = 0;
              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("STATEM",2, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // NT$0 ::= 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-4)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-4)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-4)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-2)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-2)).right;
		List<VariableVisual> e2 = (List<VariableVisual>)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-2)).value;
VisualSemantica.AMBITO += 1;
                                        MetodoVisual met = new MetodoVisual(e1, e2, VisualSemantica.VOID);
                                        actual = met;
                                        sem.addListVar(e2);
                                        if(!sem.addMetodo(met)){
                                                reportarSem("Metodo ya existente con id: <"+e1+"> con mismos parametros");}
              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("NT$0",49, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // SUB ::= PUBLIC subb id para LISTPARAMM parc espacio NT$0 STATEMENTS endd subb espacio 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-4)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-9)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-9)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-9)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-7)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-7)).right;
		List<VariableVisual> e2 = (List<VariableVisual>)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-7)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-3)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-3)).right;
		ListaTripletes e3 = (ListaTripletes)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-3)).value;
		sem.eliminarAmbito(VisualSemantica.AMBITO);
                                        VisualSemantica.AMBITO -= 1;
                                        actual.getTripletes().addAll(e3); sem.setDireccion(0);
              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("SUB",3, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-11)), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // NT$1 ::= 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-5)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-5)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-5)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-3)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-3)).right;
		List<VariableVisual> e2 = (List<VariableVisual>)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-3)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-1)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-1)).right;
		String e3 = (String)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-1)).value;
VisualSemantica.AMBITO += 1;
                                        MetodoVisual met = new MetodoVisual(e1, e2, e3);
                                        actual = met; met.setVisual(new VariableVisual(e1, VisualSemantica.AMBITO, e3,
                                        new AsignarValor(new TerminalOperator(e1), null, e3)));
                                        VariableVisual var = new VariableVisual(e1, VisualSemantica.AMBITO, e3, new TerminalOperator(e1)); var.setDireccion(-1);
                                        sem.getVariables().add(var);
                                        if(!sem.addListVar(e2)){
                                                reportarSem("Un parametro tiene el mismo nombre del de la función con id: <"+e1+">");
                                        } if(!sem.addMetodo(met)){
                                                reportarSem("Metodo ya existente con id: <"+e1+"> con mismos parametros");}
              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("NT$1",50, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // FUNCTION ::= PUBLIC functionn id para LISTPARAMM parc TYPE espacio NT$1 STATEMENTSF endd functionn espacio 
            {
              Object RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-4)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-10)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-10)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-10)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-8)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-8)).right;
		List<VariableVisual> e2 = (List<VariableVisual>)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-8)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-6)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-6)).right;
		String e3 = (String)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-6)).value;
		int e4left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-3)).left;
		int e4right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-3)).right;
		ListaTripletes e4 = (ListaTripletes)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-3)).value;
		sem.eliminarAmbito(VisualSemantica.AMBITO);
                                        VisualSemantica.AMBITO -= 1;
                                        actual.getTripletes().addAll(e4); sem.setDireccion(0);
              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("FUNCTION",4, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-12)), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // DEFVAR ::= dimm LISTVAR 
            {
              ListaTripletes RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()).right;
		List<VariableVisual> e1 = (List<VariableVisual>)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.peek()).value;
		if(VisualSemantica.tienenTipos(e1)&&sem.addListVar(e1)){}
                                        else{reportarSem("Error con el tipado de variables");} 
                                        RESULT = new ListaTripletes(sem.devolverTrip(e1));
              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("DEFVAR",38, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // LISTPARAMM ::= LISTPARAM 
            {
              List<VariableVisual> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()).right;
		List<VariableVisual> e1 = (List<VariableVisual>)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.peek()).value;
		RESULT = e1;
              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("LISTPARAMM",10, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // LISTPARAMM ::= 
            {
              List<VariableVisual> RESULT =null;
		RESULT = new ArrayList<>();
              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("LISTPARAMM",10, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // LISTPARAM ::= LISTPARAM coma BYVAL id TYPE 
            {
              List<VariableVisual> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-4)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-4)).right;
		List<VariableVisual> e1 = (List<VariableVisual>)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-4)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-1)).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-1)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()).right;
		String e3 = (String)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.peek()).value;
		e1.add(new VariableVisual(e2, (VisualSemantica.AMBITO + 1), e3, new TerminalOperator(e2)));
                                        RESULT = e1;
              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("LISTPARAM",11, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-4)), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // LISTPARAM ::= BYVAL id TYPE 
            {
              List<VariableVisual> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-1)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.peek()).value;
		List<VariableVisual> var = new ArrayList<>();
                        var.add(new VariableVisual(e1, (VisualSemantica.AMBITO + 1), e2, new TerminalOperator(e1)));
                        RESULT = var;
              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("LISTPARAM",11, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // LISTPARAM ::= LISTPARAM error BYVAL id TYPE 
            {
              List<VariableVisual> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-4)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-4)).right;
		List<VariableVisual> e1 = (List<VariableVisual>)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-4)).value;
		reportarSem("Error con los parametros, se esperaba una coma"); RESULT = e1;
              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("LISTPARAM",11, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-4)), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // LISTPARAM ::= LISTPARAM coma BYVAL error TYPE 
            {
              List<VariableVisual> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-4)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-4)).right;
		List<VariableVisual> e1 = (List<VariableVisual>)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-4)).value;
		reportarSem("Error con los parametros, se esperaba un id"); RESULT = e1;
              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("LISTPARAM",11, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-4)), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // BYVAL ::= byval 
            {
              Object RESULT =null;

              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("BYVAL",6, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // BYVAL ::= 
            {
              Object RESULT =null;

              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("BYVAL",6, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // LISTVAR ::= LISTVAR coma id TYPEE DEF 
            {
              List<VariableVisual> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-4)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-4)).right;
		List<VariableVisual> e1 = (List<VariableVisual>)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-4)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-2)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-2)).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-2)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-1)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-1)).right;
		String e3 = (String)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-1)).value;
		int e4left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()).left;
		int e4right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()).right;
		OperacionVisual e4 = (OperacionVisual)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.peek()).value;
		String tipo = VariableVisual.verificarTipo(e3, e4); VariableVisual va;
                        if(e4!=null){va = new VariableVisual(e2, VisualSemantica.AMBITO, tipo, 
                        new AsignarValor(new TerminalOperator(e2), e4.getTriplete(), OperacionVisual.obtenerTipo(e3)));
                        va.getTripletes().addAll(e4.mostrarTripletes());
                        }else{va = new VariableVisual(e2, VisualSemantica.AMBITO, tipo, 
                        new AsignarValor(new TerminalOperator(e2), null,OperacionVisual.obtenerTipo(e3)));}
                        va.setDefinido(e4 != null); va.setAstipo(e3 != null && e4 == null);
                        if(tipo == null && e3 != null && e4 != null){
                                reportarSem("No coincide el tipo con la asignación de la variable con id: " + e2);
                        } else if(e3 != null && e4 == null){
                                e1.add(va);
                                VisualSemantica.cambiarT(e1, e3);
                        } else {
                                e1.add(va);
                        } RESULT = e1;
              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("LISTVAR",12, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-4)), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // LISTVAR ::= id TYPEE DEF 
            {
              List<VariableVisual> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-1)).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-1)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()).right;
		OperacionVisual e3 = (OperacionVisual)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.peek()).value;
		List<VariableVisual> vars = new ArrayList<>(); String tipo = VariableVisual.verificarTipo(e2, e3); VariableVisual va;
                        if(e3!=null){va = new VariableVisual(e1, VisualSemantica.AMBITO, tipo, 
                        new AsignarValor(new TerminalOperator(e1), e3.getTriplete(),OperacionVisual.obtenerTipo(e2)));
                        va.getTripletes().addAll(e3.mostrarTripletes());
                        }else{va = new VariableVisual(e1, VisualSemantica.AMBITO, tipo, 
                        new AsignarValor(new TerminalOperator(e1), null,OperacionVisual.obtenerTipo(e2)));}
                        va.setDefinido(e3 != null); va.setAstipo(e2 != null && e3 == null);
                        if(tipo == null && e2 != null && e3 != null){
                                reportarSem("No coincide el tipo con la asignación de la variable con id: " + e1);
                        } vars.add(va); RESULT = vars;
              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("LISTVAR",12, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // LISTVAR ::= LISTVAR error id TYPEE DEF 
            {
              List<VariableVisual> RESULT =null;
		reportarSem("Error con la asignacion de variables, se esperaba una coma"); RESULT = new ArrayList<>();
              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("LISTVAR",12, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-4)), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // ASIGVAR ::= id igual EXPR 
            {
              ListaTripletes RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()).right;
		OperacionVisual e2 = (OperacionVisual)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.peek()).value;
		VariableVisual var = sem.existeVar(new VariableVisual(e1, VisualSemantica.AMBITO, null));
                                ListaTripletes trip = new ListaTripletes();
                                if(var==null || !var.getTipo().contains(e2.getTipo())){
                                reportarSem("No coincide el tipo con la asignación de la variable con id: " + e2);}
                                else{trip.addAll(e2.mostrarTripletes()); SumOperator sum = sem.devolverSum(e1);
                                trip.add(sum);
                                trip.add(new AsignarValor(sem.devolverDireccion(sum), e2.getTriplete(), null));}
                                RESULT = trip;
              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("ASIGVAR",30, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // ASIGVAR ::= error igual EXPR 
            {
              ListaTripletes RESULT =null;
		reportarSem("Error en la asignacion de variable, se esperaba un id"); RESULT = new ListaTripletes();
              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("ASIGVAR",30, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // ASIGVAR ::= id error EXPR 
            {
              ListaTripletes RESULT =null;
		reportarSem("Error en la asignacion de variable, se esperaba un igual"); RESULT = new ListaTripletes();
              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("ASIGVAR",30, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // ASIGVAR ::= id igual error 
            {
              ListaTripletes RESULT =null;
		reportarSem("Error en la asignacion de variable, se esperaba una operacion"); RESULT = new ListaTripletes();
              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("ASIGVAR",30, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // TYPE ::= ass integerr 
            {
              String RESULT =null;
		RESULT = VisualSemantica.INT;
              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("TYPE",13, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // TYPE ::= ass charr 
            {
              String RESULT =null;
		RESULT = VisualSemantica.CHAR;
              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("TYPE",13, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // TYPE ::= ass decimall 
            {
              String RESULT =null;
		RESULT = VisualSemantica.FLOAT;
              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("TYPE",13, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // TYPEE ::= ass integerr 
            {
              String RESULT =null;
		RESULT = VisualSemantica.INT;
              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("TYPEE",14, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // TYPEE ::= ass charr 
            {
              String RESULT =null;
		RESULT = VisualSemantica.CHAR;
              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("TYPEE",14, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // TYPEE ::= ass decimall 
            {
              String RESULT =null;
		RESULT = VisualSemantica.FLOAT;
              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("TYPEE",14, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // TYPEE ::= 
            {
              String RESULT =null;
		RESULT = null;
              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("TYPEE",14, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // DEF ::= igual EXPR 
            {
              OperacionVisual RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()).right;
		OperacionVisual e1 = (OperacionVisual)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.peek()).value;
		RESULT = e1;
              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("DEF",20, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // DEF ::= 
            {
              OperacionVisual RESULT =null;
		RESULT = null;
              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("DEF",20, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // OPERACION_A ::= OPERACION_A mas OPERACION_M 
            {
              OperacionVisual RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-2)).right;
		OperacionVisual e1 = (OperacionVisual)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()).right;
		OperacionVisual e2 = (OperacionVisual)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.peek()).value;
		if(e1!=null && e2 !=null){RESULT = new OperacionVisual(e1, e2,
                        new SumOperator(null, e1.getTriplete(), e2.getTriplete(), OperacionVisual.obtenerTipo(e1, e2)));};
              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("OPERACION_A",16, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // OPERACION_A ::= OPERACION_A menos OPERACION_M 
            {
              OperacionVisual RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-2)).right;
		OperacionVisual e1 = (OperacionVisual)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()).right;
		OperacionVisual e2 = (OperacionVisual)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.peek()).value;
		if(e1!=null && e2 !=null){RESULT = new OperacionVisual(e1, e2,
                        new RestOperator(null, e1.getTriplete(), e2.getTriplete(), OperacionVisual.obtenerTipo(e1, e2)));}
              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("OPERACION_A",16, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // OPERACION_A ::= OPERACION_M 
            {
              OperacionVisual RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()).right;
		OperacionVisual e1 = (OperacionVisual)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.peek()).value;
		RESULT = e1;
              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("OPERACION_A",16, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // OPERACION_M ::= OPERACION_M por OPERACION_U 
            {
              OperacionVisual RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-2)).right;
		OperacionVisual e1 = (OperacionVisual)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()).right;
		OperacionVisual e2 = (OperacionVisual)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.peek()).value;
		if(e1!=null && e2 !=null){RESULT = new OperacionVisual(e1, e2,
                                new PorOperator(null, e1.getTriplete(), e2.getTriplete(), OperacionVisual.obtenerTipo(e1, e2)));}
              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("OPERACION_M",17, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // OPERACION_M ::= OPERACION_M div OPERACION_U 
            {
              OperacionVisual RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-2)).right;
		OperacionVisual e1 = (OperacionVisual)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()).right;
		OperacionVisual e2 = (OperacionVisual)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.peek()).value;
		if(e1!=null && e2 !=null){RESULT = new OperacionVisual(e1, e2,
                                new DivOperator(null, e1.getTriplete(), e2.getTriplete(), OperacionVisual.obtenerTipo(e1, e2)));}
              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("OPERACION_M",17, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // OPERACION_M ::= OPERACION_M mod OPERACION_U 
            {
              OperacionVisual RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-2)).right;
		OperacionVisual e1 = (OperacionVisual)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()).right;
		OperacionVisual e2 = (OperacionVisual)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.peek()).value;
		if(e1!=null && e2 !=null){RESULT = new OperacionVisual(e1, e2,
                                new ModOperator(null, e1.getTriplete(), e2.getTriplete(), OperacionVisual.obtenerTipo(e1, e2)));}
              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("OPERACION_M",17, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // OPERACION_M ::= OPERACION_U 
            {
              OperacionVisual RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()).right;
		OperacionVisual e1 = (OperacionVisual)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.peek()).value;
		RESULT = e1;
              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("OPERACION_M",17, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // OPERACION_U ::= menos OPERACION_U 
            {
              OperacionVisual RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()).right;
		OperacionVisual e1 = (OperacionVisual)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.peek()).value;
		String s = ".LC" + Triplete.FLOAT;
                Triplete.FLOAT += 1;
                actual.getFl().add("\t.align 4");
                actual.getFl().add(s + ":");
                actual.getFl().add("\t.long\t"+Float.floatToIntBits(Float.parseFloat("0")));
                RESULT = new OperacionVisual(new OperacionVisual(PythonSemantica.INT, new TerminalOperator("0", s)),
                        e1, new RestOperator(null, new TerminalOperator("0", s), e1.getTriplete(), OperacionVisual.obtenerTipo(e1)));
              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("OPERACION_U",18, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // OPERACION_U ::= mas OPERACION_U 
            {
              OperacionVisual RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()).right;
		OperacionVisual e1 = (OperacionVisual)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.peek()).value;
		RESULT = e1;
              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("OPERACION_U",18, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // OPERACION_U ::= ATOM 
            {
              OperacionVisual RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()).right;
		OperacionVisual e1 = (OperacionVisual)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.peek()).value;
		RESULT = e1;
              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("OPERACION_U",18, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // OPERACION_U ::= LLAMADA_METODO 
            {
              OperacionVisual RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()).right;
		OperacionVisual e1 = (OperacionVisual)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.peek()).value;
		RESULT = e1;
              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("OPERACION_U",18, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // ATOM ::= id 
            {
              OperacionVisual RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.peek()).value;
		VariableVisual var = sem.existeVar(new VariableVisual(e1, VisualSemantica.AMBITO, null)); 
                if(var==null){
                        reportarSem("No existe la variable con id: " + e1);
                } else {
                        SumOperator sum = sem.devolverSum(e1);
                        AsignarTemporal ast = new AsignarTemporal(null, sem.devolverDireccion(sum), "float");
                        OperacionVisual op = new OperacionVisual(var.getTipo(), ast);
                        op.getTripletes().add(sum);
                        RESULT = op;
                }
              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("ATOM",19, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // ATOM ::= entero 
            {
              OperacionVisual RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.peek()).value;
		String s = ".LC" + Triplete.FLOAT;
                Triplete.FLOAT += 1;
                actual.getFl().add("\t.align 4");
                actual.getFl().add(s + ":");
                actual.getFl().add("\t.long\t"+Float.floatToIntBits(Float.parseFloat(e1)));
                RESULT = new OperacionVisual(VisualSemantica.INT, new TerminalOperator(e1, s));
              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("ATOM",19, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // ATOM ::= decimal 
            {
              OperacionVisual RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.peek()).value;
		String s = ".LC" + Triplete.FLOAT;
                Triplete.FLOAT += 1;
                actual.getFl().add("\t.align 4");
                actual.getFl().add(s + ":");
                actual.getFl().add("\t.long\t"+Float.floatToIntBits(Float.parseFloat(e1)));
                RESULT = new OperacionVisual(VisualSemantica.FLOAT, new TerminalOperator(e1, s));
              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("ATOM",19, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // ATOM ::= para OPERACION_A parc 
            {
              OperacionVisual RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-1)).right;
		OperacionVisual e1 = (OperacionVisual)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-1)).value;
		RESULT = e1;
              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("ATOM",19, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // STATEMENTS ::= STATEMENTS STATEMENT 
            {
              ListaTripletes RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-1)).right;
		ListaTripletes e1 = (ListaTripletes)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()).right;
		ListaTripletes e2 = (ListaTripletes)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.peek()).value;
		e1.addAll(e2); RESULT = e1;
              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("STATEMENTS",24, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // STATEMENTS ::= 
            {
              ListaTripletes RESULT =null;
		RESULT = new ListaTripletes();
              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("STATEMENTS",24, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // STATEMENTSF ::= STATEMENT STATEMENTSF 
            {
              ListaTripletes RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-1)).right;
		ListaTripletes e1 = (ListaTripletes)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()).right;
		ListaTripletes e2 = (ListaTripletes)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.peek()).value;
		if(e1.isRet() && e2.isRet()){
                                                        reportarSem("ya existe varios returns, algunos no se toman en cuenta");
                                                }else {e1.addAll(e2);} RESULT = e1;
              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("STATEMENTSF",29, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // STATEMENTSF ::= returnn EXPR espacio 
            {
              ListaTripletes RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-1)).right;
		OperacionVisual e1 = (OperacionVisual)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-1)).value;
		ListaTripletes tri = new ListaTripletes();
                if(e1 == null || !actual.getTIPO().contains(e1.getTipo())){
                        reportarSem("No coincide el tipo del return con el tipo de la función con id: " + actual.getId());}
                else{
                        tri.setRet(true);
                        tri.addAll(e1.mostrarTripletes());
                        tri.add(new Return(e1.getTriplete()));}
                        RESULT = tri;
              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("STATEMENTSF",29, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // STATEMENTSF ::= 
            {
              ListaTripletes RESULT =null;
		RESULT = new ListaTripletes();
              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("STATEMENTSF",29, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // EXPR ::= OPERACION_A 
            {
              OperacionVisual RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()).right;
		OperacionVisual e1 = (OperacionVisual)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.peek()).value;
		RESULT = e1;
              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("EXPR",15, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // EXPR ::= INPUT 
            {
              OperacionVisual RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()).right;
		OperacionVisual e1 = (OperacionVisual)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.peek()).value;
		RESULT = e1;
              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("EXPR",15, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // EXPR ::= character 
            {
              OperacionVisual RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.peek()).value;
		String s = ".LC" + Triplete.FLOAT;
                Triplete.FLOAT += 1;
                actual.getFl().add("\t.align 4");
                actual.getFl().add(s + ":");
                actual.getFl().add("\t.long\t"+Float.floatToIntBits(Float.parseFloat(e1)));
                RESULT = new OperacionVisual(VisualSemantica.CHAR, new TerminalOperator(e1, s));
              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("EXPR",15, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // STATEMENT ::= IF_ELSE 
            {
              ListaTripletes RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()).right;
		ListaTripletes e1 = (ListaTripletes)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.peek()).value;
		RESULT = e1;
              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("STATEMENT",25, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // STATEMENT ::= SELECT 
            {
              ListaTripletes RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()).right;
		ListaTripletes e1 = (ListaTripletes)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.peek()).value;
		RESULT = e1;
              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("STATEMENT",25, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // STATEMENT ::= FOR 
            {
              ListaTripletes RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()).right;
		ListaTripletes e1 = (ListaTripletes)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.peek()).value;
		RESULT = e1;
              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("STATEMENT",25, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // STATEMENT ::= WHILE 
            {
              ListaTripletes RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()).right;
		ListaTripletes e1 = (ListaTripletes)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.peek()).value;
		RESULT = e1;
              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("STATEMENT",25, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // STATEMENT ::= DO_WHILE 
            {
              ListaTripletes RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()).right;
		ListaTripletes e1 = (ListaTripletes)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.peek()).value;
		RESULT = e1;
              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("STATEMENT",25, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // STATEMENT ::= STATEMENTLINE espacio 
            {
              ListaTripletes RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-1)).right;
		ListaTripletes e1 = (ListaTripletes)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-1)).value;
		RESULT = e1;
              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("STATEMENT",25, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // STATEMENT ::= error 
            {
              ListaTripletes RESULT =null;
		RESULT = new ListaTripletes();
              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("STATEMENT",25, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // NT$2 ::= 
            {
              ListaTripletes RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-2)).right;
		CondicionPrograma e1 = (CondicionPrograma)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-2)).value;
VisualSemantica.AMBITO += 1;
              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("NT$2",51, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // NT$3 ::= 
            {
              ListaTripletes RESULT =(ListaTripletes) ((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-1)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-4)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-4)).right;
		CondicionPrograma e1 = (CondicionPrograma)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-4)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()).right;
		ListaTripletes e2 = (ListaTripletes)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.peek()).value;
sem.eliminarAmbito(VisualSemantica.AMBITO); VisualSemantica.AMBITO -= 1;
              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("NT$3",52, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // IF_ELSE ::= iff CONDICION THEN espacio NT$2 STATEMENTS NT$3 ELSE_IF ELSE endd iff espacio 
            {
              ListaTripletes RESULT =null;
              // propagate RESULT from NT$3
                RESULT = (ListaTripletes) ((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-5)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-10)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-10)).right;
		CondicionPrograma e1 = (CondicionPrograma)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-10)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-6)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-6)).right;
		ListaTripletes e2 = (ListaTripletes)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-6)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-4)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-4)).right;
		Else_Operator e3 = (Else_Operator)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-4)).value;
		int e4left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-3)).left;
		int e4right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-3)).right;
		ListaTripletes e4 = (ListaTripletes)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-3)).value;
		e3.agregarIf(e1, e2); RESULT = e3.juntarTripletes(e4);
              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("IF_ELSE",32, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-11)), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // NT$4 ::= 
            {
              ListaTripletes RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-1)).right;
		CondicionPrograma e1 = (CondicionPrograma)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-1)).value;
VisualSemantica.AMBITO += 1;
              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("NT$4",53, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // IF_ELSE ::= iff CONDICION thenn NT$4 STATEMENTLINE espacio 
            {
              ListaTripletes RESULT =null;
              // propagate RESULT from NT$4
                RESULT = (ListaTripletes) ((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-2)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-4)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-4)).right;
		CondicionPrograma e1 = (CondicionPrograma)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-4)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-1)).right;
		ListaTripletes e2 = (ListaTripletes)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-1)).value;
		sem.eliminarAmbito(VisualSemantica.AMBITO); VisualSemantica.AMBITO -= 1; 
                RESULT = Else_Operator.IFSIMPLE(e1, e2);
              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("IF_ELSE",32, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-5)), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // NT$5 ::= 
            {
              ListaTripletes RESULT =null;
reportarSem("Error en el if, se esperaba la condicion"); VisualSemantica.AMBITO += 1;
              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("NT$5",54, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // NT$6 ::= 
            {
              ListaTripletes RESULT =(ListaTripletes) ((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()).right;
		ListaTripletes e2 = (ListaTripletes)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.peek()).value;
sem.eliminarAmbito(VisualSemantica.AMBITO); VisualSemantica.AMBITO -= 1;
              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("NT$6",55, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // IF_ELSE ::= iff error THEN espacio NT$5 STATEMENTS NT$6 ELSE_IF ELSE endd iff espacio 
            {
              ListaTripletes RESULT =null;
              // propagate RESULT from NT$6
                RESULT = (ListaTripletes) ((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-5)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-6)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-6)).right;
		ListaTripletes e2 = (ListaTripletes)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-6)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-4)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-4)).right;
		Else_Operator e3 = (Else_Operator)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-4)).value;
		int e4left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-3)).left;
		int e4right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-3)).right;
		ListaTripletes e4 = (ListaTripletes)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-3)).value;
		RESULT = new ListaTripletes();
              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("IF_ELSE",32, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-11)), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // NT$7 ::= 
            {
              ListaTripletes RESULT =null;
reportarSem("Error en el if, se esperaba un salto de linea despues de la condicion"); VisualSemantica.AMBITO += 1;
              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("NT$7",56, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // NT$8 ::= 
            {
              ListaTripletes RESULT =(ListaTripletes) ((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()).right;
		ListaTripletes e2 = (ListaTripletes)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.peek()).value;
sem.eliminarAmbito(VisualSemantica.AMBITO); VisualSemantica.AMBITO -= 1;
              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("NT$8",57, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // IF_ELSE ::= iff CONDICION error NT$7 STATEMENTS NT$8 ELSE_IF ELSE endd iff espacio 
            {
              ListaTripletes RESULT =null;
              // propagate RESULT from NT$8
                RESULT = (ListaTripletes) ((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-5)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-6)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-6)).right;
		ListaTripletes e2 = (ListaTripletes)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-6)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-4)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-4)).right;
		Else_Operator e3 = (Else_Operator)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-4)).value;
		int e4left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-3)).left;
		int e4right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-3)).right;
		ListaTripletes e4 = (ListaTripletes)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-3)).value;
		RESULT = new ListaTripletes();
              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("IF_ELSE",32, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-10)), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // NT$9 ::= 
            {
              Else_Operator RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-4)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-4)).right;
		Else_Operator e1 = (Else_Operator)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-4)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-2)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-2)).right;
		CondicionPrograma e2 = (CondicionPrograma)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-2)).value;
VisualSemantica.AMBITO += 1;
              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("NT$9",58, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // ELSE_IF ::= ELSE_IF elseiff CONDICION THEN espacio NT$9 STATEMENTS 
            {
              Else_Operator RESULT =null;
              // propagate RESULT from NT$9
                RESULT = (Else_Operator) ((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-1)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-6)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-6)).right;
		Else_Operator e1 = (Else_Operator)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-6)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-4)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-4)).right;
		CondicionPrograma e2 = (CondicionPrograma)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-4)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()).right;
		ListaTripletes e3 = (ListaTripletes)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.peek()).value;
		sem.eliminarAmbito(VisualSemantica.AMBITO); VisualSemantica.AMBITO -= 1; RESULT = e1.agregarElseIf(e2, e3);
              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("ELSE_IF",48, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-6)), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // ELSE_IF ::= 
            {
              Else_Operator RESULT =null;
		RESULT = new Else_Operator();
              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("ELSE_IF",48, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // NT$10 ::= 
            {
              Else_Operator RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-4)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-4)).right;
		Else_Operator e1 = (Else_Operator)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-4)).value;
reportarSem("Error en el else if, se esperaba la condicion"); VisualSemantica.AMBITO += 1;
              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("NT$10",59, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // ELSE_IF ::= ELSE_IF elseiff error THEN espacio NT$10 STATEMENTS 
            {
              Else_Operator RESULT =null;
              // propagate RESULT from NT$10
                RESULT = (Else_Operator) ((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-1)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-6)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-6)).right;
		Else_Operator e1 = (Else_Operator)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-6)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()).right;
		ListaTripletes e3 = (ListaTripletes)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.peek()).value;
		sem.eliminarAmbito(VisualSemantica.AMBITO); VisualSemantica.AMBITO -= 1; RESULT = new Else_Operator();
              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("ELSE_IF",48, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-6)), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // NT$11 ::= 
            {
              Else_Operator RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-4)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-4)).right;
		Else_Operator e1 = (Else_Operator)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-4)).value;
reportarSem("Error en el else if, se esperaba un salto de linea despues del then"); VisualSemantica.AMBITO += 1;
              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("NT$11",60, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // ELSE_IF ::= ELSE_IF elseiff CONDICION THEN error NT$11 STATEMENTS 
            {
              Else_Operator RESULT =null;
              // propagate RESULT from NT$11
                RESULT = (Else_Operator) ((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-1)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-6)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-6)).right;
		Else_Operator e1 = (Else_Operator)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-6)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()).right;
		ListaTripletes e3 = (ListaTripletes)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.peek()).value;
		sem.eliminarAmbito(VisualSemantica.AMBITO); VisualSemantica.AMBITO -= 1; RESULT = new Else_Operator();
              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("ELSE_IF",48, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-6)), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // NT$12 ::= 
            {
              ListaTripletes RESULT =null;
VisualSemantica.AMBITO += 1;
              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("NT$12",61, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // ELSE ::= elsee espacio NT$12 STATEMENTS 
            {
              ListaTripletes RESULT =null;
              // propagate RESULT from NT$12
                RESULT = (ListaTripletes) ((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-1)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()).right;
		ListaTripletes e1 = (ListaTripletes)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.peek()).value;
		sem.eliminarAmbito(VisualSemantica.AMBITO); VisualSemantica.AMBITO -= 1;
        RESULT = e1;
              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("ELSE",31, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // ELSE ::= 
            {
              ListaTripletes RESULT =null;
		RESULT = new ListaTripletes();
              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("ELSE",31, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // THEN ::= thenn 
            {
              Object RESULT =null;

              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("THEN",7, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // THEN ::= 
            {
              Object RESULT =null;

              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("THEN",7, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // STATEMENTLINE ::= CONSOLEWRITE 
            {
              ListaTripletes RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()).right;
		ListaTripletes e1 = (ListaTripletes)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.peek()).value;
		RESULT = e1;
              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("STATEMENTLINE",34, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // STATEMENTLINE ::= INPUT 
            {
              ListaTripletes RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()).right;
		OperacionVisual e1 = (OperacionVisual)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.peek()).value;
		AsignarValor vl = new AsignarValor(new AsignarTemporal(null, null, e1.getTipo()),null
                ,OperacionVisual.obtenerTipo(e1)); 
                ListaTripletes tri = new ListaTripletes(); tri.add(vl); 
                tri.add(new AsignarValor(vl.getOperando1(), e1.getTriplete(), null)); RESULT = tri;
              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("STATEMENTLINE",34, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // STATEMENTLINE ::= DEFVAR 
            {
              ListaTripletes RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()).right;
		ListaTripletes e1 = (ListaTripletes)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.peek()).value;
		RESULT = e1;
              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("STATEMENTLINE",34, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // STATEMENTLINE ::= ASIGVAR 
            {
              ListaTripletes RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()).right;
		ListaTripletes e1 = (ListaTripletes)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.peek()).value;
		RESULT = e1;
              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("STATEMENTLINE",34, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // STATEMENTLINE ::= LLAMADA_METODO 
            {
              ListaTripletes RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()).right;
		OperacionVisual e1 = (OperacionVisual)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.peek()).value;
		RESULT = new ListaTripletes(e1.getTripletes());
              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("STATEMENTLINE",34, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // SELECT ::= selectt CA EXPR espacio CASES CASEELSE endd selectt espacio 
            {
              ListaTripletes RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-6)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-6)).right;
		OperacionVisual e1 = (OperacionVisual)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-6)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-4)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-4)).right;
		CaseVisual e2 = (CaseVisual)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-4)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-3)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-3)).right;
		ListaTripletes e3 = (ListaTripletes)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-3)).value;
		RESULT = e2.agregarDefault(e1, e3);
              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("SELECT",33, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-8)), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // SELECT ::= error espacio CASES CASEELSE endd selectt espacio 
            {
              ListaTripletes RESULT =null;
		 reportarSem("Error en el select, no hay un inicio correcto");
        RESULT = new ListaTripletes();
              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("SELECT",33, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-6)), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // CA ::= casee 
            {
              Object RESULT =null;

              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("CA",8, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // CA ::= 
            {
              Object RESULT =null;

              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("CA",8, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // NT$13 ::= 
            {
              ListaTripletes RESULT =null;
VisualSemantica.AMBITO += 1;
              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("NT$13",62, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // CASEELSE ::= casee elsee espacio NT$13 STATEMENTS 
            {
              ListaTripletes RESULT =null;
              // propagate RESULT from NT$13
                RESULT = (ListaTripletes) ((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-1)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()).right;
		ListaTripletes e1 = (ListaTripletes)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.peek()).value;
		sem.eliminarAmbito(VisualSemantica.AMBITO); VisualSemantica.AMBITO -= 1; RESULT = e1;
              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("CASEELSE",28, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-4)), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // CASEELSE ::= 
            {
              ListaTripletes RESULT =null;

              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("CASEELSE",28, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // NT$14 ::= 
            {
              CaseVisual RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-3)).right;
		CaseVisual e1 = (CaseVisual)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-1)).right;
		List<OperacionVisual> e2 = (List<OperacionVisual>)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-1)).value;
VisualSemantica.AMBITO += 1;
              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("NT$14",63, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // CASES ::= CASES casee LIST_CASE espacio NT$14 STATEMENTS 
            {
              CaseVisual RESULT =null;
              // propagate RESULT from NT$14
                RESULT = (CaseVisual) ((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-1)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-5)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-5)).right;
		CaseVisual e1 = (CaseVisual)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-5)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-3)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-3)).right;
		List<OperacionVisual> e2 = (List<OperacionVisual>)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-3)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()).right;
		ListaTripletes e3 = (ListaTripletes)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.peek()).value;
		sem.eliminarAmbito(VisualSemantica.AMBITO); VisualSemantica.AMBITO -= 1; RESULT = e1.agregarCase(e2, e3);
              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("CASES",47, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-5)), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // CASES ::= 
            {
              CaseVisual RESULT =null;
		RESULT = new CaseVisual();
              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("CASES",47, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // LIST_CASE ::= LIST_CASE coma OPERACION_A 
            {
              List<OperacionVisual> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-2)).right;
		List<OperacionVisual> e1 = (List<OperacionVisual>)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()).right;
		OperacionVisual e2 = (OperacionVisual)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.peek()).value;
		e1.add(e2); RESULT = e1;
              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("LIST_CASE",44, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // LIST_CASE ::= OPERACION_A 
            {
              List<OperacionVisual> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()).right;
		OperacionVisual e1 = (OperacionVisual)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.peek()).value;
		List<OperacionVisual> op = new ArrayList<>(); op.add(e1); RESULT =op;
              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("LIST_CASE",44, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // NT$15 ::= 
            {
              ListaTripletes RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-7)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-7)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-7)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-6)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-6)).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-6)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-4)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-4)).right;
		OperacionVisual e3 = (OperacionVisual)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-4)).value;
		int e4left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-2)).left;
		int e4right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-2)).right;
		OperacionVisual e4 = (OperacionVisual)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-2)).value;
		int e5left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-1)).left;
		int e5right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-1)).right;
		OperacionVisual e5 = (OperacionVisual)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-1)).value;
VisualSemantica.AMBITO += 1;
                VariableVisual vr = new VariableVisual(e1, VisualSemantica.AMBITO, null);
                if(sem.addVar(vr)){
                        
                }
              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("NT$15",64, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // FOR ::= forr id TYPE igual OPERACION_A to OPERACION_A STEP espacio NT$15 STATEMENTS nextt ID espacio 
            {
              ListaTripletes RESULT =null;
              // propagate RESULT from NT$15
                RESULT = (ListaTripletes) ((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-4)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-12)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-12)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-12)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-11)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-11)).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-11)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-9)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-9)).right;
		OperacionVisual e3 = (OperacionVisual)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-9)).value;
		int e4left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-7)).left;
		int e4right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-7)).right;
		OperacionVisual e4 = (OperacionVisual)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-7)).value;
		int e5left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-6)).left;
		int e5right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-6)).right;
		OperacionVisual e5 = (OperacionVisual)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-6)).value;
		int e6left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-3)).left;
		int e6right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-3)).right;
		ListaTripletes e6 = (ListaTripletes)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-3)).value;
		int e7left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-1)).left;
		int e7right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-1)).right;
		String e7 = (String)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-1)).value;
		sem.eliminarAmbito(VisualSemantica.AMBITO); VisualSemantica.AMBITO -= 1;
                if(e7!=null && !e1.equals(e1)){
                        reportarSem("No coincide el id del for, con el next del mismo for, id1: " + e1 + "  id2: " + e7);}
                else{RESULT = Else_Operator.FORV(sem.obtenerDireccion(e1), e2, e3, e4, e5, e6);}
              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("FOR",37, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-13)), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // NT$16 ::= 
            {
              ListaTripletes RESULT =null;
reportarSem("Error en el for, se esperaba el id de la variable for");
                VisualSemantica.AMBITO += 1;
              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("NT$16",65, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // FOR ::= forr error TYPE igual OPERACION_A to OPERACION_A STEP espacio NT$16 STATEMENTS nextt ID espacio 
            {
              ListaTripletes RESULT =null;
              // propagate RESULT from NT$16
                RESULT = (ListaTripletes) ((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-4)).value;
		sem.eliminarAmbito(VisualSemantica.AMBITO); VisualSemantica.AMBITO -= 1; RESULT = new ListaTripletes();
              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("FOR",37, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-13)), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // NT$17 ::= 
            {
              ListaTripletes RESULT =null;
reportarSem("Error en el for, se esperaba el igual despues del tipado");
                VisualSemantica.AMBITO += 1;
              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("NT$17",66, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // FOR ::= forr id TYPE error OPERACION_A to OPERACION_A STEP espacio NT$17 STATEMENTS nextt ID espacio 
            {
              ListaTripletes RESULT =null;
              // propagate RESULT from NT$17
                RESULT = (ListaTripletes) ((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-4)).value;
		sem.eliminarAmbito(VisualSemantica.AMBITO); VisualSemantica.AMBITO -= 1; RESULT = new ListaTripletes();
              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("FOR",37, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-13)), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // NT$18 ::= 
            {
              ListaTripletes RESULT =null;
reportarSem("Error en el for, se esperaba la operación de inicio");
                VisualSemantica.AMBITO += 1;
              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("NT$18",67, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // FOR ::= forr id TYPE igual error to OPERACION_A STEP espacio NT$18 STATEMENTS nextt ID espacio 
            {
              ListaTripletes RESULT =null;
              // propagate RESULT from NT$18
                RESULT = (ListaTripletes) ((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-4)).value;
		sem.eliminarAmbito(VisualSemantica.AMBITO); VisualSemantica.AMBITO -= 1; RESULT = new ListaTripletes();
              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("FOR",37, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-13)), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // NT$19 ::= 
            {
              ListaTripletes RESULT =null;
reportarSem("Error en el for, se esperaba la operación del final");
                VisualSemantica.AMBITO += 1;
              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("NT$19",68, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // FOR ::= forr id TYPE igual OPERACION_A to error STEP espacio NT$19 STATEMENTS nextt ID espacio 
            {
              ListaTripletes RESULT =null;
              // propagate RESULT from NT$19
                RESULT = (ListaTripletes) ((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-4)).value;
		sem.eliminarAmbito(VisualSemantica.AMBITO); VisualSemantica.AMBITO -= 1; RESULT = new ListaTripletes();
              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("FOR",37, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-13)), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // NT$20 ::= 
            {
              ListaTripletes RESULT =null;
reportarSem("Error en el for, se esperaba el simbolo to, entre operaciones");
                VisualSemantica.AMBITO += 1;
              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("NT$20",69, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // FOR ::= forr id TYPE igual OPERACION_A error OPERACION_A STEP espacio NT$20 STATEMENTS nextt ID espacio 
            {
              ListaTripletes RESULT =null;
              // propagate RESULT from NT$20
                RESULT = (ListaTripletes) ((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-4)).value;
		sem.eliminarAmbito(VisualSemantica.AMBITO); VisualSemantica.AMBITO -= 1; RESULT = new ListaTripletes();
              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("FOR",37, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-13)), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // NT$21 ::= 
            {
              ListaTripletes RESULT =null;
reportarSem("Error en el for, se esperaba la operación del paso (STEP)");
                VisualSemantica.AMBITO += 1;
              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("NT$21",70, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // FOR ::= forr id TYPE igual OPERACION_A to OPERACION_A error espacio NT$21 STATEMENTS nextt ID espacio 
            {
              ListaTripletes RESULT =null;
              // propagate RESULT from NT$21
                RESULT = (ListaTripletes) ((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-4)).value;
		sem.eliminarAmbito(VisualSemantica.AMBITO); VisualSemantica.AMBITO -= 1; RESULT = new ListaTripletes();
              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("FOR",37, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-13)), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // ID ::= id 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.peek()).value;
		RESULT = e1;
              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("ID",43, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // ID ::= 
            {
              String RESULT =null;
		RESULT = null;
              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("ID",43, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // STEP ::= stepp OPERACION_A 
            {
              OperacionVisual RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()).right;
		OperacionVisual e1 = (OperacionVisual)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.peek()).value;
		RESULT = e1;
              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("STEP",22, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // NT$22 ::= 
            {
              ListaTripletes RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-1)).right;
		CondicionPrograma e1 = (CondicionPrograma)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-1)).value;
VisualSemantica.AMBITO += 1;
              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("NT$22",71, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // WHILE ::= whilee CONDICION espacio NT$22 STATEMENTS endd whilee espacio 
            {
              ListaTripletes RESULT =null;
              // propagate RESULT from NT$22
                RESULT = (ListaTripletes) ((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-4)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-6)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-6)).right;
		CondicionPrograma e1 = (CondicionPrograma)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-6)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-3)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-3)).right;
		ListaTripletes e2 = (ListaTripletes)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-3)).value;
		sem.eliminarAmbito(VisualSemantica.AMBITO); VisualSemantica.AMBITO -= 1; RESULT = Else_Operator.WHILE(e1, e2);
              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("WHILE",35, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-7)), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // NT$23 ::= 
            {
              ListaTripletes RESULT =null;
reportarSem("Se esperaba la condicion del while"); VisualSemantica.AMBITO += 1;
              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("NT$23",72, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // WHILE ::= whilee error espacio NT$23 STATEMENTS endd whilee espacio 
            {
              ListaTripletes RESULT =null;
              // propagate RESULT from NT$23
                RESULT = (ListaTripletes) ((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-4)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-3)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-3)).right;
		ListaTripletes e2 = (ListaTripletes)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-3)).value;
		sem.eliminarAmbito(VisualSemantica.AMBITO); VisualSemantica.AMBITO -= 1; RESULT = new ListaTripletes();
              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("WHILE",35, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-7)), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // NT$24 ::= 
            {
              ListaTripletes RESULT =null;
reportarSem("Se esperaba un salto de linea, despues de la condicion del while"); VisualSemantica.AMBITO += 1;
              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("NT$24",73, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // WHILE ::= whilee CONDICION error NT$24 STATEMENTS endd whilee espacio 
            {
              ListaTripletes RESULT =null;
              // propagate RESULT from NT$24
                RESULT = (ListaTripletes) ((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-4)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-3)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-3)).right;
		ListaTripletes e2 = (ListaTripletes)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-3)).value;
		sem.eliminarAmbito(VisualSemantica.AMBITO); VisualSemantica.AMBITO -= 1; RESULT = new ListaTripletes();
              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("WHILE",35, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-7)), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // NT$25 ::= 
            {
              ListaTripletes RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-1)).right;
		CondicionPrograma e1 = (CondicionPrograma)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-1)).value;
VisualSemantica.AMBITO += 1;
              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("NT$25",74, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // DO_WHILE ::= doo whilee CONDICION espacio NT$25 STATEMENTS loopp espacio 
            {
              ListaTripletes RESULT =null;
              // propagate RESULT from NT$25
                RESULT = (ListaTripletes) ((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-3)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-5)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-5)).right;
		CondicionPrograma e1 = (CondicionPrograma)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-5)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-2)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-2)).right;
		ListaTripletes e2 = (ListaTripletes)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-2)).value;
		sem.eliminarAmbito(VisualSemantica.AMBITO); VisualSemantica.AMBITO -= 1; RESULT = Else_Operator.DOWHILE(e1, e2);
              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("DO_WHILE",36, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-7)), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // NT$26 ::= 
            {
              ListaTripletes RESULT =null;
VisualSemantica.AMBITO += 1;
              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("NT$26",75, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // DO_WHILE ::= doo espacio NT$26 STATEMENTS loopp whilee CONDICION espacio 
            {
              ListaTripletes RESULT =null;
              // propagate RESULT from NT$26
                RESULT = (ListaTripletes) ((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-5)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-4)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-4)).right;
		ListaTripletes e2 = (ListaTripletes)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-4)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-1)).right;
		CondicionPrograma e1 = (CondicionPrograma)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-1)).value;
		sem.eliminarAmbito(VisualSemantica.AMBITO); VisualSemantica.AMBITO -= 1; RESULT = Else_Operator.DOWHILE(e1, e2);
              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("DO_WHILE",36, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-7)), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // NT$27 ::= 
            {
              ListaTripletes RESULT =null;
reportarSem("Error en el do while, se espera un salto de linea despues del do"); VisualSemantica.AMBITO += 1;
              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("NT$27",76, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // DO_WHILE ::= doo error NT$27 STATEMENTS loopp whilee CONDICION espacio 
            {
              ListaTripletes RESULT =null;
              // propagate RESULT from NT$27
                RESULT = (ListaTripletes) ((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-5)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-4)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-4)).right;
		ListaTripletes e2 = (ListaTripletes)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-4)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-1)).right;
		CondicionPrograma e1 = (CondicionPrograma)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-1)).value;
		sem.eliminarAmbito(VisualSemantica.AMBITO); VisualSemantica.AMBITO -= 1; RESULT = new ListaTripletes();
              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("DO_WHILE",36, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-7)), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // CONSOLEWRITE ::= write para STRING parc 
            {
              ListaTripletes RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-1)).right;
		ListaTripletes e1 = (ListaTripletes)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-1)).value;
		RESULT = e1;
              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("CONSOLEWRITE",26, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // CONSOLEWRITE ::= writeln para STRING parc 
            {
              ListaTripletes RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-1)).right;
		ListaTripletes e1 = (ListaTripletes)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-1)).value;
		e1.add(new Printf("\\n")); RESULT = e1;
              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("CONSOLEWRITE",26, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // CONSOLEWRITE ::= write error STRING parc 
            {
              ListaTripletes RESULT =null;
		reportarSem("Error en el write, se esperaba un ( antes del valor"); RESULT = new ListaTripletes();
              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("CONSOLEWRITE",26, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // CONSOLEWRITE ::= write para error parc 
            {
              ListaTripletes RESULT =null;
		reportarSem("Error en el write, se esperaba un valor dentro de los ()"); RESULT = new ListaTripletes();
              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("CONSOLEWRITE",26, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // CONSOLEWRITE ::= write para STRING error 
            {
              ListaTripletes RESULT =null;
		reportarSem("Error en el write, se esperaba un ) despues del valor"); RESULT = new ListaTripletes();
              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("CONSOLEWRITE",26, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // CONSOLEWRITE ::= writeln error STRING parc 
            {
              ListaTripletes RESULT =null;
		reportarSem("Error en el write, se esperaba un ( antes del valor"); RESULT = new ListaTripletes();
              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("CONSOLEWRITE",26, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // CONSOLEWRITE ::= writeln para error parc 
            {
              ListaTripletes RESULT =null;
		reportarSem("Error en el write, se esperaba un valor dentro de los ()"); RESULT = new ListaTripletes();
              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("CONSOLEWRITE",26, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // CONSOLEWRITE ::= writeln para STRING error 
            {
              ListaTripletes RESULT =null;
		reportarSem("Error en el write, se esperaba un ) despues del valor"); RESULT = new ListaTripletes();
              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("CONSOLEWRITE",26, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // INPUT ::= charinput para string parc 
            {
              OperacionVisual RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-1)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-1)).value;
		OperacionVisual op = new OperacionVisual(VisualSemantica.CHAR,
                                new Input("%d"));
                                op.getTripletes().add(new Printf(e1));
                                RESULT = op;
              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("INPUT",21, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // INPUT ::= floatinput para string parc 
            {
              OperacionVisual RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-1)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-1)).value;
		OperacionVisual op = new OperacionVisual(VisualSemantica.FLOAT,
                                new Input("%c"));
                                op.getTripletes().add(new Printf(e1));
                                RESULT = op;
              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("INPUT",21, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // INPUT ::= intinput para string parc 
            {
              OperacionVisual RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-1)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-1)).value;
		OperacionVisual op = new OperacionVisual(VisualSemantica.INT,
                                new Input("%f"));
                                op.getTripletes().add(new Printf(e1));
                                RESULT = op;
              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("INPUT",21, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // INPUT ::= charinput error string parc 
            {
              OperacionVisual RESULT =null;
		reportarSem("error en el charinput, se esperaba un parentesis antes del string");
              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("INPUT",21, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // INPUT ::= charinput para error parc 
            {
              OperacionVisual RESULT =null;
		reportarSem("error en el charinput, se esperaba un string entre los parentesis");
              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("INPUT",21, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // INPUT ::= charinput para string error 
            {
              OperacionVisual RESULT =null;
		reportarSem("error en el charinput, se esperaba un parentesis despues del string");
              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("INPUT",21, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // INPUT ::= floatinput error string parc 
            {
              OperacionVisual RESULT =null;
		reportarSem("error en el floatinput, se esperaba un parentesis antes del string");
              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("INPUT",21, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // INPUT ::= floatinput para error parc 
            {
              OperacionVisual RESULT =null;
		reportarSem("error en el floatinput, se esperaba un string entre los parentesis");
              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("INPUT",21, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // INPUT ::= floatinput para string error 
            {
              OperacionVisual RESULT =null;
		reportarSem("error en el floatinput, se esperaba un parentesis despues del string");
              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("INPUT",21, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // INPUT ::= intinput error string parc 
            {
              OperacionVisual RESULT =null;
		reportarSem("error en el intinput, se esperaba un parentesis antes del string");
              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("INPUT",21, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // INPUT ::= intinput para error parc 
            {
              OperacionVisual RESULT =null;
		reportarSem("error en el intinput, se esperaba un string entre los parentesis");
              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("INPUT",21, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // INPUT ::= intinput para string error 
            {
              OperacionVisual RESULT =null;
		reportarSem("error en el intinput, se esperaba un parentesis despues del string");
              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("INPUT",21, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // CONDICION ::= CONDICION orr AND 
            {
              CondicionPrograma RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-2)).right;
		CondicionPrograma e1 = (CondicionPrograma)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()).right;
		CondicionPrograma e2 = (CondicionPrograma)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.peek()).value;
		RESULT = IfPrograma.OR(e1, e2);
              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("CONDICION",39, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // CONDICION ::= AND 
            {
              CondicionPrograma RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()).right;
		CondicionPrograma e1 = (CondicionPrograma)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.peek()).value;
		RESULT = e1;
              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("CONDICION",39, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // CONDICION ::= error AND 
            {
              CondicionPrograma RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()).right;
		CondicionPrograma e1 = (CondicionPrograma)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.peek()).value;
		RESULT = e1;
              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("CONDICION",39, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // AND ::= AND andd NOT 
            {
              CondicionPrograma RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-2)).right;
		CondicionPrograma e1 = (CondicionPrograma)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()).right;
		CondicionPrograma e2 = (CondicionPrograma)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.peek()).value;
		RESULT = IfPrograma.AND(e1, e2);
              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("AND",41, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // AND ::= NOT 
            {
              CondicionPrograma RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()).right;
		CondicionPrograma e1 = (CondicionPrograma)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.peek()).value;
		RESULT = e1;
              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("AND",41, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // NOT ::= nott NOT 
            {
              CondicionPrograma RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()).right;
		CondicionPrograma e1 = (CondicionPrograma)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.peek()).value;
		RESULT = IfPrograma.NOT(e1);
              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("NOT",40, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // NOT ::= COMPARACION 
            {
              CondicionPrograma RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()).right;
		Triplete e1 = (Triplete)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.peek()).value;
		RESULT = new IfPrograma(new If_Operator(e1, new Etiqueta()), ((CondicionalOperator)e1).getTripletes());
              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("NOT",40, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // NOT ::= para CONDICION parc 
            {
              CondicionPrograma RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-1)).right;
		CondicionPrograma e1 = (CondicionPrograma)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-1)).value;
		RESULT = e1;
              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("NOT",40, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // COMPARACION ::= OPERACION_A igual OPERACION_A 
            {
              Triplete RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-2)).right;
		OperacionVisual e1 = (OperacionVisual)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()).right;
		OperacionVisual e2 = (OperacionVisual)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.peek()).value;
		RESULT = new IgualOperator(e1.getTriplete(), e2.getTriplete(),
                e1.getTripletes(), e2.getTripletes());
              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("COMPARACION",42, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // COMPARACION ::= OPERACION_A noigual OPERACION_A 
            {
              Triplete RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-2)).right;
		OperacionVisual e1 = (OperacionVisual)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()).right;
		OperacionVisual e2 = (OperacionVisual)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.peek()).value;
		RESULT = new NoIgualOperator(e1.getTriplete(), e2.getTriplete(),
                e1.getTripletes(), e2.getTripletes());
              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("COMPARACION",42, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // COMPARACION ::= OPERACION_A menor OPERACION_A 
            {
              Triplete RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-2)).right;
		OperacionVisual e1 = (OperacionVisual)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()).right;
		OperacionVisual e2 = (OperacionVisual)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.peek()).value;
		RESULT = new MenorOperator(e1.getTriplete(), e2.getTriplete(),
                e1.getTripletes(), e2.getTripletes());
              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("COMPARACION",42, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // COMPARACION ::= OPERACION_A menorig OPERACION_A 
            {
              Triplete RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-2)).right;
		OperacionVisual e1 = (OperacionVisual)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()).right;
		OperacionVisual e2 = (OperacionVisual)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.peek()).value;
		RESULT = new MenorIgOperator(e1.getTriplete(), e2.getTriplete(),
                e1.getTripletes(), e2.getTripletes());
              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("COMPARACION",42, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // COMPARACION ::= OPERACION_A mayor OPERACION_A 
            {
              Triplete RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-2)).right;
		OperacionVisual e1 = (OperacionVisual)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()).right;
		OperacionVisual e2 = (OperacionVisual)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.peek()).value;
		RESULT = new MayorOperator(e1.getTriplete(), e2.getTriplete(),
                e1.getTripletes(), e2.getTripletes());
              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("COMPARACION",42, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 172: // COMPARACION ::= OPERACION_A mayorig OPERACION_A 
            {
              Triplete RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-2)).right;
		OperacionVisual e1 = (OperacionVisual)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()).right;
		OperacionVisual e2 = (OperacionVisual)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.peek()).value;
		RESULT = new MayorIgOperator(e1.getTriplete(), e2.getTriplete(),
                e1.getTripletes(), e2.getTripletes());
              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("COMPARACION",42, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 173: // STRING ::= STRING y EXPR 
            {
              ListaTripletes RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-2)).right;
		ListaTripletes e1 = (ListaTripletes)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()).right;
		OperacionVisual e2 = (OperacionVisual)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.peek()).value;
		e1.addAll(e2.mostrarTripletes()); e1.add(new Printf(Input.tipoVisual(e2), e2.getTriplete(), Input.tipoVisualf(e2))); RESULT = e1;
              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("STRING",27, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 174: // STRING ::= STRING y string 
            {
              ListaTripletes RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-2)).right;
		ListaTripletes e1 = (ListaTripletes)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.peek()).value;
		e1.add(new Printf(e2)); RESULT = e1;
              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("STRING",27, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 175: // STRING ::= EXPR 
            {
              ListaTripletes RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()).right;
		OperacionVisual e1 = (OperacionVisual)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.peek()).value;
		ListaTripletes tri = new ListaTripletes(); tri.addAll(e1.mostrarTripletes());
                tri.add(new Printf(Input.tipoVisual(e1), e1.getTriplete(), Input.tipoVisualf(e1)));
                RESULT = tri;
              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("STRING",27, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 176: // STRING ::= string 
            {
              ListaTripletes RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.peek()).value;
		ListaTripletes tri = new ListaTripletes(); tri.add(new Printf(e1));
                RESULT = tri;
              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("STRING",27, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 177: // LLAMADA_METODO ::= id para LIST_PARAM parc 
            {
              OperacionVisual RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-3)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-1)).right;
		List<OperacionVisual> e2 = (List<OperacionVisual>)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-1)).value;
		MetodoVisual met = sem.existeMetodo(e1, e2);
                        if(met == null){
                                reportarSem("Metodo de Visual no existente con id: <" + e1 + ">");
                        }else {
                                List<Triplete> tri = new ArrayList<>();
                                tri.addAll(met.verMetodo(sem.getVariables().size(), e2));
                                SumOperator s = new SumOperator(null, new P(), new TerminalOperator(""+sem.getVariables().size()),"int");
                                tri.add(s);
                                AsignarTemporal ast = new AsignarTemporal(null, new Stack(s), "float");
                                OperacionVisual op = new OperacionVisual(met.getTIPO(), ast);
                                op.getTripletes().addAll(tri);
                                RESULT = op;
                        }
              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("LLAMADA_METODO",23, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 178: // LLAMADA_METODO ::= id para LIST_PARAM error 
            {
              OperacionVisual RESULT =null;
		reportarSem("Error en la llamada de metodo, se esperaba un parentesis despues de los parametros");
              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("LLAMADA_METODO",23, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 179: // LIST_PARAM ::= LIST 
            {
              List<OperacionVisual> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()).right;
		List<OperacionVisual> e1 = (List<OperacionVisual>)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.peek()).value;
		RESULT = e1;
              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("LIST_PARAM",46, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 180: // LIST_PARAM ::= 
            {
              List<OperacionVisual> RESULT =null;
		RESULT = new ArrayList<>();
              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("LIST_PARAM",46, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 181: // LIST ::= LIST_PARAM coma OPERACION_A 
            {
              List<OperacionVisual> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-2)).right;
		List<OperacionVisual> e1 = (List<OperacionVisual>)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()).right;
		OperacionVisual e2 = (OperacionVisual)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.peek()).value;
		e1.add(e2); RESULT = e1;
              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("LIST",45, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 182: // LIST ::= OPERACION_A 
            {
              List<OperacionVisual> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()).right;
		OperacionVisual e1 = (OperacionVisual)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.peek()).value;
		List<OperacionVisual> params = new ArrayList<>(); params.add(e1); RESULT = params;
              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("LIST",45, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$SintaxisVisual$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$SintaxisVisual$do_action(
    int                        CUP$SintaxisVisual$act_num,
    java_cup.runtime.lr_parser CUP$SintaxisVisual$parser,
    java.util.Stack            CUP$SintaxisVisual$stack,
    int                        CUP$SintaxisVisual$top)
    throws java.lang.Exception
    {
              return CUP$SintaxisVisual$do_action_part00000000(
                               CUP$SintaxisVisual$act_num,
                               CUP$SintaxisVisual$parser,
                               CUP$SintaxisVisual$stack,
                               CUP$SintaxisVisual$top);
    }
}

}
