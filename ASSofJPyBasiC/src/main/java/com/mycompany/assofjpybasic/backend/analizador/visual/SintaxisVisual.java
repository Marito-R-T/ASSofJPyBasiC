
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package com.mycompany.assofjpybasic.backend.analizador.visual;

import java_cup.runtime.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class SintaxisVisual extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return SintaxisVisualSym.class;
}

  /** Default constructor. */
  @Deprecated
  public SintaxisVisual() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public SintaxisVisual(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public SintaxisVisual(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\173\000\002\002\004\000\002\002\004\000\002\002" +
    "\003\000\002\030\003\000\002\030\002\000\002\003\004" +
    "\000\002\003\003\000\002\004\012\000\002\045\003\000" +
    "\002\045\002\000\002\005\004\000\002\005\002\000\002" +
    "\006\003\000\002\006\003\000\002\006\003\000\002\006" +
    "\003\000\002\007\015\000\002\010\016\000\002\011\005" +
    "\000\002\013\003\000\002\013\002\000\002\012\006\000" +
    "\002\012\004\000\002\014\007\000\002\014\005\000\002" +
    "\015\006\000\002\015\006\000\002\015\006\000\002\015" +
    "\006\000\002\015\006\000\002\015\006\000\002\015\006" +
    "\000\002\017\004\000\002\017\004\000\002\017\004\000" +
    "\002\017\002\000\002\020\004\000\002\020\004\000\002" +
    "\020\002\000\002\021\005\000\002\021\005\000\002\021" +
    "\003\000\002\022\005\000\002\022\005\000\002\022\005" +
    "\000\002\022\005\000\002\022\003\000\002\023\004\000" +
    "\002\023\004\000\002\023\003\000\002\024\005\000\002" +
    "\024\003\000\002\042\003\000\002\042\003\000\002\042" +
    "\003\000\002\025\004\000\002\025\002\000\002\026\003" +
    "\000\002\026\003\000\002\026\003\000\002\026\003\000" +
    "\002\026\003\000\002\026\003\000\002\031\005\000\002" +
    "\032\005\000\002\032\011\000\002\033\010\000\002\033" +
    "\005\000\002\033\002\000\002\034\003\000\002\034\002" +
    "\000\002\035\003\000\002\035\003\000\002\035\003\000" +
    "\002\035\003\000\002\036\013\000\002\044\003\000\002" +
    "\044\002\000\002\027\006\000\002\027\002\000\002\040" +
    "\003\000\002\040\003\000\002\041\004\000\002\041\002" +
    "\000\002\037\006\000\002\046\005\000\002\046\007\000" +
    "\002\046\003\000\002\046\005\000\002\047\017\000\002" +
    "\016\003\000\002\016\002\000\002\043\004\000\002\043" +
    "\002\000\002\050\011\000\002\051\010\000\002\051\010" +
    "\000\002\052\007\000\002\052\007\000\002\053\006\000" +
    "\002\053\006\000\002\053\006\000\002\054\005\000\002" +
    "\054\005\000\002\054\003\000\002\055\005\000\002\055" +
    "\005\000\002\055\003\000\002\056\005\000\002\056\003" +
    "\000\002\057\004\000\002\057\003\000\002\060\005\000" +
    "\002\060\005\000\002\060\005\000\002\060\005\000\002" +
    "\060\005\000\002\060\005\000\002\060\003\000\002\061" +
    "\005\000\002\061\005\000\002\061\003\000\002\061\003" +
    "" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0106\000\012\002\ufffd\004\004\007\ufffd\011\ufffd\001" +
    "\002\000\010\002\ufffe\007\ufffe\011\ufffe\001\002\000\004" +
    "\002\u0108\001\002\000\010\002\uffff\007\ufff8\011\007\001" +
    "\002\000\010\005\ufff9\006\ufff9\007\ufff9\001\002\000\010" +
    "\002\ufffb\007\ufffb\011\ufffb\001\002\000\010\002\000\007" +
    "\ufff8\011\007\001\002\000\004\007\013\001\002\000\004" +
    "\065\014\001\002\000\004\004\015\001\002\000\016\005" +
    "\ufff8\006\ufff8\010\ufff6\011\007\012\016\065\017\001\002" +
    "\000\004\065\374\001\002\000\016\044\372\100\315\101" +
    "\313\102\310\103\314\104\311\001\002\000\016\005\ufff8" +
    "\006\ufff8\010\ufff6\011\007\012\016\065\017\001\002\000" +
    "\006\005\033\006\032\001\002\000\016\005\ufff2\006\ufff2" +
    "\010\ufff2\011\ufff2\012\ufff2\065\ufff2\001\002\000\016\005" +
    "\ufff5\006\ufff5\010\ufff5\011\ufff5\012\ufff5\065\ufff5\001\002" +
    "\000\016\005\ufff4\006\ufff4\010\ufff4\011\ufff4\012\ufff4\065" +
    "\ufff4\001\002\000\016\005\ufff3\006\ufff3\010\ufff3\011\ufff3" +
    "\012\ufff3\065\ufff3\001\002\000\004\010\027\001\002\000" +
    "\004\007\030\001\002\000\004\004\031\001\002\000\010" +
    "\002\ufffa\007\ufffa\011\ufffa\001\002\000\004\065\357\001" +
    "\002\000\004\065\034\001\002\000\004\061\035\001\002" +
    "\000\006\062\uffed\065\040\001\002\000\004\062\051\001" +
    "\002\000\006\062\uffee\063\046\001\002\000\010\013\041" +
    "\062\uffde\063\uffde\001\002\000\010\022\045\023\044\024" +
    "\043\001\002\000\006\062\uffeb\063\uffeb\001\002\000\012" +
    "\004\uffe0\044\uffe0\062\uffe0\063\uffe0\001\002\000\012\004" +
    "\uffdf\044\uffdf\062\uffdf\063\uffdf\001\002\000\012\004\uffe1" +
    "\044\uffe1\062\uffe1\063\uffe1\001\002\000\004\065\047\001" +
    "\002\000\010\013\041\062\uffde\063\uffde\001\002\000\006" +
    "\062\uffec\063\uffec\001\002\000\004\004\052\001\002\000" +
    "\026\010\uffc9\012\016\025\066\031\075\033\076\037\061" +
    "\040\070\065\064\073\072\074\055\001\002\000\042\004" +
    "\uffb9\010\uffb9\012\uffb9\025\uffb9\026\uffb9\027\uffb9\031\uffb9" +
    "\032\uffb9\033\uffb9\036\uffb9\037\uffb9\040\uffb9\041\uffb9\065" +
    "\uffb9\073\uffb9\074\uffb9\001\002\000\040\010\uffc7\012\uffc7" +
    "\025\uffc7\026\uffc7\027\uffc7\031\uffc7\032\uffc7\033\uffc7\036" +
    "\uffc7\037\uffc7\040\uffc7\041\uffc7\065\uffc7\073\uffc7\074\uffc7" +
    "\001\002\000\004\061\353\001\002\000\042\004\uffba\010" +
    "\uffba\012\uffba\025\uffba\026\uffba\027\uffba\031\uffba\032\uffba" +
    "\033\uffba\036\uffba\037\uffba\040\uffba\041\uffba\065\uffba\073" +
    "\uffba\074\uffba\001\002\000\040\010\uffc5\012\uffc5\025\uffc5" +
    "\026\uffc5\027\uffc5\031\uffc5\032\uffc5\033\uffc5\036\uffc5\037" +
    "\uffc5\040\uffc5\041\uffc5\065\uffc5\073\uffc5\074\uffc5\001\002" +
    "\000\040\010\uffc8\012\uffc8\025\uffc8\026\uffc8\027\uffc8\031" +
    "\uffc8\032\uffc8\033\uffc8\036\uffc8\037\uffc8\040\uffc8\041\uffc8" +
    "\065\uffc8\073\uffc8\074\uffc8\001\002\000\016\014\226\052" +
    "\113\053\106\065\102\066\105\067\111\001\002\000\004" +
    "\010\342\001\002\000\040\010\uffc4\012\uffc4\025\uffc4\026" +
    "\uffc4\027\uffc4\031\uffc4\032\uffc4\033\uffc4\036\uffc4\037\uffc4" +
    "\040\uffc4\041\uffc4\065\uffc4\073\uffc4\074\uffc4\001\002\000" +
    "\016\044\312\100\315\101\313\102\310\103\314\104\311" +
    "\001\002\000\042\004\uffb8\010\uffb8\012\uffb8\025\uffb8\026" +
    "\uffb8\027\uffb8\031\uffb8\032\uffb8\033\uffb8\036\uffb8\037\uffb8" +
    "\040\uffb8\041\uffb8\065\uffb8\073\uffb8\074\uffb8\001\002\000" +
    "\016\014\226\052\113\053\106\065\102\066\105\067\111" +
    "\001\002\000\040\010\uffc3\012\uffc3\025\uffc3\026\uffc3\027" +
    "\uffc3\031\uffc3\032\uffc3\033\uffc3\036\uffc3\037\uffc3\040\uffc3" +
    "\041\uffc3\065\uffc3\073\uffc3\074\uffc3\001\002\000\006\004" +
    "\213\037\214\001\002\000\040\010\uffc9\012\016\025\066" +
    "\026\uffc9\027\uffc9\031\075\032\uffc9\033\076\036\uffc9\037" +
    "\061\040\070\041\uffc9\065\064\073\072\074\055\001\002" +
    "\000\004\061\201\001\002\000\040\010\uffc6\012\uffc6\025" +
    "\uffc6\026\uffc6\027\uffc6\031\uffc6\032\uffc6\033\uffc6\036\uffc6" +
    "\037\uffc6\040\uffc6\041\uffc6\065\uffc6\073\uffc6\074\uffc6\001" +
    "\002\000\042\004\uffb7\010\uffb7\012\uffb7\025\uffb7\026\uffb7" +
    "\027\uffb7\031\uffb7\032\uffb7\033\uffb7\036\uffb7\037\uffb7\040" +
    "\uffb7\041\uffb7\065\uffb7\073\uffb7\074\uffb7\001\002\000\020" +
    "\032\150\052\uffb4\053\uffb4\065\uffb4\066\uffb4\067\uffb4\070" +
    "\uffb4\001\002\000\004\065\077\001\002\000\006\013\041" +
    "\044\uffde\001\002\000\004\044\101\001\002\000\014\052" +
    "\113\053\106\065\102\066\105\067\111\001\002\000\064" +
    "\004\uffcd\015\uffcd\016\uffcd\017\uffcd\020\uffcd\021\uffcd\030" +
    "\uffcd\034\uffcd\035\uffcd\044\uffcd\045\uffcd\046\uffcd\047\uffcd" +
    "\050\uffcd\051\uffcd\052\uffcd\053\uffcd\054\uffcd\055\uffcd\056" +
    "\uffcd\057\uffcd\060\uffcd\062\uffcd\063\uffcd\071\uffcd\001\002" +
    "\000\006\034\133\052\132\001\002\000\062\004\uffd3\015" +
    "\uffd3\016\uffd3\017\uffd3\020\uffd3\021\uffd3\030\uffd3\034\uffd3" +
    "\035\uffd3\044\uffd3\045\uffd3\046\uffd3\047\uffd3\050\uffd3\051" +
    "\uffd3\052\uffd3\053\uffd3\054\uffd3\055\uffd3\056\uffd3\057\uffd3" +
    "\062\uffd3\063\uffd3\071\uffd3\001\002\000\064\004\uffcb\015" +
    "\uffcb\016\uffcb\017\uffcb\020\uffcb\021\uffcb\030\uffcb\034\uffcb" +
    "\035\uffcb\044\uffcb\045\uffcb\046\uffcb\047\uffcb\050\uffcb\051" +
    "\uffcb\052\uffcb\053\uffcb\054\uffcb\055\uffcb\056\uffcb\057\uffcb" +
    "\060\uffcb\062\uffcb\063\uffcb\071\uffcb\001\002\000\014\052" +
    "\113\053\106\065\102\066\105\067\111\001\002\000\064" +
    "\004\uffce\015\uffce\016\uffce\017\uffce\020\uffce\021\uffce\030" +
    "\uffce\034\uffce\035\uffce\044\uffce\045\uffce\046\uffce\047\uffce" +
    "\050\uffce\051\uffce\052\uffce\053\uffce\054\uffce\055\uffce\056" +
    "\uffce\057\uffce\060\127\062\uffce\063\uffce\071\uffce\001\002" +
    "\000\062\004\uffd8\015\uffd8\016\uffd8\017\uffd8\020\uffd8\021" +
    "\uffd8\030\uffd8\034\uffd8\035\uffd8\044\uffd8\045\uffd8\046\uffd8" +
    "\047\uffd8\050\uffd8\051\uffd8\052\uffd8\053\120\054\115\055" +
    "\121\056\116\057\117\062\uffd8\063\uffd8\071\uffd8\001\002" +
    "\000\064\004\uffcc\015\uffcc\016\uffcc\017\uffcc\020\uffcc\021" +
    "\uffcc\030\uffcc\034\uffcc\035\uffcc\044\uffcc\045\uffcc\046\uffcc" +
    "\047\uffcc\050\uffcc\051\uffcc\052\uffcc\053\uffcc\054\uffcc\055" +
    "\uffcc\056\uffcc\057\uffcc\060\uffcc\062\uffcc\063\uffcc\071\uffcc" +
    "\001\002\000\062\004\uffd0\015\uffd0\016\uffd0\017\uffd0\020" +
    "\uffd0\021\uffd0\030\uffd0\034\uffd0\035\uffd0\044\uffd0\045\uffd0" +
    "\046\uffd0\047\uffd0\050\uffd0\051\uffd0\052\uffd0\053\uffd0\054" +
    "\uffd0\055\uffd0\056\uffd0\057\uffd0\062\uffd0\063\uffd0\071\uffd0" +
    "\001\002\000\014\052\113\053\106\065\102\066\105\067" +
    "\111\001\002\000\062\004\uffd1\015\uffd1\016\uffd1\017\uffd1" +
    "\020\uffd1\021\uffd1\030\uffd1\034\uffd1\035\uffd1\044\uffd1\045" +
    "\uffd1\046\uffd1\047\uffd1\050\uffd1\051\uffd1\052\uffd1\053\uffd1" +
    "\054\uffd1\055\uffd1\056\uffd1\057\uffd1\062\uffd1\063\uffd1\071" +
    "\uffd1\001\002\000\014\052\113\053\106\065\102\066\105" +
    "\067\111\001\002\000\014\052\113\053\106\065\102\066" +
    "\105\067\111\001\002\000\014\052\113\053\106\065\102" +
    "\066\105\067\111\001\002\000\014\052\113\053\106\065" +
    "\102\066\105\067\111\001\002\000\014\052\113\053\106" +
    "\065\102\066\105\067\111\001\002\000\062\004\uffd6\015" +
    "\uffd6\016\uffd6\017\uffd6\020\uffd6\021\uffd6\030\uffd6\034\uffd6" +
    "\035\uffd6\044\uffd6\045\uffd6\046\uffd6\047\uffd6\050\uffd6\051" +
    "\uffd6\052\uffd6\053\uffd6\054\uffd6\055\uffd6\056\uffd6\057\uffd6" +
    "\062\uffd6\063\uffd6\071\uffd6\001\002\000\060\004\uffd9\015" +
    "\uffd9\016\uffd9\017\uffd9\020\uffd9\021\uffd9\030\uffd9\034\uffd9" +
    "\035\uffd9\044\uffd9\045\uffd9\046\uffd9\047\uffd9\050\uffd9\051" +
    "\uffd9\052\uffd9\054\115\055\121\056\116\057\117\062\uffd9" +
    "\063\uffd9\071\uffd9\001\002\000\062\004\uffd5\015\uffd5\016" +
    "\uffd5\017\uffd5\020\uffd5\021\uffd5\030\uffd5\034\uffd5\035\uffd5" +
    "\044\uffd5\045\uffd5\046\uffd5\047\uffd5\050\uffd5\051\uffd5\052" +
    "\uffd5\053\uffd5\054\uffd5\055\uffd5\056\uffd5\057\uffd5\062\uffd5" +
    "\063\uffd5\071\uffd5\001\002\000\062\004\uffd4\015\uffd4\016" +
    "\uffd4\017\uffd4\020\uffd4\021\uffd4\030\uffd4\034\uffd4\035\uffd4" +
    "\044\uffd4\045\uffd4\046\uffd4\047\uffd4\050\uffd4\051\uffd4\052" +
    "\uffd4\053\uffd4\054\uffd4\055\uffd4\056\uffd4\057\uffd4\062\uffd4" +
    "\063\uffd4\071\uffd4\001\002\000\062\004\uffd7\015\uffd7\016" +
    "\uffd7\017\uffd7\020\uffd7\021\uffd7\030\uffd7\034\uffd7\035\uffd7" +
    "\044\uffd7\045\uffd7\046\uffd7\047\uffd7\050\uffd7\051\uffd7\052" +
    "\uffd7\053\uffd7\054\uffd7\055\uffd7\056\uffd7\057\uffd7\062\uffd7" +
    "\063\uffd7\071\uffd7\001\002\000\014\052\113\053\106\065" +
    "\102\066\105\067\111\001\002\000\062\004\uffcf\015\uffcf" +
    "\016\uffcf\017\uffcf\020\uffcf\021\uffcf\030\uffcf\034\uffcf\035" +
    "\uffcf\044\uffcf\045\uffcf\046\uffcf\047\uffcf\050\uffcf\051\uffcf" +
    "\052\uffcf\053\uffcf\054\uffcf\055\uffcf\056\uffcf\057\uffcf\062" +
    "\uffcf\063\uffcf\071\uffcf\001\002\000\062\004\uffd2\015\uffd2" +
    "\016\uffd2\017\uffd2\020\uffd2\021\uffd2\030\uffd2\034\uffd2\035" +
    "\uffd2\044\uffd2\045\uffd2\046\uffd2\047\uffd2\050\uffd2\051\uffd2" +
    "\052\uffd2\053\uffd2\054\uffd2\055\uffd2\056\uffd2\057\uffd2\062" +
    "\uffd2\063\uffd2\071\uffd2\001\002\000\014\052\113\053\106" +
    "\065\102\066\105\067\111\001\002\000\014\052\113\053" +
    "\106\065\102\066\105\067\111\001\002\000\010\004\uffa4" +
    "\035\136\052\132\001\002\000\004\004\140\001\002\000" +
    "\014\052\113\053\106\065\102\066\105\067\111\001\002" +
    "\000\006\004\uffa5\052\132\001\002\000\026\012\016\025" +
    "\066\031\075\033\076\036\uffc9\037\061\040\070\065\064" +
    "\073\072\074\055\001\002\000\004\036\142\001\002\000" +
    "\006\004\uffa6\065\144\001\002\000\004\004\145\001\002" +
    "\000\004\004\uffa7\001\002\000\040\010\uffa8\012\uffa8\025" +
    "\uffa8\026\uffa8\027\uffa8\031\uffa8\032\uffa8\033\uffa8\036\uffa8" +
    "\037\uffa8\040\uffa8\041\uffa8\065\uffa8\073\uffa8\074\uffa8\001" +
    "\002\000\060\004\uffda\015\uffda\016\uffda\017\uffda\020\uffda" +
    "\021\uffda\030\uffda\034\uffda\035\uffda\044\uffda\045\uffda\046" +
    "\uffda\047\uffda\050\uffda\051\uffda\052\uffda\054\115\055\121" +
    "\056\116\057\117\062\uffda\063\uffda\071\uffda\001\002\000" +
    "\016\052\113\053\106\065\102\066\105\067\111\070\152" +
    "\001\002\000\016\052\uffb5\053\uffb5\065\uffb5\066\uffb5\067" +
    "\uffb5\070\uffb5\001\002\000\012\004\uffb1\052\132\062\uffb1" +
    "\071\uffb1\001\002\000\010\004\uffb0\062\uffb0\071\uffb0\001" +
    "\002\000\004\004\154\001\002\000\006\010\uffae\032\uffae" +
    "\001\002\000\006\010\uffb2\032\156\001\002\000\016\027" +
    "\165\052\113\053\106\065\102\066\105\067\111\001\002" +
    "\000\006\010\uffaf\032\uffaf\001\002\000\004\010\161\001" +
    "\002\000\004\031\162\001\002\000\004\004\163\001\002" +
    "\000\040\010\uffb6\012\uffb6\025\uffb6\026\uffb6\027\uffb6\031" +
    "\uffb6\032\uffb6\033\uffb6\036\uffb6\037\uffb6\040\uffb6\041\uffb6" +
    "\065\uffb6\073\uffb6\074\uffb6\001\002\000\012\004\uffaa\034" +
    "\177\052\132\063\uffaa\001\002\000\004\004\175\001\002" +
    "\000\006\004\167\063\170\001\002\000\030\010\uffc9\012" +
    "\016\025\066\031\075\032\uffc9\033\076\037\061\040\070" +
    "\065\064\073\072\074\055\001\002\000\014\052\113\053" +
    "\106\065\102\066\105\067\111\001\002\000\012\004\uffac" +
    "\034\172\052\132\063\uffac\001\002\000\014\052\113\053" +
    "\106\065\102\066\105\067\111\001\002\000\010\004\uffab" +
    "\052\132\063\uffab\001\002\000\006\010\uffad\032\uffad\001" +
    "\002\000\026\010\uffc9\012\016\025\066\031\075\033\076" +
    "\037\061\040\070\065\064\073\072\074\055\001\002\000" +
    "\004\010\uffb3\001\002\000\014\052\113\053\106\065\102" +
    "\066\105\067\111\001\002\000\010\004\uffa9\052\132\063" +
    "\uffa9\001\002\000\020\052\113\053\106\065\102\066\105" +
    "\067\111\070\152\072\203\001\002\000\006\062\205\071" +
    "\206\001\002\000\006\062\uff87\071\uff87\001\002\000\006" +
    "\062\uff88\071\uff88\001\002\000\004\004\211\001\002\000" +
    "\020\052\113\053\106\065\102\066\105\067\111\070\152" +
    "\072\207\001\002\000\006\062\uff89\071\uff89\001\002\000" +
    "\006\062\uff8a\071\uff8a\001\002\000\042\004\uffa0\010\uffa0" +
    "\012\uffa0\025\uffa0\026\uffa0\027\uffa0\031\uffa0\032\uffa0\033" +
    "\uffa0\036\uffa0\037\uffa0\040\uffa0\041\uffa0\065\uffa0\073\uffa0" +
    "\074\uffa0\001\002\000\016\010\uffca\026\uffca\027\uffca\032" +
    "\uffca\036\uffca\041\uffca\001\002\000\026\012\016\025\066" +
    "\031\075\033\076\037\061\040\070\041\uffc9\065\064\073" +
    "\072\074\055\001\002\000\004\004\215\001\002\000\026" +
    "\012\016\025\066\031\075\033\076\037\061\040\070\041" +
    "\uffc9\065\064\073\072\074\055\001\002\000\004\041\217" +
    "\001\002\000\004\004\220\001\002\000\040\010\uffa2\012" +
    "\uffa2\025\uffa2\026\uffa2\027\uffa2\031\uffa2\032\uffa2\033\uffa2" +
    "\036\uffa2\037\uffa2\040\uffa2\041\uffa2\065\uffa2\073\uffa2\074" +
    "\uffa2\001\002\000\004\041\222\001\002\000\004\037\223" +
    "\001\002\000\004\004\224\001\002\000\040\010\uffa1\012" +
    "\uffa1\025\uffa1\026\uffa1\027\uffa1\031\uffa1\032\uffa1\033\uffa1" +
    "\036\uffa1\037\uffa1\040\uffa1\041\uffa1\065\uffa1\073\uffa1\074" +
    "\uffa1\001\002\000\020\004\uff92\015\uff92\016\uff92\017\uff92" +
    "\020\uff92\021\uff92\030\uff92\001\002\000\016\014\226\052" +
    "\113\053\106\065\102\066\105\067\111\001\002\000\016" +
    "\004\uff99\015\242\016\243\017\uff99\020\uff99\030\uff99\001" +
    "\002\000\020\004\uff96\015\uff96\016\uff96\017\uff96\020\uff96" +
    "\021\245\030\uff96\001\002\000\036\004\uff8b\015\uff8b\016" +
    "\uff8b\017\uff8b\020\uff8b\021\uff8b\030\uff8b\044\274\045\275" +
    "\046\276\047\300\050\277\051\273\052\132\001\002\000" +
    "\020\004\uff94\015\uff94\016\uff94\017\uff94\020\uff94\021\uff94" +
    "\030\uff94\001\002\000\012\004\uffbb\017\240\020\236\030" +
    "\235\001\002\000\040\010\uffc2\012\uffc2\025\uffc2\026\uffc2" +
    "\027\uffc2\031\uffc2\032\uffc2\033\uffc2\036\uffc2\037\uffc2\040" +
    "\uffc2\041\uffc2\065\uffc2\073\uffc2\074\uffc2\001\002\000\014" +
    "\004\uffbc\012\016\065\064\073\072\074\055\001\002\000" +
    "\016\014\226\052\113\053\106\065\102\066\105\067\111" +
    "\001\002\000\004\004\250\001\002\000\016\014\226\052" +
    "\113\053\106\065\102\066\105\067\111\001\002\000\016" +
    "\004\uff9b\015\242\016\243\017\uff9b\020\uff9b\030\uff9b\001" +
    "\002\000\016\014\226\052\113\053\106\065\102\066\105" +
    "\067\111\001\002\000\016\014\226\052\113\053\106\065" +
    "\102\066\105\067\111\001\002\000\020\004\uff97\015\uff97" +
    "\016\uff97\017\uff97\020\uff97\021\245\030\uff97\001\002\000" +
    "\016\014\226\052\113\053\106\065\102\066\105\067\111" +
    "\001\002\000\020\004\uff95\015\uff95\016\uff95\017\uff95\020" +
    "\uff95\021\uff95\030\uff95\001\002\000\020\004\uff98\015\uff98" +
    "\016\uff98\017\uff98\020\uff98\021\245\030\uff98\001\002\000" +
    "\032\010\uffc9\012\016\025\066\026\uffc9\027\uffc9\031\075" +
    "\033\076\037\061\040\070\065\064\073\072\074\055\001" +
    "\002\000\010\010\uffbd\026\252\027\254\001\002\000\016" +
    "\014\226\052\113\053\106\065\102\066\105\067\111\001" +
    "\002\000\004\010\257\001\002\000\004\004\255\001\002" +
    "\000\026\010\uffc9\012\016\025\066\031\075\033\076\037" +
    "\061\040\070\065\064\073\072\074\055\001\002\000\004" +
    "\010\uffbe\001\002\000\004\025\260\001\002\000\004\004" +
    "\261\001\002\000\040\010\uffc0\012\uffc0\025\uffc0\026\uffc0" +
    "\027\uffc0\031\uffc0\032\uffc0\033\uffc0\036\uffc0\037\uffc0\040" +
    "\uffc0\041\uffc0\065\uffc0\073\uffc0\074\uffc0\001\002\000\012" +
    "\004\uffbb\017\240\020\236\030\263\001\002\000\004\004" +
    "\uffbc\001\002\000\004\004\265\001\002\000\032\010\uffc9" +
    "\012\016\025\066\026\uffc9\027\uffc9\031\075\033\076\037" +
    "\061\040\070\065\064\073\072\074\055\001\002\000\010" +
    "\010\uffbd\026\252\027\254\001\002\000\004\010\uffbf\001" +
    "\002\000\016\004\uff9a\015\242\016\243\017\uff9a\020\uff9a" +
    "\030\uff9a\001\002\000\004\004\272\001\002\000\040\010" +
    "\uffc1\012\uffc1\025\uffc1\026\uffc1\027\uffc1\031\uffc1\032\uffc1" +
    "\033\uffc1\036\uffc1\037\uffc1\040\uffc1\041\uffc1\065\uffc1\073" +
    "\uffc1\074\uffc1\001\002\000\014\052\113\053\106\065\102" +
    "\066\105\067\111\001\002\000\014\052\113\053\106\065" +
    "\102\066\105\067\111\001\002\000\014\052\113\053\106" +
    "\065\102\066\105\067\111\001\002\000\014\052\113\053" +
    "\106\065\102\066\105\067\111\001\002\000\014\052\113" +
    "\053\106\065\102\066\105\067\111\001\002\000\014\052" +
    "\113\053\106\065\102\066\105\067\111\001\002\000\022" +
    "\004\uff8e\015\uff8e\016\uff8e\017\uff8e\020\uff8e\021\uff8e\030" +
    "\uff8e\052\132\001\002\000\022\004\uff8d\015\uff8d\016\uff8d" +
    "\017\uff8d\020\uff8d\021\uff8d\030\uff8d\052\132\001\002\000" +
    "\022\004\uff8f\015\uff8f\016\uff8f\017\uff8f\020\uff8f\021\uff8f" +
    "\030\uff8f\052\132\001\002\000\022\004\uff90\015\uff90\016" +
    "\uff90\017\uff90\020\uff90\021\uff90\030\uff90\052\132\001\002" +
    "\000\022\004\uff91\015\uff91\016\uff91\017\uff91\020\uff91\021" +
    "\uff91\030\uff91\052\132\001\002\000\022\004\uff8c\015\uff8c" +
    "\016\uff8c\017\uff8c\020\uff8c\021\uff8c\030\uff8c\052\132\001" +
    "\002\000\020\004\uff93\015\uff93\016\uff93\017\uff93\020\uff93" +
    "\021\uff93\030\uff93\001\002\000\014\052\113\053\106\065" +
    "\102\066\105\067\111\001\002\000\014\052\113\053\106" +
    "\065\102\066\105\067\111\001\002\000\024\052\113\053" +
    "\106\065\102\066\105\067\111\070\327\075\326\076\330" +
    "\077\325\001\002\000\014\052\113\053\106\065\102\066" +
    "\105\067\111\001\002\000\014\052\113\053\106\065\102" +
    "\066\105\067\111\001\002\000\014\052\113\053\106\065" +
    "\102\066\105\067\111\001\002\000\006\004\317\052\132" +
    "\001\002\000\050\004\uffe6\005\uffe6\006\uffe6\010\uffe6\011" +
    "\uffe6\012\uffe6\025\uffe6\026\uffe6\027\uffe6\031\uffe6\032\uffe6" +
    "\033\uffe6\036\uffe6\037\uffe6\040\uffe6\041\uffe6\065\uffe6\073" +
    "\uffe6\074\uffe6\001\002\000\006\004\321\052\132\001\002" +
    "\000\050\004\uffe3\005\uffe3\006\uffe3\010\uffe3\011\uffe3\012" +
    "\uffe3\025\uffe3\026\uffe3\027\uffe3\031\uffe3\032\uffe3\033\uffe3" +
    "\036\uffe3\037\uffe3\040\uffe3\041\uffe3\065\uffe3\073\uffe3\074" +
    "\uffe3\001\002\000\006\004\323\052\132\001\002\000\050" +
    "\004\uffe5\005\uffe5\006\uffe5\010\uffe5\011\uffe5\012\uffe5\025" +
    "\uffe5\026\uffe5\027\uffe5\031\uffe5\032\uffe5\033\uffe5\036\uffe5" +
    "\037\uffe5\040\uffe5\041\uffe5\065\uffe5\073\uffe5\074\uffe5\001" +
    "\002\000\006\004\335\052\132\001\002\000\004\004\334" +
    "\001\002\000\004\004\333\001\002\000\004\004\332\001" +
    "\002\000\004\004\331\001\002\000\042\004\uff9d\010\uff9d" +
    "\012\uff9d\025\uff9d\026\uff9d\027\uff9d\031\uff9d\032\uff9d\033" +
    "\uff9d\036\uff9d\037\uff9d\040\uff9d\041\uff9d\065\uff9d\073\uff9d" +
    "\074\uff9d\001\002\000\050\004\uffe7\005\uffe7\006\uffe7\010" +
    "\uffe7\011\uffe7\012\uffe7\025\uffe7\026\uffe7\027\uffe7\031\uffe7" +
    "\032\uffe7\033\uffe7\036\uffe7\037\uffe7\040\uffe7\041\uffe7\065" +
    "\uffe7\073\uffe7\074\uffe7\001\002\000\042\004\uff9e\010\uff9e" +
    "\012\uff9e\025\uff9e\026\uff9e\027\uff9e\031\uff9e\032\uff9e\033" +
    "\uff9e\036\uff9e\037\uff9e\040\uff9e\041\uff9e\065\uff9e\073\uff9e" +
    "\074\uff9e\001\002\000\042\004\uff9c\010\uff9c\012\uff9c\025" +
    "\uff9c\026\uff9c\027\uff9c\031\uff9c\032\uff9c\033\uff9c\036\uff9c" +
    "\037\uff9c\040\uff9c\041\uff9c\065\uff9c\073\uff9c\074\uff9c\001" +
    "\002\000\050\004\uffe8\005\uffe8\006\uffe8\010\uffe8\011\uffe8" +
    "\012\uffe8\025\uffe8\026\uffe8\027\uffe8\031\uffe8\032\uffe8\033" +
    "\uffe8\036\uffe8\037\uffe8\040\uffe8\041\uffe8\065\uffe8\073\uffe8" +
    "\074\uffe8\001\002\000\006\004\337\052\132\001\002\000" +
    "\050\004\uffe2\005\uffe2\006\uffe2\010\uffe2\011\uffe2\012\uffe2" +
    "\025\uffe2\026\uffe2\027\uffe2\031\uffe2\032\uffe2\033\uffe2\036" +
    "\uffe2\037\uffe2\040\uffe2\041\uffe2\065\uffe2\073\uffe2\074\uffe2" +
    "\001\002\000\006\004\341\052\132\001\002\000\050\004" +
    "\uffe4\005\uffe4\006\uffe4\010\uffe4\011\uffe4\012\uffe4\025\uffe4" +
    "\026\uffe4\027\uffe4\031\uffe4\032\uffe4\033\uffe4\036\uffe4\037" +
    "\uffe4\040\uffe4\041\uffe4\065\uffe4\073\uffe4\074\uffe4\001\002" +
    "\000\004\005\343\001\002\000\004\004\344\001\002\000" +
    "\016\005\ufff1\006\ufff1\010\ufff1\011\ufff1\012\ufff1\065\ufff1" +
    "\001\002\000\010\004\346\017\240\020\236\001\002\000" +
    "\026\010\uffc9\012\016\025\066\031\075\033\076\037\061" +
    "\040\070\065\064\073\072\074\055\001\002\000\004\010" +
    "\350\001\002\000\004\037\351\001\002\000\004\004\352" +
    "\001\002\000\040\010\uffa3\012\uffa3\025\uffa3\026\uffa3\027" +
    "\uffa3\031\uffa3\032\uffa3\033\uffa3\036\uffa3\037\uffa3\040\uffa3" +
    "\041\uffa3\065\uffa3\073\uffa3\074\uffa3\001\002\000\020\052" +
    "\113\053\106\065\102\066\105\067\111\070\152\072\203" +
    "\001\002\000\006\062\355\071\206\001\002\000\004\004" +
    "\356\001\002\000\042\004\uff9f\010\uff9f\012\uff9f\025\uff9f" +
    "\026\uff9f\027\uff9f\031\uff9f\032\uff9f\033\uff9f\036\uff9f\037" +
    "\uff9f\040\uff9f\041\uff9f\065\uff9f\073\uff9f\074\uff9f\001\002" +
    "\000\004\061\360\001\002\000\006\062\uffed\065\040\001" +
    "\002\000\004\062\362\001\002\000\006\004\uffde\013\041" +
    "\001\002\000\004\004\364\001\002\000\026\010\uffc9\012" +
    "\016\025\066\031\075\033\076\037\061\040\070\065\064" +
    "\073\072\074\055\001\002\000\004\010\366\001\002\000" +
    "\004\006\367\001\002\000\004\004\370\001\002\000\016" +
    "\005\ufff0\006\ufff0\010\ufff0\011\ufff0\012\ufff0\065\ufff0\001" +
    "\002\000\004\010\ufff7\001\002\000\016\052\113\053\106" +
    "\065\102\066\105\067\111\070\327\001\002\000\006\004" +
    "\u0102\063\u0103\001\002\000\012\004\uffde\013\041\044\uffde" +
    "\063\uffde\001\002\000\010\004\uffdb\044\376\063\uffdb\001" +
    "\002\000\016\052\113\053\106\065\102\066\105\067\111" +
    "\070\u0101\001\002\000\006\004\uffe9\063\uffe9\001\002\000" +
    "\010\004\uffdd\052\132\063\uffdd\001\002\000\006\004\uffdc" +
    "\063\uffdc\001\002\000\050\004\uffef\005\uffef\006\uffef\010" +
    "\uffef\011\uffef\012\uffef\025\uffef\026\uffef\027\uffef\031\uffef" +
    "\032\uffef\033\uffef\036\uffef\037\uffef\040\uffef\041\uffef\065" +
    "\uffef\073\uffef\074\uffef\001\002\000\004\065\u0104\001\002" +
    "\000\012\004\uffde\013\041\044\uffde\063\uffde\001\002\000" +
    "\010\004\uffdb\044\376\063\uffdb\001\002\000\006\004\uffea" +
    "\063\uffea\001\002\000\010\002\ufffc\007\ufffc\011\ufffc\001" +
    "\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0106\000\006\002\004\030\005\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\003\010\004\007\045\011" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\004" +
    "\u0106\045\011\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\020\005\025\006\017\007\022\010" +
    "\023\011\024\015\021\045\020\001\001\000\004\014\372" +
    "\001\001\000\002\001\001\000\020\005\370\006\017\007" +
    "\022\010\023\011\024\015\021\045\020\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\012\036\013\035" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\017" +
    "\041\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\017\047\001\001\000\002\001\001\000\002" +
    "\001\001\000\032\011\064\015\073\025\061\026\070\031" +
    "\057\035\066\036\053\047\072\050\056\051\062\052\055" +
    "\053\052\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\026\021\230\022\107\023\103\024\111\042" +
    "\106\054\344\055\226\056\227\057\231\060\224\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\026\021\230\022\107\023\103\024\111" +
    "\042\106\054\232\055\226\056\227\057\231\060\224\001" +
    "\001\000\002\001\001\000\002\001\001\000\032\011\064" +
    "\015\073\025\211\026\070\031\057\035\066\036\053\047" +
    "\072\050\056\051\062\052\055\053\052\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\044" +
    "\146\001\001\000\002\001\001\000\004\017\077\001\001" +
    "\000\002\001\001\000\014\021\102\022\107\023\103\024" +
    "\111\042\106\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\023\130\024" +
    "\111\042\106\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\023\113\024" +
    "\111\042\106\001\001\000\002\001\001\000\010\023\125" +
    "\024\111\042\106\001\001\000\010\023\124\024\111\042" +
    "\106\001\001\000\010\023\123\024\111\042\106\001\001" +
    "\000\012\022\122\023\103\024\111\042\106\001\001\000" +
    "\010\023\121\024\111\042\106\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\023\127\024\111\042\106\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\022\145\023" +
    "\103\024\111\042\106\001\001\000\014\021\133\022\107" +
    "\023\103\024\111\042\106\001\001\000\004\043\134\001" +
    "\001\000\002\001\001\000\014\021\136\022\107\023\103" +
    "\024\111\042\106\001\001\000\002\001\001\000\032\011" +
    "\064\015\073\025\140\026\070\031\057\035\066\036\053" +
    "\047\072\050\056\051\062\052\055\053\052\001\001\000" +
    "\002\001\001\000\004\016\142\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\016\021\150\022\107\023\103\024\111\040\152\042\106" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\041\154\001\001\000\006" +
    "\027\157\037\156\001\001\000\016\021\163\022\107\023" +
    "\103\024\111\042\106\046\165\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\032\011\064\015\073\025\173\026\070\031" +
    "\057\035\066\036\053\047\072\050\056\051\062\052\055" +
    "\053\052\001\001\000\014\021\170\022\107\023\103\024" +
    "\111\042\106\001\001\000\002\001\001\000\014\021\172" +
    "\022\107\023\103\024\111\042\106\001\001\000\002\001" +
    "\001\000\002\001\001\000\032\011\064\015\073\025\175" +
    "\026\070\031\057\035\066\036\053\047\072\050\056\051" +
    "\062\052\055\053\052\001\001\000\002\001\001\000\014" +
    "\021\177\022\107\023\103\024\111\042\106\001\001\000" +
    "\002\001\001\000\020\021\150\022\107\023\103\024\111" +
    "\040\203\042\106\061\201\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\016" +
    "\021\150\022\107\023\103\024\111\040\207\042\106\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\032\011\064\015\073\025\220\026" +
    "\070\031\057\035\066\036\053\047\072\050\056\051\062" +
    "\052\055\053\052\001\001\000\002\001\001\000\032\011" +
    "\064\015\073\025\215\026\070\031\057\035\066\036\053" +
    "\047\072\050\056\051\062\052\055\053\052\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\020\021\230\022\107\023\103" +
    "\024\111\042\106\057\306\060\224\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\032\233\034\236\001\001\000\002\001\001\000" +
    "\014\011\064\015\073\035\270\052\055\053\052\001\001" +
    "\000\024\021\230\022\107\023\103\024\111\042\106\055" +
    "\267\056\227\057\231\060\224\001\001\000\002\001\001" +
    "\000\024\021\230\022\107\023\103\024\111\042\106\055" +
    "\240\056\227\057\231\060\224\001\001\000\002\001\001" +
    "\000\022\021\230\022\107\023\103\024\111\042\106\056" +
    "\246\057\231\060\224\001\001\000\022\021\230\022\107" +
    "\023\103\024\111\042\106\056\243\057\231\060\224\001" +
    "\001\000\002\001\001\000\020\021\230\022\107\023\103" +
    "\024\111\042\106\057\245\060\224\001\001\000\002\001" +
    "\001\000\002\001\001\000\032\011\064\015\073\025\250" +
    "\026\070\031\057\035\066\036\053\047\072\050\056\051" +
    "\062\052\055\053\052\001\001\000\004\033\252\001\001" +
    "\000\026\021\230\022\107\023\103\024\111\042\106\054" +
    "\261\055\226\056\227\057\231\060\224\001\001\000\002" +
    "\001\001\000\002\001\001\000\032\011\064\015\073\025" +
    "\255\026\070\031\057\035\066\036\053\047\072\050\056" +
    "\051\062\052\055\053\052\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\034\263\001\001\000\002\001\001\000\002\001\001\000" +
    "\032\011\064\015\073\025\265\026\070\031\057\035\066" +
    "\036\053\047\072\050\056\051\062\052\055\053\052\001" +
    "\001\000\004\033\266\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\014\021" +
    "\305\022\107\023\103\024\111\042\106\001\001\000\014" +
    "\021\304\022\107\023\103\024\111\042\106\001\001\000" +
    "\014\021\303\022\107\023\103\024\111\042\106\001\001" +
    "\000\014\021\302\022\107\023\103\024\111\042\106\001" +
    "\001\000\014\021\301\022\107\023\103\024\111\042\106" +
    "\001\001\000\014\021\300\022\107\023\103\024\111\042" +
    "\106\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\014\021\337\022\107\023\103" +
    "\024\111\042\106\001\001\000\014\021\335\022\107\023" +
    "\103\024\111\042\106\001\001\000\014\021\323\022\107" +
    "\023\103\024\111\042\106\001\001\000\014\021\321\022" +
    "\107\023\103\024\111\042\106\001\001\000\014\021\317" +
    "\022\107\023\103\024\111\042\106\001\001\000\014\021" +
    "\315\022\107\023\103\024\111\042\106\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\032\011\064\015\073\025\346\026\070" +
    "\031\057\035\066\036\053\047\072\050\056\051\062\052" +
    "\055\053\052\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\020\021\150\022" +
    "\107\023\103\024\111\040\203\042\106\061\353\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\012\036\013\360\001\001\000\002" +
    "\001\001\000\004\017\362\001\001\000\002\001\001\000" +
    "\032\011\064\015\073\025\364\026\070\031\057\035\066" +
    "\036\053\047\072\050\056\051\062\052\055\053\052\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\014\021\323\022" +
    "\107\023\103\024\111\042\106\001\001\000\002\001\001" +
    "\000\004\017\374\001\001\000\004\020\376\001\001\000" +
    "\014\021\377\022\107\023\103\024\111\042\106\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\017\u0104\001\001" +
    "\000\004\020\u0105\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$SintaxisVisual$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$SintaxisVisual$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$SintaxisVisual$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    private Symbol s;
    
    public void syntax_error(Symbol sym){
        System.out.println("\n" + sym.value + sym.sym);
        System.out.println("Error Sintactico en la letra: " + sym.value + "   <linea>: "  + (sym.right + 1) + "    <columna>: " + (sym.left + 1) + "\n");
    }

    public void unrecovered_syntax_error(Symbol sym) throws java.lang.Exception{
        System.out.println("\n" + sym.value + sym.sym);
        System.out.println("Error Sintactico en la letra: " + sym.value + "   <linea>: "  + (sym.right + 1) + "    <columna>: " + (sym.left + 1) + "\n");
    }

    public Symbol getS(){
        System.out.println(this.s.value);
        System.out.print(this.s.value);
        return this.s;
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$SintaxisVisual$actions {
  private final SintaxisVisual parser;

  /** Constructor */
  CUP$SintaxisVisual$actions(SintaxisVisual parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$SintaxisVisual$do_action_part00000000(
    int                        CUP$SintaxisVisual$act_num,
    java_cup.runtime.lr_parser CUP$SintaxisVisual$parser,
    java.util.Stack            CUP$SintaxisVisual$stack,
    int                        CUP$SintaxisVisual$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$SintaxisVisual$result;

      /* select the action based on the action number */
      switch (CUP$SintaxisVisual$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= VISUAL EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-1)).value;
		RESULT = start_val;
              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$SintaxisVisual$parser.done_parsing();
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // VISUAL ::= ESP MODULOS 
            {
              Object RESULT =null;

              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("VISUAL",0, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // VISUAL ::= ESP 
            {
              Object RESULT =null;

              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("VISUAL",0, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // ESP ::= espacio 
            {
              Object RESULT =null;

              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("ESP",22, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // ESP ::= 
            {
              Object RESULT =null;

              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("ESP",22, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // MODULOS ::= MODULOS MOD 
            {
              Object RESULT =null;

              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("MODULOS",1, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // MODULOS ::= MOD 
            {
              Object RESULT =null;

              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("MODULOS",1, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // MOD ::= PUBLIC modulee id espacio STATESM endd modulee espacio 
            {
              Object RESULT =null;

              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("MOD",2, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-7)), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // PUBLIC ::= publicc 
            {
              Object RESULT =null;

              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("PUBLIC",35, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // PUBLIC ::= 
            {
              Object RESULT =null;

              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("PUBLIC",35, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // STATESM ::= STATEM STATESM 
            {
              Object RESULT =null;

              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("STATESM",3, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // STATESM ::= 
            {
              Object RESULT =null;

              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("STATESM",3, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // STATEM ::= SUB 
            {
              Object RESULT =null;

              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("STATEM",4, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // STATEM ::= FUNCTION 
            {
              Object RESULT =null;

              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("STATEM",4, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // STATEM ::= DEFVAR 
            {
              Object RESULT =null;

              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("STATEM",4, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // STATEM ::= ASIGVAR 
            {
              Object RESULT =null;

              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("STATEM",4, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // SUB ::= PUBLIC subb id para LISTPARAMM parc espacio STATEMENTS endd subb espacio 
            {
              Object RESULT =null;

              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("SUB",5, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-10)), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // FUNCTION ::= PUBLIC functionn id para LISTPARAMM parc TYPE espacio STATEMENTS endd functionn espacio 
            {
              Object RESULT =null;

              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("FUNCTION",6, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-11)), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // DEFVAR ::= dimm LISTVAR espacio 
            {
              Object RESULT =null;

              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("DEFVAR",7, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // LISTPARAMM ::= LISTPARAM 
            {
              Object RESULT =null;

              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("LISTPARAMM",9, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // LISTPARAMM ::= 
            {
              Object RESULT =null;

              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("LISTPARAMM",9, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // LISTPARAM ::= LISTPARAM coma id TYPE 
            {
              Object RESULT =null;

              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("LISTPARAM",8, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // LISTPARAM ::= id TYPE 
            {
              Object RESULT =null;

              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("LISTPARAM",8, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // LISTVAR ::= LISTVAR coma id TYPE DEF 
            {
              Object RESULT =null;

              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("LISTVAR",10, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-4)), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // LISTVAR ::= id TYPE DEF 
            {
              Object RESULT =null;

              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("LISTVAR",10, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // ASIGVAR ::= id igual OPERACION_A espacio 
            {
              Object RESULT =null;

              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("ASIGVAR",11, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // ASIGVAR ::= id igual character espacio 
            {
              Object RESULT =null;

              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("ASIGVAR",11, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // ASIGVAR ::= id masig OPERACION_A espacio 
            {
              Object RESULT =null;

              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("ASIGVAR",11, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // ASIGVAR ::= id menosig OPERACION_A espacio 
            {
              Object RESULT =null;

              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("ASIGVAR",11, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // ASIGVAR ::= id porig OPERACION_A espacio 
            {
              Object RESULT =null;

              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("ASIGVAR",11, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // ASIGVAR ::= id divig OPERACION_A espacio 
            {
              Object RESULT =null;

              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("ASIGVAR",11, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // ASIGVAR ::= id floorig OPERACION_A espacio 
            {
              Object RESULT =null;

              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("ASIGVAR",11, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // TYPE ::= ass integerr 
            {
              Object RESULT =null;

              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("TYPE",13, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // TYPE ::= ass charr 
            {
              Object RESULT =null;

              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("TYPE",13, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // TYPE ::= ass decimall 
            {
              Object RESULT =null;

              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("TYPE",13, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // TYPE ::= 
            {
              Object RESULT =null;

              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("TYPE",13, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // DEF ::= igual OPERACION_A 
            {
              Object RESULT =null;

              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("DEF",14, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // DEF ::= igual character 
            {
              Object RESULT =null;

              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("DEF",14, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // DEF ::= 
            {
              Object RESULT =null;

              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("DEF",14, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // OPERACION_A ::= OPERACION_A mas OPERACION_M 
            {
              Object RESULT =null;

              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("OPERACION_A",15, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // OPERACION_A ::= OPERACION_M menos OPERACION_M 
            {
              Object RESULT =null;

              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("OPERACION_A",15, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // OPERACION_A ::= OPERACION_M 
            {
              Object RESULT =null;

              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("OPERACION_A",15, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // OPERACION_M ::= OPERACION_M por OPERACION_U 
            {
              Object RESULT =null;

              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("OPERACION_M",16, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // OPERACION_M ::= OPERACION_M div OPERACION_U 
            {
              Object RESULT =null;

              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("OPERACION_M",16, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // OPERACION_M ::= OPERACION_M floor OPERACION_U 
            {
              Object RESULT =null;

              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("OPERACION_M",16, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // OPERACION_M ::= OPERACION_M mod OPERACION_U 
            {
              Object RESULT =null;

              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("OPERACION_M",16, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // OPERACION_M ::= OPERACION_U 
            {
              Object RESULT =null;

              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("OPERACION_M",16, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // OPERACION_U ::= menos OPERACION_U 
            {
              Object RESULT =null;

              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("OPERACION_U",17, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // OPERACION_U ::= mas OPERACION_U 
            {
              Object RESULT =null;

              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("OPERACION_U",17, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // OPERACION_U ::= POWER 
            {
              Object RESULT =null;

              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("OPERACION_U",17, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // POWER ::= ATOM pot OPERACION_U 
            {
              Object RESULT =null;

              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("POWER",18, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // POWER ::= ATOM 
            {
              Object RESULT =null;

              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("POWER",18, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // ATOM ::= id 
            {
              Object RESULT =null;

              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("ATOM",32, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // ATOM ::= entero 
            {
              Object RESULT =null;

              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("ATOM",32, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // ATOM ::= decimal 
            {
              Object RESULT =null;

              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("ATOM",32, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // STATEMENTS ::= STATEMENT STATEMENTS 
            {
              Object RESULT =null;

              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("STATEMENTS",19, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // STATEMENTS ::= 
            {
              Object RESULT =null;

              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("STATEMENTS",19, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // STATEMENT ::= IF_ELSE 
            {
              Object RESULT =null;

              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("STATEMENT",20, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // STATEMENT ::= SELECT 
            {
              Object RESULT =null;

              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("STATEMENT",20, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // STATEMENT ::= FOR 
            {
              Object RESULT =null;

              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("STATEMENT",20, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // STATEMENT ::= WHILE 
            {
              Object RESULT =null;

              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("STATEMENT",20, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // STATEMENT ::= DO_WHILE 
            {
              Object RESULT =null;

              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("STATEMENT",20, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // STATEMENT ::= STATEMENTLINE 
            {
              Object RESULT =null;

              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("STATEMENT",20, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // IF_ELSE ::= iff CONDICION BLOQUEIF 
            {
              Object RESULT =null;

              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("IF_ELSE",23, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // BLOQUEIF ::= thenn STATEMENTLINE espacio 
            {
              Object RESULT =null;

              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("BLOQUEIF",24, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // BLOQUEIF ::= THEN espacio STATEMENTS ELSE_IF endd iff espacio 
            {
              Object RESULT =null;

              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("BLOQUEIF",24, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-6)), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // ELSE_IF ::= elseiff CONDICION THEN espacio STATEMENTS ELSE_IF 
            {
              Object RESULT =null;

              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("ELSE_IF",25, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-5)), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // ELSE_IF ::= elsee espacio STATEMENTS 
            {
              Object RESULT =null;

              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("ELSE_IF",25, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // ELSE_IF ::= 
            {
              Object RESULT =null;

              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("ELSE_IF",25, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // THEN ::= thenn 
            {
              Object RESULT =null;

              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("THEN",26, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // THEN ::= 
            {
              Object RESULT =null;

              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("THEN",26, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // STATEMENTLINE ::= CONSOLEWRITE 
            {
              Object RESULT =null;

              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("STATEMENTLINE",27, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // STATEMENTLINE ::= INPUT 
            {
              Object RESULT =null;

              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("STATEMENTLINE",27, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // STATEMENTLINE ::= DEFVAR 
            {
              Object RESULT =null;

              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("STATEMENTLINE",27, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // STATEMENTLINE ::= ASIGVAR 
            {
              Object RESULT =null;

              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("STATEMENTLINE",27, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // SELECT ::= selectt CA EXPR espacio CASES CASEELSE endd selectt espacio 
            {
              Object RESULT =null;

              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("SELECT",28, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-8)), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // CA ::= casee 
            {
              Object RESULT =null;

              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("CA",34, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // CA ::= 
            {
              Object RESULT =null;

              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("CA",34, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // CASEELSE ::= casee elsee espacio STATEMENTS 
            {
              Object RESULT =null;

              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("CASEELSE",21, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // CASEELSE ::= 
            {
              Object RESULT =null;

              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("CASEELSE",21, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // EXPR ::= OPERACION_A 
            {
              Object RESULT =null;

              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("EXPR",30, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // EXPR ::= character 
            {
              Object RESULT =null;

              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("EXPR",30, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // CASES ::= CASES CASE 
            {
              Object RESULT =null;

              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("CASES",31, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // CASES ::= 
            {
              Object RESULT =null;

              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("CASES",31, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // CASE ::= casee LIST_CASE espacio STATEMENTS 
            {
              Object RESULT =null;

              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("CASE",29, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // LIST_CASE ::= LIST_CASE coma OPERACION_A 
            {
              Object RESULT =null;

              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("LIST_CASE",36, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // LIST_CASE ::= LIST_CASE coma OPERACION_A to OPERACION_A 
            {
              Object RESULT =null;

              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("LIST_CASE",36, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-4)), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // LIST_CASE ::= OPERACION_A 
            {
              Object RESULT =null;

              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("LIST_CASE",36, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // LIST_CASE ::= OPERACION_A to OPERACION_A 
            {
              Object RESULT =null;

              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("LIST_CASE",36, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // FOR ::= forr id TYPE igual OPERACION_A to OPERACION_A STEP espacio STATEMENTS nextt ID espacio 
            {
              Object RESULT =null;

              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("FOR",37, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-12)), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // ID ::= id 
            {
              Object RESULT =null;

              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("ID",12, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // ID ::= 
            {
              Object RESULT =null;

              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("ID",12, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // STEP ::= stepp OPERACION_A 
            {
              Object RESULT =null;

              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("STEP",33, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // STEP ::= 
            {
              Object RESULT =null;

              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("STEP",33, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // WHILE ::= whilee CONDICION espacio STATEMENTS endd whilee espacio 
            {
              Object RESULT =null;

              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("WHILE",38, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-6)), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // DO_WHILE ::= doo whilee espacio STATEMENTS loopp espacio 
            {
              Object RESULT =null;

              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("DO_WHILE",39, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-5)), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // DO_WHILE ::= doo espacio STATEMENTS loopp whilee espacio 
            {
              Object RESULT =null;

              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("DO_WHILE",39, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-5)), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // CONSOLEWRITE ::= write para STRING parc espacio 
            {
              Object RESULT =null;

              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("CONSOLEWRITE",40, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-4)), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // CONSOLEWRITE ::= writeln para STRING parc espacio 
            {
              Object RESULT =null;

              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("CONSOLEWRITE",40, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-4)), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // INPUT ::= id igual charinput espacio 
            {
              Object RESULT =null;

              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("INPUT",41, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // INPUT ::= id igual floatinput espacio 
            {
              Object RESULT =null;

              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("INPUT",41, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // INPUT ::= id igual intinput espacio 
            {
              Object RESULT =null;

              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("INPUT",41, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // CONDICION ::= CONDICION orr AND 
            {
              Object RESULT =null;

              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("CONDICION",42, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // CONDICION ::= CONDICION orelsee AND 
            {
              Object RESULT =null;

              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("CONDICION",42, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // CONDICION ::= AND 
            {
              Object RESULT =null;

              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("CONDICION",42, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // AND ::= AND andd XOR 
            {
              Object RESULT =null;

              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("AND",43, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // AND ::= AND andalsoo XOR 
            {
              Object RESULT =null;

              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("AND",43, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // AND ::= XOR 
            {
              Object RESULT =null;

              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("AND",43, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // XOR ::= XOR xorr NOT 
            {
              Object RESULT =null;

              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("XOR",44, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // XOR ::= NOT 
            {
              Object RESULT =null;

              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("XOR",44, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // NOT ::= nott NOT 
            {
              Object RESULT =null;

              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("NOT",45, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // NOT ::= COMPARACION 
            {
              Object RESULT =null;

              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("NOT",45, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // COMPARACION ::= OPERACION_A igual OPERACION_A 
            {
              Object RESULT =null;

              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("COMPARACION",46, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // COMPARACION ::= OPERACION_A noigual OPERACION_A 
            {
              Object RESULT =null;

              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("COMPARACION",46, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // COMPARACION ::= OPERACION_A menor OPERACION_A 
            {
              Object RESULT =null;

              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("COMPARACION",46, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // COMPARACION ::= OPERACION_A menorig OPERACION_A 
            {
              Object RESULT =null;

              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("COMPARACION",46, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // COMPARACION ::= OPERACION_A mayor OPERACION_A 
            {
              Object RESULT =null;

              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("COMPARACION",46, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // COMPARACION ::= OPERACION_A mayorig OPERACION_A 
            {
              Object RESULT =null;

              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("COMPARACION",46, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // COMPARACION ::= OPERACION_A 
            {
              Object RESULT =null;

              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("COMPARACION",46, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // STRING ::= STRING y EXPR 
            {
              Object RESULT =null;

              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("STRING",47, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // STRING ::= STRING y string 
            {
              Object RESULT =null;

              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("STRING",47, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // STRING ::= EXPR 
            {
              Object RESULT =null;

              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("STRING",47, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // STRING ::= string 
            {
              Object RESULT =null;

              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("STRING",47, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$SintaxisVisual$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$SintaxisVisual$do_action(
    int                        CUP$SintaxisVisual$act_num,
    java_cup.runtime.lr_parser CUP$SintaxisVisual$parser,
    java.util.Stack            CUP$SintaxisVisual$stack,
    int                        CUP$SintaxisVisual$top)
    throws java.lang.Exception
    {
              return CUP$SintaxisVisual$do_action_part00000000(
                               CUP$SintaxisVisual$act_num,
                               CUP$SintaxisVisual$parser,
                               CUP$SintaxisVisual$stack,
                               CUP$SintaxisVisual$top);
    }
}

}
