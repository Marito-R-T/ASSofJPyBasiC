
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package com.mycompany.assofjpybasic.backend.analizador.visual;

import java_cup.runtime.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class SintaxisVisual extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return SintaxisVisualSym.class;
}

  /** Default constructor. */
  @Deprecated
  public SintaxisVisual() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public SintaxisVisual(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public SintaxisVisual(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\156\000\002\002\004\000\002\002\004\000\002\025" +
    "\003\000\002\025\002\000\002\043\003\000\002\043\002" +
    "\000\002\003\004\000\002\003\002\000\002\004\003\000" +
    "\002\004\003\000\002\004\003\000\002\005\015\000\002" +
    "\006\016\000\002\007\005\000\002\011\003\000\002\011" +
    "\002\000\002\010\006\000\002\010\004\000\002\012\007" +
    "\000\002\012\005\000\002\013\006\000\002\013\006\000" +
    "\002\015\004\000\002\015\004\000\002\015\004\000\002" +
    "\015\002\000\002\016\004\000\002\016\004\000\002\016" +
    "\004\000\002\016\002\000\002\017\005\000\002\017\005" +
    "\000\002\017\003\000\002\020\005\000\002\020\005\000" +
    "\002\020\005\000\002\020\005\000\002\020\003\000\002" +
    "\021\004\000\002\021\004\000\002\021\003\000\002\040" +
    "\003\000\002\040\003\000\002\040\003\000\002\040\005" +
    "\000\002\022\004\000\002\022\002\000\002\023\003\000" +
    "\002\023\003\000\002\023\003\000\002\023\003\000\002" +
    "\023\003\000\002\023\003\000\002\027\005\000\002\030" +
    "\005\000\002\030\011\000\002\031\010\000\002\031\005" +
    "\000\002\031\002\000\002\032\003\000\002\032\002\000" +
    "\002\033\003\000\002\033\003\000\002\033\003\000\002" +
    "\033\003\000\002\034\013\000\002\042\003\000\002\042" +
    "\002\000\002\024\006\000\002\024\002\000\002\036\003" +
    "\000\002\036\003\000\002\036\003\000\002\037\004\000" +
    "\002\037\002\000\002\035\006\000\002\044\005\000\002" +
    "\044\003\000\002\045\017\000\002\014\003\000\002\014" +
    "\002\000\002\041\004\000\002\041\002\000\002\046\011" +
    "\000\002\047\011\000\002\047\011\000\002\050\007\000" +
    "\002\050\007\000\002\051\006\000\002\051\004\000\002" +
    "\026\006\000\002\026\006\000\002\026\006\000\002\052" +
    "\005\000\002\052\003\000\002\053\005\000\002\053\003" +
    "\000\002\054\004\000\002\054\003\000\002\055\005\000" +
    "\002\055\005\000\002\055\005\000\002\055\005\000\002" +
    "\055\005\000\002\055\005\000\002\055\005\000\002\056" +
    "\005\000\002\056\005\000\002\056\003\000\002\056\003" +
    "" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\360\000\016\002\ufffe\004\004\005\ufffe\006\ufffe\010" +
    "\ufffe\011\ufffe\001\002\000\014\002\uffff\005\uffff\006\uffff" +
    "\010\uffff\011\uffff\001\002\000\004\002\362\001\002\000" +
    "\014\002\ufffa\005\ufffc\006\ufffc\010\007\011\013\001\002" +
    "\000\006\005\ufffd\006\ufffd\001\002\000\014\002\ufff9\005" +
    "\ufff9\006\ufff9\010\ufff9\011\ufff9\001\002\000\004\002\000" +
    "\001\002\000\014\002\ufff7\005\ufff7\006\ufff7\010\ufff7\011" +
    "\ufff7\001\002\000\004\056\346\001\002\000\014\002\ufffa" +
    "\005\ufffc\006\ufffc\010\007\011\013\001\002\000\006\005" +
    "\020\006\017\001\002\000\014\002\ufff8\005\ufff8\006\ufff8" +
    "\010\ufff8\011\ufff8\001\002\000\004\056\332\001\002\000" +
    "\004\056\021\001\002\000\004\052\022\001\002\000\006" +
    "\053\ufff2\056\025\001\002\000\004\053\036\001\002\000" +
    "\006\053\ufff3\054\033\001\002\000\010\012\026\053\uffe8" +
    "\054\uffe8\001\002\000\010\016\032\017\031\020\030\001" +
    "\002\000\006\053\ufff0\054\ufff0\001\002\000\012\004\uffea" +
    "\036\uffea\053\uffea\054\uffea\001\002\000\012\004\uffe9\036" +
    "\uffe9\053\uffe9\054\uffe9\001\002\000\012\004\uffeb\036\uffeb" +
    "\053\uffeb\054\uffeb\001\002\000\004\056\034\001\002\000" +
    "\010\012\026\053\uffe8\054\uffe8\001\002\000\006\053\ufff1" +
    "\054\ufff1\001\002\000\004\004\037\001\002\000\034\007" +
    "\uffd3\011\uffd3\021\uffd3\025\uffd3\027\uffd3\033\uffd3\034\uffd3" +
    "\056\uffd3\064\uffd3\065\uffd3\066\uffd3\067\uffd3\070\uffd3\001" +
    "\002\000\034\007\062\011\013\021\056\025\067\027\070" +
    "\033\051\034\060\056\054\064\063\065\046\066\061\067" +
    "\043\070\042\001\002\000\050\004\uffc3\007\uffc3\011\uffc3" +
    "\021\uffc3\022\uffc3\023\uffc3\025\uffc3\026\uffc3\027\uffc3\032" +
    "\uffc3\033\uffc3\034\uffc3\035\uffc3\056\uffc3\064\uffc3\065\uffc3" +
    "\066\uffc3\067\uffc3\070\uffc3\001\002\000\004\052\327\001" +
    "\002\000\004\052\324\001\002\000\046\007\uffd1\011\uffd1" +
    "\021\uffd1\022\uffd1\023\uffd1\025\uffd1\026\uffd1\027\uffd1\032" +
    "\uffd1\033\uffd1\034\uffd1\035\uffd1\056\uffd1\064\uffd1\065\uffd1" +
    "\066\uffd1\067\uffd1\070\uffd1\001\002\000\050\004\uffc4\007" +
    "\uffc4\011\uffc4\021\uffc4\022\uffc4\023\uffc4\025\uffc4\026\uffc4" +
    "\027\uffc4\032\uffc4\033\uffc4\034\uffc4\035\uffc4\056\uffc4\064" +
    "\uffc4\065\uffc4\066\uffc4\067\uffc4\070\uffc4\001\002\000\004" +
    "\052\320\001\002\000\046\007\uffcf\011\uffcf\021\uffcf\022" +
    "\uffcf\023\uffcf\025\uffcf\026\uffcf\027\uffcf\032\uffcf\033\uffcf" +
    "\034\uffcf\035\uffcf\056\uffcf\064\uffcf\065\uffcf\066\uffcf\067" +
    "\uffcf\070\uffcf\001\002\000\046\007\uffd2\011\uffd2\021\uffd2" +
    "\022\uffd2\023\uffd2\025\uffd2\026\uffd2\027\uffd2\032\uffd2\033" +
    "\uffd2\034\uffd2\035\uffd2\056\uffd2\064\uffd2\065\uffd2\066\uffd2" +
    "\067\uffd2\070\uffd2\001\002\000\020\013\212\044\104\045" +
    "\100\052\216\056\074\057\077\060\103\001\002\000\004" +
    "\004\311\001\002\000\046\007\uffce\011\uffce\021\uffce\022" +
    "\uffce\023\uffce\025\uffce\026\uffce\027\uffce\032\uffce\033\uffce" +
    "\034\uffce\035\uffce\056\uffce\064\uffce\065\uffce\066\uffce\067" +
    "\uffce\070\uffce\001\002\000\004\036\302\001\002\000\050" +
    "\004\uffc2\007\uffc2\011\uffc2\021\uffc2\022\uffc2\023\uffc2\025" +
    "\uffc2\026\uffc2\027\uffc2\032\uffc2\033\uffc2\034\uffc2\035\uffc2" +
    "\056\uffc2\064\uffc2\065\uffc2\066\uffc2\067\uffc2\070\uffc2\001" +
    "\002\000\020\013\212\044\104\045\100\052\216\056\074" +
    "\057\077\060\103\001\002\000\046\007\uffcd\011\uffcd\021" +
    "\uffcd\022\uffcd\023\uffcd\025\uffcd\026\uffcd\027\uffcd\032\uffcd" +
    "\033\uffcd\034\uffcd\035\uffcd\056\uffcd\064\uffcd\065\uffcd\066" +
    "\uffcd\067\uffcd\070\uffcd\001\002\000\006\004\206\033\207" +
    "\001\002\000\004\052\203\001\002\000\004\005\201\001" +
    "\002\000\004\052\170\001\002\000\046\007\uffd4\011\uffd4" +
    "\021\uffd4\022\uffd4\023\uffd4\025\uffd4\026\uffd4\027\uffd4\032" +
    "\uffd4\033\uffd4\034\uffd4\035\uffd4\056\uffd4\064\uffd4\065\uffd4" +
    "\066\uffd4\067\uffd4\070\uffd4\001\002\000\046\007\uffd0\011" +
    "\uffd0\021\uffd0\022\uffd0\023\uffd0\025\uffd0\026\uffd0\027\uffd0" +
    "\032\uffd0\033\uffd0\034\uffd0\035\uffd0\056\uffd0\064\uffd0\065" +
    "\uffd0\066\uffd0\067\uffd0\070\uffd0\001\002\000\050\004\uffc1" +
    "\007\uffc1\011\uffc1\021\uffc1\022\uffc1\023\uffc1\025\uffc1\026" +
    "\uffc1\027\uffc1\032\uffc1\033\uffc1\034\uffc1\035\uffc1\056\uffc1" +
    "\064\uffc1\065\uffc1\066\uffc1\067\uffc1\070\uffc1\001\002\000" +
    "\030\026\142\044\uffbe\045\uffbe\052\uffbe\056\uffbe\057\uffbe" +
    "\060\uffbe\061\uffbe\066\uffbe\067\uffbe\070\uffbe\001\002\000" +
    "\004\056\071\001\002\000\006\012\026\036\uffe8\001\002" +
    "\000\004\036\073\001\002\000\016\044\104\045\100\052" +
    "\105\056\074\057\077\060\103\001\002\000\054\004\uffd8" +
    "\014\uffd8\015\uffd8\024\uffd8\030\uffd8\031\uffd8\036\uffd8\037" +
    "\uffd8\040\uffd8\041\uffd8\042\uffd8\043\uffd8\044\uffd8\045\uffd8" +
    "\046\uffd8\047\uffd8\050\uffd8\051\uffd8\053\uffd8\054\uffd8\062" +
    "\uffd8\001\002\000\006\030\126\044\107\001\002\000\054" +
    "\004\uffdc\014\uffdc\015\uffdc\024\uffdc\030\uffdc\031\uffdc\036" +
    "\uffdc\037\uffdc\040\uffdc\041\uffdc\042\uffdc\043\uffdc\044\uffdc" +
    "\045\uffdc\046\uffdc\047\uffdc\050\uffdc\051\uffdc\053\uffdc\054" +
    "\uffdc\062\uffdc\001\002\000\054\004\uffd6\014\uffd6\015\uffd6" +
    "\024\uffd6\030\uffd6\031\uffd6\036\uffd6\037\uffd6\040\uffd6\041" +
    "\uffd6\042\uffd6\043\uffd6\044\uffd6\045\uffd6\046\uffd6\047\uffd6" +
    "\050\uffd6\051\uffd6\053\uffd6\054\uffd6\062\uffd6\001\002\000" +
    "\016\044\104\045\100\052\105\056\074\057\077\060\103" +
    "\001\002\000\054\004\uffd9\014\uffd9\015\uffd9\024\uffd9\030" +
    "\uffd9\031\uffd9\036\uffd9\037\uffd9\040\uffd9\041\uffd9\042\uffd9" +
    "\043\uffd9\044\uffd9\045\uffd9\046\uffd9\047\uffd9\050\uffd9\051" +
    "\uffd9\053\uffd9\054\uffd9\062\uffd9\001\002\000\054\004\uffe1" +
    "\014\uffe1\015\uffe1\024\uffe1\030\uffe1\031\uffe1\036\uffe1\037" +
    "\uffe1\040\uffe1\041\uffe1\042\uffe1\043\uffe1\044\uffe1\045\123" +
    "\046\112\047\115\050\113\051\114\053\uffe1\054\uffe1\062" +
    "\uffe1\001\002\000\054\004\uffd7\014\uffd7\015\uffd7\024\uffd7" +
    "\030\uffd7\031\uffd7\036\uffd7\037\uffd7\040\uffd7\041\uffd7\042" +
    "\uffd7\043\uffd7\044\uffd7\045\uffd7\046\uffd7\047\uffd7\050\uffd7" +
    "\051\uffd7\053\uffd7\054\uffd7\062\uffd7\001\002\000\016\044" +
    "\104\045\100\052\105\056\074\057\077\060\103\001\002" +
    "\000\016\044\104\045\100\052\105\056\074\057\077\060" +
    "\103\001\002\000\006\044\107\053\110\001\002\000\016" +
    "\044\104\045\100\052\105\056\074\057\077\060\103\001" +
    "\002\000\054\004\uffd5\014\uffd5\015\uffd5\024\uffd5\030\uffd5" +
    "\031\uffd5\036\uffd5\037\uffd5\040\uffd5\041\uffd5\042\uffd5\043" +
    "\uffd5\044\uffd5\045\uffd5\046\uffd5\047\uffd5\050\uffd5\051\uffd5" +
    "\053\uffd5\054\uffd5\062\uffd5\001\002\000\052\004\uffe3\014" +
    "\uffe3\015\uffe3\024\uffe3\030\uffe3\031\uffe3\036\uffe3\037\uffe3" +
    "\040\uffe3\041\uffe3\042\uffe3\043\uffe3\044\uffe3\046\112\047" +
    "\115\050\113\051\114\053\uffe3\054\uffe3\062\uffe3\001\002" +
    "\000\016\044\104\045\100\052\105\056\074\057\077\060" +
    "\103\001\002\000\016\044\104\045\100\052\105\056\074" +
    "\057\077\060\103\001\002\000\016\044\104\045\100\052" +
    "\105\056\074\057\077\060\103\001\002\000\016\044\104" +
    "\045\100\052\105\056\074\057\077\060\103\001\002\000" +
    "\054\004\uffdf\014\uffdf\015\uffdf\024\uffdf\030\uffdf\031\uffdf" +
    "\036\uffdf\037\uffdf\040\uffdf\041\uffdf\042\uffdf\043\uffdf\044" +
    "\uffdf\045\uffdf\046\uffdf\047\uffdf\050\uffdf\051\uffdf\053\uffdf" +
    "\054\uffdf\062\uffdf\001\002\000\054\004\uffde\014\uffde\015" +
    "\uffde\024\uffde\030\uffde\031\uffde\036\uffde\037\uffde\040\uffde" +
    "\041\uffde\042\uffde\043\uffde\044\uffde\045\uffde\046\uffde\047" +
    "\uffde\050\uffde\051\uffde\053\uffde\054\uffde\062\uffde\001\002" +
    "\000\054\004\uffdd\014\uffdd\015\uffdd\024\uffdd\030\uffdd\031" +
    "\uffdd\036\uffdd\037\uffdd\040\uffdd\041\uffdd\042\uffdd\043\uffdd" +
    "\044\uffdd\045\uffdd\046\uffdd\047\uffdd\050\uffdd\051\uffdd\053" +
    "\uffdd\054\uffdd\062\uffdd\001\002\000\054\004\uffe0\014\uffe0" +
    "\015\uffe0\024\uffe0\030\uffe0\031\uffe0\036\uffe0\037\uffe0\040" +
    "\uffe0\041\uffe0\042\uffe0\043\uffe0\044\uffe0\045\uffe0\046\uffe0" +
    "\047\uffe0\050\uffe0\051\uffe0\053\uffe0\054\uffe0\062\uffe0\001" +
    "\002\000\054\004\uffda\014\uffda\015\uffda\024\uffda\030\uffda" +
    "\031\uffda\036\uffda\037\uffda\040\uffda\041\uffda\042\uffda\043" +
    "\uffda\044\uffda\045\uffda\046\uffda\047\uffda\050\uffda\051\uffda" +
    "\053\uffda\054\uffda\062\uffda\001\002\000\016\044\104\045" +
    "\100\052\105\056\074\057\077\060\103\001\002\000\052" +
    "\004\uffe2\014\uffe2\015\uffe2\024\uffe2\030\uffe2\031\uffe2\036" +
    "\uffe2\037\uffe2\040\uffe2\041\uffe2\042\uffe2\043\uffe2\044\uffe2" +
    "\046\112\047\115\050\113\051\114\053\uffe2\054\uffe2\062" +
    "\uffe2\001\002\000\054\004\uffdb\014\uffdb\015\uffdb\024\uffdb" +
    "\030\uffdb\031\uffdb\036\uffdb\037\uffdb\040\uffdb\041\uffdb\042" +
    "\uffdb\043\uffdb\044\uffdb\045\uffdb\046\uffdb\047\uffdb\050\uffdb" +
    "\051\uffdb\053\uffdb\054\uffdb\062\uffdb\001\002\000\016\044" +
    "\104\045\100\052\105\056\074\057\077\060\103\001\002" +
    "\000\010\004\uffaf\031\131\044\107\001\002\000\004\004" +
    "\133\001\002\000\016\044\104\045\100\052\105\056\074" +
    "\057\077\060\103\001\002\000\006\004\uffb0\044\107\001" +
    "\002\000\034\011\uffd3\021\uffd3\025\uffd3\027\uffd3\032\uffd3" +
    "\033\uffd3\034\uffd3\056\uffd3\064\uffd3\065\uffd3\066\uffd3\067" +
    "\uffd3\070\uffd3\001\002\000\034\011\013\021\056\025\067" +
    "\027\070\032\135\033\051\034\060\056\054\064\063\065" +
    "\046\066\061\067\043\070\042\001\002\000\006\004\uffb1" +
    "\056\137\001\002\000\004\004\140\001\002\000\004\004" +
    "\uffb2\001\002\000\046\007\uffb3\011\uffb3\021\uffb3\022\uffb3" +
    "\023\uffb3\025\uffb3\026\uffb3\027\uffb3\032\uffb3\033\uffb3\034" +
    "\uffb3\035\uffb3\056\uffb3\064\uffb3\065\uffb3\066\uffb3\067\uffb3" +
    "\070\uffb3\001\002\000\026\044\104\045\100\052\105\056" +
    "\074\057\077\060\103\061\145\066\061\067\043\070\042" +
    "\001\002\000\026\044\uffbf\045\uffbf\052\uffbf\056\uffbf\057" +
    "\uffbf\060\uffbf\061\uffbf\066\uffbf\067\uffbf\070\uffbf\001\002" +
    "\000\010\004\uffb9\053\uffb9\062\uffb9\001\002\000\012\004" +
    "\uffbb\044\107\053\uffbb\062\uffbb\001\002\000\010\004\uffba" +
    "\053\uffba\062\uffba\001\002\000\004\004\147\001\002\000" +
    "\006\007\uffb7\026\uffb7\001\002\000\006\007\uffbc\026\152" +
    "\001\002\000\006\007\uffb8\026\uffb8\001\002\000\020\023" +
    "\160\044\104\045\100\052\105\056\074\057\077\060\103" +
    "\001\002\000\004\007\154\001\002\000\004\025\155\001" +
    "\002\000\004\004\156\001\002\000\046\007\uffc0\011\uffc0" +
    "\021\uffc0\022\uffc0\023\uffc0\025\uffc0\026\uffc0\027\uffc0\032" +
    "\uffc0\033\uffc0\034\uffc0\035\uffc0\056\uffc0\064\uffc0\065\uffc0" +
    "\066\uffc0\067\uffc0\070\uffc0\001\002\000\010\004\uffb4\044" +
    "\107\054\uffb4\001\002\000\004\004\166\001\002\000\006" +
    "\004\162\054\163\001\002\000\036\007\uffd3\011\uffd3\021" +
    "\uffd3\025\uffd3\026\uffd3\027\uffd3\033\uffd3\034\uffd3\056\uffd3" +
    "\064\uffd3\065\uffd3\066\uffd3\067\uffd3\070\uffd3\001\002\000" +
    "\016\044\104\045\100\052\105\056\074\057\077\060\103" +
    "\001\002\000\010\004\uffb5\044\107\054\uffb5\001\002\000" +
    "\036\007\uffb6\011\013\021\056\025\067\026\uffb6\027\070" +
    "\033\051\034\060\056\054\064\063\065\046\066\061\067" +
    "\043\070\042\001\002\000\034\007\uffd3\011\uffd3\021\uffd3" +
    "\025\uffd3\027\uffd3\033\uffd3\034\uffd3\056\uffd3\064\uffd3\065" +
    "\uffd3\066\uffd3\067\uffd3\070\uffd3\001\002\000\034\007\uffbd" +
    "\011\013\021\056\025\067\027\070\033\051\034\060\056" +
    "\054\064\063\065\046\066\061\067\043\070\042\001\002" +
    "\000\030\044\104\045\100\052\105\056\074\057\077\060" +
    "\103\061\145\063\171\066\061\067\043\070\042\001\002" +
    "\000\006\053\uff94\062\uff94\001\002\000\006\053\uff95\062" +
    "\uff95\001\002\000\006\053\174\062\175\001\002\000\004" +
    "\004\200\001\002\000\030\044\104\045\100\052\105\056" +
    "\074\057\077\060\103\061\145\063\176\066\061\067\043" +
    "\070\042\001\002\000\006\053\uff96\062\uff96\001\002\000" +
    "\006\053\uff97\062\uff97\001\002\000\050\004\uffab\007\uffab" +
    "\011\uffab\021\uffab\022\uffab\023\uffab\025\uffab\026\uffab\027" +
    "\uffab\032\uffab\033\uffab\034\uffab\035\uffab\056\uffab\064\uffab" +
    "\065\uffab\066\uffab\067\uffab\070\uffab\001\002\000\004\004" +
    "\202\001\002\000\014\002\ufff6\005\ufff6\006\ufff6\010\ufff6" +
    "\011\ufff6\001\002\000\004\063\204\001\002\000\004\053" +
    "\205\001\002\000\012\004\uffa7\053\uffa7\054\uffa7\062\uffa7" +
    "\001\002\000\034\011\uffd3\021\uffd3\025\uffd3\027\uffd3\033" +
    "\uffd3\034\uffd3\035\uffd3\056\uffd3\064\uffd3\065\uffd3\066\uffd3" +
    "\067\uffd3\070\uffd3\001\002\000\020\013\212\044\104\045" +
    "\100\052\216\056\074\057\077\060\103\001\002\000\014" +
    "\004\uff9f\014\uff9f\015\uff9f\024\uff9f\053\uff9f\001\002\000" +
    "\014\004\uffa3\014\224\015\uffa3\024\uffa3\053\uffa3\001\002" +
    "\000\020\013\212\044\104\045\100\052\216\056\074\057" +
    "\077\060\103\001\002\000\020\036\227\037\230\040\231" +
    "\041\233\042\232\043\226\044\107\001\002\000\014\004" +
    "\uffa1\014\uffa1\015\uffa1\024\uffa1\053\uffa1\001\002\000\006" +
    "\004\242\015\222\001\002\000\020\013\212\044\104\045" +
    "\100\052\216\056\074\057\077\060\103\001\002\000\022" +
    "\036\227\037\230\040\231\041\233\042\232\043\226\044" +
    "\107\053\110\001\002\000\006\015\222\053\221\001\002" +
    "\000\014\004\uff98\014\uff98\015\uff98\024\uff98\053\uff98\001" +
    "\002\000\020\013\212\044\104\045\100\052\216\056\074" +
    "\057\077\060\103\001\002\000\014\004\uffa4\014\224\015" +
    "\uffa4\024\uffa4\053\uffa4\001\002\000\020\013\212\044\104" +
    "\045\100\052\216\056\074\057\077\060\103\001\002\000" +
    "\014\004\uffa2\014\uffa2\015\uffa2\024\uffa2\053\uffa2\001\002" +
    "\000\016\044\104\045\100\052\105\056\074\057\077\060" +
    "\103\001\002\000\016\044\104\045\100\052\105\056\074" +
    "\057\077\060\103\001\002\000\016\044\104\045\100\052" +
    "\105\056\074\057\077\060\103\001\002\000\016\044\104" +
    "\045\100\052\105\056\074\057\077\060\103\001\002\000" +
    "\016\044\104\045\100\052\105\056\074\057\077\060\103" +
    "\001\002\000\016\044\104\045\100\052\105\056\074\057" +
    "\077\060\103\001\002\000\016\004\uff9b\014\uff9b\015\uff9b" +
    "\024\uff9b\044\107\053\uff9b\001\002\000\016\004\uff9a\014" +
    "\uff9a\015\uff9a\024\uff9a\044\107\053\uff9a\001\002\000\016" +
    "\004\uff9c\014\uff9c\015\uff9c\024\uff9c\044\107\053\uff9c\001" +
    "\002\000\016\004\uff9d\014\uff9d\015\uff9d\024\uff9d\044\107" +
    "\053\uff9d\001\002\000\016\004\uff9e\014\uff9e\015\uff9e\024" +
    "\uff9e\044\107\053\uff9e\001\002\000\016\004\uff99\014\uff99" +
    "\015\uff99\024\uff99\044\107\053\uff99\001\002\000\034\011" +
    "\uffd3\021\uffd3\025\uffd3\027\uffd3\033\uffd3\034\uffd3\035\uffd3" +
    "\056\uffd3\064\uffd3\065\uffd3\066\uffd3\067\uffd3\070\uffd3\001" +
    "\002\000\034\011\013\021\056\025\067\027\070\033\051" +
    "\034\060\035\244\056\054\064\063\065\046\066\061\067" +
    "\043\070\042\001\002\000\004\004\245\001\002\000\046" +
    "\007\uffad\011\uffad\021\uffad\022\uffad\023\uffad\025\uffad\026" +
    "\uffad\027\uffad\032\uffad\033\uffad\034\uffad\035\uffad\056\uffad" +
    "\064\uffad\065\uffad\066\uffad\067\uffad\070\uffad\001\002\000" +
    "\014\004\uffa0\014\uffa0\015\uffa0\024\uffa0\053\uffa0\001\002" +
    "\000\034\011\013\021\056\025\067\027\070\033\051\034" +
    "\060\035\250\056\054\064\063\065\046\066\061\067\043" +
    "\070\042\001\002\000\004\033\251\001\002\000\020\013" +
    "\212\044\104\045\100\052\216\056\074\057\077\060\103" +
    "\001\002\000\006\004\253\015\222\001\002\000\046\007" +
    "\uffac\011\uffac\021\uffac\022\uffac\023\uffac\025\uffac\026\uffac" +
    "\027\uffac\032\uffac\033\uffac\034\uffac\035\uffac\056\uffac\064" +
    "\uffac\065\uffac\066\uffac\067\uffac\070\uffac\001\002\000\010" +
    "\004\uffc5\015\222\024\256\001\002\000\046\007\uffcc\011" +
    "\uffcc\021\uffcc\022\uffcc\023\uffcc\025\uffcc\026\uffcc\027\uffcc" +
    "\032\uffcc\033\uffcc\034\uffcc\035\uffcc\056\uffcc\064\uffcc\065" +
    "\uffcc\066\uffcc\067\uffcc\070\uffcc\001\002\000\022\004\uffc6" +
    "\011\013\056\054\064\063\065\046\066\061\067\043\070" +
    "\042\001\002\000\004\004\260\001\002\000\040\007\uffd3" +
    "\011\uffd3\021\uffd3\022\uffd3\023\uffd3\025\uffd3\027\uffd3\033" +
    "\uffd3\034\uffd3\056\uffd3\064\uffd3\065\uffd3\066\uffd3\067\uffd3" +
    "\070\uffd3\001\002\000\040\007\uffc7\011\013\021\056\022" +
    "\264\023\263\025\067\027\070\033\051\034\060\056\054" +
    "\064\063\065\046\066\061\067\043\070\042\001\002\000" +
    "\004\007\275\001\002\000\004\004\273\001\002\000\020" +
    "\013\212\044\104\045\100\052\216\056\074\057\077\060" +
    "\103\001\002\000\010\004\uffc5\015\222\024\266\001\002" +
    "\000\004\004\uffc6\001\002\000\004\004\270\001\002\000" +
    "\040\007\uffd3\011\uffd3\021\uffd3\022\uffd3\023\uffd3\025\uffd3" +
    "\027\uffd3\033\uffd3\034\uffd3\056\uffd3\064\uffd3\065\uffd3\066" +
    "\uffd3\067\uffd3\070\uffd3\001\002\000\040\007\uffc7\011\013" +
    "\021\056\022\264\023\263\025\067\027\070\033\051\034" +
    "\060\056\054\064\063\065\046\066\061\067\043\070\042" +
    "\001\002\000\004\007\uffc9\001\002\000\034\007\uffd3\011" +
    "\uffd3\021\uffd3\025\uffd3\027\uffd3\033\uffd3\034\uffd3\056\uffd3" +
    "\064\uffd3\065\uffd3\066\uffd3\067\uffd3\070\uffd3\001\002\000" +
    "\034\007\uffc8\011\013\021\056\025\067\027\070\033\051" +
    "\034\060\056\054\064\063\065\046\066\061\067\043\070" +
    "\042\001\002\000\004\021\276\001\002\000\004\004\277" +
    "\001\002\000\046\007\uffca\011\uffca\021\uffca\022\uffca\023" +
    "\uffca\025\uffca\026\uffca\027\uffca\032\uffca\033\uffca\034\uffca" +
    "\035\uffca\056\uffca\064\uffca\065\uffca\066\uffca\067\uffca\070" +
    "\uffca\001\002\000\004\004\301\001\002\000\046\007\uffcb" +
    "\011\uffcb\021\uffcb\022\uffcb\023\uffcb\025\uffcb\026\uffcb\027" +
    "\uffcb\032\uffcb\033\uffcb\034\uffcb\035\uffcb\056\uffcb\064\uffcb" +
    "\065\uffcb\066\uffcb\067\uffcb\070\uffcb\001\002\000\026\044" +
    "\104\045\100\052\105\056\074\057\077\060\103\061\305" +
    "\066\061\067\043\070\042\001\002\000\004\004\310\001" +
    "\002\000\006\004\307\044\107\001\002\000\004\004\306" +
    "\001\002\000\050\004\uffec\007\uffec\011\uffec\021\uffec\022" +
    "\uffec\023\uffec\025\uffec\026\uffec\027\uffec\032\uffec\033\uffec" +
    "\034\uffec\035\uffec\056\uffec\064\uffec\065\uffec\066\uffec\067" +
    "\uffec\070\uffec\001\002\000\050\004\uffed\007\uffed\011\uffed" +
    "\021\uffed\022\uffed\023\uffed\025\uffed\026\uffed\027\uffed\032" +
    "\uffed\033\uffed\034\uffed\035\uffed\056\uffed\064\uffed\065\uffed" +
    "\066\uffed\067\uffed\070\uffed\001\002\000\050\004\uffa9\007" +
    "\uffa9\011\uffa9\021\uffa9\022\uffa9\023\uffa9\025\uffa9\026\uffa9" +
    "\027\uffa9\032\uffa9\033\uffa9\034\uffa9\035\uffa9\056\uffa9\064" +
    "\uffa9\065\uffa9\066\uffa9\067\uffa9\070\uffa9\001\002\000\050" +
    "\004\uffa8\007\uffa8\011\uffa8\021\uffa8\022\uffa8\023\uffa8\025" +
    "\uffa8\026\uffa8\027\uffa8\032\uffa8\033\uffa8\034\uffa8\035\uffa8" +
    "\056\uffa8\064\uffa8\065\uffa8\066\uffa8\067\uffa8\070\uffa8\001" +
    "\002\000\006\004\313\015\222\001\002\000\034\007\uffd3" +
    "\011\uffd3\021\uffd3\025\uffd3\027\uffd3\033\uffd3\034\uffd3\056" +
    "\uffd3\064\uffd3\065\uffd3\066\uffd3\067\uffd3\070\uffd3\001\002" +
    "\000\034\007\315\011\013\021\056\025\067\027\070\033" +
    "\051\034\060\056\054\064\063\065\046\066\061\067\043" +
    "\070\042\001\002\000\004\033\316\001\002\000\004\004" +
    "\317\001\002\000\046\007\uffae\011\uffae\021\uffae\022\uffae" +
    "\023\uffae\025\uffae\026\uffae\027\uffae\032\uffae\033\uffae\034" +
    "\uffae\035\uffae\056\uffae\064\uffae\065\uffae\066\uffae\067\uffae" +
    "\070\uffae\001\002\000\030\044\104\045\100\052\105\056" +
    "\074\057\077\060\103\061\145\063\171\066\061\067\043" +
    "\070\042\001\002\000\006\053\322\062\175\001\002\000" +
    "\004\004\323\001\002\000\050\004\uffaa\007\uffaa\011\uffaa" +
    "\021\uffaa\022\uffaa\023\uffaa\025\uffaa\026\uffaa\027\uffaa\032" +
    "\uffaa\033\uffaa\034\uffaa\035\uffaa\056\uffaa\064\uffaa\065\uffaa" +
    "\066\uffaa\067\uffaa\070\uffaa\001\002\000\004\063\325\001" +
    "\002\000\004\053\326\001\002\000\012\004\uffa6\053\uffa6" +
    "\054\uffa6\062\uffa6\001\002\000\004\063\330\001\002\000" +
    "\004\053\331\001\002\000\012\004\uffa5\053\uffa5\054\uffa5" +
    "\062\uffa5\001\002\000\004\052\333\001\002\000\006\053" +
    "\ufff2\056\025\001\002\000\004\053\335\001\002\000\006" +
    "\004\uffe8\012\026\001\002\000\004\004\337\001\002\000" +
    "\034\007\uffd3\011\uffd3\021\uffd3\025\uffd3\027\uffd3\033\uffd3" +
    "\034\uffd3\056\uffd3\064\uffd3\065\uffd3\066\uffd3\067\uffd3\070" +
    "\uffd3\001\002\000\034\007\341\011\013\021\056\025\067" +
    "\027\070\033\051\034\060\056\054\064\063\065\046\066" +
    "\061\067\043\070\042\001\002\000\004\006\342\001\002" +
    "\000\004\004\343\001\002\000\014\002\ufff5\005\ufff5\006" +
    "\ufff5\010\ufff5\011\ufff5\001\002\000\004\002\ufffb\001\002" +
    "\000\006\004\355\054\356\001\002\000\012\004\uffe8\012" +
    "\026\036\uffe8\054\uffe8\001\002\000\010\004\uffe4\036\351" +
    "\054\uffe4\001\002\000\006\004\uffee\054\uffee\001\002\000" +
    "\026\044\104\045\100\052\105\056\074\057\077\060\103" +
    "\061\354\066\061\067\043\070\042\001\002\000\006\004" +
    "\uffe5\054\uffe5\001\002\000\010\004\uffe7\044\107\054\uffe7" +
    "\001\002\000\006\004\uffe6\054\uffe6\001\002\000\060\002" +
    "\ufff4\004\ufff4\005\ufff4\006\ufff4\007\ufff4\010\ufff4\011\ufff4" +
    "\021\ufff4\022\ufff4\023\ufff4\025\ufff4\026\ufff4\027\ufff4\032" +
    "\ufff4\033\ufff4\034\ufff4\035\ufff4\056\ufff4\064\ufff4\065\ufff4" +
    "\066\ufff4\067\ufff4\070\ufff4\001\002\000\004\056\357\001" +
    "\002\000\012\004\uffe8\012\026\036\uffe8\054\uffe8\001\002" +
    "\000\010\004\uffe4\036\351\054\uffe4\001\002\000\006\004" +
    "\uffef\054\uffef\001\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\360\000\006\002\004\025\005\001\001\000\002\001" +
    "\001\000\002\001\001\000\016\003\010\004\013\005\007" +
    "\006\015\007\011\043\014\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\012\344\001\001\000\016\003\343\004\013\005\007\006" +
    "\015\007\011\043\014\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\010\023\011\022\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\015\026\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\015\034\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\022\037" +
    "\001\001\000\032\007\054\013\065\023\063\026\051\027" +
    "\047\033\056\034\043\045\064\046\046\047\052\050\044" +
    "\051\040\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\022\017" +
    "\212\020\101\021\075\040\100\052\311\053\210\054\213" +
    "\055\207\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\022\017\212\020\101" +
    "\021\075\040\100\052\253\053\210\054\213\055\207\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\042\140\001\001" +
    "\000\002\001\001\000\004\015\071\001\001\000\002\001" +
    "\001\000\012\017\074\020\101\021\075\040\100\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\021\124\040\100\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\021" +
    "\121\040\100\001\001\000\012\017\105\020\101\021\075" +
    "\040\100\001\001\000\002\001\001\000\010\020\110\021" +
    "\075\040\100\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\021\120\040\100\001\001\000\006\021\117\040" +
    "\100\001\001\000\006\021\116\040\100\001\001\000\006" +
    "\021\115\040\100\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\020\123\021\075\040\100\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\017\126\020\101\021\075" +
    "\040\100\001\001\000\004\041\127\001\001\000\002\001" +
    "\001\000\012\017\131\020\101\021\075\040\100\001\001" +
    "\000\002\001\001\000\004\022\133\001\001\000\032\007" +
    "\054\013\065\023\063\026\051\027\047\033\056\034\043" +
    "\045\064\046\046\047\052\050\044\051\040\001\001\000" +
    "\004\014\135\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\016\017\143\020\101\021\075\026" +
    "\142\036\145\040\100\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\037\147\001\001\000\006\024\152\035\150" +
    "\001\001\000\002\001\001\000\014\017\156\020\101\021" +
    "\075\040\100\044\160\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\022\164" +
    "\001\001\000\012\017\163\020\101\021\075\040\100\001" +
    "\001\000\002\001\001\000\032\007\054\013\065\023\063" +
    "\026\051\027\047\033\056\034\043\045\064\046\046\047" +
    "\052\050\044\051\040\001\001\000\004\022\166\001\001" +
    "\000\032\007\054\013\065\023\063\026\051\027\047\033" +
    "\056\034\043\045\064\046\046\047\052\050\044\051\040" +
    "\001\001\000\020\017\143\020\101\021\075\026\142\036" +
    "\171\040\100\056\172\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\016\017" +
    "\143\020\101\021\075\026\142\036\176\040\100\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\022\246\001\001\000" +
    "\022\017\212\020\101\021\075\040\100\052\214\053\210" +
    "\054\213\055\207\001\001\000\002\001\001\000\002\001" +
    "\001\000\016\017\212\020\101\021\075\040\100\054\245" +
    "\055\207\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\022\017\216\020\101\021\075\040\100" +
    "\052\217\053\210\054\213\055\207\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\020\017\212" +
    "\020\101\021\075\040\100\053\222\054\213\055\207\001" +
    "\001\000\002\001\001\000\016\017\212\020\101\021\075" +
    "\040\100\054\224\055\207\001\001\000\002\001\001\000" +
    "\012\017\240\020\101\021\075\040\100\001\001\000\012" +
    "\017\237\020\101\021\075\040\100\001\001\000\012\017" +
    "\236\020\101\021\075\040\100\001\001\000\012\017\235" +
    "\020\101\021\075\040\100\001\001\000\012\017\234\020" +
    "\101\021\075\040\100\001\001\000\012\017\233\020\101" +
    "\021\075\040\100\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\022\242\001\001\000\032\007" +
    "\054\013\065\023\063\026\051\027\047\033\056\034\043" +
    "\045\064\046\046\047\052\050\044\051\040\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\032" +
    "\007\054\013\065\023\063\026\051\027\047\033\056\034" +
    "\043\045\064\046\046\047\052\050\044\051\040\001\001" +
    "\000\002\001\001\000\022\017\212\020\101\021\075\040" +
    "\100\052\251\053\210\054\213\055\207\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\030\254\032\256\001" +
    "\001\000\002\001\001\000\016\007\054\013\065\026\051" +
    "\033\277\050\044\051\040\001\001\000\002\001\001\000" +
    "\004\022\260\001\001\000\034\007\054\013\065\023\063" +
    "\026\051\027\047\031\261\033\056\034\043\045\064\046" +
    "\046\047\052\050\044\051\040\001\001\000\002\001\001" +
    "\000\002\001\001\000\022\017\212\020\101\021\075\040" +
    "\100\052\264\053\210\054\213\055\207\001\001\000\004" +
    "\032\266\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\022\270\001\001\000\034\007\054\013\065\023\063" +
    "\026\051\027\047\031\271\033\056\034\043\045\064\046" +
    "\046\047\052\050\044\051\040\001\001\000\002\001\001" +
    "\000\004\022\273\001\001\000\032\007\054\013\065\023" +
    "\063\026\051\027\047\033\056\034\043\045\064\046\046" +
    "\047\052\050\044\051\040\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\014\017\303\020\101\021\075\026\302\040" +
    "\100\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\022\313" +
    "\001\001\000\032\007\054\013\065\023\063\026\051\027" +
    "\047\033\056\034\043\045\064\046\046\047\052\050\044" +
    "\051\040\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\020\017\143\020\101\021\075\026\142" +
    "\036\171\040\100\056\320\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\010\023" +
    "\011\333\001\001\000\002\001\001\000\004\015\335\001" +
    "\001\000\002\001\001\000\004\022\337\001\001\000\032" +
    "\007\054\013\065\023\063\026\051\027\047\033\056\034" +
    "\043\045\064\046\046\047\052\050\044\051\040\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\015\346\001\001" +
    "\000\004\016\347\001\001\000\002\001\001\000\014\017" +
    "\352\020\101\021\075\026\351\040\100\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\015\357\001\001\000\004" +
    "\016\360\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$SintaxisVisual$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$SintaxisVisual$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$SintaxisVisual$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    private Symbol s;
    
    public void syntax_error(Symbol sym){
        System.out.println("\n" + sym.value + sym.sym);
        System.out.println("Error Sintactico en la letra: " + sym.value + "   <linea>: "  + (sym.right + 1) + "    <columna>: " + (sym.left + 1) + "\n");
    }

    public void unrecovered_syntax_error(Symbol sym) throws java.lang.Exception{
        System.out.println("\n" + sym.value + sym.sym);
        System.out.println("Error Sintactico en la letra: " + sym.value + "   <linea>: "  + (sym.right + 1) + "    <columna>: " + (sym.left + 1) + "\n");
    }

    public Symbol getS(){
        System.out.println(this.s.value);
        System.out.print(this.s.value);
        return this.s;
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$SintaxisVisual$actions {
  private final SintaxisVisual parser;

  /** Constructor */
  CUP$SintaxisVisual$actions(SintaxisVisual parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$SintaxisVisual$do_action_part00000000(
    int                        CUP$SintaxisVisual$act_num,
    java_cup.runtime.lr_parser CUP$SintaxisVisual$parser,
    java.util.Stack            CUP$SintaxisVisual$stack,
    int                        CUP$SintaxisVisual$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$SintaxisVisual$result;

      /* select the action based on the action number */
      switch (CUP$SintaxisVisual$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= VISUAL EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-1)).value;
		RESULT = start_val;
              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$SintaxisVisual$parser.done_parsing();
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // VISUAL ::= ESP STATESM 
            {
              Object RESULT =null;

              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("VISUAL",0, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // ESP ::= espacio 
            {
              Object RESULT =null;

              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("ESP",19, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // ESP ::= 
            {
              Object RESULT =null;

              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("ESP",19, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // PUBLIC ::= publicc 
            {
              Object RESULT =null;

              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("PUBLIC",33, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // PUBLIC ::= 
            {
              Object RESULT =null;

              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("PUBLIC",33, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // STATESM ::= STATEM STATESM 
            {
              Object RESULT =null;

              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("STATESM",1, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // STATESM ::= 
            {
              Object RESULT =null;

              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("STATESM",1, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // STATEM ::= SUB 
            {
              Object RESULT =null;

              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("STATEM",2, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // STATEM ::= FUNCTION 
            {
              Object RESULT =null;

              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("STATEM",2, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // STATEM ::= DEFVAR 
            {
              Object RESULT =null;

              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("STATEM",2, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // SUB ::= PUBLIC subb id para LISTPARAMM parc espacio STATEMENTS endd subb espacio 
            {
              Object RESULT =null;

              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("SUB",3, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-10)), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // FUNCTION ::= PUBLIC functionn id para LISTPARAMM parc TYPE espacio STATEMENTS endd functionn espacio 
            {
              Object RESULT =null;

              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("FUNCTION",4, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-11)), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // DEFVAR ::= dimm LISTVAR espacio 
            {
              Object RESULT =null;

              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("DEFVAR",5, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // LISTPARAMM ::= LISTPARAM 
            {
              Object RESULT =null;

              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("LISTPARAMM",7, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // LISTPARAMM ::= 
            {
              Object RESULT =null;

              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("LISTPARAMM",7, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // LISTPARAM ::= LISTPARAM coma id TYPE 
            {
              Object RESULT =null;

              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("LISTPARAM",6, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // LISTPARAM ::= id TYPE 
            {
              Object RESULT =null;

              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("LISTPARAM",6, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // LISTVAR ::= LISTVAR coma id TYPE DEF 
            {
              Object RESULT =null;

              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("LISTVAR",8, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-4)), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // LISTVAR ::= id TYPE DEF 
            {
              Object RESULT =null;

              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("LISTVAR",8, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // ASIGVAR ::= id igual OPERACION_A espacio 
            {
              Object RESULT =null;

              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("ASIGVAR",9, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // ASIGVAR ::= id igual character espacio 
            {
              Object RESULT =null;

              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("ASIGVAR",9, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // TYPE ::= ass integerr 
            {
              Object RESULT =null;

              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("TYPE",11, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // TYPE ::= ass charr 
            {
              Object RESULT =null;

              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("TYPE",11, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // TYPE ::= ass decimall 
            {
              Object RESULT =null;

              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("TYPE",11, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // TYPE ::= 
            {
              Object RESULT =null;

              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("TYPE",11, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // DEF ::= igual OPERACION_A 
            {
              Object RESULT =null;

              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("DEF",12, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // DEF ::= igual character 
            {
              Object RESULT =null;

              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("DEF",12, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // DEF ::= igual D 
            {
              Object RESULT =null;

              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("DEF",12, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // DEF ::= 
            {
              Object RESULT =null;

              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("DEF",12, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // OPERACION_A ::= OPERACION_A mas OPERACION_M 
            {
              Object RESULT =null;

              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("OPERACION_A",13, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // OPERACION_A ::= OPERACION_M menos OPERACION_M 
            {
              Object RESULT =null;

              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("OPERACION_A",13, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // OPERACION_A ::= OPERACION_M 
            {
              Object RESULT =null;

              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("OPERACION_A",13, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // OPERACION_M ::= OPERACION_M por OPERACION_U 
            {
              Object RESULT =null;

              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("OPERACION_M",14, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // OPERACION_M ::= OPERACION_M div OPERACION_U 
            {
              Object RESULT =null;

              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("OPERACION_M",14, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // OPERACION_M ::= OPERACION_M floor OPERACION_U 
            {
              Object RESULT =null;

              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("OPERACION_M",14, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // OPERACION_M ::= OPERACION_M mod OPERACION_U 
            {
              Object RESULT =null;

              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("OPERACION_M",14, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // OPERACION_M ::= OPERACION_U 
            {
              Object RESULT =null;

              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("OPERACION_M",14, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // OPERACION_U ::= menos OPERACION_U 
            {
              Object RESULT =null;

              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("OPERACION_U",15, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // OPERACION_U ::= mas OPERACION_U 
            {
              Object RESULT =null;

              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("OPERACION_U",15, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // OPERACION_U ::= ATOM 
            {
              Object RESULT =null;

              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("OPERACION_U",15, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // ATOM ::= id 
            {
              Object RESULT =null;

              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("ATOM",30, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // ATOM ::= entero 
            {
              Object RESULT =null;

              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("ATOM",30, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // ATOM ::= decimal 
            {
              Object RESULT =null;

              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("ATOM",30, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // ATOM ::= para OPERACION_A parc 
            {
              Object RESULT =null;

              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("ATOM",30, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // STATEMENTS ::= STATEMENTS STATEMENT 
            {
              Object RESULT =null;

              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("STATEMENTS",16, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // STATEMENTS ::= 
            {
              Object RESULT =null;

              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("STATEMENTS",16, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // STATEMENT ::= IF_ELSE 
            {
              Object RESULT =null;

              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("STATEMENT",17, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // STATEMENT ::= SELECT 
            {
              Object RESULT =null;

              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("STATEMENT",17, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // STATEMENT ::= FOR 
            {
              Object RESULT =null;

              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("STATEMENT",17, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // STATEMENT ::= WHILE 
            {
              Object RESULT =null;

              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("STATEMENT",17, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // STATEMENT ::= DO_WHILE 
            {
              Object RESULT =null;

              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("STATEMENT",17, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // STATEMENT ::= STATEMENTLINE 
            {
              Object RESULT =null;

              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("STATEMENT",17, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // IF_ELSE ::= iff CONDICION BLOQUEIF 
            {
              Object RESULT =null;

              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("IF_ELSE",21, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // BLOQUEIF ::= thenn STATEMENTLINE espacio 
            {
              Object RESULT =null;

              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("BLOQUEIF",22, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // BLOQUEIF ::= THEN espacio STATEMENTS ELSE_IF endd iff espacio 
            {
              Object RESULT =null;

              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("BLOQUEIF",22, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-6)), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // ELSE_IF ::= elseiff CONDICION THEN espacio STATEMENTS ELSE_IF 
            {
              Object RESULT =null;

              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("ELSE_IF",23, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-5)), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // ELSE_IF ::= elsee espacio STATEMENTS 
            {
              Object RESULT =null;

              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("ELSE_IF",23, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // ELSE_IF ::= 
            {
              Object RESULT =null;

              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("ELSE_IF",23, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // THEN ::= thenn 
            {
              Object RESULT =null;

              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("THEN",24, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // THEN ::= 
            {
              Object RESULT =null;

              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("THEN",24, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // STATEMENTLINE ::= CONSOLEWRITE 
            {
              Object RESULT =null;

              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("STATEMENTLINE",25, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // STATEMENTLINE ::= INPUT 
            {
              Object RESULT =null;

              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("STATEMENTLINE",25, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // STATEMENTLINE ::= DEFVAR 
            {
              Object RESULT =null;

              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("STATEMENTLINE",25, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // STATEMENTLINE ::= ASIGVAR 
            {
              Object RESULT =null;

              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("STATEMENTLINE",25, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // SELECT ::= selectt CA EXPR espacio CASES CASEELSE endd selectt espacio 
            {
              Object RESULT =null;

              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("SELECT",26, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-8)), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // CA ::= casee 
            {
              Object RESULT =null;

              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("CA",32, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // CA ::= 
            {
              Object RESULT =null;

              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("CA",32, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // CASEELSE ::= casee elsee espacio STATEMENTS 
            {
              Object RESULT =null;

              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("CASEELSE",18, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // CASEELSE ::= 
            {
              Object RESULT =null;

              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("CASEELSE",18, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // EXPR ::= OPERACION_A 
            {
              Object RESULT =null;

              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("EXPR",28, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // EXPR ::= character 
            {
              Object RESULT =null;

              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("EXPR",28, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // EXPR ::= D 
            {
              Object RESULT =null;

              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("EXPR",28, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // CASES ::= CASES CASE 
            {
              Object RESULT =null;

              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("CASES",29, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // CASES ::= 
            {
              Object RESULT =null;

              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("CASES",29, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // CASE ::= casee LIST_CASE espacio STATEMENTS 
            {
              Object RESULT =null;

              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("CASE",27, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // LIST_CASE ::= LIST_CASE coma OPERACION_A 
            {
              Object RESULT =null;

              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("LIST_CASE",34, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // LIST_CASE ::= OPERACION_A 
            {
              Object RESULT =null;

              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("LIST_CASE",34, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // FOR ::= forr id TYPE igual OPERACION_A to OPERACION_A STEP espacio STATEMENTS nextt ID espacio 
            {
              Object RESULT =null;

              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("FOR",35, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-12)), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // ID ::= id 
            {
              Object RESULT =null;

              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("ID",10, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // ID ::= 
            {
              Object RESULT =null;

              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("ID",10, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // STEP ::= stepp OPERACION_A 
            {
              Object RESULT =null;

              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("STEP",31, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // STEP ::= 
            {
              Object RESULT =null;

              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("STEP",31, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // WHILE ::= whilee CONDICION espacio STATEMENTS endd whilee espacio 
            {
              Object RESULT =null;

              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("WHILE",36, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-6)), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // DO_WHILE ::= doo whilee CONDICION espacio STATEMENTS loopp espacio 
            {
              Object RESULT =null;

              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("DO_WHILE",37, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-6)), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // DO_WHILE ::= doo espacio STATEMENTS loopp whilee CONDICION espacio 
            {
              Object RESULT =null;

              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("DO_WHILE",37, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-6)), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // CONSOLEWRITE ::= write para STRING parc espacio 
            {
              Object RESULT =null;

              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("CONSOLEWRITE",38, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-4)), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // CONSOLEWRITE ::= writeln para STRING parc espacio 
            {
              Object RESULT =null;

              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("CONSOLEWRITE",38, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-4)), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // INPUT ::= id igual D espacio 
            {
              Object RESULT =null;

              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("INPUT",39, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // INPUT ::= D espacio 
            {
              Object RESULT =null;

              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("INPUT",39, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // D ::= charinput para string parc 
            {
              Object RESULT =null;

              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("D",20, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // D ::= floatinput para string parc 
            {
              Object RESULT =null;

              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("D",20, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // D ::= intinput para string parc 
            {
              Object RESULT =null;

              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("D",20, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // CONDICION ::= CONDICION orr AND 
            {
              Object RESULT =null;

              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("CONDICION",40, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // CONDICION ::= AND 
            {
              Object RESULT =null;

              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("CONDICION",40, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // AND ::= AND andd NOT 
            {
              Object RESULT =null;

              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("AND",41, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // AND ::= NOT 
            {
              Object RESULT =null;

              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("AND",41, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // NOT ::= nott NOT 
            {
              Object RESULT =null;

              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("NOT",42, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // NOT ::= COMPARACION 
            {
              Object RESULT =null;

              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("NOT",42, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // COMPARACION ::= OPERACION_A igual OPERACION_A 
            {
              Object RESULT =null;

              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("COMPARACION",43, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // COMPARACION ::= OPERACION_A noigual OPERACION_A 
            {
              Object RESULT =null;

              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("COMPARACION",43, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // COMPARACION ::= OPERACION_A menor OPERACION_A 
            {
              Object RESULT =null;

              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("COMPARACION",43, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // COMPARACION ::= OPERACION_A menorig OPERACION_A 
            {
              Object RESULT =null;

              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("COMPARACION",43, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // COMPARACION ::= OPERACION_A mayor OPERACION_A 
            {
              Object RESULT =null;

              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("COMPARACION",43, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // COMPARACION ::= OPERACION_A mayorig OPERACION_A 
            {
              Object RESULT =null;

              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("COMPARACION",43, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // COMPARACION ::= para CONDICION parc 
            {
              Object RESULT =null;

              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("COMPARACION",43, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // STRING ::= STRING y EXPR 
            {
              Object RESULT =null;

              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("STRING",44, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // STRING ::= STRING y string 
            {
              Object RESULT =null;

              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("STRING",44, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // STRING ::= EXPR 
            {
              Object RESULT =null;

              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("STRING",44, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // STRING ::= string 
            {
              Object RESULT =null;

              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("STRING",44, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$SintaxisVisual$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$SintaxisVisual$do_action(
    int                        CUP$SintaxisVisual$act_num,
    java_cup.runtime.lr_parser CUP$SintaxisVisual$parser,
    java.util.Stack            CUP$SintaxisVisual$stack,
    int                        CUP$SintaxisVisual$top)
    throws java.lang.Exception
    {
              return CUP$SintaxisVisual$do_action_part00000000(
                               CUP$SintaxisVisual$act_num,
                               CUP$SintaxisVisual$parser,
                               CUP$SintaxisVisual$stack,
                               CUP$SintaxisVisual$top);
    }
}

}
