
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package com.mycompany.assofjpybasic.backend.analizador.visual;

import java_cup.runtime.*;
import com.mycompany.assofjpybasic.backend.semantica.visual.*;
import com.mycompany.assofjpybasic.backend.semantica.programa.*;
import com.mycompany.assofjpybasic.backend.semantica.python.*;
import com.mycompany.assofjpybasic.backend.semantica.programa.cod3.*;
import java.util.ArrayList;
import java.util.List;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class SintaxisVisual extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return SintaxisVisualSym.class;
}

  /** Default constructor. */
  @Deprecated
  public SintaxisVisual() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public SintaxisVisual(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public SintaxisVisual(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\170\000\002\002\004\000\002\002\004\000\002\007" +
    "\003\000\002\007\002\000\002\012\003\000\002\012\002" +
    "\000\002\003\004\000\002\003\002\000\002\004\003\000" +
    "\002\004\003\000\002\060\002\000\002\005\016\000\002" +
    "\061\002\000\002\006\017\000\002\047\005\000\002\013" +
    "\003\000\002\013\002\000\002\014\006\000\002\014\004" +
    "\000\002\015\007\000\002\015\005\000\002\037\006\000" +
    "\002\016\004\000\002\016\004\000\002\016\004\000\002" +
    "\017\004\000\002\017\004\000\002\017\004\000\002\017" +
    "\002\000\002\026\004\000\002\026\002\000\002\021\005" +
    "\000\002\021\005\000\002\021\003\000\002\022\005\000" +
    "\002\022\005\000\002\022\005\000\002\022\003\000\002" +
    "\023\004\000\002\023\004\000\002\023\003\000\002\024" +
    "\003\000\002\024\003\000\002\024\003\000\002\024\005" +
    "\000\002\031\004\000\002\031\002\000\002\036\004\000" +
    "\002\036\004\000\002\036\002\000\002\020\003\000\002" +
    "\020\003\000\002\020\003\000\002\032\003\000\002\032" +
    "\003\000\002\032\003\000\002\032\003\000\002\032\003" +
    "\000\002\032\003\000\002\062\002\000\002\063\002\000" +
    "\002\041\016\000\002\064\002\000\002\041\010\000\002" +
    "\065\002\000\002\057\011\000\002\057\002\000\002\066" +
    "\002\000\002\040\006\000\002\040\002\000\002\010\003" +
    "\000\002\010\002\000\002\043\003\000\002\043\003\000" +
    "\002\043\003\000\002\043\003\000\002\042\013\000\002" +
    "\011\003\000\002\011\002\000\002\067\002\000\002\035" +
    "\007\000\002\035\002\000\002\070\002\000\002\056\010" +
    "\000\002\056\002\000\002\055\005\000\002\055\003\000" +
    "\002\071\002\000\002\046\020\000\002\054\003\000\002" +
    "\054\002\000\002\030\004\000\002\072\002\000\002\044" +
    "\012\000\002\073\002\000\002\045\012\000\002\074\002" +
    "\000\002\045\012\000\002\033\007\000\002\033\007\000" +
    "\002\027\006\000\002\027\006\000\002\027\006\000\002" +
    "\050\005\000\002\050\003\000\002\052\005\000\002\052" +
    "\003\000\002\051\004\000\002\051\003\000\002\051\005" +
    "\000\002\053\005\000\002\053\005\000\002\053\005\000" +
    "\002\053\005\000\002\053\005\000\002\053\005\000\002" +
    "\034\005\000\002\034\005\000\002\034\003\000\002\034" +
    "\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\370\000\014\002\ufffe\004\004\005\ufffe\006\ufffe\010" +
    "\ufffe\001\002\000\012\002\uffff\005\uffff\006\uffff\010\uffff" +
    "\001\002\000\004\002\372\001\002\000\012\002\ufffa\005" +
    "\ufffc\006\ufffc\010\007\001\002\000\006\005\ufffd\006\ufffd" +
    "\001\002\000\012\002\ufff9\005\ufff9\006\ufff9\010\ufff9\001" +
    "\002\000\004\002\000\001\002\000\012\002\ufffa\005\ufffc" +
    "\006\ufffc\010\007\001\002\000\006\005\016\006\015\001" +
    "\002\000\012\002\ufff8\005\ufff8\006\ufff8\010\ufff8\001\002" +
    "\000\004\056\352\001\002\000\004\056\017\001\002\000" +
    "\004\052\020\001\002\000\006\053\ufff1\056\023\001\002" +
    "\000\004\053\034\001\002\000\006\053\ufff2\054\031\001" +
    "\002\000\004\012\024\001\002\000\010\016\030\017\027" +
    "\020\026\001\002\000\006\053\uffef\054\uffef\001\002\000" +
    "\012\004\uffea\036\uffea\053\uffea\054\uffea\001\002\000\012" +
    "\004\uffe9\036\uffe9\053\uffe9\054\uffe9\001\002\000\012\004" +
    "\uffeb\036\uffeb\053\uffeb\054\uffeb\001\002\000\004\056\032" +
    "\001\002\000\004\012\024\001\002\000\006\053\ufff0\054" +
    "\ufff0\001\002\000\004\004\035\001\002\000\034\007\ufff7" +
    "\011\ufff7\021\ufff7\025\ufff7\027\ufff7\033\ufff7\034\ufff7\056" +
    "\ufff7\064\ufff7\065\ufff7\066\ufff7\067\ufff7\070\ufff7\001\002" +
    "\000\034\007\uffd3\011\uffd3\021\uffd3\025\uffd3\027\uffd3\033" +
    "\uffd3\034\uffd3\056\uffd3\064\uffd3\065\uffd3\066\uffd3\067\uffd3" +
    "\070\uffd3\001\002\000\034\007\061\011\057\021\054\025" +
    "\065\027\067\033\050\034\056\056\052\064\062\065\045" +
    "\066\060\067\042\070\041\001\002\000\052\004\uffb8\007" +
    "\uffb8\011\uffb8\021\uffb8\022\uffb8\023\uffb8\025\uffb8\026\uffb8" +
    "\027\uffb8\032\uffb8\033\uffb8\034\uffb8\035\uffb8\056\uffb8\064" +
    "\uffb8\065\uffb8\066\uffb8\067\uffb8\070\uffb8\071\uffb8\001\002" +
    "\000\004\052\347\001\002\000\004\052\344\001\002\000" +
    "\050\007\uffcb\011\uffcb\021\uffcb\022\uffcb\023\uffcb\025\uffcb" +
    "\026\uffcb\027\uffcb\032\uffcb\033\uffcb\034\uffcb\035\uffcb\056" +
    "\uffcb\064\uffcb\065\uffcb\066\uffcb\067\uffcb\070\uffcb\071\uffcb" +
    "\001\002\000\050\007\uffc9\011\uffc9\021\uffc9\022\uffc9\023" +
    "\uffc9\025\uffc9\026\uffc9\027\uffc9\032\uffc9\033\uffc9\034\uffc9" +
    "\035\uffc9\056\uffc9\064\uffc9\065\uffc9\066\uffc9\067\uffc9\070" +
    "\uffc9\071\uffc9\001\002\000\004\052\340\001\002\000\052" +
    "\004\uffb9\007\uffb9\011\uffb9\021\uffb9\022\uffb9\023\uffb9\025" +
    "\uffb9\026\uffb9\027\uffb9\032\uffb9\033\uffb9\034\uffb9\035\uffb9" +
    "\056\uffb9\064\uffb9\065\uffb9\066\uffb9\067\uffb9\070\uffb9\071" +
    "\uffb9\001\002\000\050\007\uffcc\011\uffcc\021\uffcc\022\uffcc" +
    "\023\uffcc\025\uffcc\026\uffcc\027\uffcc\032\uffcc\033\uffcc\034" +
    "\uffcc\035\uffcc\056\uffcc\064\uffcc\065\uffcc\066\uffcc\067\uffcc" +
    "\070\uffcc\071\uffcc\001\002\000\020\013\230\044\103\045" +
    "\077\052\234\056\073\057\076\060\102\001\002\000\050" +
    "\007\uffc8\011\uffc8\021\uffc8\022\uffc8\023\uffc8\025\uffc8\026" +
    "\uffc8\027\uffc8\032\uffc8\033\uffc8\034\uffc8\035\uffc8\056\uffc8" +
    "\064\uffc8\065\uffc8\066\uffc8\067\uffc8\070\uffc8\071\uffc8\001" +
    "\002\000\004\036\326\001\002\000\052\004\uffb7\007\uffb7" +
    "\011\uffb7\021\uffb7\022\uffb7\023\uffb7\025\uffb7\026\uffb7\027" +
    "\uffb7\032\uffb7\033\uffb7\034\uffb7\035\uffb7\056\uffb7\064\uffb7" +
    "\065\uffb7\066\uffb7\067\uffb7\070\uffb7\071\uffb7\001\002\000" +
    "\020\013\230\044\103\045\077\052\234\056\073\057\076" +
    "\060\102\001\002\000\050\007\uffc7\011\uffc7\021\uffc7\022" +
    "\uffc7\023\uffc7\025\uffc7\026\uffc7\027\uffc7\032\uffc7\033\uffc7" +
    "\034\uffc7\035\uffc7\056\uffc7\064\uffc7\065\uffc7\066\uffc7\067" +
    "\uffc7\070\uffc7\071\uffc7\001\002\000\006\004\224\033\225" +
    "\001\002\000\004\056\206\001\002\000\004\052\202\001" +
    "\002\000\004\005\200\001\002\000\004\052\167\001\002" +
    "\000\046\007\uffd4\011\uffd4\021\uffd4\022\uffd4\023\uffd4\025" +
    "\uffd4\026\uffd4\027\uffd4\032\uffd4\033\uffd4\034\uffd4\035\uffd4" +
    "\056\uffd4\064\uffd4\065\uffd4\066\uffd4\067\uffd4\070\uffd4\001" +
    "\002\000\050\007\uffca\011\uffca\021\uffca\022\uffca\023\uffca" +
    "\025\uffca\026\uffca\027\uffca\032\uffca\033\uffca\034\uffca\035" +
    "\uffca\056\uffca\064\uffca\065\uffca\066\uffca\067\uffca\070\uffca" +
    "\071\uffca\001\002\000\030\026\140\044\uffb3\045\uffb3\052" +
    "\uffb3\056\uffb3\057\uffb3\060\uffb3\061\uffb3\066\uffb3\067\uffb3" +
    "\070\uffb3\001\002\000\052\004\uffb6\007\uffb6\011\uffb6\021" +
    "\uffb6\022\uffb6\023\uffb6\025\uffb6\026\uffb6\027\uffb6\032\uffb6" +
    "\033\uffb6\034\uffb6\035\uffb6\056\uffb6\064\uffb6\065\uffb6\066" +
    "\uffb6\067\uffb6\070\uffb6\071\uffb6\001\002\000\004\056\070" +
    "\001\002\000\004\012\024\001\002\000\004\036\072\001" +
    "\002\000\016\044\103\045\077\052\104\056\073\057\076" +
    "\060\102\001\002\000\054\004\uffd8\007\uffd8\014\uffd8\015" +
    "\uffd8\024\uffd8\030\uffd8\031\uffd8\036\uffd8\037\uffd8\040\uffd8" +
    "\041\uffd8\042\uffd8\043\uffd8\044\uffd8\045\uffd8\046\uffd8\047" +
    "\uffd8\050\uffd8\053\uffd8\054\uffd8\062\uffd8\001\002\000\006" +
    "\030\123\044\106\001\002\000\054\004\uffdc\007\uffdc\014" +
    "\uffdc\015\uffdc\024\uffdc\030\uffdc\031\uffdc\036\uffdc\037\uffdc" +
    "\040\uffdc\041\uffdc\042\uffdc\043\uffdc\044\uffdc\045\uffdc\046" +
    "\uffdc\047\uffdc\050\uffdc\053\uffdc\054\uffdc\062\uffdc\001\002" +
    "\000\054\004\uffd6\007\uffd6\014\uffd6\015\uffd6\024\uffd6\030" +
    "\uffd6\031\uffd6\036\uffd6\037\uffd6\040\uffd6\041\uffd6\042\uffd6" +
    "\043\uffd6\044\uffd6\045\uffd6\046\uffd6\047\uffd6\050\uffd6\053" +
    "\uffd6\054\uffd6\062\uffd6\001\002\000\016\044\103\045\077" +
    "\052\104\056\073\057\076\060\102\001\002\000\054\004" +
    "\uffd9\007\uffd9\014\uffd9\015\uffd9\024\uffd9\030\uffd9\031\uffd9" +
    "\036\uffd9\037\uffd9\040\uffd9\041\uffd9\042\uffd9\043\uffd9\044" +
    "\uffd9\045\uffd9\046\uffd9\047\uffd9\050\uffd9\053\uffd9\054\uffd9" +
    "\062\uffd9\001\002\000\054\004\uffe0\007\uffe0\014\uffe0\015" +
    "\uffe0\024\uffe0\030\uffe0\031\uffe0\036\uffe0\037\uffe0\040\uffe0" +
    "\041\uffe0\042\uffe0\043\uffe0\044\uffe0\045\120\046\111\047" +
    "\113\050\112\053\uffe0\054\uffe0\062\uffe0\001\002\000\054" +
    "\004\uffd7\007\uffd7\014\uffd7\015\uffd7\024\uffd7\030\uffd7\031" +
    "\uffd7\036\uffd7\037\uffd7\040\uffd7\041\uffd7\042\uffd7\043\uffd7" +
    "\044\uffd7\045\uffd7\046\uffd7\047\uffd7\050\uffd7\053\uffd7\054" +
    "\uffd7\062\uffd7\001\002\000\016\044\103\045\077\052\104" +
    "\056\073\057\076\060\102\001\002\000\016\044\103\045" +
    "\077\052\104\056\073\057\076\060\102\001\002\000\006" +
    "\044\106\053\107\001\002\000\016\044\103\045\077\052" +
    "\104\056\073\057\076\060\102\001\002\000\054\004\uffd5" +
    "\007\uffd5\014\uffd5\015\uffd5\024\uffd5\030\uffd5\031\uffd5\036" +
    "\uffd5\037\uffd5\040\uffd5\041\uffd5\042\uffd5\043\uffd5\044\uffd5" +
    "\045\uffd5\046\uffd5\047\uffd5\050\uffd5\053\uffd5\054\uffd5\062" +
    "\uffd5\001\002\000\052\004\uffe2\007\uffe2\014\uffe2\015\uffe2" +
    "\024\uffe2\030\uffe2\031\uffe2\036\uffe2\037\uffe2\040\uffe2\041" +
    "\uffe2\042\uffe2\043\uffe2\044\uffe2\046\111\047\113\050\112" +
    "\053\uffe2\054\uffe2\062\uffe2\001\002\000\016\044\103\045" +
    "\077\052\104\056\073\057\076\060\102\001\002\000\016" +
    "\044\103\045\077\052\104\056\073\057\076\060\102\001" +
    "\002\000\016\044\103\045\077\052\104\056\073\057\076" +
    "\060\102\001\002\000\054\004\uffde\007\uffde\014\uffde\015" +
    "\uffde\024\uffde\030\uffde\031\uffde\036\uffde\037\uffde\040\uffde" +
    "\041\uffde\042\uffde\043\uffde\044\uffde\045\uffde\046\uffde\047" +
    "\uffde\050\uffde\053\uffde\054\uffde\062\uffde\001\002\000\054" +
    "\004\uffdd\007\uffdd\014\uffdd\015\uffdd\024\uffdd\030\uffdd\031" +
    "\uffdd\036\uffdd\037\uffdd\040\uffdd\041\uffdd\042\uffdd\043\uffdd" +
    "\044\uffdd\045\uffdd\046\uffdd\047\uffdd\050\uffdd\053\uffdd\054" +
    "\uffdd\062\uffdd\001\002\000\054\004\uffdf\007\uffdf\014\uffdf" +
    "\015\uffdf\024\uffdf\030\uffdf\031\uffdf\036\uffdf\037\uffdf\040" +
    "\uffdf\041\uffdf\042\uffdf\043\uffdf\044\uffdf\045\uffdf\046\uffdf" +
    "\047\uffdf\050\uffdf\053\uffdf\054\uffdf\062\uffdf\001\002\000" +
    "\054\004\uffda\007\uffda\014\uffda\015\uffda\024\uffda\030\uffda" +
    "\031\uffda\036\uffda\037\uffda\040\uffda\041\uffda\042\uffda\043" +
    "\uffda\044\uffda\045\uffda\046\uffda\047\uffda\050\uffda\053\uffda" +
    "\054\uffda\062\uffda\001\002\000\016\044\103\045\077\052" +
    "\104\056\073\057\076\060\102\001\002\000\052\004\uffe1" +
    "\007\uffe1\014\uffe1\015\uffe1\024\uffe1\030\uffe1\031\uffe1\036" +
    "\uffe1\037\uffe1\040\uffe1\041\uffe1\042\uffe1\043\uffe1\044\uffe1" +
    "\046\111\047\113\050\112\053\uffe1\054\uffe1\062\uffe1\001" +
    "\002\000\054\004\uffdb\007\uffdb\014\uffdb\015\uffdb\024\uffdb" +
    "\030\uffdb\031\uffdb\036\uffdb\037\uffdb\040\uffdb\041\uffdb\042" +
    "\uffdb\043\uffdb\044\uffdb\045\uffdb\046\uffdb\047\uffdb\050\uffdb" +
    "\053\uffdb\054\uffdb\062\uffdb\001\002\000\016\044\103\045" +
    "\077\052\104\056\073\057\076\060\102\001\002\000\006" +
    "\031\126\044\106\001\002\000\004\004\130\001\002\000" +
    "\016\044\103\045\077\052\104\056\073\057\076\060\102" +
    "\001\002\000\006\004\uffa6\044\106\001\002\000\034\011" +
    "\uffaa\021\uffaa\025\uffaa\027\uffaa\032\uffaa\033\uffaa\034\uffaa" +
    "\056\uffaa\064\uffaa\065\uffaa\066\uffaa\067\uffaa\070\uffaa\001" +
    "\002\000\034\011\uffd3\021\uffd3\025\uffd3\027\uffd3\032\uffd3" +
    "\033\uffd3\034\uffd3\056\uffd3\064\uffd3\065\uffd3\066\uffd3\067" +
    "\uffd3\070\uffd3\001\002\000\034\011\057\021\054\025\065" +
    "\027\067\032\133\033\050\034\056\056\052\064\062\065" +
    "\045\066\060\067\042\070\041\001\002\000\006\004\uffa7" +
    "\056\135\001\002\000\004\004\136\001\002\000\004\004" +
    "\uffa8\001\002\000\050\007\uffa9\011\uffa9\021\uffa9\022\uffa9" +
    "\023\uffa9\025\uffa9\026\uffa9\027\uffa9\032\uffa9\033\uffa9\034" +
    "\uffa9\035\uffa9\056\uffa9\064\uffa9\065\uffa9\066\uffa9\067\uffa9" +
    "\070\uffa9\071\uffa9\001\002\000\026\044\103\045\077\052" +
    "\104\056\073\057\076\060\102\061\143\066\060\067\042" +
    "\070\041\001\002\000\026\044\uffb4\045\uffb4\052\uffb4\056" +
    "\uffb4\057\uffb4\060\uffb4\061\uffb4\066\uffb4\067\uffb4\070\uffb4" +
    "\001\002\000\016\004\uffcf\007\uffcf\044\106\053\uffcf\054" +
    "\uffcf\062\uffcf\001\002\000\014\004\uffce\007\uffce\053\uffce" +
    "\054\uffce\062\uffce\001\002\000\014\004\uffcd\007\uffcd\053" +
    "\uffcd\054\uffcd\062\uffcd\001\002\000\004\004\145\001\002" +
    "\000\006\007\uffad\026\uffad\001\002\000\006\007\uffb0\026" +
    "\147\001\002\000\020\023\155\044\103\045\077\052\104" +
    "\056\073\057\076\060\102\001\002\000\004\007\151\001" +
    "\002\000\004\025\152\001\002\000\004\004\153\001\002" +
    "\000\050\007\uffb5\011\uffb5\021\uffb5\022\uffb5\023\uffb5\025" +
    "\uffb5\026\uffb5\027\uffb5\032\uffb5\033\uffb5\034\uffb5\035\uffb5" +
    "\056\uffb5\064\uffb5\065\uffb5\066\uffb5\067\uffb5\070\uffb5\071" +
    "\uffb5\001\002\000\010\004\uffab\044\106\054\uffab\001\002" +
    "\000\004\004\164\001\002\000\006\004\157\054\160\001" +
    "\002\000\036\007\uffaf\011\uffaf\021\uffaf\025\uffaf\026\uffaf" +
    "\027\uffaf\033\uffaf\034\uffaf\056\uffaf\064\uffaf\065\uffaf\066" +
    "\uffaf\067\uffaf\070\uffaf\001\002\000\016\044\103\045\077" +
    "\052\104\056\073\057\076\060\102\001\002\000\010\004" +
    "\uffac\044\106\054\uffac\001\002\000\036\007\uffd3\011\uffd3" +
    "\021\uffd3\025\uffd3\026\uffd3\027\uffd3\033\uffd3\034\uffd3\056" +
    "\uffd3\064\uffd3\065\uffd3\066\uffd3\067\uffd3\070\uffd3\001\002" +
    "\000\036\007\uffae\011\057\021\054\025\065\026\uffae\027" +
    "\067\033\050\034\056\056\052\064\062\065\045\066\060" +
    "\067\042\070\041\001\002\000\034\007\uffb2\011\uffb2\021" +
    "\uffb2\025\uffb2\027\uffb2\033\uffb2\034\uffb2\056\uffb2\064\uffb2" +
    "\065\uffb2\066\uffb2\067\uffb2\070\uffb2\001\002\000\034\007" +
    "\uffd3\011\uffd3\021\uffd3\025\uffd3\027\uffd3\033\uffd3\034\uffd3" +
    "\056\uffd3\064\uffd3\065\uffd3\066\uffd3\067\uffd3\070\uffd3\001" +
    "\002\000\034\007\uffb1\011\057\021\054\025\065\027\067" +
    "\033\050\034\056\056\052\064\062\065\045\066\060\067" +
    "\042\070\041\001\002\000\030\044\103\045\077\052\104" +
    "\056\073\057\076\060\102\061\143\063\170\066\060\067" +
    "\042\070\041\001\002\000\006\053\uff8a\062\uff8a\001\002" +
    "\000\006\053\uff8b\062\uff8b\001\002\000\006\053\173\062" +
    "\174\001\002\000\004\004\177\001\002\000\030\044\103" +
    "\045\077\052\104\056\073\057\076\060\102\061\143\063" +
    "\175\066\060\067\042\070\041\001\002\000\006\053\uff8c" +
    "\062\uff8c\001\002\000\006\053\uff8d\062\uff8d\001\002\000" +
    "\052\004\uff9f\007\uff9f\011\uff9f\021\uff9f\022\uff9f\023\uff9f" +
    "\025\uff9f\026\uff9f\027\uff9f\032\uff9f\033\uff9f\034\uff9f\035" +
    "\uff9f\056\uff9f\064\uff9f\065\uff9f\066\uff9f\067\uff9f\070\uff9f" +
    "\071\uff9f\001\002\000\004\004\201\001\002\000\012\002" +
    "\ufff6\005\ufff6\006\ufff6\010\ufff6\001\002\000\004\063\203" +
    "\001\002\000\004\053\204\001\002\000\060\004\uff9d\007" +
    "\uff9d\011\uff9d\021\uff9d\022\uff9d\023\uff9d\025\uff9d\026\uff9d" +
    "\027\uff9d\032\uff9d\033\uff9d\034\uff9d\035\uff9d\053\uff9d\054" +
    "\uff9d\056\uff9d\062\uff9d\064\uff9d\065\uff9d\066\uff9d\067\uff9d" +
    "\070\uff9d\071\uff9d\001\002\000\006\004\217\054\220\001" +
    "\002\000\012\004\uffe5\012\207\036\uffe5\054\uffe5\001\002" +
    "\000\010\016\216\017\215\020\214\001\002\000\010\004" +
    "\uffe3\036\212\054\uffe3\001\002\000\006\004\uffed\054\uffed" +
    "\001\002\000\026\044\103\045\077\052\104\056\073\057" +
    "\076\060\102\061\143\066\060\067\042\070\041\001\002" +
    "\000\006\004\uffe4\054\uffe4\001\002\000\010\004\uffe7\036" +
    "\uffe7\054\uffe7\001\002\000\010\004\uffe6\036\uffe6\054\uffe6" +
    "\001\002\000\010\004\uffe8\036\uffe8\054\uffe8\001\002\000" +
    "\052\004\ufff3\007\ufff3\011\ufff3\021\ufff3\022\ufff3\023\ufff3" +
    "\025\ufff3\026\ufff3\027\ufff3\032\ufff3\033\ufff3\034\ufff3\035" +
    "\ufff3\056\ufff3\064\ufff3\065\ufff3\066\ufff3\067\ufff3\070\ufff3" +
    "\071\ufff3\001\002\000\004\056\221\001\002\000\012\004" +
    "\uffe5\012\207\036\uffe5\054\uffe5\001\002\000\010\004\uffe3" +
    "\036\212\054\uffe3\001\002\000\006\004\uffee\054\uffee\001" +
    "\002\000\034\011\uffa1\021\uffa1\025\uffa1\027\uffa1\033\uffa1" +
    "\034\uffa1\035\uffa1\056\uffa1\064\uffa1\065\uffa1\066\uffa1\067" +
    "\uffa1\070\uffa1\001\002\000\020\013\230\044\103\045\077" +
    "\052\234\056\073\057\076\060\102\001\002\000\014\004" +
    "\uff95\014\uff95\015\uff95\024\uff95\053\uff95\001\002\000\014" +
    "\004\uff99\014\242\015\uff99\024\uff99\053\uff99\001\002\000" +
    "\020\013\230\044\103\045\077\052\234\056\073\057\076" +
    "\060\102\001\002\000\020\036\245\037\246\040\247\041" +
    "\251\042\250\043\244\044\106\001\002\000\014\004\uff97" +
    "\014\uff97\015\uff97\024\uff97\053\uff97\001\002\000\006\004" +
    "\260\015\240\001\002\000\020\013\230\044\103\045\077" +
    "\052\234\056\073\057\076\060\102\001\002\000\022\036" +
    "\245\037\246\040\247\041\251\042\250\043\244\044\106" +
    "\053\107\001\002\000\006\015\240\053\237\001\002\000" +
    "\014\004\uff94\014\uff94\015\uff94\024\uff94\053\uff94\001\002" +
    "\000\020\013\230\044\103\045\077\052\234\056\073\057" +
    "\076\060\102\001\002\000\014\004\uff9a\014\242\015\uff9a" +
    "\024\uff9a\053\uff9a\001\002\000\020\013\230\044\103\045" +
    "\077\052\234\056\073\057\076\060\102\001\002\000\014" +
    "\004\uff98\014\uff98\015\uff98\024\uff98\053\uff98\001\002\000" +
    "\016\044\103\045\077\052\104\056\073\057\076\060\102" +
    "\001\002\000\016\044\103\045\077\052\104\056\073\057" +
    "\076\060\102\001\002\000\016\044\103\045\077\052\104" +
    "\056\073\057\076\060\102\001\002\000\016\044\103\045" +
    "\077\052\104\056\073\057\076\060\102\001\002\000\016" +
    "\044\103\045\077\052\104\056\073\057\076\060\102\001" +
    "\002\000\016\044\103\045\077\052\104\056\073\057\076" +
    "\060\102\001\002\000\016\004\uff90\014\uff90\015\uff90\024" +
    "\uff90\044\106\053\uff90\001\002\000\016\004\uff8f\014\uff8f" +
    "\015\uff8f\024\uff8f\044\106\053\uff8f\001\002\000\016\004" +
    "\uff91\014\uff91\015\uff91\024\uff91\044\106\053\uff91\001\002" +
    "\000\016\004\uff92\014\uff92\015\uff92\024\uff92\044\106\053" +
    "\uff92\001\002\000\016\004\uff93\014\uff93\015\uff93\024\uff93" +
    "\044\106\053\uff93\001\002\000\016\004\uff8e\014\uff8e\015" +
    "\uff8e\024\uff8e\044\106\053\uff8e\001\002\000\034\011\uffa3" +
    "\021\uffa3\025\uffa3\027\uffa3\033\uffa3\034\uffa3\035\uffa3\056" +
    "\uffa3\064\uffa3\065\uffa3\066\uffa3\067\uffa3\070\uffa3\001\002" +
    "\000\034\011\uffd3\021\uffd3\025\uffd3\027\uffd3\033\uffd3\034" +
    "\uffd3\035\uffd3\056\uffd3\064\uffd3\065\uffd3\066\uffd3\067\uffd3" +
    "\070\uffd3\001\002\000\034\011\057\021\054\025\065\027" +
    "\067\033\050\034\056\035\263\056\052\064\062\065\045" +
    "\066\060\067\042\070\041\001\002\000\004\004\264\001" +
    "\002\000\050\007\uffa2\011\uffa2\021\uffa2\022\uffa2\023\uffa2" +
    "\025\uffa2\026\uffa2\027\uffa2\032\uffa2\033\uffa2\034\uffa2\035" +
    "\uffa2\056\uffa2\064\uffa2\065\uffa2\066\uffa2\067\uffa2\070\uffa2" +
    "\071\uffa2\001\002\000\014\004\uff96\014\uff96\015\uff96\024" +
    "\uff96\053\uff96\001\002\000\034\011\uffd3\021\uffd3\025\uffd3" +
    "\027\uffd3\033\uffd3\034\uffd3\035\uffd3\056\uffd3\064\uffd3\065" +
    "\uffd3\066\uffd3\067\uffd3\070\uffd3\001\002\000\034\011\057" +
    "\021\054\025\065\027\067\033\050\034\056\035\270\056" +
    "\052\064\062\065\045\066\060\067\042\070\041\001\002" +
    "\000\004\033\271\001\002\000\020\013\230\044\103\045" +
    "\077\052\234\056\073\057\076\060\102\001\002\000\006" +
    "\004\273\015\240\001\002\000\050\007\uffa0\011\uffa0\021" +
    "\uffa0\022\uffa0\023\uffa0\025\uffa0\026\uffa0\027\uffa0\032\uffa0" +
    "\033\uffa0\034\uffa0\035\uffa0\056\uffa0\064\uffa0\065\uffa0\066" +
    "\uffa0\067\uffa0\070\uffa0\071\uffa0\001\002\000\010\004\uffba" +
    "\015\240\024\275\001\002\000\022\004\uffbb\011\uffc3\056" +
    "\uffc3\064\uffc3\065\uffc3\066\uffc3\067\uffc3\070\uffc3\001\002" +
    "\000\004\004\277\001\002\000\040\007\uffc6\011\uffc6\021" +
    "\uffc6\022\uffc6\023\uffc6\025\uffc6\027\uffc6\033\uffc6\034\uffc6" +
    "\056\uffc6\064\uffc6\065\uffc6\066\uffc6\067\uffc6\070\uffc6\001" +
    "\002\000\040\007\uffd3\011\uffd3\021\uffd3\022\uffd3\023\uffd3" +
    "\025\uffd3\027\uffd3\033\uffd3\034\uffd3\056\uffd3\064\uffd3\065" +
    "\uffd3\066\uffd3\067\uffd3\070\uffd3\001\002\000\040\007\uffc5" +
    "\011\057\021\054\022\uffc5\023\uffc5\025\065\027\067\033" +
    "\050\034\056\056\052\064\062\065\045\066\060\067\042" +
    "\070\041\001\002\000\010\007\uffbf\022\uffbf\023\uffbf\001" +
    "\002\000\010\007\uffbc\022\305\023\306\001\002\000\004" +
    "\007\320\001\002\000\020\013\230\044\103\045\077\052" +
    "\234\056\073\057\076\060\102\001\002\000\004\004\307" +
    "\001\002\000\034\007\uffbe\011\uffbe\021\uffbe\025\uffbe\027" +
    "\uffbe\033\uffbe\034\uffbe\056\uffbe\064\uffbe\065\uffbe\066\uffbe" +
    "\067\uffbe\070\uffbe\001\002\000\034\007\uffd3\011\uffd3\021" +
    "\uffd3\025\uffd3\027\uffd3\033\uffd3\034\uffd3\056\uffd3\064\uffd3" +
    "\065\uffd3\066\uffd3\067\uffd3\070\uffd3\001\002\000\034\007" +
    "\uffbd\011\057\021\054\025\065\027\067\033\050\034\056" +
    "\056\052\064\062\065\045\066\060\067\042\070\041\001" +
    "\002\000\010\004\uffba\015\240\024\313\001\002\000\004" +
    "\004\uffbb\001\002\000\004\004\315\001\002\000\040\007" +
    "\uffc1\011\uffc1\021\uffc1\022\uffc1\023\uffc1\025\uffc1\027\uffc1" +
    "\033\uffc1\034\uffc1\056\uffc1\064\uffc1\065\uffc1\066\uffc1\067" +
    "\uffc1\070\uffc1\001\002\000\040\007\uffd3\011\uffd3\021\uffd3" +
    "\022\uffd3\023\uffd3\025\uffd3\027\uffd3\033\uffd3\034\uffd3\056" +
    "\uffd3\064\uffd3\065\uffd3\066\uffd3\067\uffd3\070\uffd3\001\002" +
    "\000\040\007\uffc0\011\057\021\054\022\uffc0\023\uffc0\025" +
    "\065\027\067\033\050\034\056\056\052\064\062\065\045" +
    "\066\060\067\042\070\041\001\002\000\004\021\321\001" +
    "\002\000\004\004\322\001\002\000\050\007\uffc4\011\uffc4" +
    "\021\uffc4\022\uffc4\023\uffc4\025\uffc4\026\uffc4\027\uffc4\032" +
    "\uffc4\033\uffc4\034\uffc4\035\uffc4\056\uffc4\064\uffc4\065\uffc4" +
    "\066\uffc4\067\uffc4\070\uffc4\071\uffc4\001\002\000\020\011" +
    "\057\056\052\064\062\065\045\066\060\067\042\070\041" +
    "\001\002\000\004\004\325\001\002\000\050\007\uffc2\011" +
    "\uffc2\021\uffc2\022\uffc2\023\uffc2\025\uffc2\026\uffc2\027\uffc2" +
    "\032\uffc2\033\uffc2\034\uffc2\035\uffc2\056\uffc2\064\uffc2\065" +
    "\uffc2\066\uffc2\067\uffc2\070\uffc2\071\uffc2\001\002\000\026" +
    "\044\103\045\077\052\104\056\073\057\076\060\102\061" +
    "\143\066\060\067\042\070\041\001\002\000\004\004\330" +
    "\001\002\000\052\004\uffec\007\uffec\011\uffec\021\uffec\022" +
    "\uffec\023\uffec\025\uffec\026\uffec\027\uffec\032\uffec\033\uffec" +
    "\034\uffec\035\uffec\056\uffec\064\uffec\065\uffec\066\uffec\067" +
    "\uffec\070\uffec\071\uffec\001\002\000\006\004\332\015\240" +
    "\001\002\000\034\007\uffa5\011\uffa5\021\uffa5\025\uffa5\027" +
    "\uffa5\033\uffa5\034\uffa5\056\uffa5\064\uffa5\065\uffa5\066\uffa5" +
    "\067\uffa5\070\uffa5\001\002\000\034\007\uffd3\011\uffd3\021" +
    "\uffd3\025\uffd3\027\uffd3\033\uffd3\034\uffd3\056\uffd3\064\uffd3" +
    "\065\uffd3\066\uffd3\067\uffd3\070\uffd3\001\002\000\034\007" +
    "\335\011\057\021\054\025\065\027\067\033\050\034\056" +
    "\056\052\064\062\065\045\066\060\067\042\070\041\001" +
    "\002\000\004\033\336\001\002\000\004\004\337\001\002" +
    "\000\050\007\uffa4\011\uffa4\021\uffa4\022\uffa4\023\uffa4\025" +
    "\uffa4\026\uffa4\027\uffa4\032\uffa4\033\uffa4\034\uffa4\035\uffa4" +
    "\056\uffa4\064\uffa4\065\uffa4\066\uffa4\067\uffa4\070\uffa4\071" +
    "\uffa4\001\002\000\030\044\103\045\077\052\104\056\073" +
    "\057\076\060\102\061\143\063\170\066\060\067\042\070" +
    "\041\001\002\000\006\053\342\062\174\001\002\000\004" +
    "\004\343\001\002\000\052\004\uff9e\007\uff9e\011\uff9e\021" +
    "\uff9e\022\uff9e\023\uff9e\025\uff9e\026\uff9e\027\uff9e\032\uff9e" +
    "\033\uff9e\034\uff9e\035\uff9e\056\uff9e\064\uff9e\065\uff9e\066" +
    "\uff9e\067\uff9e\070\uff9e\071\uff9e\001\002\000\004\063\345" +
    "\001\002\000\004\053\346\001\002\000\060\004\uff9c\007" +
    "\uff9c\011\uff9c\021\uff9c\022\uff9c\023\uff9c\025\uff9c\026\uff9c" +
    "\027\uff9c\032\uff9c\033\uff9c\034\uff9c\035\uff9c\053\uff9c\054" +
    "\uff9c\056\uff9c\062\uff9c\064\uff9c\065\uff9c\066\uff9c\067\uff9c" +
    "\070\uff9c\071\uff9c\001\002\000\004\063\350\001\002\000" +
    "\004\053\351\001\002\000\060\004\uff9b\007\uff9b\011\uff9b" +
    "\021\uff9b\022\uff9b\023\uff9b\025\uff9b\026\uff9b\027\uff9b\032" +
    "\uff9b\033\uff9b\034\uff9b\035\uff9b\053\uff9b\054\uff9b\056\uff9b" +
    "\062\uff9b\064\uff9b\065\uff9b\066\uff9b\067\uff9b\070\uff9b\071" +
    "\uff9b\001\002\000\004\052\353\001\002\000\006\053\ufff1" +
    "\056\023\001\002\000\004\053\355\001\002\000\004\012" +
    "\024\001\002\000\004\004\357\001\002\000\036\007\ufff5" +
    "\011\ufff5\021\ufff5\025\ufff5\027\ufff5\033\ufff5\034\ufff5\056" +
    "\ufff5\064\ufff5\065\ufff5\066\ufff5\067\ufff5\070\ufff5\071\ufff5" +
    "\001\002\000\036\007\uffd0\011\057\021\054\025\065\027" +
    "\067\033\050\034\056\056\052\064\062\065\045\066\060" +
    "\067\042\070\041\071\362\001\002\000\004\007\366\001" +
    "\002\000\026\044\103\045\077\052\104\056\073\057\076" +
    "\060\102\061\143\066\060\067\042\070\041\001\002\000" +
    "\036\007\uffd0\011\057\021\054\025\065\027\067\033\050" +
    "\034\056\056\052\064\062\065\045\066\060\067\042\070" +
    "\041\071\362\001\002\000\004\007\uffd2\001\002\000\004" +
    "\007\uffd1\001\002\000\004\006\367\001\002\000\004\004" +
    "\370\001\002\000\012\002\ufff4\005\ufff4\006\ufff4\010\ufff4" +
    "\001\002\000\004\002\ufffb\001\002\000\004\002\001\001" +
    "\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\370\000\006\002\004\007\005\001\001\000\002\001" +
    "\001\000\002\001\001\000\014\003\010\004\011\005\007" +
    "\006\013\012\012\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\014\003\370\004\011\005\007" +
    "\006\013\012\012\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\013\020\014\021\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\016\024\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\016\032\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\060\035\001" +
    "\001\000\004\031\036\001\001\000\030\027\037\032\062" +
    "\033\045\037\065\041\046\042\042\043\054\044\043\045" +
    "\050\046\063\047\052\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\022\021\230\022\100\023\074\024\077\050\330\051" +
    "\231\052\226\053\225\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\022\021\230\022\100\023" +
    "\074\024\077\050\273\051\231\052\226\053\225\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\015\204\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\011\136\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\016\070" +
    "\001\001\000\002\001\001\000\012\021\073\022\100\023" +
    "\074\024\077\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\023\121\024" +
    "\077\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\023\116\024\077\001\001\000\012\021" +
    "\104\022\100\023\074\024\077\001\001\000\002\001\001" +
    "\000\010\022\107\023\074\024\077\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\023\115\024\077\001\001" +
    "\000\006\023\114\024\077\001\001\000\006\023\113\024" +
    "\077\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\022\120\023\074\024" +
    "\077\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\021\123\022\100\023\074\024\077\001\001\000\004\030" +
    "\124\001\001\000\002\001\001\000\012\021\126\022\100" +
    "\023\074\024\077\001\001\000\002\001\001\000\004\071" +
    "\130\001\001\000\004\031\131\001\001\000\030\027\037" +
    "\032\062\033\045\037\065\041\046\042\042\043\054\044" +
    "\043\045\050\046\063\047\052\001\001\000\004\054\133" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\016\020\143\021\140\022\100\023\074\024\077" +
    "\027\141\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\056\145\001\001\000\004\035\147\001\001\000\014\021" +
    "\153\022\100\023\074\024\077\055\155\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\070\161\001\001\000\012\021\160\022\100\023" +
    "\074\024\077\001\001\000\002\001\001\000\004\031\162" +
    "\001\001\000\030\027\037\032\062\033\045\037\065\041" +
    "\046\042\042\043\054\044\043\045\050\046\063\047\052" +
    "\001\001\000\004\067\164\001\001\000\004\031\165\001" +
    "\001\000\030\027\037\032\062\033\045\037\065\041\046" +
    "\042\042\043\054\044\043\045\050\046\063\047\052\001" +
    "\001\000\020\020\170\021\140\022\100\023\074\024\077" +
    "\027\141\034\171\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\016\020\175" +
    "\021\140\022\100\023\074\024\077\027\141\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\017\207" +
    "\001\001\000\002\001\001\000\004\026\210\001\001\000" +
    "\002\001\001\000\016\020\212\021\140\022\100\023\074" +
    "\024\077\027\141\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\017\221\001\001\000\004\026" +
    "\222\001\001\000\002\001\001\000\004\074\265\001\001" +
    "\000\022\021\230\022\100\023\074\024\077\050\232\051" +
    "\231\052\226\053\225\001\001\000\002\001\001\000\002" +
    "\001\001\000\016\021\230\022\100\023\074\024\077\051" +
    "\264\053\225\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\022\021\234\022\100\023\074\024" +
    "\077\050\235\051\231\052\226\053\225\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\020\021" +
    "\230\022\100\023\074\024\077\051\231\052\240\053\225" +
    "\001\001\000\002\001\001\000\016\021\230\022\100\023" +
    "\074\024\077\051\242\053\225\001\001\000\002\001\001" +
    "\000\012\021\256\022\100\023\074\024\077\001\001\000" +
    "\012\021\255\022\100\023\074\024\077\001\001\000\012" +
    "\021\254\022\100\023\074\024\077\001\001\000\012\021" +
    "\253\022\100\023\074\024\077\001\001\000\012\021\252" +
    "\022\100\023\074\024\077\001\001\000\012\021\251\022" +
    "\100\023\074\024\077\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\073\260\001\001\000\004" +
    "\031\261\001\001\000\030\027\037\032\062\033\045\037" +
    "\065\041\046\042\042\043\054\044\043\045\050\046\063" +
    "\047\052\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\031\266\001\001\000\030\027\037" +
    "\032\062\033\045\037\065\041\046\042\042\043\054\044" +
    "\043\045\050\046\063\047\052\001\001\000\002\001\001" +
    "\000\022\021\230\022\100\023\074\024\077\050\271\051" +
    "\231\052\226\053\225\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\010\275\001\001\000\004\064\322\001" +
    "\001\000\002\001\001\000\004\062\277\001\001\000\004" +
    "\031\300\001\001\000\032\027\037\032\062\033\045\037" +
    "\065\041\046\042\042\043\054\044\043\045\050\046\063" +
    "\047\052\063\301\001\001\000\004\057\302\001\001\000" +
    "\004\040\303\001\001\000\002\001\001\000\022\021\230" +
    "\022\100\023\074\024\077\050\311\051\231\052\226\053" +
    "\225\001\001\000\002\001\001\000\004\066\307\001\001" +
    "\000\004\031\310\001\001\000\030\027\037\032\062\033" +
    "\045\037\065\041\046\042\042\043\054\044\043\045\050" +
    "\046\063\047\052\001\001\000\004\010\313\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\065\315\001\001" +
    "\000\004\031\316\001\001\000\030\027\037\032\062\033" +
    "\045\037\065\041\046\042\042\043\054\044\043\045\050" +
    "\046\063\047\052\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\014\027\037\033\045\037\065" +
    "\043\323\047\052\001\001\000\002\001\001\000\002\001" +
    "\001\000\016\020\326\021\140\022\100\023\074\024\077" +
    "\027\141\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\072\332\001\001\000\004\031\333" +
    "\001\001\000\030\027\037\032\062\033\045\037\065\041" +
    "\046\042\042\043\054\044\043\045\050\046\063\047\052" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\020\020\170\021\140\022\100\023\074\024\077" +
    "\027\141\034\340\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\013\353\014\021" +
    "\001\001\000\002\001\001\000\004\016\355\001\001\000" +
    "\002\001\001\000\004\061\357\001\001\000\032\027\037" +
    "\032\362\033\045\036\360\037\065\041\046\042\042\043" +
    "\054\044\043\045\050\046\063\047\052\001\001\000\002" +
    "\001\001\000\016\020\364\021\140\022\100\023\074\024" +
    "\077\027\141\001\001\000\032\027\037\032\362\033\045" +
    "\036\363\037\065\041\046\042\042\043\054\044\043\045" +
    "\050\046\063\047\052\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$SintaxisVisual$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$SintaxisVisual$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$SintaxisVisual$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    private Symbol s;
    private VisualSemantica sem = new VisualSemantica();
    private boolean error = false;
    private MetodoVisual actual;

    public void syntax_error(Symbol sym){
        System.out.println("\n" + sym.value + sym.sym);
        System.out.println("Error Sintactico en la letra: " + sym.value + "   <linea>: "  + (sym.right + 1) + "    <columna>: " + (sym.left + 1) + "\n");
    }

    public void unrecovered_syntax_error(Symbol sym) throws java.lang.Exception{
        System.out.println("\n" + sym.value + sym.sym);
        System.out.println("Error Sintactico en la letra: " + sym.value + "   <linea>: "  + (sym.right + 1) + "    <columna>: " + (sym.left + 1) + "\n");
    }

    public VisualSemantica getVisual(){
            return sem;
    }

    public Symbol getS(){
        return this.cur_token;
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$SintaxisVisual$actions {
  private final SintaxisVisual parser;

  /** Constructor */
  CUP$SintaxisVisual$actions(SintaxisVisual parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$SintaxisVisual$do_action_part00000000(
    int                        CUP$SintaxisVisual$act_num,
    java_cup.runtime.lr_parser CUP$SintaxisVisual$parser,
    java.util.Stack            CUP$SintaxisVisual$stack,
    int                        CUP$SintaxisVisual$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$SintaxisVisual$result;

      /* select the action based on the action number */
      switch (CUP$SintaxisVisual$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= VISUAL EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-1)).value;
		RESULT = start_val;
              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$SintaxisVisual$parser.done_parsing();
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // VISUAL ::= ESP STATESM 
            {
              Object RESULT =null;
		sem.mostrarMetodos();
              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("VISUAL",0, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // ESP ::= espacio 
            {
              Object RESULT =null;

              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("ESP",5, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // ESP ::= 
            {
              Object RESULT =null;

              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("ESP",5, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // PUBLIC ::= publicc 
            {
              Object RESULT =null;

              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("PUBLIC",8, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // PUBLIC ::= 
            {
              Object RESULT =null;

              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("PUBLIC",8, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // STATESM ::= STATEM STATESM 
            {
              Object RESULT =null;

              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("STATESM",1, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // STATESM ::= 
            {
              Object RESULT =null;

              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("STATESM",1, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // STATEM ::= SUB 
            {
              Object RESULT =null;

              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("STATEM",2, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // STATEM ::= FUNCTION 
            {
              Object RESULT =null;

              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("STATEM",2, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // NT$0 ::= 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-4)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-4)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-4)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-2)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-2)).right;
		List<VariableVisual> e2 = (List<VariableVisual>)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-2)).value;
VisualSemantica.AMBITO += 1;
                                        MetodoVisual met = new MetodoVisual(e1, e2, VisualSemantica.VOID);
                                        actual = met;
                                        sem.addListVar(e2);
                                        if(!sem.addMetodo(met)){syntax_error(getS());}
              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("NT$0",46, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // SUB ::= PUBLIC subb id para LISTPARAMM parc espacio NT$0 STATEMENTS endd subb espacio 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-4)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-9)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-9)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-9)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-7)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-7)).right;
		List<VariableVisual> e2 = (List<VariableVisual>)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-7)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-3)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-3)).right;
		List<Triplete> e3 = (List<Triplete>)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-3)).value;
		sem.eliminarAmbito(VisualSemantica.AMBITO);
                                        VisualSemantica.AMBITO -= 1;
                                        actual.getTripletes().addAll(e3);
              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("SUB",3, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-11)), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // NT$1 ::= 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-5)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-5)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-5)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-3)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-3)).right;
		List<VariableVisual> e2 = (List<VariableVisual>)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-3)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-1)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-1)).right;
		String e3 = (String)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-1)).value;
VisualSemantica.AMBITO += 1;
                                        MetodoVisual met = new MetodoVisual(e1, e2, e3);
                                        actual = met; met.setVisual(new VariableVisual(e1, VisualSemantica.AMBITO, e3,
                                        new AsignarValor(new TerminalOperator(e1), null, e3)));
                                        sem.addListVar(e2);
                                        if(!sem.addMetodo(met)){syntax_error(getS());}
              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("NT$1",47, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // FUNCTION ::= PUBLIC functionn id para LISTPARAMM parc TYPE espacio NT$1 STATEMENTSF endd functionn espacio 
            {
              Object RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-4)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-10)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-10)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-10)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-8)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-8)).right;
		List<VariableVisual> e2 = (List<VariableVisual>)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-8)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-6)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-6)).right;
		String e3 = (String)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-6)).value;
		int e4left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-3)).left;
		int e4right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-3)).right;
		List<Triplete> e4 = (List<Triplete>)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-3)).value;
		sem.eliminarAmbito(VisualSemantica.AMBITO);
                                        VisualSemantica.AMBITO -= 1;
                                        actual.getTripletes().addAll(e4);
              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("FUNCTION",4, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-12)), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // DEFVAR ::= dimm LISTVAR espacio 
            {
              List<Triplete> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-1)).right;
		List<VariableVisual> e1 = (List<VariableVisual>)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-1)).value;
		if(VisualSemantica.tienenTipos(e1)&&sem.addListVar(e1)){}
                                        else{syntax_error(getS());} RESULT = VisualSemantica.devolverTrip(e1);
              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("DEFVAR",37, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // LISTPARAMM ::= LISTPARAM 
            {
              List<VariableVisual> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()).right;
		List<VariableVisual> e1 = (List<VariableVisual>)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.peek()).value;
		RESULT = e1;
              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("LISTPARAMM",9, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // LISTPARAMM ::= 
            {
              List<VariableVisual> RESULT =null;
		RESULT = new ArrayList<>();
              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("LISTPARAMM",9, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // LISTPARAM ::= LISTPARAM coma id TYPE 
            {
              List<VariableVisual> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-3)).right;
		List<VariableVisual> e1 = (List<VariableVisual>)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-1)).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-1)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()).right;
		String e3 = (String)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.peek()).value;
		e1.add(new VariableVisual(e2, (VisualSemantica.AMBITO + 1), e3, new TerminalOperator(e2)));
                                        RESULT = e1;
              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("LISTPARAM",10, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // LISTPARAM ::= id TYPE 
            {
              List<VariableVisual> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-1)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.peek()).value;
		List<VariableVisual> var = new ArrayList<>();
                        var.add(new VariableVisual(e1, (VisualSemantica.AMBITO + 1), e2, new TerminalOperator(e1)));
                        RESULT = var;
              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("LISTPARAM",10, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // LISTVAR ::= LISTVAR coma id TYPEE DEF 
            {
              List<VariableVisual> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-4)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-4)).right;
		List<VariableVisual> e1 = (List<VariableVisual>)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-4)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-2)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-2)).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-2)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-1)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-1)).right;
		String e3 = (String)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-1)).value;
		int e4left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()).left;
		int e4right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()).right;
		OperacionVisual e4 = (OperacionVisual)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.peek()).value;
		String tipo = VariableVisual.verificarTipo(e3, e4); VariableVisual va;
                        if(e4!=null){va = new VariableVisual(e2, VisualSemantica.AMBITO, tipo, 
                        new AsignarValor(new TerminalOperator(e2), e4.getTriplete(), OperacionVisual.obtenerTipo(e3)));
                        va.getTripletes().addAll(e4.mostrarTripletes());
                        }else{va = new VariableVisual(e2, VisualSemantica.AMBITO, tipo, 
                        new AsignarValor(new TerminalOperator(e2), null,OperacionVisual.obtenerTipo(e3)));}
                        va.setDefinido(e4 != null); va.setAstipo(e3 != null && e4 == null);
                        if(tipo == null && e3 != null && e4 != null){
                                syntax_error(getS());
                        } else if(e3 != null && e4 == null){
                                e1.add(va);
                                VisualSemantica.cambiarT(e1, e3);
                        } else {
                                e1.add(va);
                        } RESULT = e1;
              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("LISTVAR",11, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-4)), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // LISTVAR ::= id TYPEE DEF 
            {
              List<VariableVisual> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-1)).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-1)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()).right;
		OperacionVisual e3 = (OperacionVisual)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.peek()).value;
		List<VariableVisual> vars = new ArrayList<>(); String tipo = VariableVisual.verificarTipo(e2, e3); VariableVisual va;
                        if(e3!=null){va = new VariableVisual(e1, VisualSemantica.AMBITO, tipo, 
                        new AsignarValor(new TerminalOperator(e1), e3.getTriplete(),e2));
                        va.getTripletes().addAll(e3.mostrarTripletes());
                        }else{va = new VariableVisual(e1, VisualSemantica.AMBITO, tipo, 
                        new AsignarValor(new TerminalOperator(e1), null,e2));}
                        va.setDefinido(e3 != null); va.setAstipo(e2 != null && e3 == null);
                        if(tipo == null && e2 != null && e3 != null){
                                syntax_error(getS());
                        } vars.add(va); RESULT = vars;
              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("LISTVAR",11, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // ASIGVAR ::= id igual EXPR espacio 
            {
              List<Triplete> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-3)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-1)).right;
		OperacionVisual e2 = (OperacionVisual)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-1)).value;
		VariableVisual var = sem.existeVar(new VariableVisual(e1, VisualSemantica.AMBITO, null));
                                List<Triplete> trip = new ArrayList<>();
                                if(var==null || !var.getTipo().contains(e2.getTipo())){syntax_error(getS());}
                                else{trip.addAll(e2.mostrarTripletes()); trip.add(new AsignarValor(new TerminalOperator(e1), e2.getTriplete(), null));}
                                RESULT = trip;
              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("ASIGVAR",29, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // TYPE ::= ass integerr 
            {
              String RESULT =null;
		RESULT = VisualSemantica.INT;
              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("TYPE",12, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // TYPE ::= ass charr 
            {
              String RESULT =null;
		RESULT = VisualSemantica.CHAR;
              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("TYPE",12, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // TYPE ::= ass decimall 
            {
              String RESULT =null;
		RESULT = VisualSemantica.FLOAT;
              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("TYPE",12, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // TYPEE ::= ass integerr 
            {
              String RESULT =null;
		RESULT = VisualSemantica.INT;
              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("TYPEE",13, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // TYPEE ::= ass charr 
            {
              String RESULT =null;
		RESULT = VisualSemantica.CHAR;
              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("TYPEE",13, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // TYPEE ::= ass decimall 
            {
              String RESULT =null;
		RESULT = VisualSemantica.FLOAT;
              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("TYPEE",13, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // TYPEE ::= 
            {
              String RESULT =null;
		RESULT = null;
              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("TYPEE",13, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // DEF ::= igual EXPR 
            {
              OperacionVisual RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()).right;
		OperacionVisual e1 = (OperacionVisual)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.peek()).value;
		RESULT = e1;
              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("DEF",20, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // DEF ::= 
            {
              OperacionVisual RESULT =null;
		RESULT = null;
              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("DEF",20, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // OPERACION_A ::= OPERACION_A mas OPERACION_M 
            {
              OperacionVisual RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-2)).right;
		OperacionVisual e1 = (OperacionVisual)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()).right;
		OperacionVisual e2 = (OperacionVisual)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.peek()).value;
		if(e1!=null && e2 !=null){RESULT = new OperacionVisual(e1, e2,
                        new SumOperator(null, e1.getTriplete(), e2.getTriplete(), OperacionVisual.obtenerTipo(e1, e2)));};
              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("OPERACION_A",15, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // OPERACION_A ::= OPERACION_M menos OPERACION_M 
            {
              OperacionVisual RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-2)).right;
		OperacionVisual e1 = (OperacionVisual)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()).right;
		OperacionVisual e2 = (OperacionVisual)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.peek()).value;
		if(e1!=null && e2 !=null){RESULT = new OperacionVisual(e1, e2,
                        new RestOperator(null, e1.getTriplete(), e2.getTriplete(), OperacionVisual.obtenerTipo(e1, e2)));}
              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("OPERACION_A",15, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // OPERACION_A ::= OPERACION_M 
            {
              OperacionVisual RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()).right;
		OperacionVisual e1 = (OperacionVisual)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.peek()).value;
		RESULT = e1;
              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("OPERACION_A",15, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // OPERACION_M ::= OPERACION_M por OPERACION_U 
            {
              OperacionVisual RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-2)).right;
		OperacionVisual e1 = (OperacionVisual)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()).right;
		OperacionVisual e2 = (OperacionVisual)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.peek()).value;
		if(e1!=null && e2 !=null){RESULT = new OperacionVisual(e1, e2,
                                new PorOperator(null, e1.getTriplete(), e2.getTriplete(), OperacionVisual.obtenerTipo(e1, e2)));}
              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("OPERACION_M",16, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // OPERACION_M ::= OPERACION_M div OPERACION_U 
            {
              OperacionVisual RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-2)).right;
		OperacionVisual e1 = (OperacionVisual)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()).right;
		OperacionVisual e2 = (OperacionVisual)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.peek()).value;
		if(e1!=null && e2 !=null){RESULT = new OperacionVisual(e1, e2,
                                new DivOperator(null, e1.getTriplete(), e2.getTriplete(), OperacionVisual.obtenerTipo(e1, e2)));}
              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("OPERACION_M",16, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // OPERACION_M ::= OPERACION_M mod OPERACION_U 
            {
              OperacionVisual RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-2)).right;
		OperacionVisual e1 = (OperacionVisual)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()).right;
		OperacionVisual e2 = (OperacionVisual)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.peek()).value;
		if(e1!=null && e2 !=null){RESULT = new OperacionVisual(e1, e2,
                                new ModOperator(null, e1.getTriplete(), e2.getTriplete(), OperacionVisual.obtenerTipo(e1, e2)));}
              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("OPERACION_M",16, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // OPERACION_M ::= OPERACION_U 
            {
              OperacionVisual RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()).right;
		OperacionVisual e1 = (OperacionVisual)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.peek()).value;
		RESULT = e1;
              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("OPERACION_M",16, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // OPERACION_U ::= menos OPERACION_U 
            {
              OperacionVisual RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()).right;
		OperacionVisual e1 = (OperacionVisual)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.peek()).value;
		RESULT = new OperacionVisual(new OperacionVisual(PythonSemantica.INT, new TerminalOperator("0")),
                        e1, new RestOperator(null, new TerminalOperator("0"), e1.getTriplete(), OperacionVisual.obtenerTipo(e1)));
              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("OPERACION_U",17, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // OPERACION_U ::= mas OPERACION_U 
            {
              OperacionVisual RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()).right;
		OperacionVisual e1 = (OperacionVisual)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.peek()).value;
		RESULT = e1;
              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("OPERACION_U",17, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // OPERACION_U ::= ATOM 
            {
              OperacionVisual RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()).right;
		OperacionVisual e1 = (OperacionVisual)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.peek()).value;
		RESULT = e1;
              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("OPERACION_U",17, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // ATOM ::= id 
            {
              OperacionVisual RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.peek()).value;
		VariableVisual var = sem.existeVar(new VariableVisual(e1, VisualSemantica.AMBITO, null)); 
                if(var==null){syntax_error(getS());} else {
                RESULT = new OperacionVisual(var.getTipo(), new TerminalOperator(e1));
                }
              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("ATOM",18, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // ATOM ::= entero 
            {
              OperacionVisual RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.peek()).value;
		RESULT = new OperacionVisual(VisualSemantica.INT, new TerminalOperator(e1));
              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("ATOM",18, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // ATOM ::= decimal 
            {
              OperacionVisual RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.peek()).value;
		RESULT = new OperacionVisual(VisualSemantica.FLOAT, new TerminalOperator(e1));
              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("ATOM",18, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // ATOM ::= para OPERACION_A parc 
            {
              OperacionVisual RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-1)).right;
		OperacionVisual e1 = (OperacionVisual)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-1)).value;
		RESULT = e1;
              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("ATOM",18, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // STATEMENTS ::= STATEMENTS STATEMENT 
            {
              List<Triplete> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-1)).right;
		List<Triplete> e1 = (List<Triplete>)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()).right;
		List<Triplete> e2 = (List<Triplete>)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.peek()).value;
		e1.addAll(e2); RESULT = e1;
              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("STATEMENTS",23, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // STATEMENTS ::= 
            {
              List<Triplete> RESULT =null;
		RESULT = new ArrayList<>();
              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("STATEMENTS",23, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // STATEMENTSF ::= STATEMENT STATEMENTSF 
            {
              List<Triplete> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-1)).right;
		List<Triplete> e1 = (List<Triplete>)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()).right;
		List<Triplete> e2 = (List<Triplete>)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.peek()).value;
		e1.addAll(e2); RESULT = e1;
              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("STATEMENTSF",28, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // STATEMENTSF ::= returnn EXPR 
            {
              List<Triplete> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()).right;
		OperacionVisual e1 = (OperacionVisual)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.peek()).value;
		List<Triplete> tri = new ArrayList<>();
                if(e1 == null || !actual.getTIPO().contains(e1.getTipo())){syntax_error(getS());}
                else{
                tri.addAll(e1.mostrarTripletes());
                tri.add(new Return(e1.getTriplete()));}
                RESULT = tri;
              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("STATEMENTSF",28, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // STATEMENTSF ::= 
            {
              List<Triplete> RESULT =null;
		RESULT = new ArrayList<>();
              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("STATEMENTSF",28, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // EXPR ::= OPERACION_A 
            {
              OperacionVisual RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()).right;
		OperacionVisual e1 = (OperacionVisual)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.peek()).value;
		RESULT = e1;
              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("EXPR",14, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // EXPR ::= INPUT 
            {
              OperacionVisual RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()).right;
		OperacionVisual e1 = (OperacionVisual)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.peek()).value;
		RESULT = e1;
              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("EXPR",14, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // EXPR ::= character 
            {
              OperacionVisual RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.peek()).value;
		RESULT = new OperacionVisual(VisualSemantica.CHAR, new TerminalOperator(e1));
              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("EXPR",14, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // STATEMENT ::= IF_ELSE 
            {
              List<Triplete> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()).right;
		List<Triplete> e1 = (List<Triplete>)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.peek()).value;
		RESULT = e1;
              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("STATEMENT",24, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // STATEMENT ::= SELECT 
            {
              List<Triplete> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()).right;
		List<Triplete> e1 = (List<Triplete>)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.peek()).value;
		RESULT = e1;
              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("STATEMENT",24, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // STATEMENT ::= FOR 
            {
              List<Triplete> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()).right;
		List<Triplete> e1 = (List<Triplete>)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.peek()).value;
		RESULT = e1;
              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("STATEMENT",24, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // STATEMENT ::= WHILE 
            {
              List<Triplete> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()).right;
		List<Triplete> e1 = (List<Triplete>)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.peek()).value;
		RESULT = e1;
              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("STATEMENT",24, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // STATEMENT ::= DO_WHILE 
            {
              List<Triplete> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()).right;
		List<Triplete> e1 = (List<Triplete>)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.peek()).value;
		RESULT = e1;
              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("STATEMENT",24, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // STATEMENT ::= STATEMENTLINE 
            {
              List<Triplete> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()).right;
		List<Triplete> e1 = (List<Triplete>)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.peek()).value;
		RESULT = e1;
              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("STATEMENT",24, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // NT$2 ::= 
            {
              List<Triplete> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-2)).right;
		CondicionPrograma e1 = (CondicionPrograma)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-2)).value;
VisualSemantica.AMBITO += 1;
              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("NT$2",48, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // NT$3 ::= 
            {
              List<Triplete> RESULT =(List<Triplete>) ((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-1)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-4)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-4)).right;
		CondicionPrograma e1 = (CondicionPrograma)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-4)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()).right;
		List<Triplete> e2 = (List<Triplete>)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.peek()).value;
sem.eliminarAmbito(VisualSemantica.AMBITO); VisualSemantica.AMBITO -= 1;
              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("NT$3",49, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // IF_ELSE ::= iff CONDICION THEN espacio NT$2 STATEMENTS NT$3 ELSE_IF ELSE endd iff espacio 
            {
              List<Triplete> RESULT =null;
              // propagate RESULT from NT$3
                RESULT = (List<Triplete>) ((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-5)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-10)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-10)).right;
		CondicionPrograma e1 = (CondicionPrograma)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-10)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-6)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-6)).right;
		List<Triplete> e2 = (List<Triplete>)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-6)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-4)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-4)).right;
		Else_Operator e3 = (Else_Operator)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-4)).value;
		int e4left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-3)).left;
		int e4right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-3)).right;
		List<Triplete> e4 = (List<Triplete>)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-3)).value;
		e3.agregarIf(e1, e2); RESULT = e3.juntarTripletes(e4);
              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("IF_ELSE",31, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-11)), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // NT$4 ::= 
            {
              List<Triplete> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-1)).right;
		CondicionPrograma e1 = (CondicionPrograma)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-1)).value;
VisualSemantica.AMBITO += 1;
              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("NT$4",50, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // IF_ELSE ::= iff CONDICION thenn NT$4 STATEMENTLINE espacio 
            {
              List<Triplete> RESULT =null;
              // propagate RESULT from NT$4
                RESULT = (List<Triplete>) ((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-2)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-4)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-4)).right;
		CondicionPrograma e1 = (CondicionPrograma)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-4)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-1)).right;
		List<Triplete> e2 = (List<Triplete>)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-1)).value;
		sem.eliminarAmbito(VisualSemantica.AMBITO); VisualSemantica.AMBITO -= 1; 
                RESULT = Else_Operator.IFSIMPLE(e1, e2);
              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("IF_ELSE",31, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-5)), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // NT$5 ::= 
            {
              Else_Operator RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-4)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-4)).right;
		Else_Operator e1 = (Else_Operator)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-4)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-2)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-2)).right;
		CondicionPrograma e2 = (CondicionPrograma)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-2)).value;
VisualSemantica.AMBITO += 1;
              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("NT$5",51, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // ELSE_IF ::= ELSE_IF elseiff CONDICION THEN espacio NT$5 STATEMENTS 
            {
              Else_Operator RESULT =null;
              // propagate RESULT from NT$5
                RESULT = (Else_Operator) ((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-1)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-6)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-6)).right;
		Else_Operator e1 = (Else_Operator)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-6)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-4)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-4)).right;
		CondicionPrograma e2 = (CondicionPrograma)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-4)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()).right;
		List<Triplete> e3 = (List<Triplete>)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.peek()).value;
		sem.eliminarAmbito(VisualSemantica.AMBITO); VisualSemantica.AMBITO -= 1; RESULT = e1.agregarElseIf(e2, e3);
              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("ELSE_IF",45, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-6)), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // ELSE_IF ::= 
            {
              Else_Operator RESULT =null;
		RESULT = new Else_Operator();
              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("ELSE_IF",45, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // NT$6 ::= 
            {
              List<Triplete> RESULT =null;
VisualSemantica.AMBITO += 1;
              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("NT$6",52, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // ELSE ::= elsee espacio NT$6 STATEMENTS 
            {
              List<Triplete> RESULT =null;
              // propagate RESULT from NT$6
                RESULT = (List<Triplete>) ((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-1)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()).right;
		List<Triplete> e1 = (List<Triplete>)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.peek()).value;
		sem.eliminarAmbito(VisualSemantica.AMBITO); VisualSemantica.AMBITO -= 1;
        RESULT = e1;
              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("ELSE",30, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // ELSE ::= 
            {
              List<Triplete> RESULT =null;
		RESULT = new ArrayList<>();
              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("ELSE",30, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // THEN ::= thenn 
            {
              Object RESULT =null;

              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("THEN",6, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // THEN ::= 
            {
              Object RESULT =null;

              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("THEN",6, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // STATEMENTLINE ::= CONSOLEWRITE 
            {
              List<Triplete> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()).right;
		List<Triplete> e1 = (List<Triplete>)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.peek()).value;
		RESULT = e1;
              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("STATEMENTLINE",33, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // STATEMENTLINE ::= INPUT 
            {
              List<Triplete> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()).right;
		OperacionVisual e1 = (OperacionVisual)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.peek()).value;
		AsignarValor vl = new AsignarValor(new AsignarTemporal(null, null, e1.getTipo()),null
                ,OperacionVisual.obtenerTipo(e1)); 
                List<Triplete> tri = new ArrayList<>(); tri.add(vl); 
                tri.add(new AsignarValor(vl.getOperando1(), e1.getTriplete(), null)); RESULT = tri;
              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("STATEMENTLINE",33, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // STATEMENTLINE ::= DEFVAR 
            {
              List<Triplete> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()).right;
		List<Triplete> e1 = (List<Triplete>)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.peek()).value;
		RESULT = e1;
              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("STATEMENTLINE",33, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // STATEMENTLINE ::= ASIGVAR 
            {
              List<Triplete> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()).right;
		List<Triplete> e1 = (List<Triplete>)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.peek()).value;
		RESULT = e1;
              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("STATEMENTLINE",33, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // SELECT ::= selectt CA EXPR espacio CASES CASEELSE endd selectt espacio 
            {
              List<Triplete> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-6)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-6)).right;
		OperacionVisual e1 = (OperacionVisual)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-6)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-4)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-4)).right;
		CaseVisual e2 = (CaseVisual)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-4)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-3)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-3)).right;
		List<Triplete> e3 = (List<Triplete>)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-3)).value;
		RESULT = e2.agregarDefault(e1, e3);
              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("SELECT",32, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-8)), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // CA ::= casee 
            {
              Object RESULT =null;

              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("CA",7, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // CA ::= 
            {
              Object RESULT =null;

              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("CA",7, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // NT$7 ::= 
            {
              List<Triplete> RESULT =null;
VisualSemantica.AMBITO += 1;
              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("NT$7",53, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // CASEELSE ::= casee elsee espacio NT$7 STATEMENTS 
            {
              List<Triplete> RESULT =null;
              // propagate RESULT from NT$7
                RESULT = (List<Triplete>) ((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-1)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()).right;
		List<Triplete> e1 = (List<Triplete>)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.peek()).value;
		sem.eliminarAmbito(VisualSemantica.AMBITO); VisualSemantica.AMBITO -= 1; RESULT = e1;
              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("CASEELSE",27, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-4)), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // CASEELSE ::= 
            {
              List<Triplete> RESULT =null;

              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("CASEELSE",27, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // NT$8 ::= 
            {
              CaseVisual RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-3)).right;
		CaseVisual e1 = (CaseVisual)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-1)).right;
		List<OperacionVisual> e2 = (List<OperacionVisual>)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-1)).value;
VisualSemantica.AMBITO += 1;
              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("NT$8",54, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // CASES ::= CASES casee LIST_CASE espacio NT$8 STATEMENTS 
            {
              CaseVisual RESULT =null;
              // propagate RESULT from NT$8
                RESULT = (CaseVisual) ((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-1)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-5)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-5)).right;
		CaseVisual e1 = (CaseVisual)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-5)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-3)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-3)).right;
		List<OperacionVisual> e2 = (List<OperacionVisual>)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-3)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()).right;
		List<Triplete> e3 = (List<Triplete>)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.peek()).value;
		sem.eliminarAmbito(VisualSemantica.AMBITO); VisualSemantica.AMBITO -= 1; RESULT = e1.agregarCase(e2, e3);
              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("CASES",44, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-5)), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // CASES ::= 
            {
              CaseVisual RESULT =null;
		RESULT = new CaseVisual();
              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("CASES",44, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // LIST_CASE ::= LIST_CASE coma OPERACION_A 
            {
              List<OperacionVisual> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-2)).right;
		List<OperacionVisual> e1 = (List<OperacionVisual>)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()).right;
		OperacionVisual e2 = (OperacionVisual)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.peek()).value;
		e1.add(e2); RESULT = e1;
              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("LIST_CASE",43, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // LIST_CASE ::= OPERACION_A 
            {
              List<OperacionVisual> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()).right;
		OperacionVisual e1 = (OperacionVisual)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.peek()).value;
		List<OperacionVisual> op = new ArrayList<>(); op.add(e1); RESULT =op;
              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("LIST_CASE",43, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // NT$9 ::= 
            {
              List<Triplete> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-7)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-7)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-7)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-6)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-6)).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-6)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-4)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-4)).right;
		OperacionVisual e3 = (OperacionVisual)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-4)).value;
		int e4left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-2)).left;
		int e4right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-2)).right;
		OperacionVisual e4 = (OperacionVisual)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-2)).value;
		int e5left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-1)).left;
		int e5right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-1)).right;
		OperacionVisual e5 = (OperacionVisual)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-1)).value;
VisualSemantica.AMBITO += 1;
              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("NT$9",55, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // FOR ::= forr id TYPE igual OPERACION_A to OPERACION_A STEP espacio NT$9 STATEMENTS nextt ID espacio 
            {
              List<Triplete> RESULT =null;
              // propagate RESULT from NT$9
                RESULT = (List<Triplete>) ((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-4)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-12)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-12)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-12)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-11)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-11)).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-11)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-9)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-9)).right;
		OperacionVisual e3 = (OperacionVisual)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-9)).value;
		int e4left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-7)).left;
		int e4right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-7)).right;
		OperacionVisual e4 = (OperacionVisual)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-7)).value;
		int e5left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-6)).left;
		int e5right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-6)).right;
		OperacionVisual e5 = (OperacionVisual)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-6)).value;
		int e6left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-3)).left;
		int e6right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-3)).right;
		List<Triplete> e6 = (List<Triplete>)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-3)).value;
		int e7left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-1)).left;
		int e7right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-1)).right;
		String e7 = (String)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-1)).value;
		sem.eliminarAmbito(VisualSemantica.AMBITO); VisualSemantica.AMBITO -= 1;
                if(e7!=null && !e1.equals(e1)){syntax_error(getS());} else{RESULT = Else_Operator.FORV(e1, e2, e3, e4, e5, e6);}
              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("FOR",36, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-13)), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // ID ::= id 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.peek()).value;
		RESULT = e1;
              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("ID",42, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // ID ::= 
            {
              String RESULT =null;
		RESULT = null;
              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("ID",42, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // STEP ::= stepp OPERACION_A 
            {
              OperacionVisual RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()).right;
		OperacionVisual e1 = (OperacionVisual)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.peek()).value;
		RESULT = e1;
              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("STEP",22, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // NT$10 ::= 
            {
              List<Triplete> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-1)).right;
		CondicionPrograma e1 = (CondicionPrograma)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-1)).value;
VisualSemantica.AMBITO += 1;
              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("NT$10",56, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // WHILE ::= whilee CONDICION espacio NT$10 STATEMENTS endd whilee espacio 
            {
              List<Triplete> RESULT =null;
              // propagate RESULT from NT$10
                RESULT = (List<Triplete>) ((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-4)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-6)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-6)).right;
		CondicionPrograma e1 = (CondicionPrograma)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-6)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-3)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-3)).right;
		List<Triplete> e2 = (List<Triplete>)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-3)).value;
		sem.eliminarAmbito(VisualSemantica.AMBITO); VisualSemantica.AMBITO -= 1; RESULT = Else_Operator.WHILE(e1, e2);
              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("WHILE",34, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-7)), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // NT$11 ::= 
            {
              List<Triplete> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-1)).right;
		CondicionPrograma e1 = (CondicionPrograma)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-1)).value;
VisualSemantica.AMBITO += 1;
              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("NT$11",57, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // DO_WHILE ::= doo whilee CONDICION espacio NT$11 STATEMENTS loopp espacio 
            {
              List<Triplete> RESULT =null;
              // propagate RESULT from NT$11
                RESULT = (List<Triplete>) ((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-3)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-5)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-5)).right;
		CondicionPrograma e1 = (CondicionPrograma)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-5)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-2)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-2)).right;
		List<Triplete> e2 = (List<Triplete>)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-2)).value;
		sem.eliminarAmbito(VisualSemantica.AMBITO); VisualSemantica.AMBITO -= 1; RESULT = Else_Operator.DOWHILE(e1, e2);
              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("DO_WHILE",35, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-7)), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // NT$12 ::= 
            {
              List<Triplete> RESULT =null;
VisualSemantica.AMBITO += 1;
              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("NT$12",58, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // DO_WHILE ::= doo espacio NT$12 STATEMENTS loopp whilee CONDICION espacio 
            {
              List<Triplete> RESULT =null;
              // propagate RESULT from NT$12
                RESULT = (List<Triplete>) ((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-5)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-4)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-4)).right;
		List<Triplete> e2 = (List<Triplete>)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-4)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-1)).right;
		CondicionPrograma e1 = (CondicionPrograma)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-1)).value;
		sem.eliminarAmbito(VisualSemantica.AMBITO); VisualSemantica.AMBITO -= 1; RESULT = Else_Operator.DOWHILE(e1, e2);
              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("DO_WHILE",35, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-7)), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // CONSOLEWRITE ::= write para STRING parc espacio 
            {
              List<Triplete> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-2)).right;
		List<Triplete> e1 = (List<Triplete>)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-2)).value;
		RESULT = e1;
              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("CONSOLEWRITE",25, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-4)), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // CONSOLEWRITE ::= writeln para STRING parc espacio 
            {
              List<Triplete> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-2)).right;
		List<Triplete> e1 = (List<Triplete>)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-2)).value;
		e1.add(new Printf("\n")); RESULT = e1;
              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("CONSOLEWRITE",25, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-4)), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // INPUT ::= charinput para string parc 
            {
              OperacionVisual RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-1)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-1)).value;
		OperacionVisual op = new OperacionVisual(VisualSemantica.CHAR,
                                new Input("%d"));
                                op.getTripletes().add(new Printf(e1));
                                RESULT = op;
              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("INPUT",21, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // INPUT ::= floatinput para string parc 
            {
              OperacionVisual RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-1)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-1)).value;
		OperacionVisual op = new OperacionVisual(VisualSemantica.FLOAT,
                                new Input("%c"));
                                op.getTripletes().add(new Printf(e1));
                                RESULT = op;
              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("INPUT",21, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // INPUT ::= intinput para string parc 
            {
              OperacionVisual RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-1)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-1)).value;
		OperacionVisual op = new OperacionVisual(VisualSemantica.INT,
                                new Input("%f"));
                                op.getTripletes().add(new Printf(e1));
                                RESULT = op;
              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("INPUT",21, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // CONDICION ::= CONDICION orr AND 
            {
              CondicionPrograma RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-2)).right;
		CondicionPrograma e1 = (CondicionPrograma)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()).right;
		CondicionPrograma e2 = (CondicionPrograma)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.peek()).value;
		RESULT = IfPrograma.OR(e1, e2);
              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("CONDICION",38, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // CONDICION ::= AND 
            {
              CondicionPrograma RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()).right;
		CondicionPrograma e1 = (CondicionPrograma)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.peek()).value;
		RESULT = e1;
              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("CONDICION",38, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // AND ::= AND andd NOT 
            {
              CondicionPrograma RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-2)).right;
		CondicionPrograma e1 = (CondicionPrograma)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()).right;
		CondicionPrograma e2 = (CondicionPrograma)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.peek()).value;
		RESULT = IfPrograma.AND(e1, e2);
              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("AND",40, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // AND ::= NOT 
            {
              CondicionPrograma RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()).right;
		CondicionPrograma e1 = (CondicionPrograma)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.peek()).value;
		RESULT = e1;
              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("AND",40, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // NOT ::= nott NOT 
            {
              CondicionPrograma RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()).right;
		CondicionPrograma e1 = (CondicionPrograma)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.peek()).value;
		RESULT = IfPrograma.NOT(e1);
              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("NOT",39, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // NOT ::= COMPARACION 
            {
              CondicionPrograma RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()).right;
		Triplete e1 = (Triplete)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.peek()).value;
		RESULT = new IfPrograma(new If_Operator(e1, new Etiqueta()), ((CondicionalOperator)e1).getTripletes());
              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("NOT",39, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // NOT ::= para CONDICION parc 
            {
              CondicionPrograma RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-1)).right;
		CondicionPrograma e1 = (CondicionPrograma)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-1)).value;
		RESULT = e1;
              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("NOT",39, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // COMPARACION ::= OPERACION_A igual OPERACION_A 
            {
              Triplete RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-2)).right;
		OperacionVisual e1 = (OperacionVisual)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()).right;
		OperacionVisual e2 = (OperacionVisual)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.peek()).value;
		RESULT = new IgualOperator(e1.getTriplete(), e2.getTriplete(),
                e1.getTripletes(), e2.getTripletes());
              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("COMPARACION",41, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // COMPARACION ::= OPERACION_A noigual OPERACION_A 
            {
              Triplete RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-2)).right;
		OperacionVisual e1 = (OperacionVisual)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()).right;
		OperacionVisual e2 = (OperacionVisual)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.peek()).value;
		RESULT = new NoIgualOperator(e1.getTriplete(), e2.getTriplete(),
                e1.getTripletes(), e2.getTripletes());
              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("COMPARACION",41, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // COMPARACION ::= OPERACION_A menor OPERACION_A 
            {
              Triplete RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-2)).right;
		OperacionVisual e1 = (OperacionVisual)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()).right;
		OperacionVisual e2 = (OperacionVisual)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.peek()).value;
		RESULT = new MenorOperator(e1.getTriplete(), e2.getTriplete(),
                e1.getTripletes(), e2.getTripletes());
              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("COMPARACION",41, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // COMPARACION ::= OPERACION_A menorig OPERACION_A 
            {
              Triplete RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-2)).right;
		OperacionVisual e1 = (OperacionVisual)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()).right;
		OperacionVisual e2 = (OperacionVisual)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.peek()).value;
		RESULT = new MenorIgOperator(e1.getTriplete(), e2.getTriplete(),
                e1.getTripletes(), e2.getTripletes());
              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("COMPARACION",41, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // COMPARACION ::= OPERACION_A mayor OPERACION_A 
            {
              Triplete RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-2)).right;
		OperacionVisual e1 = (OperacionVisual)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()).right;
		OperacionVisual e2 = (OperacionVisual)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.peek()).value;
		RESULT = new MayorOperator(e1.getTriplete(), e2.getTriplete(),
                e1.getTripletes(), e2.getTripletes());
              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("COMPARACION",41, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // COMPARACION ::= OPERACION_A mayorig OPERACION_A 
            {
              Triplete RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-2)).right;
		OperacionVisual e1 = (OperacionVisual)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()).right;
		OperacionVisual e2 = (OperacionVisual)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.peek()).value;
		RESULT = new MayorIgOperator(e1.getTriplete(), e2.getTriplete(),
                e1.getTripletes(), e2.getTripletes());
              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("COMPARACION",41, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // STRING ::= STRING y EXPR 
            {
              List<Triplete> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-2)).right;
		List<Triplete> e1 = (List<Triplete>)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()).right;
		OperacionVisual e2 = (OperacionVisual)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.peek()).value;
		e1.addAll(e2.getTripletes()); e1.add(new Printf(Input.tipoVisual(e2), e2.getTriplete())); RESULT = e1;
              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("STRING",26, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // STRING ::= STRING y string 
            {
              List<Triplete> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-2)).right;
		List<Triplete> e1 = (List<Triplete>)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.peek()).value;
		e1.add(new Printf(e2)); RESULT = e1;
              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("STRING",26, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // STRING ::= EXPR 
            {
              List<Triplete> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()).right;
		OperacionVisual e1 = (OperacionVisual)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.peek()).value;
		List<Triplete> tri = new ArrayList<>(); tri.addAll(e1.getTripletes());
                tri.add(new Printf(Input.tipoVisual(e1), e1.getTriplete()));
                RESULT = tri;
              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("STRING",26, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // STRING ::= string 
            {
              List<Triplete> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.peek()).value;
		List<Triplete> tri = new ArrayList<>(); tri.add(new Printf(e1));
                RESULT = tri;
              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("STRING",26, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$SintaxisVisual$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$SintaxisVisual$do_action(
    int                        CUP$SintaxisVisual$act_num,
    java_cup.runtime.lr_parser CUP$SintaxisVisual$parser,
    java.util.Stack            CUP$SintaxisVisual$stack,
    int                        CUP$SintaxisVisual$top)
    throws java.lang.Exception
    {
              return CUP$SintaxisVisual$do_action_part00000000(
                               CUP$SintaxisVisual$act_num,
                               CUP$SintaxisVisual$parser,
                               CUP$SintaxisVisual$stack,
                               CUP$SintaxisVisual$top);
    }
}

}
