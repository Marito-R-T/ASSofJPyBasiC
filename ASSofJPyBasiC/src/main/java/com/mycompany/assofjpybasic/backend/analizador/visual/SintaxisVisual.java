
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package com.mycompany.assofjpybasic.backend.analizador.visual;

import java_cup.runtime.*;
import com.mycompany.assofjpybasic.backend.semantica.visual.*;
import java.util.ArrayList;
import java.util.List;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class SintaxisVisual extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return SintaxisVisualSym.class;
}

  /** Default constructor. */
  @Deprecated
  public SintaxisVisual() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public SintaxisVisual(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public SintaxisVisual(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\174\000\002\002\004\000\002\002\004\000\002\015" +
    "\003\000\002\015\002\000\002\030\003\000\002\030\002" +
    "\000\002\003\004\000\002\003\002\000\002\004\003\000" +
    "\002\004\003\000\002\061\002\000\002\005\016\000\002" +
    "\062\002\000\002\006\017\000\002\007\005\000\002\045" +
    "\003\000\002\045\002\000\002\046\006\000\002\046\004" +
    "\000\002\047\007\000\002\047\005\000\002\010\006\000" +
    "\002\050\004\000\002\050\004\000\002\050\004\000\002" +
    "\051\004\000\002\051\004\000\002\051\004\000\002\051" +
    "\002\000\002\060\004\000\002\060\002\000\002\053\005" +
    "\000\002\053\005\000\002\053\003\000\002\054\005\000" +
    "\002\054\005\000\002\054\005\000\002\054\005\000\002" +
    "\054\003\000\002\055\004\000\002\055\004\000\002\055" +
    "\003\000\002\056\003\000\002\056\003\000\002\056\003" +
    "\000\002\056\005\000\002\012\004\000\002\012\002\000" +
    "\002\044\004\000\002\044\004\000\002\044\002\000\002" +
    "\052\003\000\002\052\003\000\002\052\003\000\002\013" +
    "\003\000\002\013\003\000\002\013\003\000\002\013\003" +
    "\000\002\013\003\000\002\013\003\000\002\016\005\000" +
    "\002\063\002\000\002\017\006\000\002\064\002\000\002" +
    "\017\012\000\002\065\002\000\002\066\002\000\002\020" +
    "\012\000\002\067\002\000\002\020\006\000\002\020\002" +
    "\000\002\021\003\000\002\021\002\000\002\022\003\000" +
    "\002\022\003\000\002\022\003\000\002\022\003\000\002" +
    "\023\013\000\002\027\003\000\002\027\002\000\002\070" +
    "\002\000\002\014\007\000\002\014\002\000\002\025\004" +
    "\000\002\025\002\000\002\071\002\000\002\024\007\000" +
    "\002\031\005\000\002\031\003\000\002\072\002\000\002" +
    "\032\020\000\002\011\003\000\002\011\002\000\002\026" +
    "\004\000\002\026\002\000\002\073\002\000\002\033\012" +
    "\000\002\074\002\000\002\034\012\000\002\075\002\000" +
    "\002\034\012\000\002\035\007\000\002\035\007\000\002" +
    "\036\004\000\002\057\006\000\002\057\006\000\002\057" +
    "\006\000\002\037\005\000\002\037\003\000\002\040\005" +
    "\000\002\040\003\000\002\041\004\000\002\041\003\000" +
    "\002\042\005\000\002\042\005\000\002\042\005\000\002" +
    "\042\005\000\002\042\005\000\002\042\005\000\002\042" +
    "\005\000\002\043\005\000\002\043\005\000\002\043\003" +
    "\000\002\043\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\376\000\014\002\ufffe\004\004\005\ufffe\006\ufffe\010" +
    "\ufffe\001\002\000\012\002\uffff\005\uffff\006\uffff\010\uffff" +
    "\001\002\000\004\002\u0100\001\002\000\012\002\ufffa\005" +
    "\ufffc\006\ufffc\010\007\001\002\000\006\005\ufffd\006\ufffd" +
    "\001\002\000\012\002\ufff9\005\ufff9\006\ufff9\010\ufff9\001" +
    "\002\000\004\002\000\001\002\000\012\002\ufffa\005\ufffc" +
    "\006\ufffc\010\007\001\002\000\006\005\016\006\015\001" +
    "\002\000\012\002\ufff8\005\ufff8\006\ufff8\010\ufff8\001\002" +
    "\000\004\056\360\001\002\000\004\056\017\001\002\000" +
    "\004\052\020\001\002\000\006\053\ufff1\056\023\001\002" +
    "\000\004\053\034\001\002\000\006\053\ufff2\054\031\001" +
    "\002\000\004\012\024\001\002\000\010\016\030\017\027" +
    "\020\026\001\002\000\006\053\uffef\054\uffef\001\002\000" +
    "\012\004\uffea\036\uffea\053\uffea\054\uffea\001\002\000\012" +
    "\004\uffe9\036\uffe9\053\uffe9\054\uffe9\001\002\000\012\004" +
    "\uffeb\036\uffeb\053\uffeb\054\uffeb\001\002\000\004\056\032" +
    "\001\002\000\004\012\024\001\002\000\006\053\ufff0\054" +
    "\ufff0\001\002\000\004\004\035\001\002\000\034\007\ufff7" +
    "\011\ufff7\021\ufff7\025\ufff7\027\ufff7\033\ufff7\034\ufff7\056" +
    "\ufff7\064\ufff7\065\ufff7\066\ufff7\067\ufff7\070\ufff7\001\002" +
    "\000\034\007\uffd2\011\uffd2\021\uffd2\025\uffd2\027\uffd2\033" +
    "\uffd2\034\uffd2\056\uffd2\064\uffd2\065\uffd2\066\uffd2\067\uffd2" +
    "\070\uffd2\001\002\000\034\007\062\011\060\021\055\025" +
    "\067\027\070\033\050\034\057\056\053\064\063\065\044" +
    "\066\061\067\042\070\041\001\002\000\052\004\uffb7\007" +
    "\uffb7\011\uffb7\021\uffb7\022\uffb7\023\uffb7\025\uffb7\026\uffb7" +
    "\027\uffb7\032\uffb7\033\uffb7\034\uffb7\035\uffb7\056\uffb7\064" +
    "\uffb7\065\uffb7\066\uffb7\067\uffb7\070\uffb7\071\uffb7\001\002" +
    "\000\004\052\355\001\002\000\004\052\352\001\002\000" +
    "\050\007\uffca\011\uffca\021\uffca\022\uffca\023\uffca\025\uffca" +
    "\026\uffca\027\uffca\032\uffca\033\uffca\034\uffca\035\uffca\056" +
    "\uffca\064\uffca\065\uffca\066\uffca\067\uffca\070\uffca\071\uffca" +
    "\001\002\000\004\052\346\001\002\000\052\004\uffb8\007" +
    "\uffb8\011\uffb8\021\uffb8\022\uffb8\023\uffb8\025\uffb8\026\uffb8" +
    "\027\uffb8\032\uffb8\033\uffb8\034\uffb8\035\uffb8\056\uffb8\064" +
    "\uffb8\065\uffb8\066\uffb8\067\uffb8\070\uffb8\071\uffb8\001\002" +
    "\000\050\007\uffc8\011\uffc8\021\uffc8\022\uffc8\023\uffc8\025" +
    "\uffc8\026\uffc8\027\uffc8\032\uffc8\033\uffc8\034\uffc8\035\uffc8" +
    "\056\uffc8\064\uffc8\065\uffc8\066\uffc8\067\uffc8\070\uffc8\071" +
    "\uffc8\001\002\000\050\007\uffcb\011\uffcb\021\uffcb\022\uffcb" +
    "\023\uffcb\025\uffcb\026\uffcb\027\uffcb\032\uffcb\033\uffcb\034" +
    "\uffcb\035\uffcb\056\uffcb\064\uffcb\065\uffcb\066\uffcb\067\uffcb" +
    "\070\uffcb\071\uffcb\001\002\000\020\013\232\044\104\045" +
    "\101\052\240\056\074\057\077\060\103\001\002\000\004" +
    "\004\336\001\002\000\050\007\uffc7\011\uffc7\021\uffc7\022" +
    "\uffc7\023\uffc7\025\uffc7\026\uffc7\027\uffc7\032\uffc7\033\uffc7" +
    "\034\uffc7\035\uffc7\056\uffc7\064\uffc7\065\uffc7\066\uffc7\067" +
    "\uffc7\070\uffc7\071\uffc7\001\002\000\004\036\333\001\002" +
    "\000\052\004\uffb6\007\uffb6\011\uffb6\021\uffb6\022\uffb6\023" +
    "\uffb6\025\uffb6\026\uffb6\027\uffb6\032\uffb6\033\uffb6\034\uffb6" +
    "\035\uffb6\056\uffb6\064\uffb6\065\uffb6\066\uffb6\067\uffb6\070" +
    "\uffb6\071\uffb6\001\002\000\020\013\232\044\104\045\101" +
    "\052\240\056\074\057\077\060\103\001\002\000\050\007" +
    "\uffc6\011\uffc6\021\uffc6\022\uffc6\023\uffc6\025\uffc6\026\uffc6" +
    "\027\uffc6\032\uffc6\033\uffc6\034\uffc6\035\uffc6\056\uffc6\064" +
    "\uffc6\065\uffc6\066\uffc6\067\uffc6\070\uffc6\071\uffc6\001\002" +
    "\000\006\004\230\033\231\001\002\000\004\056\212\001" +
    "\002\000\004\052\206\001\002\000\004\005\204\001\002" +
    "\000\004\052\173\001\002\000\046\007\uffd3\011\uffd3\021" +
    "\uffd3\022\uffd3\023\uffd3\025\uffd3\026\uffd3\027\uffd3\032\uffd3" +
    "\033\uffd3\034\uffd3\035\uffd3\056\uffd3\064\uffd3\065\uffd3\066" +
    "\uffd3\067\uffd3\070\uffd3\001\002\000\050\007\uffc9\011\uffc9" +
    "\021\uffc9\022\uffc9\023\uffc9\025\uffc9\026\uffc9\027\uffc9\032" +
    "\uffc9\033\uffc9\034\uffc9\035\uffc9\056\uffc9\064\uffc9\065\uffc9" +
    "\066\uffc9\067\uffc9\070\uffc9\071\uffc9\001\002\000\052\004" +
    "\uffb5\007\uffb5\011\uffb5\021\uffb5\022\uffb5\023\uffb5\025\uffb5" +
    "\026\uffb5\027\uffb5\032\uffb5\033\uffb5\034\uffb5\035\uffb5\056" +
    "\uffb5\064\uffb5\065\uffb5\066\uffb5\067\uffb5\070\uffb5\071\uffb5" +
    "\001\002\000\030\026\143\044\uffb2\045\uffb2\052\uffb2\056" +
    "\uffb2\057\uffb2\060\uffb2\061\uffb2\066\uffb2\067\uffb2\070\uffb2" +
    "\001\002\000\004\056\071\001\002\000\004\012\024\001" +
    "\002\000\004\036\073\001\002\000\016\044\104\045\101" +
    "\052\105\056\074\057\077\060\103\001\002\000\056\004" +
    "\uffd7\007\uffd7\014\uffd7\015\uffd7\024\uffd7\030\uffd7\031\uffd7" +
    "\036\uffd7\037\uffd7\040\uffd7\041\uffd7\042\uffd7\043\uffd7\044" +
    "\uffd7\045\uffd7\046\uffd7\047\uffd7\050\uffd7\051\uffd7\053\uffd7" +
    "\054\uffd7\062\uffd7\001\002\000\006\030\126\044\107\001" +
    "\002\000\056\004\uffdb\007\uffdb\014\uffdb\015\uffdb\024\uffdb" +
    "\030\uffdb\031\uffdb\036\uffdb\037\uffdb\040\uffdb\041\uffdb\042" +
    "\uffdb\043\uffdb\044\uffdb\045\uffdb\046\uffdb\047\uffdb\050\uffdb" +
    "\051\uffdb\053\uffdb\054\uffdb\062\uffdb\001\002\000\056\004" +
    "\uffd5\007\uffd5\014\uffd5\015\uffd5\024\uffd5\030\uffd5\031\uffd5" +
    "\036\uffd5\037\uffd5\040\uffd5\041\uffd5\042\uffd5\043\uffd5\044" +
    "\uffd5\045\uffd5\046\uffd5\047\uffd5\050\uffd5\051\uffd5\053\uffd5" +
    "\054\uffd5\062\uffd5\001\002\000\056\004\uffd8\007\uffd8\014" +
    "\uffd8\015\uffd8\024\uffd8\030\uffd8\031\uffd8\036\uffd8\037\uffd8" +
    "\040\uffd8\041\uffd8\042\uffd8\043\uffd8\044\uffd8\045\uffd8\046" +
    "\uffd8\047\uffd8\050\uffd8\051\uffd8\053\uffd8\054\uffd8\062\uffd8" +
    "\001\002\000\016\044\104\045\101\052\105\056\074\057" +
    "\077\060\103\001\002\000\056\004\uffe0\007\uffe0\014\uffe0" +
    "\015\uffe0\024\uffe0\030\uffe0\031\uffe0\036\uffe0\037\uffe0\040" +
    "\uffe0\041\uffe0\042\uffe0\043\uffe0\044\uffe0\045\123\046\112" +
    "\047\115\050\113\051\114\053\uffe0\054\uffe0\062\uffe0\001" +
    "\002\000\056\004\uffd6\007\uffd6\014\uffd6\015\uffd6\024\uffd6" +
    "\030\uffd6\031\uffd6\036\uffd6\037\uffd6\040\uffd6\041\uffd6\042" +
    "\uffd6\043\uffd6\044\uffd6\045\uffd6\046\uffd6\047\uffd6\050\uffd6" +
    "\051\uffd6\053\uffd6\054\uffd6\062\uffd6\001\002\000\016\044" +
    "\104\045\101\052\105\056\074\057\077\060\103\001\002" +
    "\000\016\044\104\045\101\052\105\056\074\057\077\060" +
    "\103\001\002\000\006\044\107\053\110\001\002\000\016" +
    "\044\104\045\101\052\105\056\074\057\077\060\103\001" +
    "\002\000\056\004\uffd4\007\uffd4\014\uffd4\015\uffd4\024\uffd4" +
    "\030\uffd4\031\uffd4\036\uffd4\037\uffd4\040\uffd4\041\uffd4\042" +
    "\uffd4\043\uffd4\044\uffd4\045\uffd4\046\uffd4\047\uffd4\050\uffd4" +
    "\051\uffd4\053\uffd4\054\uffd4\062\uffd4\001\002\000\054\004" +
    "\uffe2\007\uffe2\014\uffe2\015\uffe2\024\uffe2\030\uffe2\031\uffe2" +
    "\036\uffe2\037\uffe2\040\uffe2\041\uffe2\042\uffe2\043\uffe2\044" +
    "\uffe2\046\112\047\115\050\113\051\114\053\uffe2\054\uffe2" +
    "\062\uffe2\001\002\000\016\044\104\045\101\052\105\056" +
    "\074\057\077\060\103\001\002\000\016\044\104\045\101" +
    "\052\105\056\074\057\077\060\103\001\002\000\016\044" +
    "\104\045\101\052\105\056\074\057\077\060\103\001\002" +
    "\000\016\044\104\045\101\052\105\056\074\057\077\060" +
    "\103\001\002\000\056\004\uffde\007\uffde\014\uffde\015\uffde" +
    "\024\uffde\030\uffde\031\uffde\036\uffde\037\uffde\040\uffde\041" +
    "\uffde\042\uffde\043\uffde\044\uffde\045\uffde\046\uffde\047\uffde" +
    "\050\uffde\051\uffde\053\uffde\054\uffde\062\uffde\001\002\000" +
    "\056\004\uffdd\007\uffdd\014\uffdd\015\uffdd\024\uffdd\030\uffdd" +
    "\031\uffdd\036\uffdd\037\uffdd\040\uffdd\041\uffdd\042\uffdd\043" +
    "\uffdd\044\uffdd\045\uffdd\046\uffdd\047\uffdd\050\uffdd\051\uffdd" +
    "\053\uffdd\054\uffdd\062\uffdd\001\002\000\056\004\uffdc\007" +
    "\uffdc\014\uffdc\015\uffdc\024\uffdc\030\uffdc\031\uffdc\036\uffdc" +
    "\037\uffdc\040\uffdc\041\uffdc\042\uffdc\043\uffdc\044\uffdc\045" +
    "\uffdc\046\uffdc\047\uffdc\050\uffdc\051\uffdc\053\uffdc\054\uffdc" +
    "\062\uffdc\001\002\000\056\004\uffdf\007\uffdf\014\uffdf\015" +
    "\uffdf\024\uffdf\030\uffdf\031\uffdf\036\uffdf\037\uffdf\040\uffdf" +
    "\041\uffdf\042\uffdf\043\uffdf\044\uffdf\045\uffdf\046\uffdf\047" +
    "\uffdf\050\uffdf\051\uffdf\053\uffdf\054\uffdf\062\uffdf\001\002" +
    "\000\056\004\uffd9\007\uffd9\014\uffd9\015\uffd9\024\uffd9\030" +
    "\uffd9\031\uffd9\036\uffd9\037\uffd9\040\uffd9\041\uffd9\042\uffd9" +
    "\043\uffd9\044\uffd9\045\uffd9\046\uffd9\047\uffd9\050\uffd9\051" +
    "\uffd9\053\uffd9\054\uffd9\062\uffd9\001\002\000\016\044\104" +
    "\045\101\052\105\056\074\057\077\060\103\001\002\000" +
    "\054\004\uffe1\007\uffe1\014\uffe1\015\uffe1\024\uffe1\030\uffe1" +
    "\031\uffe1\036\uffe1\037\uffe1\040\uffe1\041\uffe1\042\uffe1\043" +
    "\uffe1\044\uffe1\046\112\047\115\050\113\051\114\053\uffe1" +
    "\054\uffe1\062\uffe1\001\002\000\056\004\uffda\007\uffda\014" +
    "\uffda\015\uffda\024\uffda\030\uffda\031\uffda\036\uffda\037\uffda" +
    "\040\uffda\041\uffda\042\uffda\043\uffda\044\uffda\045\uffda\046" +
    "\uffda\047\uffda\050\uffda\051\uffda\053\uffda\054\uffda\062\uffda" +
    "\001\002\000\016\044\104\045\101\052\105\056\074\057" +
    "\077\060\103\001\002\000\010\004\uffa3\031\131\044\107" +
    "\001\002\000\004\004\133\001\002\000\016\044\104\045" +
    "\101\052\105\056\074\057\077\060\103\001\002\000\006" +
    "\004\uffa4\044\107\001\002\000\034\011\uffa8\021\uffa8\025" +
    "\uffa8\027\uffa8\032\uffa8\033\uffa8\034\uffa8\056\uffa8\064\uffa8" +
    "\065\uffa8\066\uffa8\067\uffa8\070\uffa8\001\002\000\034\011" +
    "\uffd2\021\uffd2\025\uffd2\027\uffd2\032\uffd2\033\uffd2\034\uffd2" +
    "\056\uffd2\064\uffd2\065\uffd2\066\uffd2\067\uffd2\070\uffd2\001" +
    "\002\000\034\011\060\021\055\025\067\027\070\032\136" +
    "\033\050\034\057\056\053\064\063\065\044\066\061\067" +
    "\042\070\041\001\002\000\006\004\uffa5\056\140\001\002" +
    "\000\004\004\141\001\002\000\004\004\uffa6\001\002\000" +
    "\050\007\uffa7\011\uffa7\021\uffa7\022\uffa7\023\uffa7\025\uffa7" +
    "\026\uffa7\027\uffa7\032\uffa7\033\uffa7\034\uffa7\035\uffa7\056" +
    "\uffa7\064\uffa7\065\uffa7\066\uffa7\067\uffa7\070\uffa7\071\uffa7" +
    "\001\002\000\026\044\104\045\101\052\105\056\074\057" +
    "\077\060\103\061\146\066\061\067\042\070\041\001\002" +
    "\000\026\044\uffb3\045\uffb3\052\uffb3\056\uffb3\057\uffb3\060" +
    "\uffb3\061\uffb3\066\uffb3\067\uffb3\070\uffb3\001\002\000\014" +
    "\004\uffcd\007\uffcd\053\uffcd\054\uffcd\062\uffcd\001\002\000" +
    "\016\004\uffce\007\uffce\044\107\053\uffce\054\uffce\062\uffce" +
    "\001\002\000\014\004\uffcc\007\uffcc\053\uffcc\054\uffcc\062" +
    "\uffcc\001\002\000\004\004\150\001\002\000\006\007\uffad" +
    "\026\uffad\001\002\000\006\007\uffaf\026\153\001\002\000" +
    "\006\007\uffae\026\uffae\001\002\000\020\023\161\044\104" +
    "\045\101\052\105\056\074\057\077\060\103\001\002\000" +
    "\004\007\155\001\002\000\004\025\156\001\002\000\004" +
    "\004\157\001\002\000\050\007\uffb4\011\uffb4\021\uffb4\022" +
    "\uffb4\023\uffb4\025\uffb4\026\uffb4\027\uffb4\032\uffb4\033\uffb4" +
    "\034\uffb4\035\uffb4\056\uffb4\064\uffb4\065\uffb4\066\uffb4\067" +
    "\uffb4\070\uffb4\071\uffb4\001\002\000\010\004\uffa9\044\107" +
    "\054\uffa9\001\002\000\004\004\170\001\002\000\006\004" +
    "\163\054\164\001\002\000\036\007\uffac\011\uffac\021\uffac" +
    "\025\uffac\026\uffac\027\uffac\033\uffac\034\uffac\056\uffac\064" +
    "\uffac\065\uffac\066\uffac\067\uffac\070\uffac\001\002\000\016" +
    "\044\104\045\101\052\105\056\074\057\077\060\103\001" +
    "\002\000\010\004\uffaa\044\107\054\uffaa\001\002\000\036" +
    "\007\uffd2\011\uffd2\021\uffd2\025\uffd2\026\uffd2\027\uffd2\033" +
    "\uffd2\034\uffd2\056\uffd2\064\uffd2\065\uffd2\066\uffd2\067\uffd2" +
    "\070\uffd2\001\002\000\036\007\uffab\011\060\021\055\025" +
    "\067\026\uffab\027\070\033\050\034\057\056\053\064\063" +
    "\065\044\066\061\067\042\070\041\001\002\000\034\007" +
    "\uffb1\011\uffb1\021\uffb1\025\uffb1\027\uffb1\033\uffb1\034\uffb1" +
    "\056\uffb1\064\uffb1\065\uffb1\066\uffb1\067\uffb1\070\uffb1\001" +
    "\002\000\034\007\uffd2\011\uffd2\021\uffd2\025\uffd2\027\uffd2" +
    "\033\uffd2\034\uffd2\056\uffd2\064\uffd2\065\uffd2\066\uffd2\067" +
    "\uffd2\070\uffd2\001\002\000\034\007\uffb0\011\060\021\055" +
    "\025\067\027\070\033\050\034\057\056\053\064\063\065" +
    "\044\066\061\067\042\070\041\001\002\000\030\044\104" +
    "\045\101\052\105\056\074\057\077\060\103\061\146\063" +
    "\174\066\061\067\042\070\041\001\002\000\006\053\uff86" +
    "\062\uff86\001\002\000\006\053\uff87\062\uff87\001\002\000" +
    "\006\053\177\062\200\001\002\000\004\004\203\001\002" +
    "\000\030\044\104\045\101\052\105\056\074\057\077\060" +
    "\103\061\146\063\201\066\061\067\042\070\041\001\002" +
    "\000\006\053\uff88\062\uff88\001\002\000\006\053\uff89\062" +
    "\uff89\001\002\000\052\004\uff9c\007\uff9c\011\uff9c\021\uff9c" +
    "\022\uff9c\023\uff9c\025\uff9c\026\uff9c\027\uff9c\032\uff9c\033" +
    "\uff9c\034\uff9c\035\uff9c\056\uff9c\064\uff9c\065\uff9c\066\uff9c" +
    "\067\uff9c\070\uff9c\071\uff9c\001\002\000\004\004\205\001" +
    "\002\000\012\002\ufff6\005\ufff6\006\ufff6\010\ufff6\001\002" +
    "\000\004\063\207\001\002\000\004\053\210\001\002\000" +
    "\014\004\uff99\007\uff99\053\uff99\054\uff99\062\uff99\001\002" +
    "\000\006\004\223\054\224\001\002\000\012\004\uffe5\012" +
    "\213\036\uffe5\054\uffe5\001\002\000\010\016\222\017\221" +
    "\020\220\001\002\000\010\004\uffe3\036\216\054\uffe3\001" +
    "\002\000\006\004\uffed\054\uffed\001\002\000\026\044\104" +
    "\045\101\052\105\056\074\057\077\060\103\061\146\066" +
    "\061\067\042\070\041\001\002\000\006\004\uffe4\054\uffe4" +
    "\001\002\000\010\004\uffe7\036\uffe7\054\uffe7\001\002\000" +
    "\010\004\uffe6\036\uffe6\054\uffe6\001\002\000\010\004\uffe8" +
    "\036\uffe8\054\uffe8\001\002\000\052\004\ufff3\007\ufff3\011" +
    "\ufff3\021\ufff3\022\ufff3\023\ufff3\025\ufff3\026\ufff3\027\ufff3" +
    "\032\ufff3\033\ufff3\034\ufff3\035\ufff3\056\ufff3\064\ufff3\065" +
    "\ufff3\066\ufff3\067\ufff3\070\ufff3\071\ufff3\001\002\000\004" +
    "\056\225\001\002\000\012\004\uffe5\012\213\036\uffe5\054" +
    "\uffe5\001\002\000\010\004\uffe3\036\216\054\uffe3\001\002" +
    "\000\006\004\uffee\054\uffee\001\002\000\034\011\uff9e\021" +
    "\uff9e\025\uff9e\027\uff9e\033\uff9e\034\uff9e\035\uff9e\056\uff9e" +
    "\064\uff9e\065\uff9e\066\uff9e\067\uff9e\070\uff9e\001\002\000" +
    "\020\013\232\044\104\045\101\052\240\056\074\057\077" +
    "\060\103\001\002\000\020\013\232\044\104\045\101\052" +
    "\240\056\074\057\077\060\103\001\002\000\014\004\uff91" +
    "\014\uff91\015\uff91\024\uff91\053\uff91\001\002\000\014\004" +
    "\uff95\014\246\015\uff95\024\uff95\053\uff95\001\002\000\020" +
    "\036\251\037\252\040\253\041\255\042\254\043\250\044" +
    "\107\001\002\000\014\004\uff93\014\uff93\015\uff93\024\uff93" +
    "\053\uff93\001\002\000\006\004\264\015\244\001\002\000" +
    "\020\013\232\044\104\045\101\052\240\056\074\057\077" +
    "\060\103\001\002\000\022\036\251\037\252\040\253\041" +
    "\255\042\254\043\250\044\107\053\110\001\002\000\006" +
    "\015\244\053\243\001\002\000\014\004\uff8a\014\uff8a\015" +
    "\uff8a\024\uff8a\053\uff8a\001\002\000\020\013\232\044\104" +
    "\045\101\052\240\056\074\057\077\060\103\001\002\000" +
    "\014\004\uff96\014\246\015\uff96\024\uff96\053\uff96\001\002" +
    "\000\020\013\232\044\104\045\101\052\240\056\074\057" +
    "\077\060\103\001\002\000\014\004\uff94\014\uff94\015\uff94" +
    "\024\uff94\053\uff94\001\002\000\016\044\104\045\101\052" +
    "\105\056\074\057\077\060\103\001\002\000\016\044\104" +
    "\045\101\052\105\056\074\057\077\060\103\001\002\000" +
    "\016\044\104\045\101\052\105\056\074\057\077\060\103" +
    "\001\002\000\016\044\104\045\101\052\105\056\074\057" +
    "\077\060\103\001\002\000\016\044\104\045\101\052\105" +
    "\056\074\057\077\060\103\001\002\000\016\044\104\045" +
    "\101\052\105\056\074\057\077\060\103\001\002\000\016" +
    "\004\uff8d\014\uff8d\015\uff8d\024\uff8d\044\107\053\uff8d\001" +
    "\002\000\016\004\uff8c\014\uff8c\015\uff8c\024\uff8c\044\107" +
    "\053\uff8c\001\002\000\016\004\uff8e\014\uff8e\015\uff8e\024" +
    "\uff8e\044\107\053\uff8e\001\002\000\016\004\uff8f\014\uff8f" +
    "\015\uff8f\024\uff8f\044\107\053\uff8f\001\002\000\016\004" +
    "\uff90\014\uff90\015\uff90\024\uff90\044\107\053\uff90\001\002" +
    "\000\016\004\uff8b\014\uff8b\015\uff8b\024\uff8b\044\107\053" +
    "\uff8b\001\002\000\034\011\uffa0\021\uffa0\025\uffa0\027\uffa0" +
    "\033\uffa0\034\uffa0\035\uffa0\056\uffa0\064\uffa0\065\uffa0\066" +
    "\uffa0\067\uffa0\070\uffa0\001\002\000\034\011\uffd2\021\uffd2" +
    "\025\uffd2\027\uffd2\033\uffd2\034\uffd2\035\uffd2\056\uffd2\064" +
    "\uffd2\065\uffd2\066\uffd2\067\uffd2\070\uffd2\001\002\000\034" +
    "\011\060\021\055\025\067\027\070\033\050\034\057\035" +
    "\267\056\053\064\063\065\044\066\061\067\042\070\041" +
    "\001\002\000\004\004\270\001\002\000\050\007\uff9f\011" +
    "\uff9f\021\uff9f\022\uff9f\023\uff9f\025\uff9f\026\uff9f\027\uff9f" +
    "\032\uff9f\033\uff9f\034\uff9f\035\uff9f\056\uff9f\064\uff9f\065" +
    "\uff9f\066\uff9f\067\uff9f\070\uff9f\071\uff9f\001\002\000\014" +
    "\004\uff92\014\uff92\015\uff92\024\uff92\053\uff92\001\002\000" +
    "\034\011\uffd2\021\uffd2\025\uffd2\027\uffd2\033\uffd2\034\uffd2" +
    "\035\uffd2\056\uffd2\064\uffd2\065\uffd2\066\uffd2\067\uffd2\070" +
    "\uffd2\001\002\000\034\011\060\021\055\025\067\027\070" +
    "\033\050\034\057\035\274\056\053\064\063\065\044\066" +
    "\061\067\042\070\041\001\002\000\004\033\275\001\002" +
    "\000\020\013\232\044\104\045\101\052\240\056\074\057" +
    "\077\060\103\001\002\000\006\004\277\015\244\001\002" +
    "\000\050\007\uff9d\011\uff9d\021\uff9d\022\uff9d\023\uff9d\025" +
    "\uff9d\026\uff9d\027\uff9d\032\uff9d\033\uff9d\034\uff9d\035\uff9d" +
    "\056\uff9d\064\uff9d\065\uff9d\066\uff9d\067\uff9d\070\uff9d\071" +
    "\uff9d\001\002\000\010\004\uffb9\015\244\024\302\001\002" +
    "\000\050\007\uffc5\011\uffc5\021\uffc5\022\uffc5\023\uffc5\025" +
    "\uffc5\026\uffc5\027\uffc5\032\uffc5\033\uffc5\034\uffc5\035\uffc5" +
    "\056\uffc5\064\uffc5\065\uffc5\066\uffc5\067\uffc5\070\uffc5\071" +
    "\uffc5\001\002\000\022\004\uffba\011\uffc4\056\uffc4\064\uffc4" +
    "\065\uffc4\066\uffc4\067\uffc4\070\uffc4\001\002\000\004\004" +
    "\304\001\002\000\040\007\uffc2\011\uffc2\021\uffc2\022\uffc2" +
    "\023\uffc2\025\uffc2\027\uffc2\033\uffc2\034\uffc2\056\uffc2\064" +
    "\uffc2\065\uffc2\066\uffc2\067\uffc2\070\uffc2\001\002\000\040" +
    "\007\uffd2\011\uffd2\021\uffd2\022\uffd2\023\uffd2\025\uffd2\027" +
    "\uffd2\033\uffd2\034\uffd2\056\uffd2\064\uffd2\065\uffd2\066\uffd2" +
    "\067\uffd2\070\uffd2\001\002\000\040\007\uffbb\011\060\021" +
    "\055\022\311\023\310\025\067\027\070\033\050\034\057" +
    "\056\053\064\063\065\044\066\061\067\042\070\041\001" +
    "\002\000\004\007\325\001\002\000\004\004\322\001\002" +
    "\000\020\013\232\044\104\045\101\052\240\056\074\057" +
    "\077\060\103\001\002\000\010\004\uffb9\015\244\024\313" +
    "\001\002\000\004\004\uffba\001\002\000\004\004\315\001" +
    "\002\000\040\007\uffc0\011\uffc0\021\uffc0\022\uffc0\023\uffc0" +
    "\025\uffc0\027\uffc0\033\uffc0\034\uffc0\056\uffc0\064\uffc0\065" +
    "\uffc0\066\uffc0\067\uffc0\070\uffc0\001\002\000\040\007\uffd2" +
    "\011\uffd2\021\uffd2\022\uffd2\023\uffd2\025\uffd2\027\uffd2\033" +
    "\uffd2\034\uffd2\056\uffd2\064\uffd2\065\uffd2\066\uffd2\067\uffd2" +
    "\070\uffd2\001\002\000\040\007\uffbf\011\060\021\055\022" +
    "\uffbf\023\uffbf\025\067\027\070\033\050\034\057\056\053" +
    "\064\063\065\044\066\061\067\042\070\041\001\002\000" +
    "\010\007\uffbb\022\311\023\310\001\002\000\004\007\uffbe" +
    "\001\002\000\034\007\uffbd\011\uffbd\021\uffbd\025\uffbd\027" +
    "\uffbd\033\uffbd\034\uffbd\056\uffbd\064\uffbd\065\uffbd\066\uffbd" +
    "\067\uffbd\070\uffbd\001\002\000\034\007\uffd2\011\uffd2\021" +
    "\uffd2\025\uffd2\027\uffd2\033\uffd2\034\uffd2\056\uffd2\064\uffd2" +
    "\065\uffd2\066\uffd2\067\uffd2\070\uffd2\001\002\000\034\007" +
    "\uffbc\011\060\021\055\025\067\027\070\033\050\034\057" +
    "\056\053\064\063\065\044\066\061\067\042\070\041\001" +
    "\002\000\004\021\326\001\002\000\004\004\327\001\002" +
    "\000\050\007\uffc1\011\uffc1\021\uffc1\022\uffc1\023\uffc1\025" +
    "\uffc1\026\uffc1\027\uffc1\032\uffc1\033\uffc1\034\uffc1\035\uffc1" +
    "\056\uffc1\064\uffc1\065\uffc1\066\uffc1\067\uffc1\070\uffc1\071" +
    "\uffc1\001\002\000\020\011\060\056\053\064\063\065\044" +
    "\066\061\067\042\070\041\001\002\000\004\004\332\001" +
    "\002\000\050\007\uffc3\011\uffc3\021\uffc3\022\uffc3\023\uffc3" +
    "\025\uffc3\026\uffc3\027\uffc3\032\uffc3\033\uffc3\034\uffc3\035" +
    "\uffc3\056\uffc3\064\uffc3\065\uffc3\066\uffc3\067\uffc3\070\uffc3" +
    "\071\uffc3\001\002\000\026\044\104\045\101\052\105\056" +
    "\074\057\077\060\103\061\146\066\061\067\042\070\041" +
    "\001\002\000\004\004\335\001\002\000\052\004\uffec\007" +
    "\uffec\011\uffec\021\uffec\022\uffec\023\uffec\025\uffec\026\uffec" +
    "\027\uffec\032\uffec\033\uffec\034\uffec\035\uffec\056\uffec\064" +
    "\uffec\065\uffec\066\uffec\067\uffec\070\uffec\071\uffec\001\002" +
    "\000\052\004\uff9a\007\uff9a\011\uff9a\021\uff9a\022\uff9a\023" +
    "\uff9a\025\uff9a\026\uff9a\027\uff9a\032\uff9a\033\uff9a\034\uff9a" +
    "\035\uff9a\056\uff9a\064\uff9a\065\uff9a\066\uff9a\067\uff9a\070" +
    "\uff9a\071\uff9a\001\002\000\006\004\340\015\244\001\002" +
    "\000\034\007\uffa2\011\uffa2\021\uffa2\025\uffa2\027\uffa2\033" +
    "\uffa2\034\uffa2\056\uffa2\064\uffa2\065\uffa2\066\uffa2\067\uffa2" +
    "\070\uffa2\001\002\000\034\007\uffd2\011\uffd2\021\uffd2\025" +
    "\uffd2\027\uffd2\033\uffd2\034\uffd2\056\uffd2\064\uffd2\065\uffd2" +
    "\066\uffd2\067\uffd2\070\uffd2\001\002\000\034\007\343\011" +
    "\060\021\055\025\067\027\070\033\050\034\057\056\053" +
    "\064\063\065\044\066\061\067\042\070\041\001\002\000" +
    "\004\033\344\001\002\000\004\004\345\001\002\000\050" +
    "\007\uffa1\011\uffa1\021\uffa1\022\uffa1\023\uffa1\025\uffa1\026" +
    "\uffa1\027\uffa1\032\uffa1\033\uffa1\034\uffa1\035\uffa1\056\uffa1" +
    "\064\uffa1\065\uffa1\066\uffa1\067\uffa1\070\uffa1\071\uffa1\001" +
    "\002\000\030\044\104\045\101\052\105\056\074\057\077" +
    "\060\103\061\146\063\174\066\061\067\042\070\041\001" +
    "\002\000\006\053\350\062\200\001\002\000\004\004\351" +
    "\001\002\000\052\004\uff9b\007\uff9b\011\uff9b\021\uff9b\022" +
    "\uff9b\023\uff9b\025\uff9b\026\uff9b\027\uff9b\032\uff9b\033\uff9b" +
    "\034\uff9b\035\uff9b\056\uff9b\064\uff9b\065\uff9b\066\uff9b\067" +
    "\uff9b\070\uff9b\071\uff9b\001\002\000\004\063\353\001\002" +
    "\000\004\053\354\001\002\000\014\004\uff98\007\uff98\053" +
    "\uff98\054\uff98\062\uff98\001\002\000\004\063\356\001\002" +
    "\000\004\053\357\001\002\000\014\004\uff97\007\uff97\053" +
    "\uff97\054\uff97\062\uff97\001\002\000\004\052\361\001\002" +
    "\000\006\053\ufff1\056\023\001\002\000\004\053\363\001" +
    "\002\000\004\012\024\001\002\000\004\004\365\001\002" +
    "\000\036\007\ufff5\011\ufff5\021\ufff5\025\ufff5\027\ufff5\033" +
    "\ufff5\034\ufff5\056\ufff5\064\ufff5\065\ufff5\066\ufff5\067\ufff5" +
    "\070\ufff5\071\ufff5\001\002\000\036\007\uffcf\011\060\021" +
    "\055\025\067\027\070\033\050\034\057\056\053\064\063" +
    "\065\044\066\061\067\042\070\041\071\370\001\002\000" +
    "\004\007\374\001\002\000\026\044\104\045\101\052\105" +
    "\056\074\057\077\060\103\061\146\066\061\067\042\070" +
    "\041\001\002\000\036\007\uffcf\011\060\021\055\025\067" +
    "\027\070\033\050\034\057\056\053\064\063\065\044\066" +
    "\061\067\042\070\041\071\370\001\002\000\004\007\uffd1" +
    "\001\002\000\004\007\uffd0\001\002\000\004\006\375\001" +
    "\002\000\004\004\376\001\002\000\012\002\ufff4\005\ufff4" +
    "\006\ufff4\010\ufff4\001\002\000\004\002\ufffb\001\002\000" +
    "\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\376\000\006\002\004\015\005\001\001\000\002\001" +
    "\001\000\002\001\001\000\014\003\010\004\011\005\007" +
    "\006\013\030\012\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\014\003\376\004\011\005\007" +
    "\006\013\030\012\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\045\020\046\021\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\050\024\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\050\032\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\061\035\001" +
    "\001\000\004\012\036\001\001\000\032\007\053\010\065" +
    "\013\063\016\046\022\055\023\042\032\064\033\045\034" +
    "\051\035\044\036\037\057\050\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\022\037\336\040\233\041\235\042\232\053" +
    "\234\054\101\055\075\056\077\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\022\037\277\040\233\041\235\042\232\053\234\054\101" +
    "\055\075\056\077\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\047\210\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\027\141\001\001\000\002" +
    "\001\001\000\004\050\071\001\001\000\002\001\001\000" +
    "\012\053\074\054\101\055\075\056\077\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\055\124\056\077\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\055\121\056" +
    "\077\001\001\000\012\053\105\054\101\055\075\056\077" +
    "\001\001\000\002\001\001\000\010\054\110\055\075\056" +
    "\077\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\055\120\056\077\001\001\000\006\055\117\056\077\001" +
    "\001\000\006\055\116\056\077\001\001\000\006\055\115" +
    "\056\077\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\054\123\055\075\056\077\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\053\126\054\101\055\075\056\077" +
    "\001\001\000\004\026\127\001\001\000\002\001\001\000" +
    "\012\053\131\054\101\055\075\056\077\001\001\000\002" +
    "\001\001\000\004\072\133\001\001\000\004\012\134\001" +
    "\001\000\032\007\053\010\065\013\063\016\046\022\055" +
    "\023\042\032\064\033\045\034\051\035\044\036\037\057" +
    "\050\001\001\000\004\011\136\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\016\052\146\053" +
    "\144\054\101\055\075\056\077\057\143\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\025\150\001\001\000\006" +
    "\014\153\024\151\001\001\000\002\001\001\000\014\031" +
    "\161\053\157\054\101\055\075\056\077\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\071\165\001\001\000\012\053\164\054\101\055" +
    "\075\056\077\001\001\000\002\001\001\000\004\012\166" +
    "\001\001\000\032\007\053\010\065\013\063\016\046\022" +
    "\055\023\042\032\064\033\045\034\051\035\044\036\037" +
    "\057\050\001\001\000\004\070\170\001\001\000\004\012" +
    "\171\001\001\000\032\007\053\010\065\013\063\016\046" +
    "\022\055\023\042\032\064\033\045\034\051\035\044\036" +
    "\037\057\050\001\001\000\020\043\175\052\174\053\144" +
    "\054\101\055\075\056\077\057\143\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\016\052\201\053\144\054\101\055\075\056\077\057" +
    "\143\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\051\213\001\001\000\002\001\001\000\004\060" +
    "\214\001\001\000\002\001\001\000\016\052\216\053\144" +
    "\054\101\055\075\056\077\057\143\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\051\225\001" +
    "\001\000\004\060\226\001\001\000\002\001\001\000\004" +
    "\075\271\001\001\000\022\037\236\040\233\041\235\042" +
    "\232\053\234\054\101\055\075\056\077\001\001\000\016" +
    "\041\270\042\232\053\234\054\101\055\075\056\077\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\022\037\241\040" +
    "\233\041\235\042\232\053\240\054\101\055\075\056\077" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\020\040\244\041\235\042\232\053\234\054\101" +
    "\055\075\056\077\001\001\000\002\001\001\000\016\041" +
    "\246\042\232\053\234\054\101\055\075\056\077\001\001" +
    "\000\002\001\001\000\012\053\262\054\101\055\075\056" +
    "\077\001\001\000\012\053\261\054\101\055\075\056\077" +
    "\001\001\000\012\053\260\054\101\055\075\056\077\001" +
    "\001\000\012\053\257\054\101\055\075\056\077\001\001" +
    "\000\012\053\256\054\101\055\075\056\077\001\001\000" +
    "\012\053\255\054\101\055\075\056\077\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\074\264" +
    "\001\001\000\004\012\265\001\001\000\032\007\053\010" +
    "\065\013\063\016\046\022\055\023\042\032\064\033\045" +
    "\034\051\035\044\036\037\057\050\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\012\272" +
    "\001\001\000\032\007\053\010\065\013\063\016\046\022" +
    "\055\023\042\032\064\033\045\034\051\035\044\036\037" +
    "\057\050\001\001\000\002\001\001\000\022\037\275\040" +
    "\233\041\235\042\232\053\234\054\101\055\075\056\077" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\017" +
    "\300\021\302\001\001\000\002\001\001\000\004\063\327" +
    "\001\001\000\002\001\001\000\004\064\304\001\001\000" +
    "\004\012\305\001\001\000\034\007\053\010\065\013\063" +
    "\016\046\020\306\022\055\023\042\032\064\033\045\034" +
    "\051\035\044\036\037\057\050\001\001\000\002\001\001" +
    "\000\002\001\001\000\022\037\311\040\233\041\235\042" +
    "\232\053\234\054\101\055\075\056\077\001\001\000\004" +
    "\021\313\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\065\315\001\001\000\004\012\316\001\001\000\034" +
    "\007\053\010\065\013\063\016\046\022\055\023\042\032" +
    "\064\033\045\034\051\035\044\036\037\057\050\066\317" +
    "\001\001\000\004\020\320\001\001\000\002\001\001\000" +
    "\004\067\322\001\001\000\004\012\323\001\001\000\032" +
    "\007\053\010\065\013\063\016\046\022\055\023\042\032" +
    "\064\033\045\034\051\035\044\036\037\057\050\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\016\007\053\010\065\022\330\035\044\036\037\057\050" +
    "\001\001\000\002\001\001\000\002\001\001\000\016\052" +
    "\333\053\144\054\101\055\075\056\077\057\143\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\073\340\001\001\000\004\012\341" +
    "\001\001\000\032\007\053\010\065\013\063\016\046\022" +
    "\055\023\042\032\064\033\045\034\051\035\044\036\037" +
    "\057\050\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\020\043\346\052\174\053\144\054\101" +
    "\055\075\056\077\057\143\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\045\361" +
    "\046\021\001\001\000\002\001\001\000\004\050\363\001" +
    "\001\000\002\001\001\000\004\062\365\001\001\000\034" +
    "\007\053\010\065\013\370\016\046\022\055\023\042\032" +
    "\064\033\045\034\051\035\044\036\037\044\366\057\050" +
    "\001\001\000\002\001\001\000\016\052\372\053\144\054" +
    "\101\055\075\056\077\057\143\001\001\000\034\007\053" +
    "\010\065\013\370\016\046\022\055\023\042\032\064\033" +
    "\045\034\051\035\044\036\037\044\371\057\050\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$SintaxisVisual$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$SintaxisVisual$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$SintaxisVisual$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    private Symbol s;
    private VisualSemantica sem = new VisualSemantica();
    private boolean error = false;
    private MetodoVisual actual;

    public void syntax_error(Symbol sym){
        System.out.println("\n" + sym.value + sym.sym);
        System.out.println("Error Sintactico en la letra: " + sym.value + "   <linea>: "  + (sym.right + 1) + "    <columna>: " + (sym.left + 1) + "\n");
    }

    public void unrecovered_syntax_error(Symbol sym) throws java.lang.Exception{
        System.out.println("\n" + sym.value + sym.sym);
        System.out.println("Error Sintactico en la letra: " + sym.value + "   <linea>: "  + (sym.right + 1) + "    <columna>: " + (sym.left + 1) + "\n");
    }

    public Symbol getS(){
        return this.cur_token;
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$SintaxisVisual$actions {
  private final SintaxisVisual parser;

  /** Constructor */
  CUP$SintaxisVisual$actions(SintaxisVisual parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$SintaxisVisual$do_action_part00000000(
    int                        CUP$SintaxisVisual$act_num,
    java_cup.runtime.lr_parser CUP$SintaxisVisual$parser,
    java.util.Stack            CUP$SintaxisVisual$stack,
    int                        CUP$SintaxisVisual$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$SintaxisVisual$result;

      /* select the action based on the action number */
      switch (CUP$SintaxisVisual$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= VISUAL EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-1)).value;
		RESULT = start_val;
              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$SintaxisVisual$parser.done_parsing();
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // VISUAL ::= ESP STATESM 
            {
              Object RESULT =null;

              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("VISUAL",0, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // ESP ::= espacio 
            {
              Object RESULT =null;

              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("ESP",11, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // ESP ::= 
            {
              Object RESULT =null;

              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("ESP",11, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // PUBLIC ::= publicc 
            {
              Object RESULT =null;

              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("PUBLIC",22, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // PUBLIC ::= 
            {
              Object RESULT =null;

              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("PUBLIC",22, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // STATESM ::= STATEM STATESM 
            {
              Object RESULT =null;

              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("STATESM",1, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // STATESM ::= 
            {
              Object RESULT =null;

              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("STATESM",1, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // STATEM ::= SUB 
            {
              Object RESULT =null;

              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("STATEM",2, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // STATEM ::= FUNCTION 
            {
              Object RESULT =null;

              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("STATEM",2, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // NT$0 ::= 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-4)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-4)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-4)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-2)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-2)).right;
		List<VariableVisual> e2 = (List<VariableVisual>)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-2)).value;
VisualSemantica.AMBITO += 1;
                                        MetodoVisual met = new MetodoVisual(e1, e2, VisualSemantica.VOID);
                                        actual = met;
                                        sem.addListVar(e2);
                                        if(!sem.addMetodo(met)){syntax_error(getS());}
              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("NT$0",47, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // SUB ::= PUBLIC subb id para LISTPARAMM parc espacio NT$0 STATEMENTS endd subb espacio 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-4)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-9)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-9)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-9)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-7)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-7)).right;
		List<VariableVisual> e2 = (List<VariableVisual>)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-7)).value;
		sem.eliminarAmbito(VisualSemantica.AMBITO);
                                        VisualSemantica.AMBITO -= 1;
              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("SUB",3, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-11)), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // NT$1 ::= 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-5)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-5)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-5)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-3)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-3)).right;
		List<VariableVisual> e2 = (List<VariableVisual>)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-3)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-1)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-1)).right;
		String e3 = (String)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-1)).value;
VisualSemantica.AMBITO += 1;
                                        MetodoVisual met = new MetodoVisual(e1, e2, e3);
                                        actual = met; met.setVisual(new VariableVisual(e1, VisualSemantica.AMBITO));
                                        e2.add(met.getVisual()); sem.addListVar(e2);
                                        if(!sem.addMetodo(met)){syntax_error(getS());}
              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("NT$1",48, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // FUNCTION ::= PUBLIC functionn id para LISTPARAMM parc TYPE espacio NT$1 STATEMENTSF endd functionn espacio 
            {
              Object RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-4)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-10)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-10)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-10)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-8)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-8)).right;
		List<VariableVisual> e2 = (List<VariableVisual>)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-8)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-6)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-6)).right;
		String e3 = (String)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-6)).value;
		sem.eliminarAmbito(VisualSemantica.AMBITO);
                                        VisualSemantica.AMBITO -= 1;
              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("FUNCTION",4, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-12)), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // DEFVAR ::= dimm LISTVAR espacio 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-1)).right;
		List<VariableVisual> e1 = (List<VariableVisual>)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-1)).value;
		if(VisualSemantica.tienenTipos(e1)&&sem.addListVar(e1)){}
                                        else{syntax_error(getS());}
              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("DEFVAR",5, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // LISTPARAMM ::= LISTPARAM 
            {
              List<VariableVisual> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()).right;
		List<VariableVisual> e1 = (List<VariableVisual>)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.peek()).value;
		RESULT = e1;
              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("LISTPARAMM",35, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // LISTPARAMM ::= 
            {
              List<VariableVisual> RESULT =null;
		RESULT = new ArrayList<>();
              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("LISTPARAMM",35, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // LISTPARAM ::= LISTPARAM coma id TYPE 
            {
              List<VariableVisual> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-3)).right;
		List<VariableVisual> e1 = (List<VariableVisual>)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-1)).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-1)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()).right;
		String e3 = (String)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.peek()).value;
		e1.add(new VariableVisual(e2, (VisualSemantica.AMBITO + 1), e3));
                                        RESULT = e1;
              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("LISTPARAM",36, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // LISTPARAM ::= id TYPE 
            {
              List<VariableVisual> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-1)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.peek()).value;
		List<VariableVisual> var = new ArrayList<>();
                        var.add(new VariableVisual(e1, (VisualSemantica.AMBITO + 1), e2));
                        RESULT = var;
              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("LISTPARAM",36, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // LISTVAR ::= LISTVAR coma id TYPEE DEF 
            {
              List<VariableVisual> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-4)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-4)).right;
		List<VariableVisual> e1 = (List<VariableVisual>)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-4)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-2)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-2)).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-2)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-1)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-1)).right;
		String e3 = (String)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-1)).value;
		int e4left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()).left;
		int e4right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()).right;
		OperacionVisual e4 = (OperacionVisual)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.peek()).value;
		String tipo = VariableVisual.verificarTipo(e3, e4);
                        VariableVisual va = new VariableVisual(e2, VisualSemantica.AMBITO, tipo);
                        va.setDefinido(e4 != null); va.setAstipo(e3 != null && e4 == null);
                        if(tipo == null && e3 != null && e4 != null){
                                syntax_error(getS());
                        } else if(e3 != null && e4 == null){
                                e1.add(va);
                                VisualSemantica.cambiarT(e1, e3);
                        } RESULT = e1;
              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("LISTVAR",37, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-4)), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // LISTVAR ::= id TYPEE DEF 
            {
              List<VariableVisual> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-1)).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-1)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()).right;
		OperacionVisual e3 = (OperacionVisual)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.peek()).value;
		List<VariableVisual> vars = new ArrayList<>(); String tipo = VariableVisual.verificarTipo(e2, e3);
                        VariableVisual va = new VariableVisual(e1, VisualSemantica.AMBITO, tipo);
                        va.setDefinido(e3 != null); va.setAstipo(e2 != null && e3 == null);
                        if(tipo == null && e2 != null && e3 != null){
                                syntax_error(getS());
                        } vars.add(va); RESULT = vars;
              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("LISTVAR",37, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // ASIGVAR ::= id igual EXPR espacio 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-3)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-1)).right;
		OperacionVisual e2 = (OperacionVisual)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-1)).value;
		VariableVisual var = sem.existeVar(new VariableVisual(e1, VisualSemantica.AMBITO));
                                if(var==null || !var.getTipo().contains(e2.getTipo())){syntax_error(getS());}
              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("ASIGVAR",6, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // TYPE ::= ass integerr 
            {
              String RESULT =null;
		RESULT = VisualSemantica.INT;
              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("TYPE",38, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // TYPE ::= ass charr 
            {
              String RESULT =null;
		RESULT = VisualSemantica.CHAR;
              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("TYPE",38, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // TYPE ::= ass decimall 
            {
              String RESULT =null;
		RESULT = VisualSemantica.FLOAT;
              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("TYPE",38, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // TYPEE ::= ass integerr 
            {
              String RESULT =null;
		RESULT = VisualSemantica.INT;
              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("TYPEE",39, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // TYPEE ::= ass charr 
            {
              String RESULT =null;
		RESULT = VisualSemantica.CHAR;
              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("TYPEE",39, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // TYPEE ::= ass decimall 
            {
              String RESULT =null;
		RESULT = VisualSemantica.FLOAT;
              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("TYPEE",39, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // TYPEE ::= 
            {
              String RESULT =null;
		RESULT = null;
              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("TYPEE",39, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // DEF ::= igual EXPR 
            {
              OperacionVisual RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()).right;
		OperacionVisual e1 = (OperacionVisual)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.peek()).value;
		RESULT = e1;
              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("DEF",46, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // DEF ::= 
            {
              OperacionVisual RESULT =null;
		RESULT = null;
              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("DEF",46, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // OPERACION_A ::= OPERACION_A mas OPERACION_M 
            {
              OperacionVisual RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-2)).right;
		OperacionVisual e1 = (OperacionVisual)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()).right;
		OperacionVisual e2 = (OperacionVisual)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.peek()).value;
		if(e1!=null && e2 !=null){RESULT = new OperacionVisual(e1, e2);}
              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("OPERACION_A",41, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // OPERACION_A ::= OPERACION_M menos OPERACION_M 
            {
              OperacionVisual RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-2)).right;
		OperacionVisual e1 = (OperacionVisual)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()).right;
		OperacionVisual e2 = (OperacionVisual)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.peek()).value;
		if(e1!=null && e2 !=null){RESULT = new OperacionVisual(e1, e2);}
              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("OPERACION_A",41, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // OPERACION_A ::= OPERACION_M 
            {
              OperacionVisual RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()).right;
		OperacionVisual e1 = (OperacionVisual)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.peek()).value;
		RESULT = e1;
              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("OPERACION_A",41, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // OPERACION_M ::= OPERACION_M por OPERACION_U 
            {
              OperacionVisual RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-2)).right;
		OperacionVisual e1 = (OperacionVisual)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()).right;
		OperacionVisual e2 = (OperacionVisual)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.peek()).value;
		if(e1!=null && e2 !=null){RESULT = new OperacionVisual(e1, e2);}
              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("OPERACION_M",42, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // OPERACION_M ::= OPERACION_M div OPERACION_U 
            {
              OperacionVisual RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-2)).right;
		OperacionVisual e1 = (OperacionVisual)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()).right;
		OperacionVisual e2 = (OperacionVisual)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.peek()).value;
		if(e1!=null && e2 !=null){RESULT = new OperacionVisual(e1, e2);}
              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("OPERACION_M",42, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // OPERACION_M ::= OPERACION_M floor OPERACION_U 
            {
              OperacionVisual RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-2)).right;
		OperacionVisual e1 = (OperacionVisual)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()).right;
		OperacionVisual e2 = (OperacionVisual)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.peek()).value;
		if(e1!=null && e2 !=null){RESULT = new OperacionVisual(e1, e2);}
              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("OPERACION_M",42, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // OPERACION_M ::= OPERACION_M mod OPERACION_U 
            {
              OperacionVisual RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-2)).right;
		OperacionVisual e1 = (OperacionVisual)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()).right;
		OperacionVisual e2 = (OperacionVisual)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.peek()).value;
		if(e1!=null && e2 !=null){RESULT = new OperacionVisual(e1, e2);}
              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("OPERACION_M",42, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // OPERACION_M ::= OPERACION_U 
            {
              OperacionVisual RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()).right;
		OperacionVisual e1 = (OperacionVisual)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.peek()).value;
		RESULT = e1;
              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("OPERACION_M",42, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // OPERACION_U ::= menos OPERACION_U 
            {
              OperacionVisual RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()).right;
		OperacionVisual e1 = (OperacionVisual)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.peek()).value;
		RESULT = e1;
              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("OPERACION_U",43, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // OPERACION_U ::= mas OPERACION_U 
            {
              OperacionVisual RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()).right;
		OperacionVisual e1 = (OperacionVisual)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.peek()).value;
		RESULT = e1;
              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("OPERACION_U",43, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // OPERACION_U ::= ATOM 
            {
              OperacionVisual RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()).right;
		OperacionVisual e1 = (OperacionVisual)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.peek()).value;
		RESULT = e1;
              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("OPERACION_U",43, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // ATOM ::= id 
            {
              OperacionVisual RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.peek()).value;
		VariableVisual var = sem.existeVar(new VariableVisual(e1, VisualSemantica.AMBITO)); 
                if(var==null){syntax_error(getS());} else {
                RESULT = new OperacionVisual(var.getTipo());
                }
              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("ATOM",44, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // ATOM ::= entero 
            {
              OperacionVisual RESULT =null;
		RESULT = new OperacionVisual(VisualSemantica.INT);
              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("ATOM",44, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // ATOM ::= decimal 
            {
              OperacionVisual RESULT =null;
		RESULT = new OperacionVisual(VisualSemantica.FLOAT);
              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("ATOM",44, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // ATOM ::= para OPERACION_A parc 
            {
              OperacionVisual RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-1)).right;
		OperacionVisual e1 = (OperacionVisual)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-1)).value;
		RESULT = e1;
              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("ATOM",44, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // STATEMENTS ::= STATEMENTS STATEMENT 
            {
              Object RESULT =null;

              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("STATEMENTS",8, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // STATEMENTS ::= 
            {
              Object RESULT =null;

              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("STATEMENTS",8, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // STATEMENTSF ::= STATEMENT STATEMENTSF 
            {
              Object RESULT =null;

              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("STATEMENTSF",34, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // STATEMENTSF ::= returnn EXPR 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()).right;
		OperacionVisual e1 = (OperacionVisual)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.peek()).value;
		if(e1 == null || !actual.getTIPO().contains(e1.getTipo())){syntax_error(getS());}
              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("STATEMENTSF",34, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // STATEMENTSF ::= 
            {
              Object RESULT =null;

              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("STATEMENTSF",34, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // EXPR ::= OPERACION_A 
            {
              OperacionVisual RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()).right;
		OperacionVisual e1 = (OperacionVisual)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.peek()).value;
		RESULT = e1;
              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("EXPR",40, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // EXPR ::= D 
            {
              OperacionVisual RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()).right;
		OperacionVisual e1 = (OperacionVisual)((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.peek()).value;
		RESULT = e1;
              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("EXPR",40, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // EXPR ::= character 
            {
              OperacionVisual RESULT =null;
		RESULT = new OperacionVisual(VisualSemantica.CHAR);
              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("EXPR",40, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // STATEMENT ::= IF_ELSE 
            {
              Object RESULT =null;

              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("STATEMENT",9, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // STATEMENT ::= SELECT 
            {
              Object RESULT =null;

              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("STATEMENT",9, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // STATEMENT ::= FOR 
            {
              Object RESULT =null;

              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("STATEMENT",9, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // STATEMENT ::= WHILE 
            {
              Object RESULT =null;

              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("STATEMENT",9, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // STATEMENT ::= DO_WHILE 
            {
              Object RESULT =null;

              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("STATEMENT",9, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // STATEMENT ::= STATEMENTLINE 
            {
              Object RESULT =null;

              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("STATEMENT",9, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // IF_ELSE ::= iff CONDICION BLOQUEIF 
            {
              Object RESULT =null;

              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("IF_ELSE",12, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // NT$2 ::= 
            {
              Object RESULT =null;
VisualSemantica.AMBITO += 1;
              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("NT$2",49, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // BLOQUEIF ::= thenn NT$2 STATEMENTLINE espacio 
            {
              Object RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-2)).value;
		sem.eliminarAmbito(VisualSemantica.AMBITO); VisualSemantica.AMBITO -= 1;
              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("BLOQUEIF",13, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // NT$3 ::= 
            {
              Object RESULT =null;
VisualSemantica.AMBITO += 1;
              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("NT$3",50, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // BLOQUEIF ::= THEN espacio NT$3 STATEMENTS ELSE_IF endd iff espacio 
            {
              Object RESULT =null;
              // propagate RESULT from NT$3
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-5)).value;
		sem.eliminarAmbito(VisualSemantica.AMBITO); VisualSemantica.AMBITO -= 1;
              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("BLOQUEIF",13, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-7)), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // NT$4 ::= 
            {
              Object RESULT =null;
VisualSemantica.AMBITO += 1;
              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("NT$4",51, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // NT$5 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-1)).value;
sem.eliminarAmbito(VisualSemantica.AMBITO); VisualSemantica.AMBITO -= 1;
              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("NT$5",52, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // ELSE_IF ::= elseiff CONDICION THEN espacio NT$4 STATEMENTS NT$5 ELSE_IF 
            {
              Object RESULT =null;
              // propagate RESULT from NT$5
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-1)).value;

              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("ELSE_IF",14, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-7)), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // NT$6 ::= 
            {
              Object RESULT =null;
VisualSemantica.AMBITO += 1;
              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("NT$6",53, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // ELSE_IF ::= elsee espacio NT$6 STATEMENTS 
            {
              Object RESULT =null;
              // propagate RESULT from NT$6
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-1)).value;
		sem.eliminarAmbito(VisualSemantica.AMBITO); VisualSemantica.AMBITO -= 1;
              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("ELSE_IF",14, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // ELSE_IF ::= 
            {
              Object RESULT =null;

              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("ELSE_IF",14, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // THEN ::= thenn 
            {
              Object RESULT =null;

              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("THEN",15, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // THEN ::= 
            {
              Object RESULT =null;

              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("THEN",15, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // STATEMENTLINE ::= CONSOLEWRITE 
            {
              Object RESULT =null;

              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("STATEMENTLINE",16, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // STATEMENTLINE ::= INPUT 
            {
              Object RESULT =null;

              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("STATEMENTLINE",16, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // STATEMENTLINE ::= DEFVAR 
            {
              Object RESULT =null;

              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("STATEMENTLINE",16, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // STATEMENTLINE ::= ASIGVAR 
            {
              Object RESULT =null;

              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("STATEMENTLINE",16, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // SELECT ::= selectt CA EXPR espacio CASES CASEELSE endd selectt espacio 
            {
              Object RESULT =null;

              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("SELECT",17, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-8)), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // CA ::= casee 
            {
              Object RESULT =null;

              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("CA",21, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // CA ::= 
            {
              Object RESULT =null;

              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("CA",21, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // NT$7 ::= 
            {
              Object RESULT =null;
VisualSemantica.AMBITO += 1;
              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("NT$7",54, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // CASEELSE ::= casee elsee espacio NT$7 STATEMENTS 
            {
              Object RESULT =null;
              // propagate RESULT from NT$7
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-1)).value;
		sem.eliminarAmbito(VisualSemantica.AMBITO); VisualSemantica.AMBITO -= 1;
              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("CASEELSE",10, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-4)), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // CASEELSE ::= 
            {
              Object RESULT =null;

              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("CASEELSE",10, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // CASES ::= CASES CASE 
            {
              Object RESULT =null;

              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("CASES",19, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // CASES ::= 
            {
              Object RESULT =null;

              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("CASES",19, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // NT$8 ::= 
            {
              Object RESULT =null;
VisualSemantica.AMBITO += 1;
              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("NT$8",55, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // CASE ::= casee LIST_CASE espacio NT$8 STATEMENTS 
            {
              Object RESULT =null;
              // propagate RESULT from NT$8
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-1)).value;
		sem.eliminarAmbito(VisualSemantica.AMBITO); VisualSemantica.AMBITO -= 1;
              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("CASE",18, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-4)), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // LIST_CASE ::= LIST_CASE coma OPERACION_A 
            {
              Object RESULT =null;

              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("LIST_CASE",23, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // LIST_CASE ::= OPERACION_A 
            {
              Object RESULT =null;

              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("LIST_CASE",23, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // NT$9 ::= 
            {
              Object RESULT =null;
VisualSemantica.AMBITO += 1;
              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("NT$9",56, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // FOR ::= forr id TYPE igual OPERACION_A to OPERACION_A STEP espacio NT$9 STATEMENTS nextt ID espacio 
            {
              Object RESULT =null;
              // propagate RESULT from NT$9
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-4)).value;
		sem.eliminarAmbito(VisualSemantica.AMBITO); VisualSemantica.AMBITO -= 1;
              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("FOR",24, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-13)), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // ID ::= id 
            {
              Object RESULT =null;

              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("ID",7, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // ID ::= 
            {
              Object RESULT =null;

              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("ID",7, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // STEP ::= stepp OPERACION_A 
            {
              Object RESULT =null;

              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("STEP",20, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // STEP ::= 
            {
              Object RESULT =null;

              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("STEP",20, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // NT$10 ::= 
            {
              Object RESULT =null;
VisualSemantica.AMBITO += 1;
              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("NT$10",57, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // WHILE ::= whilee CONDICION espacio NT$10 STATEMENTS endd whilee espacio 
            {
              Object RESULT =null;
              // propagate RESULT from NT$10
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-4)).value;

              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("WHILE",25, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-7)), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // NT$11 ::= 
            {
              Object RESULT =null;
VisualSemantica.AMBITO += 1;
              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("NT$11",58, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // DO_WHILE ::= doo whilee CONDICION espacio NT$11 STATEMENTS loopp espacio 
            {
              Object RESULT =null;
              // propagate RESULT from NT$11
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-3)).value;
		sem.eliminarAmbito(VisualSemantica.AMBITO); VisualSemantica.AMBITO -= 1;
              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("DO_WHILE",26, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-7)), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // NT$12 ::= 
            {
              Object RESULT =null;
VisualSemantica.AMBITO += 1;
              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("NT$12",59, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // DO_WHILE ::= doo espacio NT$12 STATEMENTS loopp whilee CONDICION espacio 
            {
              Object RESULT =null;
              // propagate RESULT from NT$12
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-5)).value;
		sem.eliminarAmbito(VisualSemantica.AMBITO); VisualSemantica.AMBITO -= 1;
              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("DO_WHILE",26, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-7)), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // CONSOLEWRITE ::= write para STRING parc espacio 
            {
              Object RESULT =null;

              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("CONSOLEWRITE",27, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-4)), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // CONSOLEWRITE ::= writeln para STRING parc espacio 
            {
              Object RESULT =null;

              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("CONSOLEWRITE",27, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-4)), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // INPUT ::= D espacio 
            {
              Object RESULT =null;

              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("INPUT",28, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // D ::= charinput para string parc 
            {
              OperacionVisual RESULT =null;
		RESULT = new OperacionVisual(VisualSemantica.CHAR);
              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("D",45, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // D ::= floatinput para string parc 
            {
              OperacionVisual RESULT =null;
		RESULT = new OperacionVisual(VisualSemantica.FLOAT);
              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("D",45, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // D ::= intinput para string parc 
            {
              OperacionVisual RESULT =null;
		RESULT = new OperacionVisual(VisualSemantica.INT);
              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("D",45, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // CONDICION ::= CONDICION orr AND 
            {
              Object RESULT =null;

              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("CONDICION",29, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // CONDICION ::= AND 
            {
              Object RESULT =null;

              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("CONDICION",29, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // AND ::= AND andd NOT 
            {
              Object RESULT =null;

              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("AND",30, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // AND ::= NOT 
            {
              Object RESULT =null;

              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("AND",30, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // NOT ::= nott NOT 
            {
              Object RESULT =null;

              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("NOT",31, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // NOT ::= COMPARACION 
            {
              Object RESULT =null;

              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("NOT",31, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // COMPARACION ::= OPERACION_A igual OPERACION_A 
            {
              Object RESULT =null;

              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("COMPARACION",32, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // COMPARACION ::= OPERACION_A noigual OPERACION_A 
            {
              Object RESULT =null;

              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("COMPARACION",32, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // COMPARACION ::= OPERACION_A menor OPERACION_A 
            {
              Object RESULT =null;

              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("COMPARACION",32, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // COMPARACION ::= OPERACION_A menorig OPERACION_A 
            {
              Object RESULT =null;

              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("COMPARACION",32, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // COMPARACION ::= OPERACION_A mayor OPERACION_A 
            {
              Object RESULT =null;

              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("COMPARACION",32, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // COMPARACION ::= OPERACION_A mayorig OPERACION_A 
            {
              Object RESULT =null;

              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("COMPARACION",32, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // COMPARACION ::= para CONDICION parc 
            {
              Object RESULT =null;

              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("COMPARACION",32, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // STRING ::= STRING y EXPR 
            {
              Object RESULT =null;

              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("STRING",33, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // STRING ::= STRING y string 
            {
              Object RESULT =null;

              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("STRING",33, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.elementAt(CUP$SintaxisVisual$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // STRING ::= EXPR 
            {
              Object RESULT =null;

              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("STRING",33, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // STRING ::= string 
            {
              Object RESULT =null;

              CUP$SintaxisVisual$result = parser.getSymbolFactory().newSymbol("STRING",33, ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisVisual$stack.peek()), RESULT);
            }
          return CUP$SintaxisVisual$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$SintaxisVisual$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$SintaxisVisual$do_action(
    int                        CUP$SintaxisVisual$act_num,
    java_cup.runtime.lr_parser CUP$SintaxisVisual$parser,
    java.util.Stack            CUP$SintaxisVisual$stack,
    int                        CUP$SintaxisVisual$top)
    throws java.lang.Exception
    {
              return CUP$SintaxisVisual$do_action_part00000000(
                               CUP$SintaxisVisual$act_num,
                               CUP$SintaxisVisual$parser,
                               CUP$SintaxisVisual$stack,
                               CUP$SintaxisVisual$top);
    }
}

}
